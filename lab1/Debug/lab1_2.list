
lab1_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008af4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08008c84  08008c84  00009c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d74  08008d74  0000a010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008d74  08008d74  00009d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d7c  08008d7c  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d7c  08008d7c  00009d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d80  08008d80  00009d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08008d84  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020dc  20000010  08008d94  0000a010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020ec  08008d94  0000a0ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026150  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000494a  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002310  00000000  00000000  00034ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b66  00000000  00000000  00036df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a0a  00000000  00000000  00038956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026dac  00000000  00000000  0003d360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108389  00000000  00000000  0006410c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c495  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009820  00000000  00000000  0016c4d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00175cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c6c 	.word	0x08008c6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08008c6c 	.word	0x08008c6c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <MX_FREERTOS_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MX_FREERTOS_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* 建立二元信號量，初始計數設為 0 (等待中斷通知) */
  buttonSemaphoreHandle = osSemaphoreNew(1, 0, NULL);
 8000500:	2200      	movs	r2, #0
 8000502:	2100      	movs	r1, #0
 8000504:	2001      	movs	r0, #1
 8000506:	f005 f8d4 	bl	80056b2 <osSemaphoreNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a0d      	ldr	r2, [pc, #52]	@ (8000544 <MX_FREERTOS_Init+0x48>)
 800050e:	6013      	str	r3, [r2, #0]
  timerSemaphoreHandle  = osSemaphoreNew(1, 0, NULL);
 8000510:	2200      	movs	r2, #0
 8000512:	2100      	movs	r1, #0
 8000514:	2001      	movs	r0, #1
 8000516:	f005 f8cc 	bl	80056b2 <osSemaphoreNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a0a      	ldr	r2, [pc, #40]	@ (8000548 <MX_FREERTOS_Init+0x4c>)
 800051e:	6013      	str	r3, [r2, #0]

  /* 建立互斥鎖，保護 LED2 的使用 */
  ledMutexHandle = osMutexNew(NULL);
 8000520:	2000      	movs	r0, #0
 8000522:	f004 ffb8 	bl	8005496 <osMutexNew>
 8000526:	4603      	mov	r3, r0
 8000528:	4a08      	ldr	r2, [pc, #32]	@ (800054c <MX_FREERTOS_Init+0x50>)
 800052a:	6013      	str	r3, [r2, #0]

  /* 建立 Task_1 (處理按鈕中斷觸發) */
  osThreadNew(StartTask01, NULL, NULL);
 800052c:	2200      	movs	r2, #0
 800052e:	2100      	movs	r1, #0
 8000530:	4807      	ldr	r0, [pc, #28]	@ (8000550 <MX_FREERTOS_Init+0x54>)
 8000532:	f004 ff03 	bl	800533c <osThreadNew>

  /* 建立 Task_2 (處理定時器中斷觸發) */
  osThreadNew(StartTask02, NULL, NULL);
 8000536:	2200      	movs	r2, #0
 8000538:	2100      	movs	r1, #0
 800053a:	4806      	ldr	r0, [pc, #24]	@ (8000554 <MX_FREERTOS_Init+0x58>)
 800053c:	f004 fefe 	bl	800533c <osThreadNew>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	2000002c 	.word	0x2000002c
 8000548:	20000030 	.word	0x20000030
 800054c:	20000034 	.word	0x20000034
 8000550:	08000da9 	.word	0x08000da9
 8000554:	08000e15 	.word	0x08000e15

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055c:	f001 f827 	bl	80015ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000560:	f000 f84a 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000564:	f000 fa52 	bl	8000a0c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000568:	f000 f8a8 	bl	80006bc <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800056c:	f000 f8de 	bl	800072c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000570:	f000 f91c 	bl	80007ac <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000574:	f000 f940 	bl	80007f8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000578:	f000 f9ba 	bl	80008f0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800057c:	f000 f9e8 	bl	8000950 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000580:	f000 fa16 	bl	80009b0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000584:	f000 f976 	bl	8000874 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000588:	4811      	ldr	r0, [pc, #68]	@ (80005d0 <main+0x78>)
 800058a:	f003 fc27 	bl	8003ddc <HAL_TIM_Base_Start_IT>
  MX_FREERTOS_Init();
 800058e:	f7ff ffb5 	bl	80004fc <MX_FREERTOS_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000592:	f004 fe89 	bl	80052a8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000596:	4a0f      	ldr	r2, [pc, #60]	@ (80005d4 <main+0x7c>)
 8000598:	2100      	movs	r1, #0
 800059a:	480f      	ldr	r0, [pc, #60]	@ (80005d8 <main+0x80>)
 800059c:	f004 fece 	bl	800533c <osThreadNew>
 80005a0:	4603      	mov	r3, r0
 80005a2:	4a0e      	ldr	r2, [pc, #56]	@ (80005dc <main+0x84>)
 80005a4:	6013      	str	r3, [r2, #0]

  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 80005a6:	4a0e      	ldr	r2, [pc, #56]	@ (80005e0 <main+0x88>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	480e      	ldr	r0, [pc, #56]	@ (80005e4 <main+0x8c>)
 80005ac:	f004 fec6 	bl	800533c <osThreadNew>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a0d      	ldr	r2, [pc, #52]	@ (80005e8 <main+0x90>)
 80005b4:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80005b6:	4a0d      	ldr	r2, [pc, #52]	@ (80005ec <main+0x94>)
 80005b8:	2100      	movs	r1, #0
 80005ba:	480d      	ldr	r0, [pc, #52]	@ (80005f0 <main+0x98>)
 80005bc:	f004 febe 	bl	800533c <osThreadNew>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a0c      	ldr	r2, [pc, #48]	@ (80005f4 <main+0x9c>)
 80005c4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005c6:	f004 fe93 	bl	80052f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ca:	bf00      	nop
 80005cc:	e7fd      	b.n	80005ca <main+0x72>
 80005ce:	bf00      	nop
 80005d0:	2000016c 	.word	0x2000016c
 80005d4:	08008cc0 	.word	0x08008cc0
 80005d8:	08000d99 	.word	0x08000d99
 80005dc:	200007ac 	.word	0x200007ac
 80005e0:	08008ce4 	.word	0x08008ce4
 80005e4:	08000da9 	.word	0x08000da9
 80005e8:	200007b0 	.word	0x200007b0
 80005ec:	08008d08 	.word	0x08008d08
 80005f0:	08000e15 	.word	0x08000e15
 80005f4:	200007b4 	.word	0x200007b4

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b096      	sub	sp, #88	@ 0x58
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	2244      	movs	r2, #68	@ 0x44
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f008 faf6 	bl	8008bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	463b      	mov	r3, r7
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800061e:	f001 fef5 	bl	800240c <HAL_PWREx_ControlVoltageScaling>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000628:	f000 fc2a 	bl	8000e80 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800062c:	f001 fed0 	bl	80023d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000630:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <SystemClock_Config+0xc0>)
 8000632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000636:	4a20      	ldr	r2, [pc, #128]	@ (80006b8 <SystemClock_Config+0xc0>)
 8000638:	f023 0318 	bic.w	r3, r3, #24
 800063c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000640:	2314      	movs	r3, #20
 8000642:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000650:	2360      	movs	r3, #96	@ 0x60
 8000652:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000658:	2301      	movs	r3, #1
 800065a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800065c:	2301      	movs	r3, #1
 800065e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000660:	2328      	movs	r3, #40	@ 0x28
 8000662:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000664:	2307      	movs	r3, #7
 8000666:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4618      	mov	r0, r3
 8000676:	f001 ffeb 	bl	8002650 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000680:	f000 fbfe 	bl	8000e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2303      	movs	r3, #3
 800068a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	2104      	movs	r1, #4
 800069c:	4618      	mov	r0, r3
 800069e:	f002 fbb3 	bl	8002e08 <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006a8:	f000 fbea 	bl	8000e80 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006ac:	f003 f8ba 	bl	8003824 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006b0:	bf00      	nop
 80006b2:	3758      	adds	r7, #88	@ 0x58
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000

080006bc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80006c0:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006c2:	4a19      	ldr	r2, [pc, #100]	@ (8000728 <MX_DFSDM1_Init+0x6c>)
 80006c4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80006c6:	4b17      	ldr	r3, [pc, #92]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006cc:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80006d2:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006d4:	2202      	movs	r2, #2
 80006d6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006de:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ea:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006f4:	2204      	movs	r2, #4
 80006f6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80006fe:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 8000700:	2201      	movs	r2, #1
 8000702:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000704:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 8000706:	2200      	movs	r2, #0
 8000708:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800070a:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 800070c:	2200      	movs	r2, #0
 800070e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 8000712:	f001 f8f7 	bl	8001904 <HAL_DFSDM_ChannelInit>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800071c:	f000 fbb0 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000038 	.word	0x20000038
 8000728:	40016020 	.word	0x40016020

0800072c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	@ (80007a4 <MX_I2C2_Init+0x78>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000738:	4a1b      	ldr	r2, [pc, #108]	@ (80007a8 <MX_I2C2_Init+0x7c>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800073c:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <MX_I2C2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000744:	2201      	movs	r2, #1
 8000746:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_I2C2_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_I2C2_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000766:	480e      	ldr	r0, [pc, #56]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000768:	f001 fbcc 	bl	8001f04 <HAL_I2C_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000772:	f000 fb85 	bl	8000e80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4809      	ldr	r0, [pc, #36]	@ (80007a0 <MX_I2C2_Init+0x74>)
 800077a:	f001 fc5e 	bl	800203a <HAL_I2CEx_ConfigAnalogFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000784:	f000 fb7c 	bl	8000e80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000788:	2100      	movs	r1, #0
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_I2C2_Init+0x74>)
 800078c:	f001 fca0 	bl	80020d0 <HAL_I2CEx_ConfigDigitalFilter>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000796:	f000 fb73 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000070 	.word	0x20000070
 80007a4:	40005800 	.word	0x40005800
 80007a8:	10d19ce4 	.word	0x10d19ce4

080007ac <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007b2:	4a10      	ldr	r2, [pc, #64]	@ (80007f4 <MX_QUADSPI_Init+0x48>)
 80007b4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007b8:	2202      	movs	r2, #2
 80007ba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007be:	2204      	movs	r2, #4
 80007c0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007c4:	2210      	movs	r2, #16
 80007c6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80007c8:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007ca:	2217      	movs	r2, #23
 80007cc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007dc:	f001 fe7c 	bl	80024d8 <HAL_QSPI_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007e6:	f000 fb4b 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000c4 	.word	0x200000c4
 80007f4:	a0001000 	.word	0xa0001000

080007f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <MX_SPI3_Init+0x74>)
 80007fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000870 <MX_SPI3_Init+0x78>)
 8000800:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_SPI3_Init+0x74>)
 8000804:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000808:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800080a:	4b18      	ldr	r3, [pc, #96]	@ (800086c <MX_SPI3_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000810:	4b16      	ldr	r3, [pc, #88]	@ (800086c <MX_SPI3_Init+0x74>)
 8000812:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000816:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000818:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_SPI3_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800081e:	4b13      	ldr	r3, [pc, #76]	@ (800086c <MX_SPI3_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000824:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_SPI3_Init+0x74>)
 8000826:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800082a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_SPI3_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_SPI3_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_SPI3_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <MX_SPI3_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000844:	4b09      	ldr	r3, [pc, #36]	@ (800086c <MX_SPI3_Init+0x74>)
 8000846:	2207      	movs	r2, #7
 8000848:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <MX_SPI3_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_SPI3_Init+0x74>)
 8000852:	2208      	movs	r2, #8
 8000854:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_SPI3_Init+0x74>)
 8000858:	f003 f9c6 	bl	8003be8 <HAL_SPI_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000862:	f000 fb0d 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000108 	.word	0x20000108
 8000870:	40003c00 	.word	0x40003c00

08000874 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

	 /* 啟用 TIM2 時鐘 */
	  __HAL_RCC_TIM2_CLK_ENABLE();
 800087a:	4b1b      	ldr	r3, [pc, #108]	@ (80008e8 <MX_TIM2_Init+0x74>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800087e:	4a1a      	ldr	r2, [pc, #104]	@ (80008e8 <MX_TIM2_Init+0x74>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6593      	str	r3, [r2, #88]	@ 0x58
 8000886:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <MX_TIM2_Init+0x74>)
 8000888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

	  htim2.Instance = TIM2;
 8000892:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <MX_TIM2_Init+0x78>)
 8000894:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000898:	601a      	str	r2, [r3, #0]
	  /* 根據系統時鐘設定預分頻與重載值，此範例假設計數頻率為 1kHz */
	  htim2.Init.Prescaler = 7999;    // 系統時鐘若為 8MHz，預分頻後 1kHz
 800089a:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <MX_TIM2_Init+0x78>)
 800089c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80008a0:	605a      	str	r2, [r3, #4]
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a2:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <MX_TIM2_Init+0x78>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
	  htim2.Init.Period = 9999;       // 1kHz * 10秒 = 10000 計數 (0~9999)
 80008a8:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <MX_TIM2_Init+0x78>)
 80008aa:	f242 720f 	movw	r2, #9999	@ 0x270f
 80008ae:	60da      	str	r2, [r3, #12]
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <MX_TIM2_Init+0x78>)
 80008b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008b6:	611a      	str	r2, [r3, #16]
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_TIM2_Init+0x78>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
	  if(HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008be:	480b      	ldr	r0, [pc, #44]	@ (80008ec <MX_TIM2_Init+0x78>)
 80008c0:	f003 fa35 	bl	8003d2e <HAL_TIM_Base_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM2_Init+0x5a>
	  {
	    /* 初始化失敗 */
	    while(1);
 80008ca:	bf00      	nop
 80008cc:	e7fd      	b.n	80008ca <MX_TIM2_Init+0x56>
	  }

	  /* 設定 TIM2 中斷優先權並啟用 */
	  HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	201c      	movs	r0, #28
 80008d4:	f000 ffdf 	bl	8001896 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008d8:	201c      	movs	r0, #28
 80008da:	f000 fff8 	bl	80018ce <HAL_NVIC_EnableIRQ>
  }
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000
 80008ec:	2000016c 	.word	0x2000016c

080008f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008f4:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <MX_USART1_UART_Init+0x58>)
 80008f6:	4a15      	ldr	r2, [pc, #84]	@ (800094c <MX_USART1_UART_Init+0x5c>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008fa:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <MX_USART1_UART_Init+0x58>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_USART1_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <MX_USART1_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <MX_USART1_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <MX_USART1_UART_Init+0x58>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <MX_USART1_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <MX_USART1_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <MX_USART1_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <MX_USART1_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_USART1_UART_Init+0x58>)
 8000934:	f003 fcb6 	bl	80042a4 <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800093e:	f000 fa9f 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200001b8 	.word	0x200001b8
 800094c:	40013800 	.word	0x40013800

08000950 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000954:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <MX_USART3_UART_Init+0x58>)
 8000956:	4a15      	ldr	r2, [pc, #84]	@ (80009ac <MX_USART3_UART_Init+0x5c>)
 8000958:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800095a:	4b13      	ldr	r3, [pc, #76]	@ (80009a8 <MX_USART3_UART_Init+0x58>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_USART3_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_USART3_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <MX_USART3_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <MX_USART3_UART_Init+0x58>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <MX_USART3_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <MX_USART3_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <MX_USART3_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <MX_USART3_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <MX_USART3_UART_Init+0x58>)
 8000994:	f003 fc86 	bl	80042a4 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800099e:	f000 fa6f 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000240 	.word	0x20000240
 80009ac:	40004800 	.word	0x40004800

080009b0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009b4:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009bc:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	2206      	movs	r2, #6
 80009c0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009c2:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c4:	2202      	movs	r2, #2
 80009c6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ca:	2202      	movs	r2, #2
 80009cc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80009e0:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f4:	f001 fbb8 	bl	8002168 <HAL_PCD_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009fe:	f000 fa3f 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200002c8 	.word	0x200002c8

08000a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	@ 0x28
 8000a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a22:	4bbd      	ldr	r3, [pc, #756]	@ (8000d18 <MX_GPIO_Init+0x30c>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	4abc      	ldr	r2, [pc, #752]	@ (8000d18 <MX_GPIO_Init+0x30c>)
 8000a28:	f043 0310 	orr.w	r3, r3, #16
 8000a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2e:	4bba      	ldr	r3, [pc, #744]	@ (8000d18 <MX_GPIO_Init+0x30c>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	f003 0310 	and.w	r3, r3, #16
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	4bb7      	ldr	r3, [pc, #732]	@ (8000d18 <MX_GPIO_Init+0x30c>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	4ab6      	ldr	r2, [pc, #728]	@ (8000d18 <MX_GPIO_Init+0x30c>)
 8000a40:	f043 0304 	orr.w	r3, r3, #4
 8000a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a46:	4bb4      	ldr	r3, [pc, #720]	@ (8000d18 <MX_GPIO_Init+0x30c>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	f003 0304 	and.w	r3, r3, #4
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4bb1      	ldr	r3, [pc, #708]	@ (8000d18 <MX_GPIO_Init+0x30c>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4ab0      	ldr	r2, [pc, #704]	@ (8000d18 <MX_GPIO_Init+0x30c>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5e:	4bae      	ldr	r3, [pc, #696]	@ (8000d18 <MX_GPIO_Init+0x30c>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	4bab      	ldr	r3, [pc, #684]	@ (8000d18 <MX_GPIO_Init+0x30c>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6e:	4aaa      	ldr	r2, [pc, #680]	@ (8000d18 <MX_GPIO_Init+0x30c>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a76:	4ba8      	ldr	r3, [pc, #672]	@ (8000d18 <MX_GPIO_Init+0x30c>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a82:	4ba5      	ldr	r3, [pc, #660]	@ (8000d18 <MX_GPIO_Init+0x30c>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a86:	4aa4      	ldr	r2, [pc, #656]	@ (8000d18 <MX_GPIO_Init+0x30c>)
 8000a88:	f043 0308 	orr.w	r3, r3, #8
 8000a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a8e:	4ba2      	ldr	r3, [pc, #648]	@ (8000d18 <MX_GPIO_Init+0x30c>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a92:	f003 0308 	and.w	r3, r3, #8
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000aa0:	489e      	ldr	r0, [pc, #632]	@ (8000d1c <MX_GPIO_Init+0x310>)
 8000aa2:	f001 f9e5 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab0:	f001 f9de 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000aba:	4899      	ldr	r0, [pc, #612]	@ (8000d20 <MX_GPIO_Init+0x314>)
 8000abc:	f001 f9d8 	bl	8001e70 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000ac6:	4897      	ldr	r0, [pc, #604]	@ (8000d24 <MX_GPIO_Init+0x318>)
 8000ac8:	f001 f9d2 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000acc:	2201      	movs	r2, #1
 8000ace:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ad2:	4894      	ldr	r0, [pc, #592]	@ (8000d24 <MX_GPIO_Init+0x318>)
 8000ad4:	f001 f9cc 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000ade:	4892      	ldr	r0, [pc, #584]	@ (8000d28 <MX_GPIO_Init+0x31c>)
 8000ae0:	f001 f9c6 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2120      	movs	r1, #32
 8000ae8:	488d      	ldr	r0, [pc, #564]	@ (8000d20 <MX_GPIO_Init+0x314>)
 8000aea:	f001 f9c1 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2101      	movs	r1, #1
 8000af2:	488a      	ldr	r0, [pc, #552]	@ (8000d1c <MX_GPIO_Init+0x310>)
 8000af4:	f001 f9bc 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000af8:	f240 1315 	movw	r3, #277	@ 0x115
 8000afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4882      	ldr	r0, [pc, #520]	@ (8000d1c <MX_GPIO_Init+0x310>)
 8000b12:	f001 f803 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000b16:	236a      	movs	r3, #106	@ 0x6a
 8000b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b1a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	487c      	ldr	r0, [pc, #496]	@ (8000d1c <MX_GPIO_Init+0x310>)
 8000b2c:	f000 fff6 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b36:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	4878      	ldr	r0, [pc, #480]	@ (8000d28 <MX_GPIO_Init+0x31c>)
 8000b48:	f000 ffe8 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000b4c:	233f      	movs	r3, #63	@ 0x3f
 8000b4e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b50:	230b      	movs	r3, #11
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4872      	ldr	r0, [pc, #456]	@ (8000d28 <MX_GPIO_Init+0x31c>)
 8000b60:	f000 ffdc 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000b64:	2303      	movs	r3, #3
 8000b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b74:	2308      	movs	r3, #8
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b82:	f000 ffcb 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000b86:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba2:	f000 ffbb 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000ba6:	2310      	movs	r3, #16
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000baa:	230b      	movs	r3, #11
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bbc:	f000 ffae 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000bc0:	23e0      	movs	r3, #224	@ 0xe0
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bd0:	2305      	movs	r3, #5
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bde:	f000 ff9d 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000be2:	2301      	movs	r3, #1
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	484a      	ldr	r0, [pc, #296]	@ (8000d20 <MX_GPIO_Init+0x314>)
 8000bf8:	f000 ff90 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c00:	230b      	movs	r3, #11
 8000c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4844      	ldr	r0, [pc, #272]	@ (8000d20 <MX_GPIO_Init+0x314>)
 8000c10:	f000 ff84 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c14:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000c18:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	483c      	ldr	r0, [pc, #240]	@ (8000d20 <MX_GPIO_Init+0x314>)
 8000c2e:	f000 ff75 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000c32:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000c36:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c38:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	4836      	ldr	r0, [pc, #216]	@ (8000d24 <MX_GPIO_Init+0x318>)
 8000c4a:	f000 ff67 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000c4e:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	482f      	ldr	r0, [pc, #188]	@ (8000d24 <MX_GPIO_Init+0x318>)
 8000c68:	f000 ff58 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c6c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	4828      	ldr	r0, [pc, #160]	@ (8000d28 <MX_GPIO_Init+0x31c>)
 8000c86:	f000 ff49 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c8a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c90:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4821      	ldr	r0, [pc, #132]	@ (8000d28 <MX_GPIO_Init+0x31c>)
 8000ca2:	f000 ff3b 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cb6:	2305      	movs	r3, #5
 8000cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4818      	ldr	r0, [pc, #96]	@ (8000d24 <MX_GPIO_Init+0x318>)
 8000cc2:	f000 ff2b 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000cc6:	2378      	movs	r3, #120	@ 0x78
 8000cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd6:	2307      	movs	r3, #7
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4810      	ldr	r0, [pc, #64]	@ (8000d24 <MX_GPIO_Init+0x318>)
 8000ce2:	f000 ff1b 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000ce6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cec:	2312      	movs	r3, #18
 8000cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	4807      	ldr	r0, [pc, #28]	@ (8000d20 <MX_GPIO_Init+0x314>)
 8000d04:	f000 ff0a 	bl	8001b1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2105      	movs	r1, #5
 8000d0c:	2017      	movs	r0, #23
 8000d0e:	f000 fdc2 	bl	8001896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d12:	2017      	movs	r0, #23
 8000d14:	e00a      	b.n	8000d2c <MX_GPIO_Init+0x320>
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	48001000 	.word	0x48001000
 8000d20:	48000400 	.word	0x48000400
 8000d24:	48000c00 	.word	0x48000c00
 8000d28:	48000800 	.word	0x48000800
 8000d2c:	f000 fdcf 	bl	80018ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2105      	movs	r1, #5
 8000d34:	2028      	movs	r0, #40	@ 0x28
 8000d36:	f000 fdae 	bl	8001896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d3a:	2028      	movs	r0, #40	@ 0x28
 8000d3c:	f000 fdc7 	bl	80018ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d40:	bf00      	nop
 8000d42:	3728      	adds	r7, #40	@ 0x28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == BUTTON_PIN)
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d58:	d104      	bne.n	8000d64 <HAL_GPIO_EXTI_Callback+0x1c>
    /* 通過中斷釋放信號量，通知 Task_1 */
    osSemaphoreRelease(buttonSemaphoreHandle);
 8000d5a:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <HAL_GPIO_EXTI_Callback+0x24>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f004 fd82 	bl	8005868 <osSemaphoreRelease>
  }
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	2000002c 	.word	0x2000002c

08000d70 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d80:	d104      	bne.n	8000d8c <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
    // 在此加入你的程式碼，範例：釋放定時器信號量通知 Task_2
    osSemaphoreRelease(timerSemaphoreHandle);
 8000d82:	4b04      	ldr	r3, [pc, #16]	@ (8000d94 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f004 fd6e 	bl	8005868 <osSemaphoreRelease>
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000030 	.word	0x20000030

08000d98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000da0:	2001      	movs	r0, #1
 8000da2:	f004 fb5d 	bl	8005460 <osDelay>
 8000da6:	e7fb      	b.n	8000da0 <StartDefaultTask+0x8>

08000da8 <StartTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
	for(;;)
	  {
	    /* 等待按鈕中斷通知 */
	    if(osSemaphoreAcquire(buttonSemaphoreHandle, osWaitForever) == osOK)
 8000db0:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <StartTask01+0x60>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295
 8000db8:	4618      	mov	r0, r3
 8000dba:	f004 fd03 	bl	80057c4 <osSemaphoreAcquire>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d1f5      	bne.n	8000db0 <StartTask01+0x8>
	    {
	      /* 取得互斥鎖以保護 LED2 */
	      if(osMutexAcquire(ledMutexHandle, osWaitForever) == osOK)
 8000dc4:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <StartTask01+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f004 fbe8 	bl	80055a2 <osMutexAcquire>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1eb      	bne.n	8000db0 <StartTask01+0x8>
	      {
	        /* 5秒內以 1Hz 閃爍 LED2 (共閃爍 5 次) */
	        for(int i = 0; i < 5; i++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	e00b      	b.n	8000df6 <StartTask01+0x4e>
	        {
	          HAL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
 8000dde:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000de2:	480b      	ldr	r0, [pc, #44]	@ (8000e10 <StartTask01+0x68>)
 8000de4:	f001 f85c 	bl	8001ea0 <HAL_GPIO_TogglePin>
	          osDelay(1000);  // 延遲 1000 毫秒
 8000de8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dec:	f004 fb38 	bl	8005460 <osDelay>
	        for(int i = 0; i < 5; i++)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	3301      	adds	r3, #1
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2b04      	cmp	r3, #4
 8000dfa:	ddf0      	ble.n	8000dde <StartTask01+0x36>
	        }
	        /* 釋放互斥鎖 */
	        osMutexRelease(ledMutexHandle);
 8000dfc:	4b03      	ldr	r3, [pc, #12]	@ (8000e0c <StartTask01+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f004 fc19 	bl	8005638 <osMutexRelease>
	    if(osSemaphoreAcquire(buttonSemaphoreHandle, osWaitForever) == osOK)
 8000e06:	e7d3      	b.n	8000db0 <StartTask01+0x8>
 8000e08:	2000002c 	.word	0x2000002c
 8000e0c:	20000034 	.word	0x20000034
 8000e10:	48000400 	.word	0x48000400

08000e14 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	for(;;)
	  {
	    /* 等待定時器中斷通知 */
	    if(osSemaphoreAcquire(timerSemaphoreHandle, osWaitForever) == osOK)
 8000e1c:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <StartTask02+0x60>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295
 8000e24:	4618      	mov	r0, r3
 8000e26:	f004 fccd 	bl	80057c4 <osSemaphoreAcquire>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1f5      	bne.n	8000e1c <StartTask02+0x8>
	    {
	      /* 嘗試取得互斥鎖以保護 LED2 */
	      if(osMutexAcquire(ledMutexHandle, osWaitForever) == osOK)
 8000e30:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <StartTask02+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 fbb2 	bl	80055a2 <osMutexAcquire>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1eb      	bne.n	8000e1c <StartTask02+0x8>
	      {
	        for(int i = 0; i < 20; i++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	e00a      	b.n	8000e60 <StartTask02+0x4c>
	        {
	          HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000e4a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e4e:	480b      	ldr	r0, [pc, #44]	@ (8000e7c <StartTask02+0x68>)
 8000e50:	f001 f826 	bl	8001ea0 <HAL_GPIO_TogglePin>
	          osDelay(100);  // 100 毫秒延遲 => 10Hz 閃爍 (20 次 = 2 秒)
 8000e54:	2064      	movs	r0, #100	@ 0x64
 8000e56:	f004 fb03 	bl	8005460 <osDelay>
	        for(int i = 0; i < 20; i++)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2b13      	cmp	r3, #19
 8000e64:	ddf1      	ble.n	8000e4a <StartTask02+0x36>
	        }
	        /* 完成後釋放互斥鎖 */

	        osMutexRelease(ledMutexHandle);
 8000e66:	4b04      	ldr	r3, [pc, #16]	@ (8000e78 <StartTask02+0x64>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f004 fbe4 	bl	8005638 <osMutexRelease>
	    if(osSemaphoreAcquire(timerSemaphoreHandle, osWaitForever) == osOK)
 8000e70:	e7d4      	b.n	8000e1c <StartTask02+0x8>
 8000e72:	bf00      	nop
 8000e74:	20000030 	.word	0x20000030
 8000e78:	20000034 	.word	0x20000034
 8000e7c:	48000400 	.word	0x48000400

08000e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e84:	b672      	cpsid	i
}
 8000e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <Error_Handler+0x8>

08000e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <HAL_MspInit+0x4c>)
 8000e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e96:	4a10      	ldr	r2, [pc, #64]	@ (8000ed8 <HAL_MspInit+0x4c>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <HAL_MspInit+0x4c>)
 8000ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed8 <HAL_MspInit+0x4c>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <HAL_MspInit+0x4c>)
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eb6:	4b08      	ldr	r3, [pc, #32]	@ (8000ed8 <HAL_MspInit+0x4c>)
 8000eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	210f      	movs	r1, #15
 8000ec6:	f06f 0001 	mvn.w	r0, #1
 8000eca:	f000 fce4 	bl	8001896 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000

08000edc <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b0ac      	sub	sp, #176	@ 0xb0
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2288      	movs	r2, #136	@ 0x88
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f007 fe7b 	bl	8008bf8 <memset>
  if(DFSDM1_Init == 0)
 8000f02:	4b25      	ldr	r3, [pc, #148]	@ (8000f98 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d142      	bne.n	8000f90 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000f0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f0e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f002 f998 	bl	8003250 <HAL_RCCEx_PeriphCLKConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000f26:	f7ff ffab 	bl	8000e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f9c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8000f9c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f34:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f36:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f42:	4b16      	ldr	r3, [pc, #88]	@ (8000f9c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f46:	4a15      	ldr	r2, [pc, #84]	@ (8000f9c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f48:	f043 0310 	orr.w	r3, r3, #16
 8000f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f4e:	4b13      	ldr	r3, [pc, #76]	@ (8000f9c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	f003 0310 	and.w	r3, r3, #16
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000f5a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000f5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f74:	2306      	movs	r3, #6
 8000f76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f7a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4807      	ldr	r0, [pc, #28]	@ (8000fa0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000f82:	f000 fdcb 	bl	8001b1c <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000f86:	4b04      	ldr	r3, [pc, #16]	@ (8000f98 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	4a02      	ldr	r2, [pc, #8]	@ (8000f98 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f8e:	6013      	str	r3, [r2, #0]
  }

}
 8000f90:	bf00      	nop
 8000f92:	37b0      	adds	r7, #176	@ 0xb0
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200007b8 	.word	0x200007b8
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	48001000 	.word	0x48001000

08000fa4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b0ac      	sub	sp, #176	@ 0xb0
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2288      	movs	r2, #136	@ 0x88
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f007 fe17 	bl	8008bf8 <memset>
  if(hi2c->Instance==I2C2)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a21      	ldr	r2, [pc, #132]	@ (8001054 <HAL_I2C_MspInit+0xb0>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d13b      	bne.n	800104c <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000fd4:	2380      	movs	r3, #128	@ 0x80
 8000fd6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f002 f935 	bl	8003250 <HAL_RCCEx_PeriphCLKConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fec:	f7ff ff48 	bl	8000e80 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff0:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <HAL_I2C_MspInit+0xb4>)
 8000ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff4:	4a18      	ldr	r2, [pc, #96]	@ (8001058 <HAL_I2C_MspInit+0xb4>)
 8000ff6:	f043 0302 	orr.w	r3, r3, #2
 8000ffa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ffc:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <HAL_I2C_MspInit+0xb4>)
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001008:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800100c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001010:	2312      	movs	r3, #18
 8001012:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001016:	2301      	movs	r3, #1
 8001018:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001022:	2304      	movs	r3, #4
 8001024:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001028:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800102c:	4619      	mov	r1, r3
 800102e:	480b      	ldr	r0, [pc, #44]	@ (800105c <HAL_I2C_MspInit+0xb8>)
 8001030:	f000 fd74 	bl	8001b1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001034:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <HAL_I2C_MspInit+0xb4>)
 8001036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001038:	4a07      	ldr	r2, [pc, #28]	@ (8001058 <HAL_I2C_MspInit+0xb4>)
 800103a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800103e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001040:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <HAL_I2C_MspInit+0xb4>)
 8001042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001044:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800104c:	bf00      	nop
 800104e:	37b0      	adds	r7, #176	@ 0xb0
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40005800 	.word	0x40005800
 8001058:	40021000 	.word	0x40021000
 800105c:	48000400 	.word	0x48000400

08001060 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a17      	ldr	r2, [pc, #92]	@ (80010dc <HAL_QSPI_MspInit+0x7c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d128      	bne.n	80010d4 <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001082:	4b17      	ldr	r3, [pc, #92]	@ (80010e0 <HAL_QSPI_MspInit+0x80>)
 8001084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001086:	4a16      	ldr	r2, [pc, #88]	@ (80010e0 <HAL_QSPI_MspInit+0x80>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800108c:	6513      	str	r3, [r2, #80]	@ 0x50
 800108e:	4b14      	ldr	r3, [pc, #80]	@ (80010e0 <HAL_QSPI_MspInit+0x80>)
 8001090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <HAL_QSPI_MspInit+0x80>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	4a10      	ldr	r2, [pc, #64]	@ (80010e0 <HAL_QSPI_MspInit+0x80>)
 80010a0:	f043 0310 	orr.w	r3, r3, #16
 80010a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <HAL_QSPI_MspInit+0x80>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	f003 0310 	and.w	r3, r3, #16
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80010b2:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80010b6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80010c4:	230a      	movs	r3, #10
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4805      	ldr	r0, [pc, #20]	@ (80010e4 <HAL_QSPI_MspInit+0x84>)
 80010d0:	f000 fd24 	bl	8001b1c <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	@ 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	a0001000 	.word	0xa0001000
 80010e0:	40021000 	.word	0x40021000
 80010e4:	48001000 	.word	0x48001000

080010e8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	@ 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a17      	ldr	r2, [pc, #92]	@ (8001164 <HAL_SPI_MspInit+0x7c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d128      	bne.n	800115c <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800110a:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <HAL_SPI_MspInit+0x80>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110e:	4a16      	ldr	r2, [pc, #88]	@ (8001168 <HAL_SPI_MspInit+0x80>)
 8001110:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001114:	6593      	str	r3, [r2, #88]	@ 0x58
 8001116:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <HAL_SPI_MspInit+0x80>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <HAL_SPI_MspInit+0x80>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	4a10      	ldr	r2, [pc, #64]	@ (8001168 <HAL_SPI_MspInit+0x80>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112e:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <HAL_SPI_MspInit+0x80>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800113a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800113e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800114c:	2306      	movs	r3, #6
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	4805      	ldr	r0, [pc, #20]	@ (800116c <HAL_SPI_MspInit+0x84>)
 8001158:	f000 fce0 	bl	8001b1c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	@ 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40003c00 	.word	0x40003c00
 8001168:	40021000 	.word	0x40021000
 800116c:	48000800 	.word	0x48000800

08001170 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	@ 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001190:	d130      	bne.n	80011f4 <HAL_TIM_Base_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001192:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <HAL_TIM_Base_MspInit+0x8c>)
 8001194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001196:	4a19      	ldr	r2, [pc, #100]	@ (80011fc <HAL_TIM_Base_MspInit+0x8c>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6593      	str	r3, [r2, #88]	@ 0x58
 800119e:	4b17      	ldr	r3, [pc, #92]	@ (80011fc <HAL_TIM_Base_MspInit+0x8c>)
 80011a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <HAL_TIM_Base_MspInit+0x8c>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	4a13      	ldr	r2, [pc, #76]	@ (80011fc <HAL_TIM_Base_MspInit+0x8c>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b6:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <HAL_TIM_Base_MspInit+0x8c>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 80011c2:	2308      	movs	r3, #8
 80011c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011d2:	2301      	movs	r3, #1
 80011d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e0:	f000 fc9c 	bl	8001b1c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2105      	movs	r1, #5
 80011e8:	201c      	movs	r0, #28
 80011ea:	f000 fb54 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011ee:	201c      	movs	r0, #28
 80011f0:	f000 fb6d 	bl	80018ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80011f4:	bf00      	nop
 80011f6:	3728      	adds	r7, #40	@ 0x28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40021000 	.word	0x40021000

08001200 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b0ae      	sub	sp, #184	@ 0xb8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	2288      	movs	r2, #136	@ 0x88
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f007 fce9 	bl	8008bf8 <memset>
  if(huart->Instance==USART1)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a42      	ldr	r2, [pc, #264]	@ (8001334 <HAL_UART_MspInit+0x134>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d13b      	bne.n	80012a8 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001230:	2301      	movs	r3, #1
 8001232:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001234:	2300      	movs	r3, #0
 8001236:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4618      	mov	r0, r3
 800123e:	f002 f807 	bl	8003250 <HAL_RCCEx_PeriphCLKConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001248:	f7ff fe1a 	bl	8000e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800124c:	4b3a      	ldr	r3, [pc, #232]	@ (8001338 <HAL_UART_MspInit+0x138>)
 800124e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001250:	4a39      	ldr	r2, [pc, #228]	@ (8001338 <HAL_UART_MspInit+0x138>)
 8001252:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001256:	6613      	str	r3, [r2, #96]	@ 0x60
 8001258:	4b37      	ldr	r3, [pc, #220]	@ (8001338 <HAL_UART_MspInit+0x138>)
 800125a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800125c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001260:	61bb      	str	r3, [r7, #24]
 8001262:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001264:	4b34      	ldr	r3, [pc, #208]	@ (8001338 <HAL_UART_MspInit+0x138>)
 8001266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001268:	4a33      	ldr	r2, [pc, #204]	@ (8001338 <HAL_UART_MspInit+0x138>)
 800126a:	f043 0302 	orr.w	r3, r3, #2
 800126e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001270:	4b31      	ldr	r3, [pc, #196]	@ (8001338 <HAL_UART_MspInit+0x138>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800127c:	23c0      	movs	r3, #192	@ 0xc0
 800127e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001294:	2307      	movs	r3, #7
 8001296:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800129e:	4619      	mov	r1, r3
 80012a0:	4826      	ldr	r0, [pc, #152]	@ (800133c <HAL_UART_MspInit+0x13c>)
 80012a2:	f000 fc3b 	bl	8001b1c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80012a6:	e040      	b.n	800132a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a24      	ldr	r2, [pc, #144]	@ (8001340 <HAL_UART_MspInit+0x140>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d13b      	bne.n	800132a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012b2:	2304      	movs	r3, #4
 80012b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4618      	mov	r0, r3
 80012c0:	f001 ffc6 	bl	8003250 <HAL_RCCEx_PeriphCLKConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_UART_MspInit+0xce>
      Error_Handler();
 80012ca:	f7ff fdd9 	bl	8000e80 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <HAL_UART_MspInit+0x138>)
 80012d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d2:	4a19      	ldr	r2, [pc, #100]	@ (8001338 <HAL_UART_MspInit+0x138>)
 80012d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80012da:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <HAL_UART_MspInit+0x138>)
 80012dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e6:	4b14      	ldr	r3, [pc, #80]	@ (8001338 <HAL_UART_MspInit+0x138>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ea:	4a13      	ldr	r2, [pc, #76]	@ (8001338 <HAL_UART_MspInit+0x138>)
 80012ec:	f043 0308 	orr.w	r3, r3, #8
 80012f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <HAL_UART_MspInit+0x138>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80012fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001302:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001318:	2307      	movs	r3, #7
 800131a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800131e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001322:	4619      	mov	r1, r3
 8001324:	4807      	ldr	r0, [pc, #28]	@ (8001344 <HAL_UART_MspInit+0x144>)
 8001326:	f000 fbf9 	bl	8001b1c <HAL_GPIO_Init>
}
 800132a:	bf00      	nop
 800132c:	37b8      	adds	r7, #184	@ 0xb8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40013800 	.word	0x40013800
 8001338:	40021000 	.word	0x40021000
 800133c:	48000400 	.word	0x48000400
 8001340:	40004800 	.word	0x40004800
 8001344:	48000c00 	.word	0x48000c00

08001348 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b0ac      	sub	sp, #176	@ 0xb0
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	2288      	movs	r2, #136	@ 0x88
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f007 fc45 	bl	8008bf8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001376:	d17c      	bne.n	8001472 <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001378:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800137c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800137e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001382:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001386:	2301      	movs	r3, #1
 8001388:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800138a:	2301      	movs	r3, #1
 800138c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800138e:	2318      	movs	r3, #24
 8001390:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001392:	2307      	movs	r3, #7
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001396:	2302      	movs	r3, #2
 8001398:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800139a:	2302      	movs	r3, #2
 800139c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800139e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80013a2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4618      	mov	r0, r3
 80013aa:	f001 ff51 	bl	8003250 <HAL_RCCEx_PeriphCLKConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80013b4:	f7ff fd64 	bl	8000e80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b8:	4b30      	ldr	r3, [pc, #192]	@ (800147c <HAL_PCD_MspInit+0x134>)
 80013ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013bc:	4a2f      	ldr	r2, [pc, #188]	@ (800147c <HAL_PCD_MspInit+0x134>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c4:	4b2d      	ldr	r3, [pc, #180]	@ (800147c <HAL_PCD_MspInit+0x134>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80013d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013e8:	4619      	mov	r1, r3
 80013ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ee:	f000 fb95 	bl	8001b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80013f2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80013f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800140c:	230a      	movs	r3, #10
 800140e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001416:	4619      	mov	r1, r3
 8001418:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800141c:	f000 fb7e 	bl	8001b1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001420:	4b16      	ldr	r3, [pc, #88]	@ (800147c <HAL_PCD_MspInit+0x134>)
 8001422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001424:	4a15      	ldr	r2, [pc, #84]	@ (800147c <HAL_PCD_MspInit+0x134>)
 8001426:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800142a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142c:	4b13      	ldr	r3, [pc, #76]	@ (800147c <HAL_PCD_MspInit+0x134>)
 800142e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001430:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001438:	4b10      	ldr	r3, [pc, #64]	@ (800147c <HAL_PCD_MspInit+0x134>)
 800143a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d114      	bne.n	800146e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001444:	4b0d      	ldr	r3, [pc, #52]	@ (800147c <HAL_PCD_MspInit+0x134>)
 8001446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001448:	4a0c      	ldr	r2, [pc, #48]	@ (800147c <HAL_PCD_MspInit+0x134>)
 800144a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800144e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001450:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <HAL_PCD_MspInit+0x134>)
 8001452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800145c:	f001 f82c 	bl	80024b8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_PCD_MspInit+0x134>)
 8001462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001464:	4a05      	ldr	r2, [pc, #20]	@ (800147c <HAL_PCD_MspInit+0x134>)
 8001466:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800146a:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800146c:	e001      	b.n	8001472 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800146e:	f001 f823 	bl	80024b8 <HAL_PWREx_EnableVddUSB>
}
 8001472:	bf00      	nop
 8001474:	37b0      	adds	r7, #176	@ 0xb0
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <NMI_Handler+0x4>

08001488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <HardFault_Handler+0x4>

08001490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <MemManage_Handler+0x4>

08001498 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <BusFault_Handler+0x4>

080014a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <UsageFault_Handler+0x4>

080014a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ba:	f000 f8cd 	bl	8001658 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80014be:	f006 fa1d 	bl	80078fc <xTaskGetSchedulerState>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d001      	beq.n	80014cc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80014c8:	f007 f916 	bl	80086f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80014d4:	2020      	movs	r0, #32
 80014d6:	f000 fcfd 	bl	8001ed4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80014da:	2040      	movs	r0, #64	@ 0x40
 80014dc:	f000 fcfa 	bl	8001ed4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80014e0:	2080      	movs	r0, #128	@ 0x80
 80014e2:	f000 fcf7 	bl	8001ed4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80014e6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80014ea:	f000 fcf3 	bl	8001ed4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <TIM2_IRQHandler+0x10>)
 80014fa:	f002 fcdf 	bl	8003ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000016c 	.word	0x2000016c

08001508 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800150c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001510:	f000 fce0 	bl	8001ed4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001514:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001518:	f000 fcdc 	bl	8001ed4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800151c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001520:	f000 fcd8 	bl	8001ed4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001524:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001528:	f000 fcd4 	bl	8001ed4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800152c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001530:	f000 fcd0 	bl	8001ed4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}

08001538 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800153c:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <SystemInit+0x20>)
 800153e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001542:	4a05      	ldr	r2, [pc, #20]	@ (8001558 <SystemInit+0x20>)
 8001544:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001548:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800155c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001594 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001560:	f7ff ffea 	bl	8001538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001564:	480c      	ldr	r0, [pc, #48]	@ (8001598 <LoopForever+0x6>)
  ldr r1, =_edata
 8001566:	490d      	ldr	r1, [pc, #52]	@ (800159c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001568:	4a0d      	ldr	r2, [pc, #52]	@ (80015a0 <LoopForever+0xe>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800156c:	e002      	b.n	8001574 <LoopCopyDataInit>

0800156e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001572:	3304      	adds	r3, #4

08001574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001578:	d3f9      	bcc.n	800156e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157a:	4a0a      	ldr	r2, [pc, #40]	@ (80015a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800157c:	4c0a      	ldr	r4, [pc, #40]	@ (80015a8 <LoopForever+0x16>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001580:	e001      	b.n	8001586 <LoopFillZerobss>

08001582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001584:	3204      	adds	r2, #4

08001586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001588:	d3fb      	bcc.n	8001582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158a:	f007 fb3d 	bl	8008c08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800158e:	f7fe ffe3 	bl	8000558 <main>

08001592 <LoopForever>:

LoopForever:
    b LoopForever
 8001592:	e7fe      	b.n	8001592 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001594:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800159c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80015a0:	08008d84 	.word	0x08008d84
  ldr r2, =_sbss
 80015a4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80015a8:	200020ec 	.word	0x200020ec

080015ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015ac:	e7fe      	b.n	80015ac <ADC1_2_IRQHandler>

080015ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f000 f961 	bl	8001880 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015be:	200f      	movs	r0, #15
 80015c0:	f000 f80e 	bl	80015e0 <HAL_InitTick>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d002      	beq.n	80015d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	71fb      	strb	r3, [r7, #7]
 80015ce:	e001      	b.n	80015d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015d0:	f7ff fc5c 	bl	8000e8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015d4:	79fb      	ldrb	r3, [r7, #7]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015ec:	4b17      	ldr	r3, [pc, #92]	@ (800164c <HAL_InitTick+0x6c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d023      	beq.n	800163c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015f4:	4b16      	ldr	r3, [pc, #88]	@ (8001650 <HAL_InitTick+0x70>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b14      	ldr	r3, [pc, #80]	@ (800164c <HAL_InitTick+0x6c>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001602:	fbb3 f3f1 	udiv	r3, r3, r1
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f96d 	bl	80018ea <HAL_SYSTICK_Config>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10f      	bne.n	8001636 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b0f      	cmp	r3, #15
 800161a:	d809      	bhi.n	8001630 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161c:	2200      	movs	r2, #0
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f000 f937 	bl	8001896 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001628:	4a0a      	ldr	r2, [pc, #40]	@ (8001654 <HAL_InitTick+0x74>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e007      	b.n	8001640 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	e004      	b.n	8001640 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	73fb      	strb	r3, [r7, #15]
 800163a:	e001      	b.n	8001640 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001640:	7bfb      	ldrb	r3, [r7, #15]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000008 	.word	0x20000008
 8001650:	20000000 	.word	0x20000000
 8001654:	20000004 	.word	0x20000004

08001658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <HAL_IncTick+0x20>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <HAL_IncTick+0x24>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4413      	add	r3, r2
 8001668:	4a04      	ldr	r2, [pc, #16]	@ (800167c <HAL_IncTick+0x24>)
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000008 	.word	0x20000008
 800167c:	200007bc 	.word	0x200007bc

08001680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b03      	ldr	r3, [pc, #12]	@ (8001694 <HAL_GetTick+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	200007bc 	.word	0x200007bc

08001698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a0:	f7ff ffee 	bl	8001680 <HAL_GetTick>
 80016a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b0:	d005      	beq.n	80016be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016b2:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <HAL_Delay+0x44>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016be:	bf00      	nop
 80016c0:	f7ff ffde 	bl	8001680 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d8f7      	bhi.n	80016c0 <HAL_Delay+0x28>
  {
  }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008

080016e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001708:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800170c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001712:	4a04      	ldr	r2, [pc, #16]	@ (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	60d3      	str	r3, [r2, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	2b00      	cmp	r3, #0
 8001754:	db0b      	blt.n	800176e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	f003 021f 	and.w	r2, r3, #31
 800175c:	4907      	ldr	r1, [pc, #28]	@ (800177c <__NVIC_EnableIRQ+0x38>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	2001      	movs	r0, #1
 8001766:	fa00 f202 	lsl.w	r2, r0, r2
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000e100 	.word	0xe000e100

08001780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	2b00      	cmp	r3, #0
 8001792:	db0a      	blt.n	80017aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	490c      	ldr	r1, [pc, #48]	@ (80017cc <__NVIC_SetPriority+0x4c>)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	440b      	add	r3, r1
 80017a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a8:	e00a      	b.n	80017c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4908      	ldr	r1, [pc, #32]	@ (80017d0 <__NVIC_SetPriority+0x50>)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	3b04      	subs	r3, #4
 80017b8:	0112      	lsls	r2, r2, #4
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	440b      	add	r3, r1
 80017be:	761a      	strb	r2, [r3, #24]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000e100 	.word	0xe000e100
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	@ 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f1c3 0307 	rsb	r3, r3, #7
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	bf28      	it	cs
 80017f2:	2304      	movcs	r3, #4
 80017f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3304      	adds	r3, #4
 80017fa:	2b06      	cmp	r3, #6
 80017fc:	d902      	bls.n	8001804 <NVIC_EncodePriority+0x30>
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3b03      	subs	r3, #3
 8001802:	e000      	b.n	8001806 <NVIC_EncodePriority+0x32>
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	f04f 32ff 	mov.w	r2, #4294967295
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43da      	mvns	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	401a      	ands	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800181c:	f04f 31ff 	mov.w	r1, #4294967295
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa01 f303 	lsl.w	r3, r1, r3
 8001826:	43d9      	mvns	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	4313      	orrs	r3, r2
         );
}
 800182e:	4618      	mov	r0, r3
 8001830:	3724      	adds	r7, #36	@ 0x24
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800184c:	d301      	bcc.n	8001852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184e:	2301      	movs	r3, #1
 8001850:	e00f      	b.n	8001872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001852:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <SysTick_Config+0x40>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185a:	210f      	movs	r1, #15
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	f7ff ff8e 	bl	8001780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001864:	4b05      	ldr	r3, [pc, #20]	@ (800187c <SysTick_Config+0x40>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186a:	4b04      	ldr	r3, [pc, #16]	@ (800187c <SysTick_Config+0x40>)
 800186c:	2207      	movs	r2, #7
 800186e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	e000e010 	.word	0xe000e010

08001880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff29 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018a8:	f7ff ff3e 	bl	8001728 <__NVIC_GetPriorityGrouping>
 80018ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	68b9      	ldr	r1, [r7, #8]
 80018b2:	6978      	ldr	r0, [r7, #20]
 80018b4:	f7ff ff8e 	bl	80017d4 <NVIC_EncodePriority>
 80018b8:	4602      	mov	r2, r0
 80018ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff5d 	bl	8001780 <__NVIC_SetPriority>
}
 80018c6:	bf00      	nop
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff31 	bl	8001744 <__NVIC_EnableIRQ>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ffa2 	bl	800183c <SysTick_Config>
 80018f8:	4603      	mov	r3, r0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e0ac      	b.n	8001a70 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f8b2 	bl	8001a84 <DFSDM_GetChannelFromInstance>
 8001920:	4603      	mov	r3, r0
 8001922:	4a55      	ldr	r2, [pc, #340]	@ (8001a78 <HAL_DFSDM_ChannelInit+0x174>)
 8001924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e09f      	b.n	8001a70 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff fad3 	bl	8000edc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001936:	4b51      	ldr	r3, [pc, #324]	@ (8001a7c <HAL_DFSDM_ChannelInit+0x178>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	4a4f      	ldr	r2, [pc, #316]	@ (8001a7c <HAL_DFSDM_ChannelInit+0x178>)
 800193e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001940:	4b4e      	ldr	r3, [pc, #312]	@ (8001a7c <HAL_DFSDM_ChannelInit+0x178>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d125      	bne.n	8001994 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001948:	4b4d      	ldr	r3, [pc, #308]	@ (8001a80 <HAL_DFSDM_ChannelInit+0x17c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a4c      	ldr	r2, [pc, #304]	@ (8001a80 <HAL_DFSDM_ChannelInit+0x17c>)
 800194e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001952:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001954:	4b4a      	ldr	r3, [pc, #296]	@ (8001a80 <HAL_DFSDM_ChannelInit+0x17c>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	4948      	ldr	r1, [pc, #288]	@ (8001a80 <HAL_DFSDM_ChannelInit+0x17c>)
 800195e:	4313      	orrs	r3, r2
 8001960:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001962:	4b47      	ldr	r3, [pc, #284]	@ (8001a80 <HAL_DFSDM_ChannelInit+0x17c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a46      	ldr	r2, [pc, #280]	@ (8001a80 <HAL_DFSDM_ChannelInit+0x17c>)
 8001968:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800196c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	791b      	ldrb	r3, [r3, #4]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d108      	bne.n	8001988 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001976:	4b42      	ldr	r3, [pc, #264]	@ (8001a80 <HAL_DFSDM_ChannelInit+0x17c>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	3b01      	subs	r3, #1
 8001980:	041b      	lsls	r3, r3, #16
 8001982:	493f      	ldr	r1, [pc, #252]	@ (8001a80 <HAL_DFSDM_ChannelInit+0x17c>)
 8001984:	4313      	orrs	r3, r2
 8001986:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001988:	4b3d      	ldr	r3, [pc, #244]	@ (8001a80 <HAL_DFSDM_ChannelInit+0x17c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a3c      	ldr	r2, [pc, #240]	@ (8001a80 <HAL_DFSDM_ChannelInit+0x17c>)
 800198e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001992:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80019a2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6819      	ldr	r1, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80019b2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80019b8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 020f 	bic.w	r2, r2, #15
 80019d0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6819      	ldr	r1, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80019e0:	431a      	orrs	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80019f8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6899      	ldr	r1, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f002 0207 	and.w	r2, r2, #7
 8001a24:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6859      	ldr	r1, [r3, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a30:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a50:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 f810 	bl	8001a84 <DFSDM_GetChannelFromInstance>
 8001a64:	4602      	mov	r2, r0
 8001a66:	4904      	ldr	r1, [pc, #16]	@ (8001a78 <HAL_DFSDM_ChannelInit+0x174>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200007c4 	.word	0x200007c4
 8001a7c:	200007c0 	.word	0x200007c0
 8001a80:	40016000 	.word	0x40016000

08001a84 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001b00 <DFSDM_GetChannelFromInstance+0x7c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d102      	bne.n	8001a9a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	e02b      	b.n	8001af2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a19      	ldr	r2, [pc, #100]	@ (8001b04 <DFSDM_GetChannelFromInstance+0x80>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d102      	bne.n	8001aa8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	e024      	b.n	8001af2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a17      	ldr	r2, [pc, #92]	@ (8001b08 <DFSDM_GetChannelFromInstance+0x84>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d102      	bne.n	8001ab6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	e01d      	b.n	8001af2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a14      	ldr	r2, [pc, #80]	@ (8001b0c <DFSDM_GetChannelFromInstance+0x88>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d102      	bne.n	8001ac4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	e016      	b.n	8001af2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a12      	ldr	r2, [pc, #72]	@ (8001b10 <DFSDM_GetChannelFromInstance+0x8c>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d102      	bne.n	8001ad2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001acc:	2305      	movs	r3, #5
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	e00f      	b.n	8001af2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a0f      	ldr	r2, [pc, #60]	@ (8001b14 <DFSDM_GetChannelFromInstance+0x90>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d102      	bne.n	8001ae0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001ada:	2306      	movs	r3, #6
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	e008      	b.n	8001af2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a0d      	ldr	r2, [pc, #52]	@ (8001b18 <DFSDM_GetChannelFromInstance+0x94>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d102      	bne.n	8001aee <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001ae8:	2307      	movs	r3, #7
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	e001      	b.n	8001af2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001aee:	2303      	movs	r3, #3
 8001af0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001af2:	68fb      	ldr	r3, [r7, #12]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40016000 	.word	0x40016000
 8001b04:	40016020 	.word	0x40016020
 8001b08:	40016040 	.word	0x40016040
 8001b0c:	40016080 	.word	0x40016080
 8001b10:	400160a0 	.word	0x400160a0
 8001b14:	400160c0 	.word	0x400160c0
 8001b18:	400160e0 	.word	0x400160e0

08001b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2a:	e17f      	b.n	8001e2c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	2101      	movs	r1, #1
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	fa01 f303 	lsl.w	r3, r1, r3
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 8171 	beq.w	8001e26 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d005      	beq.n	8001b5c <HAL_GPIO_Init+0x40>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d130      	bne.n	8001bbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b92:	2201      	movs	r2, #1
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	091b      	lsrs	r3, r3, #4
 8001ba8:	f003 0201 	and.w	r2, r3, #1
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	d118      	bne.n	8001bfc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	08db      	lsrs	r3, r3, #3
 8001be6:	f003 0201 	and.w	r2, r3, #1
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d017      	beq.n	8001c38 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	2203      	movs	r2, #3
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d123      	bne.n	8001c8c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	08da      	lsrs	r2, r3, #3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3208      	adds	r2, #8
 8001c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	220f      	movs	r2, #15
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	08da      	lsrs	r2, r3, #3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3208      	adds	r2, #8
 8001c86:	6939      	ldr	r1, [r7, #16]
 8001c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	2203      	movs	r2, #3
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0203 	and.w	r2, r3, #3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 80ac 	beq.w	8001e26 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cce:	4b5f      	ldr	r3, [pc, #380]	@ (8001e4c <HAL_GPIO_Init+0x330>)
 8001cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd2:	4a5e      	ldr	r2, [pc, #376]	@ (8001e4c <HAL_GPIO_Init+0x330>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cda:	4b5c      	ldr	r3, [pc, #368]	@ (8001e4c <HAL_GPIO_Init+0x330>)
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ce6:	4a5a      	ldr	r2, [pc, #360]	@ (8001e50 <HAL_GPIO_Init+0x334>)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	089b      	lsrs	r3, r3, #2
 8001cec:	3302      	adds	r3, #2
 8001cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d10:	d025      	beq.n	8001d5e <HAL_GPIO_Init+0x242>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4f      	ldr	r2, [pc, #316]	@ (8001e54 <HAL_GPIO_Init+0x338>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d01f      	beq.n	8001d5a <HAL_GPIO_Init+0x23e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4e      	ldr	r2, [pc, #312]	@ (8001e58 <HAL_GPIO_Init+0x33c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d019      	beq.n	8001d56 <HAL_GPIO_Init+0x23a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4d      	ldr	r2, [pc, #308]	@ (8001e5c <HAL_GPIO_Init+0x340>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_GPIO_Init+0x236>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4c      	ldr	r2, [pc, #304]	@ (8001e60 <HAL_GPIO_Init+0x344>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00d      	beq.n	8001d4e <HAL_GPIO_Init+0x232>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4b      	ldr	r2, [pc, #300]	@ (8001e64 <HAL_GPIO_Init+0x348>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d007      	beq.n	8001d4a <HAL_GPIO_Init+0x22e>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4a      	ldr	r2, [pc, #296]	@ (8001e68 <HAL_GPIO_Init+0x34c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d101      	bne.n	8001d46 <HAL_GPIO_Init+0x22a>
 8001d42:	2306      	movs	r3, #6
 8001d44:	e00c      	b.n	8001d60 <HAL_GPIO_Init+0x244>
 8001d46:	2307      	movs	r3, #7
 8001d48:	e00a      	b.n	8001d60 <HAL_GPIO_Init+0x244>
 8001d4a:	2305      	movs	r3, #5
 8001d4c:	e008      	b.n	8001d60 <HAL_GPIO_Init+0x244>
 8001d4e:	2304      	movs	r3, #4
 8001d50:	e006      	b.n	8001d60 <HAL_GPIO_Init+0x244>
 8001d52:	2303      	movs	r3, #3
 8001d54:	e004      	b.n	8001d60 <HAL_GPIO_Init+0x244>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e002      	b.n	8001d60 <HAL_GPIO_Init+0x244>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_GPIO_Init+0x244>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	f002 0203 	and.w	r2, r2, #3
 8001d66:	0092      	lsls	r2, r2, #2
 8001d68:	4093      	lsls	r3, r2
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d70:	4937      	ldr	r1, [pc, #220]	@ (8001e50 <HAL_GPIO_Init+0x334>)
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	089b      	lsrs	r3, r3, #2
 8001d76:	3302      	adds	r3, #2
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e6c <HAL_GPIO_Init+0x350>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001da2:	4a32      	ldr	r2, [pc, #200]	@ (8001e6c <HAL_GPIO_Init+0x350>)
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001da8:	4b30      	ldr	r3, [pc, #192]	@ (8001e6c <HAL_GPIO_Init+0x350>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dcc:	4a27      	ldr	r2, [pc, #156]	@ (8001e6c <HAL_GPIO_Init+0x350>)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001dd2:	4b26      	ldr	r3, [pc, #152]	@ (8001e6c <HAL_GPIO_Init+0x350>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4013      	ands	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001df6:	4a1d      	ldr	r2, [pc, #116]	@ (8001e6c <HAL_GPIO_Init+0x350>)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e6c <HAL_GPIO_Init+0x350>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e20:	4a12      	ldr	r2, [pc, #72]	@ (8001e6c <HAL_GPIO_Init+0x350>)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa22 f303 	lsr.w	r3, r2, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f47f ae78 	bne.w	8001b2c <HAL_GPIO_Init+0x10>
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	371c      	adds	r7, #28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40010000 	.word	0x40010000
 8001e54:	48000400 	.word	0x48000400
 8001e58:	48000800 	.word	0x48000800
 8001e5c:	48000c00 	.word	0x48000c00
 8001e60:	48001000 	.word	0x48001000
 8001e64:	48001400 	.word	0x48001400
 8001e68:	48001800 	.word	0x48001800
 8001e6c:	40010400 	.word	0x40010400

08001e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	807b      	strh	r3, [r7, #2]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e80:	787b      	ldrb	r3, [r7, #1]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e86:	887a      	ldrh	r2, [r7, #2]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e8c:	e002      	b.n	8001e94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e8e:	887a      	ldrh	r2, [r7, #2]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	041a      	lsls	r2, r3, #16
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	43d9      	mvns	r1, r3
 8001ebe:	887b      	ldrh	r3, [r7, #2]
 8001ec0:	400b      	ands	r3, r1
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	619a      	str	r2, [r3, #24]
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ede:	4b08      	ldr	r3, [pc, #32]	@ (8001f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ee0:	695a      	ldr	r2, [r3, #20]
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d006      	beq.n	8001ef8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eea:	4a05      	ldr	r2, [pc, #20]	@ (8001f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe ff28 	bl	8000d48 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40010400 	.word	0x40010400

08001f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e08d      	b.n	8002032 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d106      	bne.n	8001f30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff f83a 	bl	8000fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2224      	movs	r2, #36	@ 0x24
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d107      	bne.n	8001f7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	e006      	b.n	8001f8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d108      	bne.n	8001fa6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	e007      	b.n	8001fb6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fb4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001fc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fc8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fd8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691a      	ldr	r2, [r3, #16]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69d9      	ldr	r1, [r3, #28]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1a      	ldr	r2, [r3, #32]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0201 	orr.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2220      	movs	r2, #32
 800201e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b20      	cmp	r3, #32
 800204e:	d138      	bne.n	80020c2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800205a:	2302      	movs	r3, #2
 800205c:	e032      	b.n	80020c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2224      	movs	r2, #36	@ 0x24
 800206a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0201 	bic.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800208c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6819      	ldr	r1, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0201 	orr.w	r2, r2, #1
 80020ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2220      	movs	r2, #32
 80020b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	e000      	b.n	80020c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020c2:	2302      	movs	r3, #2
  }
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b20      	cmp	r3, #32
 80020e4:	d139      	bne.n	800215a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e033      	b.n	800215c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2224      	movs	r2, #36	@ 0x24
 8002100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002122:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 0201 	orr.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2220      	movs	r2, #32
 800214a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	e000      	b.n	800215c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800215a:	2302      	movs	r3, #2
  }
}
 800215c:	4618      	mov	r0, r3
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af02      	add	r7, sp, #8
 800216e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e101      	b.n	800237e <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d106      	bne.n	8002194 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff f8da 	bl	8001348 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2203      	movs	r2, #3
 8002198:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f002 fdca 	bl	8004d40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	7c1a      	ldrb	r2, [r3, #16]
 80021b4:	f88d 2000 	strb.w	r2, [sp]
 80021b8:	3304      	adds	r3, #4
 80021ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021bc:	f002 fd93 	bl	8004ce6 <USB_CoreInit>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d005      	beq.n	80021d2 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2202      	movs	r2, #2
 80021ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e0d5      	b.n	800237e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2100      	movs	r1, #0
 80021d8:	4618      	mov	r0, r3
 80021da:	f002 fdc2 	bl	8004d62 <USB_SetCurrentMode>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2202      	movs	r2, #2
 80021e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0c6      	b.n	800237e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f0:	2300      	movs	r3, #0
 80021f2:	73fb      	strb	r3, [r7, #15]
 80021f4:	e04a      	b.n	800228c <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	4413      	add	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	3315      	adds	r3, #21
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800220a:	7bfa      	ldrb	r2, [r7, #15]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4413      	add	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	3314      	adds	r3, #20
 800221a:	7bfa      	ldrb	r2, [r7, #15]
 800221c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800221e:	7bfa      	ldrb	r2, [r7, #15]
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	b298      	uxth	r0, r3
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	332e      	adds	r3, #46	@ 0x2e
 8002232:	4602      	mov	r2, r0
 8002234:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	3318      	adds	r3, #24
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800224a:	7bfa      	ldrb	r2, [r7, #15]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4413      	add	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	331c      	adds	r3, #28
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	3320      	adds	r3, #32
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	3324      	adds	r3, #36	@ 0x24
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	3301      	adds	r3, #1
 800228a:	73fb      	strb	r3, [r7, #15]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	791b      	ldrb	r3, [r3, #4]
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	429a      	cmp	r2, r3
 8002294:	d3af      	bcc.n	80021f6 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
 800229a:	e044      	b.n	8002326 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800229c:	7bfa      	ldrb	r2, [r7, #15]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022b2:	7bfa      	ldrb	r2, [r7, #15]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4413      	add	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022c8:	7bfa      	ldrb	r2, [r7, #15]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022de:	7bfa      	ldrb	r2, [r7, #15]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022f4:	7bfa      	ldrb	r2, [r7, #15]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	3301      	adds	r3, #1
 8002324:	73fb      	strb	r3, [r7, #15]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	791b      	ldrb	r3, [r3, #4]
 800232a:	7bfa      	ldrb	r2, [r7, #15]
 800232c:	429a      	cmp	r2, r3
 800232e:	d3b5      	bcc.n	800229c <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6818      	ldr	r0, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	7c1a      	ldrb	r2, [r3, #16]
 8002338:	f88d 2000 	strb.w	r2, [sp]
 800233c:	3304      	adds	r3, #4
 800233e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002340:	f002 fd5c 	bl	8004dfc <USB_DevInit>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2202      	movs	r2, #2
 800234e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e013      	b.n	800237e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7b1b      	ldrb	r3, [r3, #12]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d102      	bne.n	8002372 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f80a 	bl	8002386 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f002 ff01 	bl	800517e <USB_DevDisconnect>

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002386:	b480      	push	{r7}
 8002388:	b085      	sub	sp, #20
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023b8:	f043 0303 	orr.w	r3, r3, #3
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023d4:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a04      	ldr	r2, [pc, #16]	@ (80023ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023de:	6013      	str	r3, [r2, #0]
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40007000 	.word	0x40007000

080023f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023f4:	4b04      	ldr	r3, [pc, #16]	@ (8002408 <HAL_PWREx_GetVoltageRange+0x18>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40007000 	.word	0x40007000

0800240c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800241a:	d130      	bne.n	800247e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800241c:	4b23      	ldr	r3, [pc, #140]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002428:	d038      	beq.n	800249c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800242a:	4b20      	ldr	r3, [pc, #128]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002432:	4a1e      	ldr	r2, [pc, #120]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002434:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002438:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800243a:	4b1d      	ldr	r3, [pc, #116]	@ (80024b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2232      	movs	r2, #50	@ 0x32
 8002440:	fb02 f303 	mul.w	r3, r2, r3
 8002444:	4a1b      	ldr	r2, [pc, #108]	@ (80024b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	0c9b      	lsrs	r3, r3, #18
 800244c:	3301      	adds	r3, #1
 800244e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002450:	e002      	b.n	8002458 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	3b01      	subs	r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002458:	4b14      	ldr	r3, [pc, #80]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002460:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002464:	d102      	bne.n	800246c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f2      	bne.n	8002452 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800246c:	4b0f      	ldr	r3, [pc, #60]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002474:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002478:	d110      	bne.n	800249c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e00f      	b.n	800249e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800247e:	4b0b      	ldr	r3, [pc, #44]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800248a:	d007      	beq.n	800249c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800248c:	4b07      	ldr	r3, [pc, #28]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002494:	4a05      	ldr	r2, [pc, #20]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002496:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800249a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40007000 	.word	0x40007000
 80024b0:	20000000 	.word	0x20000000
 80024b4:	431bde83 	.word	0x431bde83

080024b8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80024bc:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	4a04      	ldr	r2, [pc, #16]	@ (80024d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80024c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024c6:	6053      	str	r3, [r2, #4]
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40007000 	.word	0x40007000

080024d8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af02      	add	r7, sp, #8
 80024de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80024e0:	f7ff f8ce 	bl	8001680 <HAL_GetTick>
 80024e4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e063      	b.n	80025b8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10b      	bne.n	8002514 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7fe fdab 	bl	8001060 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800250a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f858 	bl	80025c4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	3b01      	subs	r3, #1
 8002524:	021a      	lsls	r2, r3, #8
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	2120      	movs	r1, #32
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f850 	bl	80025e0 <QSPI_WaitFlagStateUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002544:	7afb      	ldrb	r3, [r7, #11]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d131      	bne.n	80025ae <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002554:	f023 0310 	bic.w	r3, r3, #16
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6852      	ldr	r2, [r2, #4]
 800255c:	0611      	lsls	r1, r2, #24
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68d2      	ldr	r2, [r2, #12]
 8002562:	4311      	orrs	r1, r2
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	430b      	orrs	r3, r1
 800256a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	4b13      	ldr	r3, [pc, #76]	@ (80025c0 <HAL_QSPI_Init+0xe8>)
 8002574:	4013      	ands	r3, r2
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6912      	ldr	r2, [r2, #16]
 800257a:	0411      	lsls	r1, r2, #16
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6952      	ldr	r2, [r2, #20]
 8002580:	4311      	orrs	r1, r2
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6992      	ldr	r2, [r2, #24]
 8002586:	4311      	orrs	r1, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	430b      	orrs	r3, r1
 800258e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80025b6:	7afb      	ldrb	r3, [r7, #11]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	ffe0f8fe 	.word	0xffe0f8fe

080025c4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	4613      	mov	r3, r2
 80025ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80025f0:	e01a      	b.n	8002628 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f8:	d016      	beq.n	8002628 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025fa:	f7ff f841 	bl	8001680 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	429a      	cmp	r2, r3
 8002608:	d302      	bcc.n	8002610 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10b      	bne.n	8002628 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2204      	movs	r2, #4
 8002614:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800261c:	f043 0201 	orr.w	r2, r3, #1
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e00e      	b.n	8002646 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	4013      	ands	r3, r2
 8002632:	2b00      	cmp	r3, #0
 8002634:	bf14      	ite	ne
 8002636:	2301      	movne	r3, #1
 8002638:	2300      	moveq	r3, #0
 800263a:	b2db      	uxtb	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	429a      	cmp	r2, r3
 8002642:	d1d6      	bne.n	80025f2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b088      	sub	sp, #32
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e3ca      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002662:	4b97      	ldr	r3, [pc, #604]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800266c:	4b94      	ldr	r3, [pc, #592]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 80e4 	beq.w	800284c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d007      	beq.n	800269a <HAL_RCC_OscConfig+0x4a>
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b0c      	cmp	r3, #12
 800268e:	f040 808b 	bne.w	80027a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b01      	cmp	r3, #1
 8002696:	f040 8087 	bne.w	80027a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800269a:	4b89      	ldr	r3, [pc, #548]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <HAL_RCC_OscConfig+0x62>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e3a2      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1a      	ldr	r2, [r3, #32]
 80026b6:	4b82      	ldr	r3, [pc, #520]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d004      	beq.n	80026cc <HAL_RCC_OscConfig+0x7c>
 80026c2:	4b7f      	ldr	r3, [pc, #508]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026ca:	e005      	b.n	80026d8 <HAL_RCC_OscConfig+0x88>
 80026cc:	4b7c      	ldr	r3, [pc, #496]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80026ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026d2:	091b      	lsrs	r3, r3, #4
 80026d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026d8:	4293      	cmp	r3, r2
 80026da:	d223      	bcs.n	8002724 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 fd55 	bl	8003190 <RCC_SetFlashLatencyFromMSIRange>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e383      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026f0:	4b73      	ldr	r3, [pc, #460]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a72      	ldr	r2, [pc, #456]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80026f6:	f043 0308 	orr.w	r3, r3, #8
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	4b70      	ldr	r3, [pc, #448]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	496d      	ldr	r1, [pc, #436]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800270e:	4b6c      	ldr	r3, [pc, #432]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	4968      	ldr	r1, [pc, #416]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
 8002722:	e025      	b.n	8002770 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002724:	4b66      	ldr	r3, [pc, #408]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a65      	ldr	r2, [pc, #404]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 800272a:	f043 0308 	orr.w	r3, r3, #8
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b63      	ldr	r3, [pc, #396]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	4960      	ldr	r1, [pc, #384]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002742:	4b5f      	ldr	r3, [pc, #380]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	021b      	lsls	r3, r3, #8
 8002750:	495b      	ldr	r1, [pc, #364]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d109      	bne.n	8002770 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fd15 	bl	8003190 <RCC_SetFlashLatencyFromMSIRange>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e343      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002770:	f000 fc4a 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8002774:	4602      	mov	r2, r0
 8002776:	4b52      	ldr	r3, [pc, #328]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	091b      	lsrs	r3, r3, #4
 800277c:	f003 030f 	and.w	r3, r3, #15
 8002780:	4950      	ldr	r1, [pc, #320]	@ (80028c4 <HAL_RCC_OscConfig+0x274>)
 8002782:	5ccb      	ldrb	r3, [r1, r3]
 8002784:	f003 031f 	and.w	r3, r3, #31
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
 800278c:	4a4e      	ldr	r2, [pc, #312]	@ (80028c8 <HAL_RCC_OscConfig+0x278>)
 800278e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002790:	4b4e      	ldr	r3, [pc, #312]	@ (80028cc <HAL_RCC_OscConfig+0x27c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f7fe ff23 	bl	80015e0 <HAL_InitTick>
 800279a:	4603      	mov	r3, r0
 800279c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d052      	beq.n	800284a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	e327      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d032      	beq.n	8002816 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027b0:	4b43      	ldr	r3, [pc, #268]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a42      	ldr	r2, [pc, #264]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027bc:	f7fe ff60 	bl	8001680 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027c4:	f7fe ff5c 	bl	8001680 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e310      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027d6:	4b3a      	ldr	r3, [pc, #232]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027e2:	4b37      	ldr	r3, [pc, #220]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a36      	ldr	r2, [pc, #216]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80027e8:	f043 0308 	orr.w	r3, r3, #8
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	4b34      	ldr	r3, [pc, #208]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	4931      	ldr	r1, [pc, #196]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002800:	4b2f      	ldr	r3, [pc, #188]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	492c      	ldr	r1, [pc, #176]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]
 8002814:	e01a      	b.n	800284c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002816:	4b2a      	ldr	r3, [pc, #168]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a29      	ldr	r2, [pc, #164]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 800281c:	f023 0301 	bic.w	r3, r3, #1
 8002820:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002822:	f7fe ff2d 	bl	8001680 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800282a:	f7fe ff29 	bl	8001680 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e2dd      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800283c:	4b20      	ldr	r3, [pc, #128]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f0      	bne.n	800282a <HAL_RCC_OscConfig+0x1da>
 8002848:	e000      	b.n	800284c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800284a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d074      	beq.n	8002942 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b08      	cmp	r3, #8
 800285c:	d005      	beq.n	800286a <HAL_RCC_OscConfig+0x21a>
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	2b0c      	cmp	r3, #12
 8002862:	d10e      	bne.n	8002882 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d10b      	bne.n	8002882 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286a:	4b15      	ldr	r3, [pc, #84]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d064      	beq.n	8002940 <HAL_RCC_OscConfig+0x2f0>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d160      	bne.n	8002940 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e2ba      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800288a:	d106      	bne.n	800289a <HAL_RCC_OscConfig+0x24a>
 800288c:	4b0c      	ldr	r3, [pc, #48]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0b      	ldr	r2, [pc, #44]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 8002892:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	e026      	b.n	80028e8 <HAL_RCC_OscConfig+0x298>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028a2:	d115      	bne.n	80028d0 <HAL_RCC_OscConfig+0x280>
 80028a4:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a05      	ldr	r2, [pc, #20]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80028aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4b03      	ldr	r3, [pc, #12]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a02      	ldr	r2, [pc, #8]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80028b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	e014      	b.n	80028e8 <HAL_RCC_OscConfig+0x298>
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	08008d2c 	.word	0x08008d2c
 80028c8:	20000000 	.word	0x20000000
 80028cc:	20000004 	.word	0x20000004
 80028d0:	4ba0      	ldr	r3, [pc, #640]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a9f      	ldr	r2, [pc, #636]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 80028d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	4b9d      	ldr	r3, [pc, #628]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a9c      	ldr	r2, [pc, #624]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 80028e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d013      	beq.n	8002918 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe fec6 	bl	8001680 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f8:	f7fe fec2 	bl	8001680 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	@ 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e276      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800290a:	4b92      	ldr	r3, [pc, #584]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x2a8>
 8002916:	e014      	b.n	8002942 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fe feb2 	bl	8001680 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002920:	f7fe feae 	bl	8001680 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	@ 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e262      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002932:	4b88      	ldr	r3, [pc, #544]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x2d0>
 800293e:	e000      	b.n	8002942 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d060      	beq.n	8002a10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	2b04      	cmp	r3, #4
 8002952:	d005      	beq.n	8002960 <HAL_RCC_OscConfig+0x310>
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	2b0c      	cmp	r3, #12
 8002958:	d119      	bne.n	800298e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2b02      	cmp	r3, #2
 800295e:	d116      	bne.n	800298e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002960:	4b7c      	ldr	r3, [pc, #496]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_RCC_OscConfig+0x328>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e23f      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002978:	4b76      	ldr	r3, [pc, #472]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	061b      	lsls	r3, r3, #24
 8002986:	4973      	ldr	r1, [pc, #460]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800298c:	e040      	b.n	8002a10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d023      	beq.n	80029de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002996:	4b6f      	ldr	r3, [pc, #444]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a6e      	ldr	r2, [pc, #440]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 800299c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a2:	f7fe fe6d 	bl	8001680 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029aa:	f7fe fe69 	bl	8001680 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e21d      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029bc:	4b65      	ldr	r3, [pc, #404]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c8:	4b62      	ldr	r3, [pc, #392]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	061b      	lsls	r3, r3, #24
 80029d6:	495f      	ldr	r1, [pc, #380]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	604b      	str	r3, [r1, #4]
 80029dc:	e018      	b.n	8002a10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029de:	4b5d      	ldr	r3, [pc, #372]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a5c      	ldr	r2, [pc, #368]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 80029e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7fe fe49 	bl	8001680 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f2:	f7fe fe45 	bl	8001680 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e1f9      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a04:	4b53      	ldr	r3, [pc, #332]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f0      	bne.n	80029f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d03c      	beq.n	8002a96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01c      	beq.n	8002a5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a24:	4b4b      	ldr	r3, [pc, #300]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a2a:	4a4a      	ldr	r2, [pc, #296]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a34:	f7fe fe24 	bl	8001680 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a3c:	f7fe fe20 	bl	8001680 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e1d4      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a4e:	4b41      	ldr	r3, [pc, #260]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0ef      	beq.n	8002a3c <HAL_RCC_OscConfig+0x3ec>
 8002a5c:	e01b      	b.n	8002a96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a64:	4a3b      	ldr	r2, [pc, #236]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002a66:	f023 0301 	bic.w	r3, r3, #1
 8002a6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6e:	f7fe fe07 	bl	8001680 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a76:	f7fe fe03 	bl	8001680 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e1b7      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a88:	4b32      	ldr	r3, [pc, #200]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1ef      	bne.n	8002a76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 80a6 	beq.w	8002bf0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10d      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab4:	4b27      	ldr	r3, [pc, #156]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab8:	4a26      	ldr	r2, [pc, #152]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002aba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002abe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ac0:	4b24      	ldr	r3, [pc, #144]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002acc:	2301      	movs	r3, #1
 8002ace:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ad0:	4b21      	ldr	r3, [pc, #132]	@ (8002b58 <HAL_RCC_OscConfig+0x508>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d118      	bne.n	8002b0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002adc:	4b1e      	ldr	r3, [pc, #120]	@ (8002b58 <HAL_RCC_OscConfig+0x508>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b58 <HAL_RCC_OscConfig+0x508>)
 8002ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ae6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ae8:	f7fe fdca 	bl	8001680 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af0:	f7fe fdc6 	bl	8001680 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e17a      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b02:	4b15      	ldr	r3, [pc, #84]	@ (8002b58 <HAL_RCC_OscConfig+0x508>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d108      	bne.n	8002b28 <HAL_RCC_OscConfig+0x4d8>
 8002b16:	4b0f      	ldr	r3, [pc, #60]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b26:	e029      	b.n	8002b7c <HAL_RCC_OscConfig+0x52c>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b05      	cmp	r3, #5
 8002b2e:	d115      	bne.n	8002b5c <HAL_RCC_OscConfig+0x50c>
 8002b30:	4b08      	ldr	r3, [pc, #32]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b36:	4a07      	ldr	r2, [pc, #28]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002b38:	f043 0304 	orr.w	r3, r3, #4
 8002b3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b40:	4b04      	ldr	r3, [pc, #16]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b46:	4a03      	ldr	r2, [pc, #12]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b50:	e014      	b.n	8002b7c <HAL_RCC_OscConfig+0x52c>
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40007000 	.word	0x40007000
 8002b5c:	4b9c      	ldr	r3, [pc, #624]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b62:	4a9b      	ldr	r2, [pc, #620]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b6c:	4b98      	ldr	r3, [pc, #608]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b72:	4a97      	ldr	r2, [pc, #604]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002b74:	f023 0304 	bic.w	r3, r3, #4
 8002b78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d016      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b84:	f7fe fd7c 	bl	8001680 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8c:	f7fe fd78 	bl	8001680 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e12a      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba2:	4b8b      	ldr	r3, [pc, #556]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0ed      	beq.n	8002b8c <HAL_RCC_OscConfig+0x53c>
 8002bb0:	e015      	b.n	8002bde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb2:	f7fe fd65 	bl	8001680 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bb8:	e00a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bba:	f7fe fd61 	bl	8001680 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e113      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bd0:	4b7f      	ldr	r3, [pc, #508]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1ed      	bne.n	8002bba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bde:	7ffb      	ldrb	r3, [r7, #31]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d105      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be4:	4b7a      	ldr	r3, [pc, #488]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be8:	4a79      	ldr	r2, [pc, #484]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002bea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bee:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80fe 	beq.w	8002df6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	f040 80d0 	bne.w	8002da4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c04:	4b72      	ldr	r3, [pc, #456]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f003 0203 	and.w	r2, r3, #3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d130      	bne.n	8002c7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c22:	3b01      	subs	r3, #1
 8002c24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d127      	bne.n	8002c7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d11f      	bne.n	8002c7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c44:	2a07      	cmp	r2, #7
 8002c46:	bf14      	ite	ne
 8002c48:	2201      	movne	r2, #1
 8002c4a:	2200      	moveq	r2, #0
 8002c4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d113      	bne.n	8002c7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c5c:	085b      	lsrs	r3, r3, #1
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d109      	bne.n	8002c7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	085b      	lsrs	r3, r3, #1
 8002c72:	3b01      	subs	r3, #1
 8002c74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d06e      	beq.n	8002d58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	2b0c      	cmp	r3, #12
 8002c7e:	d069      	beq.n	8002d54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c80:	4b53      	ldr	r3, [pc, #332]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d105      	bne.n	8002c98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c8c:	4b50      	ldr	r3, [pc, #320]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0ad      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c9c:	4b4c      	ldr	r3, [pc, #304]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a4b      	ldr	r2, [pc, #300]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002ca2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ca6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ca8:	f7fe fcea 	bl	8001680 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7fe fce6 	bl	8001680 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e09a      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc2:	4b43      	ldr	r3, [pc, #268]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cce:	4b40      	ldr	r3, [pc, #256]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	4b40      	ldr	r3, [pc, #256]	@ (8002dd4 <HAL_RCC_OscConfig+0x784>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002cde:	3a01      	subs	r2, #1
 8002ce0:	0112      	lsls	r2, r2, #4
 8002ce2:	4311      	orrs	r1, r2
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ce8:	0212      	lsls	r2, r2, #8
 8002cea:	4311      	orrs	r1, r2
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002cf0:	0852      	lsrs	r2, r2, #1
 8002cf2:	3a01      	subs	r2, #1
 8002cf4:	0552      	lsls	r2, r2, #21
 8002cf6:	4311      	orrs	r1, r2
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002cfc:	0852      	lsrs	r2, r2, #1
 8002cfe:	3a01      	subs	r2, #1
 8002d00:	0652      	lsls	r2, r2, #25
 8002d02:	4311      	orrs	r1, r2
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d08:	0912      	lsrs	r2, r2, #4
 8002d0a:	0452      	lsls	r2, r2, #17
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	4930      	ldr	r1, [pc, #192]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d14:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a2d      	ldr	r2, [pc, #180]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d20:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4a2a      	ldr	r2, [pc, #168]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d2c:	f7fe fca8 	bl	8001680 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d34:	f7fe fca4 	bl	8001680 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e058      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d46:	4b22      	ldr	r3, [pc, #136]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d52:	e050      	b.n	8002df6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e04f      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d58:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d148      	bne.n	8002df6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d64:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a19      	ldr	r2, [pc, #100]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d70:	4b17      	ldr	r3, [pc, #92]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4a16      	ldr	r2, [pc, #88]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d7c:	f7fe fc80 	bl	8001680 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d84:	f7fe fc7c 	bl	8001680 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e030      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d96:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0x734>
 8002da2:	e028      	b.n	8002df6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	d023      	beq.n	8002df2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002daa:	4b09      	ldr	r3, [pc, #36]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a08      	ldr	r2, [pc, #32]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002db0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db6:	f7fe fc63 	bl	8001680 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dbc:	e00c      	b.n	8002dd8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbe:	f7fe fc5f 	bl	8001680 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d905      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e013      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd8:	4b09      	ldr	r3, [pc, #36]	@ (8002e00 <HAL_RCC_OscConfig+0x7b0>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1ec      	bne.n	8002dbe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002de4:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <HAL_RCC_OscConfig+0x7b0>)
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	4905      	ldr	r1, [pc, #20]	@ (8002e00 <HAL_RCC_OscConfig+0x7b0>)
 8002dea:	4b06      	ldr	r3, [pc, #24]	@ (8002e04 <HAL_RCC_OscConfig+0x7b4>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	60cb      	str	r3, [r1, #12]
 8002df0:	e001      	b.n	8002df6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3720      	adds	r7, #32
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000
 8002e04:	feeefffc 	.word	0xfeeefffc

08002e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0e7      	b.n	8002fec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e1c:	4b75      	ldr	r3, [pc, #468]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d910      	bls.n	8002e4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	4b72      	ldr	r3, [pc, #456]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 0207 	bic.w	r2, r3, #7
 8002e32:	4970      	ldr	r1, [pc, #448]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b6e      	ldr	r3, [pc, #440]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0cf      	b.n	8002fec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d010      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	4b66      	ldr	r3, [pc, #408]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d908      	bls.n	8002e7a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e68:	4b63      	ldr	r3, [pc, #396]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	4960      	ldr	r1, [pc, #384]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d04c      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d107      	bne.n	8002e9e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e8e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d121      	bne.n	8002ede <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e0a6      	b.n	8002fec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d107      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ea6:	4b54      	ldr	r3, [pc, #336]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d115      	bne.n	8002ede <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e09a      	b.n	8002fec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d107      	bne.n	8002ece <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ebe:	4b4e      	ldr	r3, [pc, #312]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d109      	bne.n	8002ede <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e08e      	b.n	8002fec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ece:	4b4a      	ldr	r3, [pc, #296]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e086      	b.n	8002fec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ede:	4b46      	ldr	r3, [pc, #280]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f023 0203 	bic.w	r2, r3, #3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	4943      	ldr	r1, [pc, #268]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef0:	f7fe fbc6 	bl	8001680 <HAL_GetTick>
 8002ef4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef6:	e00a      	b.n	8002f0e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef8:	f7fe fbc2 	bl	8001680 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e06e      	b.n	8002fec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0e:	4b3a      	ldr	r3, [pc, #232]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 020c 	and.w	r2, r3, #12
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d1eb      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d010      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	4b31      	ldr	r3, [pc, #196]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d208      	bcs.n	8002f4e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	492b      	ldr	r1, [pc, #172]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f4e:	4b29      	ldr	r3, [pc, #164]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d210      	bcs.n	8002f7e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5c:	4b25      	ldr	r3, [pc, #148]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f023 0207 	bic.w	r2, r3, #7
 8002f64:	4923      	ldr	r1, [pc, #140]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6c:	4b21      	ldr	r3, [pc, #132]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d001      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e036      	b.n	8002fec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d008      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	4918      	ldr	r1, [pc, #96]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d009      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fa8:	4b13      	ldr	r3, [pc, #76]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4910      	ldr	r1, [pc, #64]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fbc:	f000 f824 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	091b      	lsrs	r3, r3, #4
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	490b      	ldr	r1, [pc, #44]	@ (8002ffc <HAL_RCC_ClockConfig+0x1f4>)
 8002fce:	5ccb      	ldrb	r3, [r1, r3]
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd8:	4a09      	ldr	r2, [pc, #36]	@ (8003000 <HAL_RCC_ClockConfig+0x1f8>)
 8002fda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fdc:	4b09      	ldr	r3, [pc, #36]	@ (8003004 <HAL_RCC_ClockConfig+0x1fc>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fe fafd 	bl	80015e0 <HAL_InitTick>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002fea:	7afb      	ldrb	r3, [r7, #11]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40022000 	.word	0x40022000
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	08008d2c 	.word	0x08008d2c
 8003000:	20000000 	.word	0x20000000
 8003004:	20000004 	.word	0x20000004

08003008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003008:	b480      	push	{r7}
 800300a:	b089      	sub	sp, #36	@ 0x24
 800300c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
 8003012:	2300      	movs	r3, #0
 8003014:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003016:	4b3e      	ldr	r3, [pc, #248]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x108>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 030c 	and.w	r3, r3, #12
 800301e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003020:	4b3b      	ldr	r3, [pc, #236]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x108>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0x34>
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	2b0c      	cmp	r3, #12
 8003034:	d121      	bne.n	800307a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d11e      	bne.n	800307a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800303c:	4b34      	ldr	r3, [pc, #208]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x108>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b00      	cmp	r3, #0
 8003046:	d107      	bne.n	8003058 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003048:	4b31      	ldr	r3, [pc, #196]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x108>)
 800304a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800304e:	0a1b      	lsrs	r3, r3, #8
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	61fb      	str	r3, [r7, #28]
 8003056:	e005      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003058:	4b2d      	ldr	r3, [pc, #180]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x108>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003064:	4a2b      	ldr	r2, [pc, #172]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800306c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10d      	bne.n	8003090 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003078:	e00a      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	2b04      	cmp	r3, #4
 800307e:	d102      	bne.n	8003086 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003080:	4b25      	ldr	r3, [pc, #148]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x110>)
 8003082:	61bb      	str	r3, [r7, #24]
 8003084:	e004      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	2b08      	cmp	r3, #8
 800308a:	d101      	bne.n	8003090 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800308c:	4b23      	ldr	r3, [pc, #140]	@ (800311c <HAL_RCC_GetSysClockFreq+0x114>)
 800308e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	2b0c      	cmp	r3, #12
 8003094:	d134      	bne.n	8003100 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003096:	4b1e      	ldr	r3, [pc, #120]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x108>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d003      	beq.n	80030ae <HAL_RCC_GetSysClockFreq+0xa6>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d003      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0xac>
 80030ac:	e005      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x110>)
 80030b0:	617b      	str	r3, [r7, #20]
      break;
 80030b2:	e005      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030b4:	4b19      	ldr	r3, [pc, #100]	@ (800311c <HAL_RCC_GetSysClockFreq+0x114>)
 80030b6:	617b      	str	r3, [r7, #20]
      break;
 80030b8:	e002      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	617b      	str	r3, [r7, #20]
      break;
 80030be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030c0:	4b13      	ldr	r3, [pc, #76]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x108>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	3301      	adds	r3, #1
 80030cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030ce:	4b10      	ldr	r3, [pc, #64]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x108>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	0a1b      	lsrs	r3, r3, #8
 80030d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	fb03 f202 	mul.w	r2, r3, r2
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x108>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	0e5b      	lsrs	r3, r3, #25
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	3301      	adds	r3, #1
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003100:	69bb      	ldr	r3, [r7, #24]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3724      	adds	r7, #36	@ 0x24
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40021000 	.word	0x40021000
 8003114:	08008d44 	.word	0x08008d44
 8003118:	00f42400 	.word	0x00f42400
 800311c:	007a1200 	.word	0x007a1200

08003120 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003124:	4b03      	ldr	r3, [pc, #12]	@ (8003134 <HAL_RCC_GetHCLKFreq+0x14>)
 8003126:	681b      	ldr	r3, [r3, #0]
}
 8003128:	4618      	mov	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	20000000 	.word	0x20000000

08003138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800313c:	f7ff fff0 	bl	8003120 <HAL_RCC_GetHCLKFreq>
 8003140:	4602      	mov	r2, r0
 8003142:	4b06      	ldr	r3, [pc, #24]	@ (800315c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	0a1b      	lsrs	r3, r3, #8
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	4904      	ldr	r1, [pc, #16]	@ (8003160 <HAL_RCC_GetPCLK1Freq+0x28>)
 800314e:	5ccb      	ldrb	r3, [r1, r3]
 8003150:	f003 031f 	and.w	r3, r3, #31
 8003154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000
 8003160:	08008d3c 	.word	0x08008d3c

08003164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003168:	f7ff ffda 	bl	8003120 <HAL_RCC_GetHCLKFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	4b06      	ldr	r3, [pc, #24]	@ (8003188 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	0adb      	lsrs	r3, r3, #11
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	4904      	ldr	r1, [pc, #16]	@ (800318c <HAL_RCC_GetPCLK2Freq+0x28>)
 800317a:	5ccb      	ldrb	r3, [r1, r3]
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003184:	4618      	mov	r0, r3
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40021000 	.word	0x40021000
 800318c:	08008d3c 	.word	0x08008d3c

08003190 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003198:	2300      	movs	r3, #0
 800319a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800319c:	4b2a      	ldr	r3, [pc, #168]	@ (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800319e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031a8:	f7ff f922 	bl	80023f0 <HAL_PWREx_GetVoltageRange>
 80031ac:	6178      	str	r0, [r7, #20]
 80031ae:	e014      	b.n	80031da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031b0:	4b25      	ldr	r3, [pc, #148]	@ (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b4:	4a24      	ldr	r2, [pc, #144]	@ (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80031bc:	4b22      	ldr	r3, [pc, #136]	@ (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031c8:	f7ff f912 	bl	80023f0 <HAL_PWREx_GetVoltageRange>
 80031cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031e0:	d10b      	bne.n	80031fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b80      	cmp	r3, #128	@ 0x80
 80031e6:	d919      	bls.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2ba0      	cmp	r3, #160	@ 0xa0
 80031ec:	d902      	bls.n	80031f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031ee:	2302      	movs	r3, #2
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	e013      	b.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031f4:	2301      	movs	r3, #1
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	e010      	b.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b80      	cmp	r3, #128	@ 0x80
 80031fe:	d902      	bls.n	8003206 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003200:	2303      	movs	r3, #3
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	e00a      	b.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b80      	cmp	r3, #128	@ 0x80
 800320a:	d102      	bne.n	8003212 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800320c:	2302      	movs	r3, #2
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	e004      	b.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b70      	cmp	r3, #112	@ 0x70
 8003216:	d101      	bne.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003218:	2301      	movs	r3, #1
 800321a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800321c:	4b0b      	ldr	r3, [pc, #44]	@ (800324c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f023 0207 	bic.w	r2, r3, #7
 8003224:	4909      	ldr	r1, [pc, #36]	@ (800324c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800322c:	4b07      	ldr	r3, [pc, #28]	@ (800324c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	429a      	cmp	r2, r3
 8003238:	d001      	beq.n	800323e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40021000 	.word	0x40021000
 800324c:	40022000 	.word	0x40022000

08003250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003258:	2300      	movs	r3, #0
 800325a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800325c:	2300      	movs	r3, #0
 800325e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003268:	2b00      	cmp	r3, #0
 800326a:	d041      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003270:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003274:	d02a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003276:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800327a:	d824      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800327c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003280:	d008      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003282:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003286:	d81e      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00a      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800328c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003290:	d010      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003292:	e018      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003294:	4b86      	ldr	r3, [pc, #536]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4a85      	ldr	r2, [pc, #532]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800329e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032a0:	e015      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3304      	adds	r3, #4
 80032a6:	2100      	movs	r1, #0
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 facb 	bl	8003844 <RCCEx_PLLSAI1_Config>
 80032ae:	4603      	mov	r3, r0
 80032b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032b2:	e00c      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3320      	adds	r3, #32
 80032b8:	2100      	movs	r1, #0
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fbb6 	bl	8003a2c <RCCEx_PLLSAI2_Config>
 80032c0:	4603      	mov	r3, r0
 80032c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032c4:	e003      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	74fb      	strb	r3, [r7, #19]
      break;
 80032ca:	e000      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80032cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ce:	7cfb      	ldrb	r3, [r7, #19]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10b      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032d4:	4b76      	ldr	r3, [pc, #472]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032e2:	4973      	ldr	r1, [pc, #460]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80032ea:	e001      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ec:	7cfb      	ldrb	r3, [r7, #19]
 80032ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d041      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003300:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003304:	d02a      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003306:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800330a:	d824      	bhi.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800330c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003310:	d008      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003312:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003316:	d81e      	bhi.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800331c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003320:	d010      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003322:	e018      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003324:	4b62      	ldr	r3, [pc, #392]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4a61      	ldr	r2, [pc, #388]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800332e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003330:	e015      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3304      	adds	r3, #4
 8003336:	2100      	movs	r1, #0
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fa83 	bl	8003844 <RCCEx_PLLSAI1_Config>
 800333e:	4603      	mov	r3, r0
 8003340:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003342:	e00c      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3320      	adds	r3, #32
 8003348:	2100      	movs	r1, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fb6e 	bl	8003a2c <RCCEx_PLLSAI2_Config>
 8003350:	4603      	mov	r3, r0
 8003352:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003354:	e003      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	74fb      	strb	r3, [r7, #19]
      break;
 800335a:	e000      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800335c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800335e:	7cfb      	ldrb	r3, [r7, #19]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10b      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003364:	4b52      	ldr	r3, [pc, #328]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800336a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003372:	494f      	ldr	r1, [pc, #316]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800337a:	e001      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800337c:	7cfb      	ldrb	r3, [r7, #19]
 800337e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80a0 	beq.w	80034ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800338e:	2300      	movs	r3, #0
 8003390:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003392:	4b47      	ldr	r3, [pc, #284]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80033a2:	2300      	movs	r3, #0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00d      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a8:	4b41      	ldr	r3, [pc, #260]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ac:	4a40      	ldr	r2, [pc, #256]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80033b4:	4b3e      	ldr	r3, [pc, #248]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c0:	2301      	movs	r3, #1
 80033c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033c4:	4b3b      	ldr	r3, [pc, #236]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a3a      	ldr	r2, [pc, #232]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033d0:	f7fe f956 	bl	8001680 <HAL_GetTick>
 80033d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033d6:	e009      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d8:	f7fe f952 	bl	8001680 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d902      	bls.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	74fb      	strb	r3, [r7, #19]
        break;
 80033ea:	e005      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033ec:	4b31      	ldr	r3, [pc, #196]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0ef      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033f8:	7cfb      	ldrb	r3, [r7, #19]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d15c      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033fe:	4b2c      	ldr	r3, [pc, #176]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003404:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003408:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01f      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	429a      	cmp	r2, r3
 800341a:	d019      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800341c:	4b24      	ldr	r3, [pc, #144]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003422:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003426:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003428:	4b21      	ldr	r3, [pc, #132]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800342e:	4a20      	ldr	r2, [pc, #128]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003434:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003438:	4b1d      	ldr	r3, [pc, #116]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343e:	4a1c      	ldr	r2, [pc, #112]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003440:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003448:	4a19      	ldr	r2, [pc, #100]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d016      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345a:	f7fe f911 	bl	8001680 <HAL_GetTick>
 800345e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003460:	e00b      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003462:	f7fe f90d 	bl	8001680 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003470:	4293      	cmp	r3, r2
 8003472:	d902      	bls.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	74fb      	strb	r3, [r7, #19]
            break;
 8003478:	e006      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800347a:	4b0d      	ldr	r3, [pc, #52]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0ec      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003488:	7cfb      	ldrb	r3, [r7, #19]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10c      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800348e:	4b08      	ldr	r3, [pc, #32]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003494:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800349e:	4904      	ldr	r1, [pc, #16]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80034a6:	e009      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
 80034aa:	74bb      	strb	r3, [r7, #18]
 80034ac:	e006      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80034ae:	bf00      	nop
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b8:	7cfb      	ldrb	r3, [r7, #19]
 80034ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034bc:	7c7b      	ldrb	r3, [r7, #17]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d105      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c2:	4b9e      	ldr	r3, [pc, #632]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c6:	4a9d      	ldr	r2, [pc, #628]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034da:	4b98      	ldr	r3, [pc, #608]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e0:	f023 0203 	bic.w	r2, r3, #3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e8:	4994      	ldr	r1, [pc, #592]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034fc:	4b8f      	ldr	r3, [pc, #572]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003502:	f023 020c 	bic.w	r2, r3, #12
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800350a:	498c      	ldr	r1, [pc, #560]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800351e:	4b87      	ldr	r3, [pc, #540]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003524:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352c:	4983      	ldr	r1, [pc, #524]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00a      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003540:	4b7e      	ldr	r3, [pc, #504]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003546:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354e:	497b      	ldr	r1, [pc, #492]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003562:	4b76      	ldr	r3, [pc, #472]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003568:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003570:	4972      	ldr	r1, [pc, #456]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003584:	4b6d      	ldr	r3, [pc, #436]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003592:	496a      	ldr	r1, [pc, #424]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035a6:	4b65      	ldr	r3, [pc, #404]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b4:	4961      	ldr	r1, [pc, #388]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035c8:	4b5c      	ldr	r3, [pc, #368]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035d6:	4959      	ldr	r1, [pc, #356]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035ea:	4b54      	ldr	r3, [pc, #336]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f8:	4950      	ldr	r1, [pc, #320]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800360c:	4b4b      	ldr	r3, [pc, #300]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003612:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361a:	4948      	ldr	r1, [pc, #288]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800362e:	4b43      	ldr	r3, [pc, #268]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003634:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363c:	493f      	ldr	r1, [pc, #252]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d028      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003650:	4b3a      	ldr	r3, [pc, #232]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003656:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800365e:	4937      	ldr	r1, [pc, #220]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800366a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800366e:	d106      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003670:	4b32      	ldr	r3, [pc, #200]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4a31      	ldr	r2, [pc, #196]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800367a:	60d3      	str	r3, [r2, #12]
 800367c:	e011      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003682:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003686:	d10c      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3304      	adds	r3, #4
 800368c:	2101      	movs	r1, #1
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f8d8 	bl	8003844 <RCCEx_PLLSAI1_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003698:	7cfb      	ldrb	r3, [r7, #19]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800369e:	7cfb      	ldrb	r3, [r7, #19]
 80036a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d028      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036ae:	4b23      	ldr	r3, [pc, #140]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036bc:	491f      	ldr	r1, [pc, #124]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036cc:	d106      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ce:	4b1b      	ldr	r3, [pc, #108]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	4a1a      	ldr	r2, [pc, #104]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036d8:	60d3      	str	r3, [r2, #12]
 80036da:	e011      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036e4:	d10c      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3304      	adds	r3, #4
 80036ea:	2101      	movs	r1, #1
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 f8a9 	bl	8003844 <RCCEx_PLLSAI1_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036f6:	7cfb      	ldrb	r3, [r7, #19]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d02b      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800370c:	4b0b      	ldr	r3, [pc, #44]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003712:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800371a:	4908      	ldr	r1, [pc, #32]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003726:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800372a:	d109      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800372c:	4b03      	ldr	r3, [pc, #12]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4a02      	ldr	r2, [pc, #8]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003732:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003736:	60d3      	str	r3, [r2, #12]
 8003738:	e014      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003744:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003748:	d10c      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3304      	adds	r3, #4
 800374e:	2101      	movs	r1, #1
 8003750:	4618      	mov	r0, r3
 8003752:	f000 f877 	bl	8003844 <RCCEx_PLLSAI1_Config>
 8003756:	4603      	mov	r3, r0
 8003758:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800375a:	7cfb      	ldrb	r3, [r7, #19]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d02f      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003770:	4b2b      	ldr	r3, [pc, #172]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003776:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800377e:	4928      	ldr	r1, [pc, #160]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800378a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800378e:	d10d      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3304      	adds	r3, #4
 8003794:	2102      	movs	r1, #2
 8003796:	4618      	mov	r0, r3
 8003798:	f000 f854 	bl	8003844 <RCCEx_PLLSAI1_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037a0:	7cfb      	ldrb	r3, [r7, #19]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d014      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037a6:	7cfb      	ldrb	r3, [r7, #19]
 80037a8:	74bb      	strb	r3, [r7, #18]
 80037aa:	e011      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037b4:	d10c      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3320      	adds	r3, #32
 80037ba:	2102      	movs	r1, #2
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 f935 	bl	8003a2c <RCCEx_PLLSAI2_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037c6:	7cfb      	ldrb	r3, [r7, #19]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037cc:	7cfb      	ldrb	r3, [r7, #19]
 80037ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037dc:	4b10      	ldr	r3, [pc, #64]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037ea:	490d      	ldr	r1, [pc, #52]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00b      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037fe:	4b08      	ldr	r3, [pc, #32]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003804:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800380e:	4904      	ldr	r1, [pc, #16]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003816:	7cbb      	ldrb	r3, [r7, #18]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40021000 	.word	0x40021000

08003824 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003828:	4b05      	ldr	r3, [pc, #20]	@ (8003840 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a04      	ldr	r2, [pc, #16]	@ (8003840 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800382e:	f043 0304 	orr.w	r3, r3, #4
 8003832:	6013      	str	r3, [r2, #0]
}
 8003834:	bf00      	nop
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000

08003844 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003852:	4b75      	ldr	r3, [pc, #468]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d018      	beq.n	8003890 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800385e:	4b72      	ldr	r3, [pc, #456]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f003 0203 	and.w	r2, r3, #3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d10d      	bne.n	800388a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
       ||
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003876:	4b6c      	ldr	r3, [pc, #432]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	091b      	lsrs	r3, r3, #4
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
       ||
 8003886:	429a      	cmp	r2, r3
 8003888:	d047      	beq.n	800391a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	73fb      	strb	r3, [r7, #15]
 800388e:	e044      	b.n	800391a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b03      	cmp	r3, #3
 8003896:	d018      	beq.n	80038ca <RCCEx_PLLSAI1_Config+0x86>
 8003898:	2b03      	cmp	r3, #3
 800389a:	d825      	bhi.n	80038e8 <RCCEx_PLLSAI1_Config+0xa4>
 800389c:	2b01      	cmp	r3, #1
 800389e:	d002      	beq.n	80038a6 <RCCEx_PLLSAI1_Config+0x62>
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d009      	beq.n	80038b8 <RCCEx_PLLSAI1_Config+0x74>
 80038a4:	e020      	b.n	80038e8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038a6:	4b60      	ldr	r3, [pc, #384]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d11d      	bne.n	80038ee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b6:	e01a      	b.n	80038ee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038b8:	4b5b      	ldr	r3, [pc, #364]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d116      	bne.n	80038f2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038c8:	e013      	b.n	80038f2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038ca:	4b57      	ldr	r3, [pc, #348]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10f      	bne.n	80038f6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038d6:	4b54      	ldr	r3, [pc, #336]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038e6:	e006      	b.n	80038f6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	73fb      	strb	r3, [r7, #15]
      break;
 80038ec:	e004      	b.n	80038f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038ee:	bf00      	nop
 80038f0:	e002      	b.n	80038f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038f2:	bf00      	nop
 80038f4:	e000      	b.n	80038f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10d      	bne.n	800391a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6819      	ldr	r1, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	3b01      	subs	r3, #1
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	430b      	orrs	r3, r1
 8003914:	4944      	ldr	r1, [pc, #272]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003916:	4313      	orrs	r3, r2
 8003918:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800391a:	7bfb      	ldrb	r3, [r7, #15]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d17d      	bne.n	8003a1c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003920:	4b41      	ldr	r3, [pc, #260]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a40      	ldr	r2, [pc, #256]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003926:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800392a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800392c:	f7fd fea8 	bl	8001680 <HAL_GetTick>
 8003930:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003932:	e009      	b.n	8003948 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003934:	f7fd fea4 	bl	8001680 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d902      	bls.n	8003948 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	73fb      	strb	r3, [r7, #15]
        break;
 8003946:	e005      	b.n	8003954 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003948:	4b37      	ldr	r3, [pc, #220]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1ef      	bne.n	8003934 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d160      	bne.n	8003a1c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d111      	bne.n	8003984 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003960:	4b31      	ldr	r3, [pc, #196]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003968:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6892      	ldr	r2, [r2, #8]
 8003970:	0211      	lsls	r1, r2, #8
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68d2      	ldr	r2, [r2, #12]
 8003976:	0912      	lsrs	r2, r2, #4
 8003978:	0452      	lsls	r2, r2, #17
 800397a:	430a      	orrs	r2, r1
 800397c:	492a      	ldr	r1, [pc, #168]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397e:	4313      	orrs	r3, r2
 8003980:	610b      	str	r3, [r1, #16]
 8003982:	e027      	b.n	80039d4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d112      	bne.n	80039b0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800398a:	4b27      	ldr	r3, [pc, #156]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003992:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6892      	ldr	r2, [r2, #8]
 800399a:	0211      	lsls	r1, r2, #8
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6912      	ldr	r2, [r2, #16]
 80039a0:	0852      	lsrs	r2, r2, #1
 80039a2:	3a01      	subs	r2, #1
 80039a4:	0552      	lsls	r2, r2, #21
 80039a6:	430a      	orrs	r2, r1
 80039a8:	491f      	ldr	r1, [pc, #124]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	610b      	str	r3, [r1, #16]
 80039ae:	e011      	b.n	80039d4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80039b8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6892      	ldr	r2, [r2, #8]
 80039c0:	0211      	lsls	r1, r2, #8
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6952      	ldr	r2, [r2, #20]
 80039c6:	0852      	lsrs	r2, r2, #1
 80039c8:	3a01      	subs	r2, #1
 80039ca:	0652      	lsls	r2, r2, #25
 80039cc:	430a      	orrs	r2, r1
 80039ce:	4916      	ldr	r1, [pc, #88]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039d4:	4b14      	ldr	r3, [pc, #80]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a13      	ldr	r2, [pc, #76]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e0:	f7fd fe4e 	bl	8001680 <HAL_GetTick>
 80039e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039e6:	e009      	b.n	80039fc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039e8:	f7fd fe4a 	bl	8001680 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d902      	bls.n	80039fc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	73fb      	strb	r3, [r7, #15]
          break;
 80039fa:	e005      	b.n	8003a08 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0ef      	beq.n	80039e8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a0e:	4b06      	ldr	r3, [pc, #24]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a10:	691a      	ldr	r2, [r3, #16]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	4904      	ldr	r1, [pc, #16]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40021000 	.word	0x40021000

08003a2c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a3a:	4b6a      	ldr	r3, [pc, #424]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d018      	beq.n	8003a78 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a46:	4b67      	ldr	r3, [pc, #412]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f003 0203 	and.w	r2, r3, #3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d10d      	bne.n	8003a72 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
       ||
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a5e:	4b61      	ldr	r3, [pc, #388]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	091b      	lsrs	r3, r3, #4
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d047      	beq.n	8003b02 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
 8003a76:	e044      	b.n	8003b02 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d018      	beq.n	8003ab2 <RCCEx_PLLSAI2_Config+0x86>
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d825      	bhi.n	8003ad0 <RCCEx_PLLSAI2_Config+0xa4>
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d002      	beq.n	8003a8e <RCCEx_PLLSAI2_Config+0x62>
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d009      	beq.n	8003aa0 <RCCEx_PLLSAI2_Config+0x74>
 8003a8c:	e020      	b.n	8003ad0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a8e:	4b55      	ldr	r3, [pc, #340]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d11d      	bne.n	8003ad6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9e:	e01a      	b.n	8003ad6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003aa0:	4b50      	ldr	r3, [pc, #320]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d116      	bne.n	8003ada <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab0:	e013      	b.n	8003ada <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ab2:	4b4c      	ldr	r3, [pc, #304]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10f      	bne.n	8003ade <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003abe:	4b49      	ldr	r3, [pc, #292]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ace:	e006      	b.n	8003ade <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad4:	e004      	b.n	8003ae0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ad6:	bf00      	nop
 8003ad8:	e002      	b.n	8003ae0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ada:	bf00      	nop
 8003adc:	e000      	b.n	8003ae0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ade:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10d      	bne.n	8003b02 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ae6:	4b3f      	ldr	r3, [pc, #252]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6819      	ldr	r1, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	430b      	orrs	r3, r1
 8003afc:	4939      	ldr	r1, [pc, #228]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d167      	bne.n	8003bd8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b08:	4b36      	ldr	r3, [pc, #216]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a35      	ldr	r2, [pc, #212]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b14:	f7fd fdb4 	bl	8001680 <HAL_GetTick>
 8003b18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b1a:	e009      	b.n	8003b30 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b1c:	f7fd fdb0 	bl	8001680 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d902      	bls.n	8003b30 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b2e:	e005      	b.n	8003b3c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b30:	4b2c      	ldr	r3, [pc, #176]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1ef      	bne.n	8003b1c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d14a      	bne.n	8003bd8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d111      	bne.n	8003b6c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b48:	4b26      	ldr	r3, [pc, #152]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003b50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6892      	ldr	r2, [r2, #8]
 8003b58:	0211      	lsls	r1, r2, #8
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	68d2      	ldr	r2, [r2, #12]
 8003b5e:	0912      	lsrs	r2, r2, #4
 8003b60:	0452      	lsls	r2, r2, #17
 8003b62:	430a      	orrs	r2, r1
 8003b64:	491f      	ldr	r1, [pc, #124]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	614b      	str	r3, [r1, #20]
 8003b6a:	e011      	b.n	8003b90 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003b74:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6892      	ldr	r2, [r2, #8]
 8003b7c:	0211      	lsls	r1, r2, #8
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6912      	ldr	r2, [r2, #16]
 8003b82:	0852      	lsrs	r2, r2, #1
 8003b84:	3a01      	subs	r2, #1
 8003b86:	0652      	lsls	r2, r2, #25
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	4916      	ldr	r1, [pc, #88]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b90:	4b14      	ldr	r3, [pc, #80]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a13      	ldr	r2, [pc, #76]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9c:	f7fd fd70 	bl	8001680 <HAL_GetTick>
 8003ba0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ba2:	e009      	b.n	8003bb8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ba4:	f7fd fd6c 	bl	8001680 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d902      	bls.n	8003bb8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	73fb      	strb	r3, [r7, #15]
          break;
 8003bb6:	e005      	b.n	8003bc4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0ef      	beq.n	8003ba4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d106      	bne.n	8003bd8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bca:	4b06      	ldr	r3, [pc, #24]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	4904      	ldr	r1, [pc, #16]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000

08003be8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e095      	b.n	8003d26 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d108      	bne.n	8003c14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c0a:	d009      	beq.n	8003c20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	61da      	str	r2, [r3, #28]
 8003c12:	e005      	b.n	8003c20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd fa54 	bl	80010e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c60:	d902      	bls.n	8003c68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	e002      	b.n	8003c6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003c76:	d007      	beq.n	8003c88 <HAL_SPI_Init+0xa0>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c80:	d002      	beq.n	8003c88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cca:	ea42 0103 	orr.w	r1, r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	0c1b      	lsrs	r3, r3, #16
 8003ce4:	f003 0204 	and.w	r2, r3, #4
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003d04:	ea42 0103 	orr.w	r1, r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e049      	b.n	8003dd4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d106      	bne.n	8003d5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7fd fa0b 	bl	8001170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	f000 f9d5 	bl	800411c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d001      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e04f      	b.n	8003e94 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a23      	ldr	r2, [pc, #140]	@ (8003ea0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d01d      	beq.n	8003e52 <HAL_TIM_Base_Start_IT+0x76>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e1e:	d018      	beq.n	8003e52 <HAL_TIM_Base_Start_IT+0x76>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d013      	beq.n	8003e52 <HAL_TIM_Base_Start_IT+0x76>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ea8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00e      	beq.n	8003e52 <HAL_TIM_Base_Start_IT+0x76>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1c      	ldr	r2, [pc, #112]	@ (8003eac <HAL_TIM_Base_Start_IT+0xd0>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d009      	beq.n	8003e52 <HAL_TIM_Base_Start_IT+0x76>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a1b      	ldr	r2, [pc, #108]	@ (8003eb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d004      	beq.n	8003e52 <HAL_TIM_Base_Start_IT+0x76>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a19      	ldr	r2, [pc, #100]	@ (8003eb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d115      	bne.n	8003e7e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	4b17      	ldr	r3, [pc, #92]	@ (8003eb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2b06      	cmp	r3, #6
 8003e62:	d015      	beq.n	8003e90 <HAL_TIM_Base_Start_IT+0xb4>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e6a:	d011      	beq.n	8003e90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7c:	e008      	b.n	8003e90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0201 	orr.w	r2, r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	e000      	b.n	8003e92 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	40012c00 	.word	0x40012c00
 8003ea4:	40000400 	.word	0x40000400
 8003ea8:	40000800 	.word	0x40000800
 8003eac:	40000c00 	.word	0x40000c00
 8003eb0:	40013400 	.word	0x40013400
 8003eb4:	40014000 	.word	0x40014000
 8003eb8:	00010007 	.word	0x00010007

08003ebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d020      	beq.n	8003f20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01b      	beq.n	8003f20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0202 	mvn.w	r2, #2
 8003ef0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f8e9 	bl	80040de <HAL_TIM_IC_CaptureCallback>
 8003f0c:	e005      	b.n	8003f1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f8db 	bl	80040ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f8ec 	bl	80040f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d020      	beq.n	8003f6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d01b      	beq.n	8003f6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0204 	mvn.w	r2, #4
 8003f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2202      	movs	r2, #2
 8003f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f8c3 	bl	80040de <HAL_TIM_IC_CaptureCallback>
 8003f58:	e005      	b.n	8003f66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f8b5 	bl	80040ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f8c6 	bl	80040f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d020      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01b      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f06f 0208 	mvn.w	r2, #8
 8003f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2204      	movs	r2, #4
 8003f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f89d 	bl	80040de <HAL_TIM_IC_CaptureCallback>
 8003fa4:	e005      	b.n	8003fb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f88f 	bl	80040ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f8a0 	bl	80040f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f003 0310 	and.w	r3, r3, #16
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d020      	beq.n	8004004 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f003 0310 	and.w	r3, r3, #16
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01b      	beq.n	8004004 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f06f 0210 	mvn.w	r2, #16
 8003fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2208      	movs	r2, #8
 8003fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f877 	bl	80040de <HAL_TIM_IC_CaptureCallback>
 8003ff0:	e005      	b.n	8003ffe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f869 	bl	80040ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f87a 	bl	80040f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00c      	beq.n	8004028 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d007      	beq.n	8004028 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f06f 0201 	mvn.w	r2, #1
 8004020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fc fea4 	bl	8000d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402e:	2b00      	cmp	r3, #0
 8004030:	d104      	bne.n	800403c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00c      	beq.n	8004056 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004042:	2b00      	cmp	r3, #0
 8004044:	d007      	beq.n	8004056 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800404e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f913 	bl	800427c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00c      	beq.n	800407a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004066:	2b00      	cmp	r3, #0
 8004068:	d007      	beq.n	800407a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f90b 	bl	8004290 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00c      	beq.n	800409e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	d007      	beq.n	800409e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f834 	bl	8004106 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f003 0320 	and.w	r3, r3, #32
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00c      	beq.n	80040c2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d007      	beq.n	80040c2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f06f 0220 	mvn.w	r2, #32
 80040ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f8d3 	bl	8004268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040c2:	bf00      	nop
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
	...

0800411c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a46      	ldr	r2, [pc, #280]	@ (8004248 <TIM_Base_SetConfig+0x12c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d013      	beq.n	800415c <TIM_Base_SetConfig+0x40>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800413a:	d00f      	beq.n	800415c <TIM_Base_SetConfig+0x40>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a43      	ldr	r2, [pc, #268]	@ (800424c <TIM_Base_SetConfig+0x130>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00b      	beq.n	800415c <TIM_Base_SetConfig+0x40>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a42      	ldr	r2, [pc, #264]	@ (8004250 <TIM_Base_SetConfig+0x134>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d007      	beq.n	800415c <TIM_Base_SetConfig+0x40>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a41      	ldr	r2, [pc, #260]	@ (8004254 <TIM_Base_SetConfig+0x138>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d003      	beq.n	800415c <TIM_Base_SetConfig+0x40>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a40      	ldr	r2, [pc, #256]	@ (8004258 <TIM_Base_SetConfig+0x13c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d108      	bne.n	800416e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a35      	ldr	r2, [pc, #212]	@ (8004248 <TIM_Base_SetConfig+0x12c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d01f      	beq.n	80041b6 <TIM_Base_SetConfig+0x9a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800417c:	d01b      	beq.n	80041b6 <TIM_Base_SetConfig+0x9a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a32      	ldr	r2, [pc, #200]	@ (800424c <TIM_Base_SetConfig+0x130>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d017      	beq.n	80041b6 <TIM_Base_SetConfig+0x9a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a31      	ldr	r2, [pc, #196]	@ (8004250 <TIM_Base_SetConfig+0x134>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d013      	beq.n	80041b6 <TIM_Base_SetConfig+0x9a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a30      	ldr	r2, [pc, #192]	@ (8004254 <TIM_Base_SetConfig+0x138>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00f      	beq.n	80041b6 <TIM_Base_SetConfig+0x9a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a2f      	ldr	r2, [pc, #188]	@ (8004258 <TIM_Base_SetConfig+0x13c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00b      	beq.n	80041b6 <TIM_Base_SetConfig+0x9a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a2e      	ldr	r2, [pc, #184]	@ (800425c <TIM_Base_SetConfig+0x140>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d007      	beq.n	80041b6 <TIM_Base_SetConfig+0x9a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a2d      	ldr	r2, [pc, #180]	@ (8004260 <TIM_Base_SetConfig+0x144>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d003      	beq.n	80041b6 <TIM_Base_SetConfig+0x9a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a2c      	ldr	r2, [pc, #176]	@ (8004264 <TIM_Base_SetConfig+0x148>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d108      	bne.n	80041c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a16      	ldr	r2, [pc, #88]	@ (8004248 <TIM_Base_SetConfig+0x12c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00f      	beq.n	8004214 <TIM_Base_SetConfig+0xf8>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a18      	ldr	r2, [pc, #96]	@ (8004258 <TIM_Base_SetConfig+0x13c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00b      	beq.n	8004214 <TIM_Base_SetConfig+0xf8>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a17      	ldr	r2, [pc, #92]	@ (800425c <TIM_Base_SetConfig+0x140>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d007      	beq.n	8004214 <TIM_Base_SetConfig+0xf8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a16      	ldr	r2, [pc, #88]	@ (8004260 <TIM_Base_SetConfig+0x144>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d003      	beq.n	8004214 <TIM_Base_SetConfig+0xf8>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a15      	ldr	r2, [pc, #84]	@ (8004264 <TIM_Base_SetConfig+0x148>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d103      	bne.n	800421c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b01      	cmp	r3, #1
 800422c:	d105      	bne.n	800423a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f023 0201 	bic.w	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	611a      	str	r2, [r3, #16]
  }
}
 800423a:	bf00      	nop
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40012c00 	.word	0x40012c00
 800424c:	40000400 	.word	0x40000400
 8004250:	40000800 	.word	0x40000800
 8004254:	40000c00 	.word	0x40000c00
 8004258:	40013400 	.word	0x40013400
 800425c:	40014000 	.word	0x40014000
 8004260:	40014400 	.word	0x40014400
 8004264:	40014800 	.word	0x40014800

08004268 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e040      	b.n	8004338 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fc ff9a 	bl	8001200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2224      	movs	r2, #36	@ 0x24
 80042d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0201 	bic.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fae0 	bl	80048b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f825 	bl	8004340 <UART_SetConfig>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d101      	bne.n	8004300 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e01b      	b.n	8004338 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800430e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800431e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fb5f 	bl	80049f4 <UART_CheckIdleState>
 8004336:	4603      	mov	r3, r0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004344:	b08a      	sub	sp, #40	@ 0x28
 8004346:	af00      	add	r7, sp, #0
 8004348:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	431a      	orrs	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	431a      	orrs	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	4313      	orrs	r3, r2
 8004366:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	4ba4      	ldr	r3, [pc, #656]	@ (8004600 <UART_SetConfig+0x2c0>)
 8004370:	4013      	ands	r3, r2
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	6812      	ldr	r2, [r2, #0]
 8004376:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004378:	430b      	orrs	r3, r1
 800437a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a99      	ldr	r2, [pc, #612]	@ (8004604 <UART_SetConfig+0x2c4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d004      	beq.n	80043ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043a8:	4313      	orrs	r3, r2
 80043aa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043bc:	430a      	orrs	r2, r1
 80043be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a90      	ldr	r2, [pc, #576]	@ (8004608 <UART_SetConfig+0x2c8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d126      	bne.n	8004418 <UART_SetConfig+0xd8>
 80043ca:	4b90      	ldr	r3, [pc, #576]	@ (800460c <UART_SetConfig+0x2cc>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d81b      	bhi.n	8004410 <UART_SetConfig+0xd0>
 80043d8:	a201      	add	r2, pc, #4	@ (adr r2, 80043e0 <UART_SetConfig+0xa0>)
 80043da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043de:	bf00      	nop
 80043e0:	080043f1 	.word	0x080043f1
 80043e4:	08004401 	.word	0x08004401
 80043e8:	080043f9 	.word	0x080043f9
 80043ec:	08004409 	.word	0x08004409
 80043f0:	2301      	movs	r3, #1
 80043f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043f6:	e116      	b.n	8004626 <UART_SetConfig+0x2e6>
 80043f8:	2302      	movs	r3, #2
 80043fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043fe:	e112      	b.n	8004626 <UART_SetConfig+0x2e6>
 8004400:	2304      	movs	r3, #4
 8004402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004406:	e10e      	b.n	8004626 <UART_SetConfig+0x2e6>
 8004408:	2308      	movs	r3, #8
 800440a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800440e:	e10a      	b.n	8004626 <UART_SetConfig+0x2e6>
 8004410:	2310      	movs	r3, #16
 8004412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004416:	e106      	b.n	8004626 <UART_SetConfig+0x2e6>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a7c      	ldr	r2, [pc, #496]	@ (8004610 <UART_SetConfig+0x2d0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d138      	bne.n	8004494 <UART_SetConfig+0x154>
 8004422:	4b7a      	ldr	r3, [pc, #488]	@ (800460c <UART_SetConfig+0x2cc>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004428:	f003 030c 	and.w	r3, r3, #12
 800442c:	2b0c      	cmp	r3, #12
 800442e:	d82d      	bhi.n	800448c <UART_SetConfig+0x14c>
 8004430:	a201      	add	r2, pc, #4	@ (adr r2, 8004438 <UART_SetConfig+0xf8>)
 8004432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004436:	bf00      	nop
 8004438:	0800446d 	.word	0x0800446d
 800443c:	0800448d 	.word	0x0800448d
 8004440:	0800448d 	.word	0x0800448d
 8004444:	0800448d 	.word	0x0800448d
 8004448:	0800447d 	.word	0x0800447d
 800444c:	0800448d 	.word	0x0800448d
 8004450:	0800448d 	.word	0x0800448d
 8004454:	0800448d 	.word	0x0800448d
 8004458:	08004475 	.word	0x08004475
 800445c:	0800448d 	.word	0x0800448d
 8004460:	0800448d 	.word	0x0800448d
 8004464:	0800448d 	.word	0x0800448d
 8004468:	08004485 	.word	0x08004485
 800446c:	2300      	movs	r3, #0
 800446e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004472:	e0d8      	b.n	8004626 <UART_SetConfig+0x2e6>
 8004474:	2302      	movs	r3, #2
 8004476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800447a:	e0d4      	b.n	8004626 <UART_SetConfig+0x2e6>
 800447c:	2304      	movs	r3, #4
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004482:	e0d0      	b.n	8004626 <UART_SetConfig+0x2e6>
 8004484:	2308      	movs	r3, #8
 8004486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800448a:	e0cc      	b.n	8004626 <UART_SetConfig+0x2e6>
 800448c:	2310      	movs	r3, #16
 800448e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004492:	e0c8      	b.n	8004626 <UART_SetConfig+0x2e6>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a5e      	ldr	r2, [pc, #376]	@ (8004614 <UART_SetConfig+0x2d4>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d125      	bne.n	80044ea <UART_SetConfig+0x1aa>
 800449e:	4b5b      	ldr	r3, [pc, #364]	@ (800460c <UART_SetConfig+0x2cc>)
 80044a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80044a8:	2b30      	cmp	r3, #48	@ 0x30
 80044aa:	d016      	beq.n	80044da <UART_SetConfig+0x19a>
 80044ac:	2b30      	cmp	r3, #48	@ 0x30
 80044ae:	d818      	bhi.n	80044e2 <UART_SetConfig+0x1a2>
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d00a      	beq.n	80044ca <UART_SetConfig+0x18a>
 80044b4:	2b20      	cmp	r3, #32
 80044b6:	d814      	bhi.n	80044e2 <UART_SetConfig+0x1a2>
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d002      	beq.n	80044c2 <UART_SetConfig+0x182>
 80044bc:	2b10      	cmp	r3, #16
 80044be:	d008      	beq.n	80044d2 <UART_SetConfig+0x192>
 80044c0:	e00f      	b.n	80044e2 <UART_SetConfig+0x1a2>
 80044c2:	2300      	movs	r3, #0
 80044c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044c8:	e0ad      	b.n	8004626 <UART_SetConfig+0x2e6>
 80044ca:	2302      	movs	r3, #2
 80044cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044d0:	e0a9      	b.n	8004626 <UART_SetConfig+0x2e6>
 80044d2:	2304      	movs	r3, #4
 80044d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044d8:	e0a5      	b.n	8004626 <UART_SetConfig+0x2e6>
 80044da:	2308      	movs	r3, #8
 80044dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044e0:	e0a1      	b.n	8004626 <UART_SetConfig+0x2e6>
 80044e2:	2310      	movs	r3, #16
 80044e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044e8:	e09d      	b.n	8004626 <UART_SetConfig+0x2e6>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a4a      	ldr	r2, [pc, #296]	@ (8004618 <UART_SetConfig+0x2d8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d125      	bne.n	8004540 <UART_SetConfig+0x200>
 80044f4:	4b45      	ldr	r3, [pc, #276]	@ (800460c <UART_SetConfig+0x2cc>)
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80044fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004500:	d016      	beq.n	8004530 <UART_SetConfig+0x1f0>
 8004502:	2bc0      	cmp	r3, #192	@ 0xc0
 8004504:	d818      	bhi.n	8004538 <UART_SetConfig+0x1f8>
 8004506:	2b80      	cmp	r3, #128	@ 0x80
 8004508:	d00a      	beq.n	8004520 <UART_SetConfig+0x1e0>
 800450a:	2b80      	cmp	r3, #128	@ 0x80
 800450c:	d814      	bhi.n	8004538 <UART_SetConfig+0x1f8>
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <UART_SetConfig+0x1d8>
 8004512:	2b40      	cmp	r3, #64	@ 0x40
 8004514:	d008      	beq.n	8004528 <UART_SetConfig+0x1e8>
 8004516:	e00f      	b.n	8004538 <UART_SetConfig+0x1f8>
 8004518:	2300      	movs	r3, #0
 800451a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800451e:	e082      	b.n	8004626 <UART_SetConfig+0x2e6>
 8004520:	2302      	movs	r3, #2
 8004522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004526:	e07e      	b.n	8004626 <UART_SetConfig+0x2e6>
 8004528:	2304      	movs	r3, #4
 800452a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800452e:	e07a      	b.n	8004626 <UART_SetConfig+0x2e6>
 8004530:	2308      	movs	r3, #8
 8004532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004536:	e076      	b.n	8004626 <UART_SetConfig+0x2e6>
 8004538:	2310      	movs	r3, #16
 800453a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800453e:	e072      	b.n	8004626 <UART_SetConfig+0x2e6>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a35      	ldr	r2, [pc, #212]	@ (800461c <UART_SetConfig+0x2dc>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d12a      	bne.n	80045a0 <UART_SetConfig+0x260>
 800454a:	4b30      	ldr	r3, [pc, #192]	@ (800460c <UART_SetConfig+0x2cc>)
 800454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004550:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004554:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004558:	d01a      	beq.n	8004590 <UART_SetConfig+0x250>
 800455a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800455e:	d81b      	bhi.n	8004598 <UART_SetConfig+0x258>
 8004560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004564:	d00c      	beq.n	8004580 <UART_SetConfig+0x240>
 8004566:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800456a:	d815      	bhi.n	8004598 <UART_SetConfig+0x258>
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <UART_SetConfig+0x238>
 8004570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004574:	d008      	beq.n	8004588 <UART_SetConfig+0x248>
 8004576:	e00f      	b.n	8004598 <UART_SetConfig+0x258>
 8004578:	2300      	movs	r3, #0
 800457a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800457e:	e052      	b.n	8004626 <UART_SetConfig+0x2e6>
 8004580:	2302      	movs	r3, #2
 8004582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004586:	e04e      	b.n	8004626 <UART_SetConfig+0x2e6>
 8004588:	2304      	movs	r3, #4
 800458a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800458e:	e04a      	b.n	8004626 <UART_SetConfig+0x2e6>
 8004590:	2308      	movs	r3, #8
 8004592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004596:	e046      	b.n	8004626 <UART_SetConfig+0x2e6>
 8004598:	2310      	movs	r3, #16
 800459a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800459e:	e042      	b.n	8004626 <UART_SetConfig+0x2e6>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a17      	ldr	r2, [pc, #92]	@ (8004604 <UART_SetConfig+0x2c4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d13a      	bne.n	8004620 <UART_SetConfig+0x2e0>
 80045aa:	4b18      	ldr	r3, [pc, #96]	@ (800460c <UART_SetConfig+0x2cc>)
 80045ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80045b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045b8:	d01a      	beq.n	80045f0 <UART_SetConfig+0x2b0>
 80045ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045be:	d81b      	bhi.n	80045f8 <UART_SetConfig+0x2b8>
 80045c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045c4:	d00c      	beq.n	80045e0 <UART_SetConfig+0x2a0>
 80045c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045ca:	d815      	bhi.n	80045f8 <UART_SetConfig+0x2b8>
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <UART_SetConfig+0x298>
 80045d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045d4:	d008      	beq.n	80045e8 <UART_SetConfig+0x2a8>
 80045d6:	e00f      	b.n	80045f8 <UART_SetConfig+0x2b8>
 80045d8:	2300      	movs	r3, #0
 80045da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045de:	e022      	b.n	8004626 <UART_SetConfig+0x2e6>
 80045e0:	2302      	movs	r3, #2
 80045e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045e6:	e01e      	b.n	8004626 <UART_SetConfig+0x2e6>
 80045e8:	2304      	movs	r3, #4
 80045ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ee:	e01a      	b.n	8004626 <UART_SetConfig+0x2e6>
 80045f0:	2308      	movs	r3, #8
 80045f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045f6:	e016      	b.n	8004626 <UART_SetConfig+0x2e6>
 80045f8:	2310      	movs	r3, #16
 80045fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045fe:	e012      	b.n	8004626 <UART_SetConfig+0x2e6>
 8004600:	efff69f3 	.word	0xefff69f3
 8004604:	40008000 	.word	0x40008000
 8004608:	40013800 	.word	0x40013800
 800460c:	40021000 	.word	0x40021000
 8004610:	40004400 	.word	0x40004400
 8004614:	40004800 	.word	0x40004800
 8004618:	40004c00 	.word	0x40004c00
 800461c:	40005000 	.word	0x40005000
 8004620:	2310      	movs	r3, #16
 8004622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a9f      	ldr	r2, [pc, #636]	@ (80048a8 <UART_SetConfig+0x568>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d17a      	bne.n	8004726 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004630:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004634:	2b08      	cmp	r3, #8
 8004636:	d824      	bhi.n	8004682 <UART_SetConfig+0x342>
 8004638:	a201      	add	r2, pc, #4	@ (adr r2, 8004640 <UART_SetConfig+0x300>)
 800463a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463e:	bf00      	nop
 8004640:	08004665 	.word	0x08004665
 8004644:	08004683 	.word	0x08004683
 8004648:	0800466d 	.word	0x0800466d
 800464c:	08004683 	.word	0x08004683
 8004650:	08004673 	.word	0x08004673
 8004654:	08004683 	.word	0x08004683
 8004658:	08004683 	.word	0x08004683
 800465c:	08004683 	.word	0x08004683
 8004660:	0800467b 	.word	0x0800467b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004664:	f7fe fd68 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 8004668:	61f8      	str	r0, [r7, #28]
        break;
 800466a:	e010      	b.n	800468e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800466c:	4b8f      	ldr	r3, [pc, #572]	@ (80048ac <UART_SetConfig+0x56c>)
 800466e:	61fb      	str	r3, [r7, #28]
        break;
 8004670:	e00d      	b.n	800468e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004672:	f7fe fcc9 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8004676:	61f8      	str	r0, [r7, #28]
        break;
 8004678:	e009      	b.n	800468e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800467a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800467e:	61fb      	str	r3, [r7, #28]
        break;
 8004680:	e005      	b.n	800468e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800468c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 80fb 	beq.w	800488c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	4613      	mov	r3, r2
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	4413      	add	r3, r2
 80046a0:	69fa      	ldr	r2, [r7, #28]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d305      	bcc.n	80046b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046ac:	69fa      	ldr	r2, [r7, #28]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d903      	bls.n	80046ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80046b8:	e0e8      	b.n	800488c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	2200      	movs	r2, #0
 80046be:	461c      	mov	r4, r3
 80046c0:	4615      	mov	r5, r2
 80046c2:	f04f 0200 	mov.w	r2, #0
 80046c6:	f04f 0300 	mov.w	r3, #0
 80046ca:	022b      	lsls	r3, r5, #8
 80046cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80046d0:	0222      	lsls	r2, r4, #8
 80046d2:	68f9      	ldr	r1, [r7, #12]
 80046d4:	6849      	ldr	r1, [r1, #4]
 80046d6:	0849      	lsrs	r1, r1, #1
 80046d8:	2000      	movs	r0, #0
 80046da:	4688      	mov	r8, r1
 80046dc:	4681      	mov	r9, r0
 80046de:	eb12 0a08 	adds.w	sl, r2, r8
 80046e2:	eb43 0b09 	adc.w	fp, r3, r9
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	603b      	str	r3, [r7, #0]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046f4:	4650      	mov	r0, sl
 80046f6:	4659      	mov	r1, fp
 80046f8:	f7fb fd6a 	bl	80001d0 <__aeabi_uldivmod>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4613      	mov	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800470a:	d308      	bcc.n	800471e <UART_SetConfig+0x3de>
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004712:	d204      	bcs.n	800471e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	60da      	str	r2, [r3, #12]
 800471c:	e0b6      	b.n	800488c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004724:	e0b2      	b.n	800488c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800472e:	d15e      	bne.n	80047ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004730:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004734:	2b08      	cmp	r3, #8
 8004736:	d828      	bhi.n	800478a <UART_SetConfig+0x44a>
 8004738:	a201      	add	r2, pc, #4	@ (adr r2, 8004740 <UART_SetConfig+0x400>)
 800473a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473e:	bf00      	nop
 8004740:	08004765 	.word	0x08004765
 8004744:	0800476d 	.word	0x0800476d
 8004748:	08004775 	.word	0x08004775
 800474c:	0800478b 	.word	0x0800478b
 8004750:	0800477b 	.word	0x0800477b
 8004754:	0800478b 	.word	0x0800478b
 8004758:	0800478b 	.word	0x0800478b
 800475c:	0800478b 	.word	0x0800478b
 8004760:	08004783 	.word	0x08004783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004764:	f7fe fce8 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 8004768:	61f8      	str	r0, [r7, #28]
        break;
 800476a:	e014      	b.n	8004796 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800476c:	f7fe fcfa 	bl	8003164 <HAL_RCC_GetPCLK2Freq>
 8004770:	61f8      	str	r0, [r7, #28]
        break;
 8004772:	e010      	b.n	8004796 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004774:	4b4d      	ldr	r3, [pc, #308]	@ (80048ac <UART_SetConfig+0x56c>)
 8004776:	61fb      	str	r3, [r7, #28]
        break;
 8004778:	e00d      	b.n	8004796 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800477a:	f7fe fc45 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 800477e:	61f8      	str	r0, [r7, #28]
        break;
 8004780:	e009      	b.n	8004796 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004786:	61fb      	str	r3, [r7, #28]
        break;
 8004788:	e005      	b.n	8004796 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004794:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d077      	beq.n	800488c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	005a      	lsls	r2, r3, #1
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	085b      	lsrs	r3, r3, #1
 80047a6:	441a      	add	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b0f      	cmp	r3, #15
 80047b6:	d916      	bls.n	80047e6 <UART_SetConfig+0x4a6>
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047be:	d212      	bcs.n	80047e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	f023 030f 	bic.w	r3, r3, #15
 80047c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	085b      	lsrs	r3, r3, #1
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	8afb      	ldrh	r3, [r7, #22]
 80047d8:	4313      	orrs	r3, r2
 80047da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	8afa      	ldrh	r2, [r7, #22]
 80047e2:	60da      	str	r2, [r3, #12]
 80047e4:	e052      	b.n	800488c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80047ec:	e04e      	b.n	800488c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d827      	bhi.n	8004846 <UART_SetConfig+0x506>
 80047f6:	a201      	add	r2, pc, #4	@ (adr r2, 80047fc <UART_SetConfig+0x4bc>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	08004821 	.word	0x08004821
 8004800:	08004829 	.word	0x08004829
 8004804:	08004831 	.word	0x08004831
 8004808:	08004847 	.word	0x08004847
 800480c:	08004837 	.word	0x08004837
 8004810:	08004847 	.word	0x08004847
 8004814:	08004847 	.word	0x08004847
 8004818:	08004847 	.word	0x08004847
 800481c:	0800483f 	.word	0x0800483f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004820:	f7fe fc8a 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 8004824:	61f8      	str	r0, [r7, #28]
        break;
 8004826:	e014      	b.n	8004852 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004828:	f7fe fc9c 	bl	8003164 <HAL_RCC_GetPCLK2Freq>
 800482c:	61f8      	str	r0, [r7, #28]
        break;
 800482e:	e010      	b.n	8004852 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004830:	4b1e      	ldr	r3, [pc, #120]	@ (80048ac <UART_SetConfig+0x56c>)
 8004832:	61fb      	str	r3, [r7, #28]
        break;
 8004834:	e00d      	b.n	8004852 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004836:	f7fe fbe7 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 800483a:	61f8      	str	r0, [r7, #28]
        break;
 800483c:	e009      	b.n	8004852 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800483e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004842:	61fb      	str	r3, [r7, #28]
        break;
 8004844:	e005      	b.n	8004852 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004850:	bf00      	nop
    }

    if (pclk != 0U)
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d019      	beq.n	800488c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	085a      	lsrs	r2, r3, #1
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	441a      	add	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	fbb2 f3f3 	udiv	r3, r2, r3
 800486a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2b0f      	cmp	r3, #15
 8004870:	d909      	bls.n	8004886 <UART_SetConfig+0x546>
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004878:	d205      	bcs.n	8004886 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60da      	str	r2, [r3, #12]
 8004884:	e002      	b.n	800488c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004898:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800489c:	4618      	mov	r0, r3
 800489e:	3728      	adds	r7, #40	@ 0x28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048a6:	bf00      	nop
 80048a8:	40008000 	.word	0x40008000
 80048ac:	00f42400 	.word	0x00f42400

080048b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048bc:	f003 0308 	and.w	r3, r3, #8
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00a      	beq.n	80048da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00a      	beq.n	80048fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004944:	f003 0310 	and.w	r3, r3, #16
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01a      	beq.n	80049c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049ae:	d10a      	bne.n	80049c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	605a      	str	r2, [r3, #4]
  }
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b098      	sub	sp, #96	@ 0x60
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a04:	f7fc fe3c 	bl	8001680 <HAL_GetTick>
 8004a08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0308 	and.w	r3, r3, #8
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d12e      	bne.n	8004a76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a20:	2200      	movs	r2, #0
 8004a22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f88c 	bl	8004b44 <UART_WaitOnFlagUntilTimeout>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d021      	beq.n	8004a76 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a3a:	e853 3f00 	ldrex	r3, [r3]
 8004a3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a46:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a50:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a52:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a58:	e841 2300 	strex	r3, r2, [r1]
 8004a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e6      	bne.n	8004a32 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2220      	movs	r2, #32
 8004a68:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e062      	b.n	8004b3c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d149      	bne.n	8004b18 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f856 	bl	8004b44 <UART_WaitOnFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d03c      	beq.n	8004b18 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa6:	e853 3f00 	ldrex	r3, [r3]
 8004aaa:	623b      	str	r3, [r7, #32]
   return(result);
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004abc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004abe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ac4:	e841 2300 	strex	r3, r2, [r1]
 8004ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e6      	bne.n	8004a9e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	e853 3f00 	ldrex	r3, [r3]
 8004ade:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 0301 	bic.w	r3, r3, #1
 8004ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3308      	adds	r3, #8
 8004aee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004af0:	61fa      	str	r2, [r7, #28]
 8004af2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af4:	69b9      	ldr	r1, [r7, #24]
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	e841 2300 	strex	r3, r2, [r1]
 8004afc:	617b      	str	r3, [r7, #20]
   return(result);
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1e5      	bne.n	8004ad0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e011      	b.n	8004b3c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3758      	adds	r7, #88	@ 0x58
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	4613      	mov	r3, r2
 8004b52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b54:	e04f      	b.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5c:	d04b      	beq.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b5e:	f7fc fd8f 	bl	8001680 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d302      	bcc.n	8004b74 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e04e      	b.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0304 	and.w	r3, r3, #4
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d037      	beq.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b80      	cmp	r3, #128	@ 0x80
 8004b8a:	d034      	beq.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b40      	cmp	r3, #64	@ 0x40
 8004b90:	d031      	beq.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d110      	bne.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2208      	movs	r2, #8
 8004ba6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f838 	bl	8004c1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e029      	b.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bd0:	d111      	bne.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 f81e 	bl	8004c1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e00f      	b.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69da      	ldr	r2, [r3, #28]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	bf0c      	ite	eq
 8004c06:	2301      	moveq	r3, #1
 8004c08:	2300      	movne	r3, #0
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d0a0      	beq.n	8004b56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b095      	sub	sp, #84	@ 0x54
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c2e:	e853 3f00 	ldrex	r3, [r3]
 8004c32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c44:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c46:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c4c:	e841 2300 	strex	r3, r2, [r1]
 8004c50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e6      	bne.n	8004c26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3308      	adds	r3, #8
 8004c5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	e853 3f00 	ldrex	r3, [r3]
 8004c66:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	f023 0301 	bic.w	r3, r3, #1
 8004c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3308      	adds	r3, #8
 8004c76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c80:	e841 2300 	strex	r3, r2, [r1]
 8004c84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1e5      	bne.n	8004c58 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d118      	bne.n	8004cc6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f023 0310 	bic.w	r3, r3, #16
 8004ca8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cb2:	61bb      	str	r3, [r7, #24]
 8004cb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	6979      	ldr	r1, [r7, #20]
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e6      	bne.n	8004c94 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004cda:	bf00      	nop
 8004cdc:	3754      	adds	r7, #84	@ 0x54
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	f107 001c 	add.w	r0, r7, #28
 8004cf4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 fa69 	bl	80051dc <USB_CoreReset>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004d0e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d106      	bne.n	8004d24 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d22:	e005      	b.n	8004d30 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d28:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d3c:	b004      	add	sp, #16
 8004d3e:	4770      	bx	lr

08004d40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f023 0201 	bic.w	r2, r3, #1
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b084      	sub	sp, #16
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d7e:	78fb      	ldrb	r3, [r7, #3]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d115      	bne.n	8004db0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004d90:	200a      	movs	r0, #10
 8004d92:	f7fc fc81 	bl	8001698 <HAL_Delay>
      ms += 10U;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	330a      	adds	r3, #10
 8004d9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 fa0f 	bl	80051c0 <USB_GetMode>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d01e      	beq.n	8004de6 <USB_SetCurrentMode+0x84>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2bc7      	cmp	r3, #199	@ 0xc7
 8004dac:	d9f0      	bls.n	8004d90 <USB_SetCurrentMode+0x2e>
 8004dae:	e01a      	b.n	8004de6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d115      	bne.n	8004de2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004dc2:	200a      	movs	r0, #10
 8004dc4:	f7fc fc68 	bl	8001698 <HAL_Delay>
      ms += 10U;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	330a      	adds	r3, #10
 8004dcc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f9f6 	bl	80051c0 <USB_GetMode>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <USB_SetCurrentMode+0x84>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2bc7      	cmp	r3, #199	@ 0xc7
 8004dde:	d9f0      	bls.n	8004dc2 <USB_SetCurrentMode+0x60>
 8004de0:	e001      	b.n	8004de6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e005      	b.n	8004df2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2bc8      	cmp	r3, #200	@ 0xc8
 8004dea:	d101      	bne.n	8004df0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e000      	b.n	8004df2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b086      	sub	sp, #24
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004e0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e16:	2300      	movs	r3, #0
 8004e18:	613b      	str	r3, [r7, #16]
 8004e1a:	e009      	b.n	8004e30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	3340      	adds	r3, #64	@ 0x40
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	2200      	movs	r2, #0
 8004e28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	613b      	str	r3, [r7, #16]
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	2b0e      	cmp	r3, #14
 8004e34:	d9f2      	bls.n	8004e1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e36:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d11c      	bne.n	8004e78 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e4c:	f043 0302 	orr.w	r3, r3, #2
 8004e50:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e56:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	e005      	b.n	8004e84 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e7c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e90:	2103      	movs	r1, #3
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f95a 	bl	800514c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e98:	2110      	movs	r1, #16
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f8f6 	bl	800508c <USB_FlushTxFifo>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f920 	bl	80050f0 <USB_FlushRxFifo>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ecc:	461a      	mov	r2, r3
 8004ece:	2300      	movs	r3, #0
 8004ed0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ed8:	461a      	mov	r2, r3
 8004eda:	2300      	movs	r3, #0
 8004edc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ede:	2300      	movs	r3, #0
 8004ee0:	613b      	str	r3, [r7, #16]
 8004ee2:	e043      	b.n	8004f6c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004efa:	d118      	bne.n	8004f2e <USB_DevInit+0x132>
    {
      if (i == 0U)
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10a      	bne.n	8004f18 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	e013      	b.n	8004f40 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f24:	461a      	mov	r2, r3
 8004f26:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	e008      	b.n	8004f40 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	2300      	movs	r3, #0
 8004f50:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	613b      	str	r3, [r7, #16]
 8004f6c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f70:	461a      	mov	r2, r3
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d3b5      	bcc.n	8004ee4 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f78:	2300      	movs	r3, #0
 8004f7a:	613b      	str	r3, [r7, #16]
 8004f7c:	e043      	b.n	8005006 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f94:	d118      	bne.n	8004fc8 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fa8:	461a      	mov	r2, r3
 8004faa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	e013      	b.n	8004fda <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	015a      	lsls	r2, r3, #5
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	e008      	b.n	8004fda <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	2300      	movs	r3, #0
 8004fea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ffe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	3301      	adds	r3, #1
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800500a:	461a      	mov	r2, r3
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	4293      	cmp	r3, r2
 8005010:	d3b5      	bcc.n	8004f7e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005020:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005024:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005032:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	f043 0210 	orr.w	r2, r3, #16
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	699a      	ldr	r2, [r3, #24]
 8005044:	4b10      	ldr	r3, [pc, #64]	@ (8005088 <USB_DevInit+0x28c>)
 8005046:	4313      	orrs	r3, r2
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800504c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005050:	2b00      	cmp	r3, #0
 8005052:	d005      	beq.n	8005060 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	f043 0208 	orr.w	r2, r3, #8
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005060:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005064:	2b01      	cmp	r3, #1
 8005066:	d107      	bne.n	8005078 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005070:	f043 0304 	orr.w	r3, r3, #4
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005078:	7dfb      	ldrb	r3, [r7, #23]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005084:	b004      	add	sp, #16
 8005086:	4770      	bx	lr
 8005088:	803c3800 	.word	0x803c3800

0800508c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	3301      	adds	r3, #1
 800509e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050a6:	d901      	bls.n	80050ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e01b      	b.n	80050e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	daf2      	bge.n	800509a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	019b      	lsls	r3, r3, #6
 80050bc:	f043 0220 	orr.w	r2, r3, #32
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3301      	adds	r3, #1
 80050c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050d0:	d901      	bls.n	80050d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e006      	b.n	80050e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f003 0320 	and.w	r3, r3, #32
 80050de:	2b20      	cmp	r3, #32
 80050e0:	d0f0      	beq.n	80050c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3301      	adds	r3, #1
 8005100:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005108:	d901      	bls.n	800510e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e018      	b.n	8005140 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	daf2      	bge.n	80050fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2210      	movs	r2, #16
 800511e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	3301      	adds	r3, #1
 8005124:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800512c:	d901      	bls.n	8005132 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e006      	b.n	8005140 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f003 0310 	and.w	r3, r3, #16
 800513a:	2b10      	cmp	r3, #16
 800513c:	d0f0      	beq.n	8005120 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	460b      	mov	r3, r1
 8005156:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	78fb      	ldrb	r3, [r7, #3]
 8005166:	68f9      	ldr	r1, [r7, #12]
 8005168:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800516c:	4313      	orrs	r3, r2
 800516e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800517e:	b480      	push	{r7}
 8005180:	b085      	sub	sp, #20
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005198:	f023 0303 	bic.w	r3, r3, #3
 800519c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051ac:	f043 0302 	orr.w	r3, r3, #2
 80051b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	f003 0301 	and.w	r3, r3, #1
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	3301      	adds	r3, #1
 80051ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051f4:	d901      	bls.n	80051fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e01b      	b.n	8005232 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	daf2      	bge.n	80051e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f043 0201 	orr.w	r2, r3, #1
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3301      	adds	r3, #1
 8005216:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800521e:	d901      	bls.n	8005224 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e006      	b.n	8005232 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b01      	cmp	r3, #1
 800522e:	d0f0      	beq.n	8005212 <USB_CoreReset+0x36>

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
	...

08005240 <__NVIC_SetPriority>:
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	6039      	str	r1, [r7, #0]
 800524a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800524c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005250:	2b00      	cmp	r3, #0
 8005252:	db0a      	blt.n	800526a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	b2da      	uxtb	r2, r3
 8005258:	490c      	ldr	r1, [pc, #48]	@ (800528c <__NVIC_SetPriority+0x4c>)
 800525a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800525e:	0112      	lsls	r2, r2, #4
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	440b      	add	r3, r1
 8005264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005268:	e00a      	b.n	8005280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	b2da      	uxtb	r2, r3
 800526e:	4908      	ldr	r1, [pc, #32]	@ (8005290 <__NVIC_SetPriority+0x50>)
 8005270:	79fb      	ldrb	r3, [r7, #7]
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	3b04      	subs	r3, #4
 8005278:	0112      	lsls	r2, r2, #4
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	440b      	add	r3, r1
 800527e:	761a      	strb	r2, [r3, #24]
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	e000e100 	.word	0xe000e100
 8005290:	e000ed00 	.word	0xe000ed00

08005294 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005298:	2100      	movs	r1, #0
 800529a:	f06f 0004 	mvn.w	r0, #4
 800529e:	f7ff ffcf 	bl	8005240 <__NVIC_SetPriority>
#endif
}
 80052a2:	bf00      	nop
 80052a4:	bd80      	pop	{r7, pc}
	...

080052a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052ae:	f3ef 8305 	mrs	r3, IPSR
 80052b2:	603b      	str	r3, [r7, #0]
  return(result);
 80052b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80052ba:	f06f 0305 	mvn.w	r3, #5
 80052be:	607b      	str	r3, [r7, #4]
 80052c0:	e00c      	b.n	80052dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80052c2:	4b0a      	ldr	r3, [pc, #40]	@ (80052ec <osKernelInitialize+0x44>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d105      	bne.n	80052d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80052ca:	4b08      	ldr	r3, [pc, #32]	@ (80052ec <osKernelInitialize+0x44>)
 80052cc:	2201      	movs	r2, #1
 80052ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	607b      	str	r3, [r7, #4]
 80052d4:	e002      	b.n	80052dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80052d6:	f04f 33ff 	mov.w	r3, #4294967295
 80052da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80052dc:	687b      	ldr	r3, [r7, #4]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	200007e4 	.word	0x200007e4

080052f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052f6:	f3ef 8305 	mrs	r3, IPSR
 80052fa:	603b      	str	r3, [r7, #0]
  return(result);
 80052fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005302:	f06f 0305 	mvn.w	r3, #5
 8005306:	607b      	str	r3, [r7, #4]
 8005308:	e010      	b.n	800532c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800530a:	4b0b      	ldr	r3, [pc, #44]	@ (8005338 <osKernelStart+0x48>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d109      	bne.n	8005326 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005312:	f7ff ffbf 	bl	8005294 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005316:	4b08      	ldr	r3, [pc, #32]	@ (8005338 <osKernelStart+0x48>)
 8005318:	2202      	movs	r2, #2
 800531a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800531c:	f001 fe90 	bl	8007040 <vTaskStartScheduler>
      stat = osOK;
 8005320:	2300      	movs	r3, #0
 8005322:	607b      	str	r3, [r7, #4]
 8005324:	e002      	b.n	800532c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005326:	f04f 33ff 	mov.w	r3, #4294967295
 800532a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800532c:	687b      	ldr	r3, [r7, #4]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	200007e4 	.word	0x200007e4

0800533c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800533c:	b580      	push	{r7, lr}
 800533e:	b08e      	sub	sp, #56	@ 0x38
 8005340:	af04      	add	r7, sp, #16
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005348:	2300      	movs	r3, #0
 800534a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800534c:	f3ef 8305 	mrs	r3, IPSR
 8005350:	617b      	str	r3, [r7, #20]
  return(result);
 8005352:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005354:	2b00      	cmp	r3, #0
 8005356:	d17e      	bne.n	8005456 <osThreadNew+0x11a>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d07b      	beq.n	8005456 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800535e:	2380      	movs	r3, #128	@ 0x80
 8005360:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005362:	2318      	movs	r3, #24
 8005364:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005366:	2300      	movs	r3, #0
 8005368:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800536a:	f04f 33ff 	mov.w	r3, #4294967295
 800536e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d045      	beq.n	8005402 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <osThreadNew+0x48>
        name = attr->name;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d008      	beq.n	80053aa <osThreadNew+0x6e>
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	2b38      	cmp	r3, #56	@ 0x38
 800539c:	d805      	bhi.n	80053aa <osThreadNew+0x6e>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <osThreadNew+0x72>
        return (NULL);
 80053aa:	2300      	movs	r3, #0
 80053ac:	e054      	b.n	8005458 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	089b      	lsrs	r3, r3, #2
 80053bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00e      	beq.n	80053e4 <osThreadNew+0xa8>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	2b5b      	cmp	r3, #91	@ 0x5b
 80053cc:	d90a      	bls.n	80053e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d006      	beq.n	80053e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d002      	beq.n	80053e4 <osThreadNew+0xa8>
        mem = 1;
 80053de:	2301      	movs	r3, #1
 80053e0:	61bb      	str	r3, [r7, #24]
 80053e2:	e010      	b.n	8005406 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10c      	bne.n	8005406 <osThreadNew+0xca>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d108      	bne.n	8005406 <osThreadNew+0xca>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d104      	bne.n	8005406 <osThreadNew+0xca>
          mem = 0;
 80053fc:	2300      	movs	r3, #0
 80053fe:	61bb      	str	r3, [r7, #24]
 8005400:	e001      	b.n	8005406 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005402:	2300      	movs	r3, #0
 8005404:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d110      	bne.n	800542e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005414:	9202      	str	r2, [sp, #8]
 8005416:	9301      	str	r3, [sp, #4]
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	6a3a      	ldr	r2, [r7, #32]
 8005420:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f001 fc30 	bl	8006c88 <xTaskCreateStatic>
 8005428:	4603      	mov	r3, r0
 800542a:	613b      	str	r3, [r7, #16]
 800542c:	e013      	b.n	8005456 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d110      	bne.n	8005456 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	b29a      	uxth	r2, r3
 8005438:	f107 0310 	add.w	r3, r7, #16
 800543c:	9301      	str	r3, [sp, #4]
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f001 fc7e 	bl	8006d48 <xTaskCreate>
 800544c:	4603      	mov	r3, r0
 800544e:	2b01      	cmp	r3, #1
 8005450:	d001      	beq.n	8005456 <osThreadNew+0x11a>
            hTask = NULL;
 8005452:	2300      	movs	r3, #0
 8005454:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005456:	693b      	ldr	r3, [r7, #16]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3728      	adds	r7, #40	@ 0x28
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005468:	f3ef 8305 	mrs	r3, IPSR
 800546c:	60bb      	str	r3, [r7, #8]
  return(result);
 800546e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <osDelay+0x1c>
    stat = osErrorISR;
 8005474:	f06f 0305 	mvn.w	r3, #5
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	e007      	b.n	800548c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d002      	beq.n	800548c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f001 fda4 	bl	8006fd4 <vTaskDelay>
    }
  }

  return (stat);
 800548c:	68fb      	ldr	r3, [r7, #12]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005496:	b580      	push	{r7, lr}
 8005498:	b088      	sub	sp, #32
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800549e:	2300      	movs	r3, #0
 80054a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054a2:	f3ef 8305 	mrs	r3, IPSR
 80054a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80054a8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d174      	bne.n	8005598 <osMutexNew+0x102>
    if (attr != NULL) {
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d003      	beq.n	80054bc <osMutexNew+0x26>
      type = attr->attr_bits;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	61bb      	str	r3, [r7, #24]
 80054ba:	e001      	b.n	80054c0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d002      	beq.n	80054d0 <osMutexNew+0x3a>
      rmtx = 1U;
 80054ca:	2301      	movs	r3, #1
 80054cc:	617b      	str	r3, [r7, #20]
 80054ce:	e001      	b.n	80054d4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	f003 0308 	and.w	r3, r3, #8
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d15c      	bne.n	8005598 <osMutexNew+0x102>
      mem = -1;
 80054de:	f04f 33ff 	mov.w	r3, #4294967295
 80054e2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d015      	beq.n	8005516 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d006      	beq.n	8005500 <osMutexNew+0x6a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	2b4f      	cmp	r3, #79	@ 0x4f
 80054f8:	d902      	bls.n	8005500 <osMutexNew+0x6a>
          mem = 1;
 80054fa:	2301      	movs	r3, #1
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	e00c      	b.n	800551a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d108      	bne.n	800551a <osMutexNew+0x84>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d104      	bne.n	800551a <osMutexNew+0x84>
            mem = 0;
 8005510:	2300      	movs	r3, #0
 8005512:	613b      	str	r3, [r7, #16]
 8005514:	e001      	b.n	800551a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005516:	2300      	movs	r3, #0
 8005518:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d112      	bne.n	8005546 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d007      	beq.n	8005536 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	4619      	mov	r1, r3
 800552c:	2004      	movs	r0, #4
 800552e:	f000 fc3e 	bl	8005dae <xQueueCreateMutexStatic>
 8005532:	61f8      	str	r0, [r7, #28]
 8005534:	e016      	b.n	8005564 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	4619      	mov	r1, r3
 800553c:	2001      	movs	r0, #1
 800553e:	f000 fc36 	bl	8005dae <xQueueCreateMutexStatic>
 8005542:	61f8      	str	r0, [r7, #28]
 8005544:	e00e      	b.n	8005564 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10b      	bne.n	8005564 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d004      	beq.n	800555c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005552:	2004      	movs	r0, #4
 8005554:	f000 fc13 	bl	8005d7e <xQueueCreateMutex>
 8005558:	61f8      	str	r0, [r7, #28]
 800555a:	e003      	b.n	8005564 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800555c:	2001      	movs	r0, #1
 800555e:	f000 fc0e 	bl	8005d7e <xQueueCreateMutex>
 8005562:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00c      	beq.n	8005584 <osMutexNew+0xee>
        if (attr != NULL) {
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d003      	beq.n	8005578 <osMutexNew+0xe2>
          name = attr->name;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	e001      	b.n	800557c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005578:	2300      	movs	r3, #0
 800557a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800557c:	68f9      	ldr	r1, [r7, #12]
 800557e:	69f8      	ldr	r0, [r7, #28]
 8005580:	f001 fafa 	bl	8006b78 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d006      	beq.n	8005598 <osMutexNew+0x102>
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	f043 0301 	orr.w	r3, r3, #1
 8005596:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005598:	69fb      	ldr	r3, [r7, #28]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3720      	adds	r7, #32
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b086      	sub	sp, #24
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f023 0301 	bic.w	r3, r3, #1
 80055b2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055c0:	f3ef 8305 	mrs	r3, IPSR
 80055c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80055c6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80055cc:	f06f 0305 	mvn.w	r3, #5
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	e02c      	b.n	800562e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d103      	bne.n	80055e2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80055da:	f06f 0303 	mvn.w	r3, #3
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	e025      	b.n	800562e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d011      	beq.n	800560c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	6938      	ldr	r0, [r7, #16]
 80055ec:	f000 fc2f 	bl	8005e4e <xQueueTakeMutexRecursive>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d01b      	beq.n	800562e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80055fc:	f06f 0301 	mvn.w	r3, #1
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	e014      	b.n	800562e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005604:	f06f 0302 	mvn.w	r3, #2
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	e010      	b.n	800562e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800560c:	6839      	ldr	r1, [r7, #0]
 800560e:	6938      	ldr	r0, [r7, #16]
 8005610:	f000 ffd4 	bl	80065bc <xQueueSemaphoreTake>
 8005614:	4603      	mov	r3, r0
 8005616:	2b01      	cmp	r3, #1
 8005618:	d009      	beq.n	800562e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005620:	f06f 0301 	mvn.w	r3, #1
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	e002      	b.n	800562e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005628:	f06f 0302 	mvn.w	r3, #2
 800562c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800562e:	697b      	ldr	r3, [r7, #20]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f023 0301 	bic.w	r3, r3, #1
 8005646:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005650:	2300      	movs	r3, #0
 8005652:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005654:	f3ef 8305 	mrs	r3, IPSR
 8005658:	60bb      	str	r3, [r7, #8]
  return(result);
 800565a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005660:	f06f 0305 	mvn.w	r3, #5
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	e01f      	b.n	80056a8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d103      	bne.n	8005676 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800566e:	f06f 0303 	mvn.w	r3, #3
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	e018      	b.n	80056a8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d009      	beq.n	8005690 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800567c:	6938      	ldr	r0, [r7, #16]
 800567e:	f000 fbb1 	bl	8005de4 <xQueueGiveMutexRecursive>
 8005682:	4603      	mov	r3, r0
 8005684:	2b01      	cmp	r3, #1
 8005686:	d00f      	beq.n	80056a8 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005688:	f06f 0302 	mvn.w	r3, #2
 800568c:	617b      	str	r3, [r7, #20]
 800568e:	e00b      	b.n	80056a8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005690:	2300      	movs	r3, #0
 8005692:	2200      	movs	r2, #0
 8005694:	2100      	movs	r1, #0
 8005696:	6938      	ldr	r0, [r7, #16]
 8005698:	f000 fc7e 	bl	8005f98 <xQueueGenericSend>
 800569c:	4603      	mov	r3, r0
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d002      	beq.n	80056a8 <osMutexRelease+0x70>
        stat = osErrorResource;
 80056a2:	f06f 0302 	mvn.w	r3, #2
 80056a6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80056a8:	697b      	ldr	r3, [r7, #20]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b08a      	sub	sp, #40	@ 0x28
 80056b6:	af02      	add	r7, sp, #8
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80056be:	2300      	movs	r3, #0
 80056c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056c2:	f3ef 8305 	mrs	r3, IPSR
 80056c6:	613b      	str	r3, [r7, #16]
  return(result);
 80056c8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d175      	bne.n	80057ba <osSemaphoreNew+0x108>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d072      	beq.n	80057ba <osSemaphoreNew+0x108>
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d86e      	bhi.n	80057ba <osSemaphoreNew+0x108>
    mem = -1;
 80056dc:	f04f 33ff 	mov.w	r3, #4294967295
 80056e0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d015      	beq.n	8005714 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d006      	beq.n	80056fe <osSemaphoreNew+0x4c>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	2b4f      	cmp	r3, #79	@ 0x4f
 80056f6:	d902      	bls.n	80056fe <osSemaphoreNew+0x4c>
        mem = 1;
 80056f8:	2301      	movs	r3, #1
 80056fa:	61bb      	str	r3, [r7, #24]
 80056fc:	e00c      	b.n	8005718 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d108      	bne.n	8005718 <osSemaphoreNew+0x66>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d104      	bne.n	8005718 <osSemaphoreNew+0x66>
          mem = 0;
 800570e:	2300      	movs	r3, #0
 8005710:	61bb      	str	r3, [r7, #24]
 8005712:	e001      	b.n	8005718 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005714:	2300      	movs	r3, #0
 8005716:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571e:	d04c      	beq.n	80057ba <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d128      	bne.n	8005778 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d10a      	bne.n	8005742 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	2203      	movs	r2, #3
 8005732:	9200      	str	r2, [sp, #0]
 8005734:	2200      	movs	r2, #0
 8005736:	2100      	movs	r1, #0
 8005738:	2001      	movs	r0, #1
 800573a:	f000 fa2b 	bl	8005b94 <xQueueGenericCreateStatic>
 800573e:	61f8      	str	r0, [r7, #28]
 8005740:	e005      	b.n	800574e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005742:	2203      	movs	r2, #3
 8005744:	2100      	movs	r1, #0
 8005746:	2001      	movs	r0, #1
 8005748:	f000 faa1 	bl	8005c8e <xQueueGenericCreate>
 800574c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d022      	beq.n	800579a <osSemaphoreNew+0xe8>
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d01f      	beq.n	800579a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800575a:	2300      	movs	r3, #0
 800575c:	2200      	movs	r2, #0
 800575e:	2100      	movs	r1, #0
 8005760:	69f8      	ldr	r0, [r7, #28]
 8005762:	f000 fc19 	bl	8005f98 <xQueueGenericSend>
 8005766:	4603      	mov	r3, r0
 8005768:	2b01      	cmp	r3, #1
 800576a:	d016      	beq.n	800579a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800576c:	69f8      	ldr	r0, [r7, #28]
 800576e:	f001 f8b7 	bl	80068e0 <vQueueDelete>
            hSemaphore = NULL;
 8005772:	2300      	movs	r3, #0
 8005774:	61fb      	str	r3, [r7, #28]
 8005776:	e010      	b.n	800579a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d108      	bne.n	8005790 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	461a      	mov	r2, r3
 8005784:	68b9      	ldr	r1, [r7, #8]
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 fb98 	bl	8005ebc <xQueueCreateCountingSemaphoreStatic>
 800578c:	61f8      	str	r0, [r7, #28]
 800578e:	e004      	b.n	800579a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005790:	68b9      	ldr	r1, [r7, #8]
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 fbcb 	bl	8005f2e <xQueueCreateCountingSemaphore>
 8005798:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00c      	beq.n	80057ba <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <osSemaphoreNew+0xfc>
          name = attr->name;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	e001      	b.n	80057b2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80057ae:	2300      	movs	r3, #0
 80057b0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80057b2:	6979      	ldr	r1, [r7, #20]
 80057b4:	69f8      	ldr	r0, [r7, #28]
 80057b6:	f001 f9df 	bl	8006b78 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80057ba:	69fb      	ldr	r3, [r7, #28]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3720      	adds	r7, #32
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d103      	bne.n	80057e4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80057dc:	f06f 0303 	mvn.w	r3, #3
 80057e0:	617b      	str	r3, [r7, #20]
 80057e2:	e039      	b.n	8005858 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057e4:	f3ef 8305 	mrs	r3, IPSR
 80057e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80057ea:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d022      	beq.n	8005836 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80057f6:	f06f 0303 	mvn.w	r3, #3
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	e02c      	b.n	8005858 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80057fe:	2300      	movs	r3, #0
 8005800:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005802:	f107 0308 	add.w	r3, r7, #8
 8005806:	461a      	mov	r2, r3
 8005808:	2100      	movs	r1, #0
 800580a:	6938      	ldr	r0, [r7, #16]
 800580c:	f000 ffe6 	bl	80067dc <xQueueReceiveFromISR>
 8005810:	4603      	mov	r3, r0
 8005812:	2b01      	cmp	r3, #1
 8005814:	d003      	beq.n	800581e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005816:	f06f 0302 	mvn.w	r3, #2
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	e01c      	b.n	8005858 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d019      	beq.n	8005858 <osSemaphoreAcquire+0x94>
 8005824:	4b0f      	ldr	r3, [pc, #60]	@ (8005864 <osSemaphoreAcquire+0xa0>)
 8005826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	e010      	b.n	8005858 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005836:	6839      	ldr	r1, [r7, #0]
 8005838:	6938      	ldr	r0, [r7, #16]
 800583a:	f000 febf 	bl	80065bc <xQueueSemaphoreTake>
 800583e:	4603      	mov	r3, r0
 8005840:	2b01      	cmp	r3, #1
 8005842:	d009      	beq.n	8005858 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800584a:	f06f 0301 	mvn.w	r3, #1
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	e002      	b.n	8005858 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005852:	f06f 0302 	mvn.w	r3, #2
 8005856:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005858:	697b      	ldr	r3, [r7, #20]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	e000ed04 	.word	0xe000ed04

08005868 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005874:	2300      	movs	r3, #0
 8005876:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d103      	bne.n	8005886 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800587e:	f06f 0303 	mvn.w	r3, #3
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	e02c      	b.n	80058e0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005886:	f3ef 8305 	mrs	r3, IPSR
 800588a:	60fb      	str	r3, [r7, #12]
  return(result);
 800588c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800588e:	2b00      	cmp	r3, #0
 8005890:	d01a      	beq.n	80058c8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005892:	2300      	movs	r3, #0
 8005894:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005896:	f107 0308 	add.w	r3, r7, #8
 800589a:	4619      	mov	r1, r3
 800589c:	6938      	ldr	r0, [r7, #16]
 800589e:	f000 fd1b 	bl	80062d8 <xQueueGiveFromISR>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d003      	beq.n	80058b0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80058a8:	f06f 0302 	mvn.w	r3, #2
 80058ac:	617b      	str	r3, [r7, #20]
 80058ae:	e017      	b.n	80058e0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d014      	beq.n	80058e0 <osSemaphoreRelease+0x78>
 80058b6:	4b0d      	ldr	r3, [pc, #52]	@ (80058ec <osSemaphoreRelease+0x84>)
 80058b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	e00b      	b.n	80058e0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80058c8:	2300      	movs	r3, #0
 80058ca:	2200      	movs	r2, #0
 80058cc:	2100      	movs	r1, #0
 80058ce:	6938      	ldr	r0, [r7, #16]
 80058d0:	f000 fb62 	bl	8005f98 <xQueueGenericSend>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d002      	beq.n	80058e0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80058da:	f06f 0302 	mvn.w	r3, #2
 80058de:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80058e0:	697b      	ldr	r3, [r7, #20]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	e000ed04 	.word	0xe000ed04

080058f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4a07      	ldr	r2, [pc, #28]	@ (800591c <vApplicationGetIdleTaskMemory+0x2c>)
 8005900:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	4a06      	ldr	r2, [pc, #24]	@ (8005920 <vApplicationGetIdleTaskMemory+0x30>)
 8005906:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2280      	movs	r2, #128	@ 0x80
 800590c:	601a      	str	r2, [r3, #0]
}
 800590e:	bf00      	nop
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	200007e8 	.word	0x200007e8
 8005920:	20000844 	.word	0x20000844

08005924 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4a07      	ldr	r2, [pc, #28]	@ (8005950 <vApplicationGetTimerTaskMemory+0x2c>)
 8005934:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	4a06      	ldr	r2, [pc, #24]	@ (8005954 <vApplicationGetTimerTaskMemory+0x30>)
 800593a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005942:	601a      	str	r2, [r3, #0]
}
 8005944:	bf00      	nop
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	20000a44 	.word	0x20000a44
 8005954:	20000aa0 	.word	0x20000aa0

08005958 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f103 0208 	add.w	r2, r3, #8
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f04f 32ff 	mov.w	r2, #4294967295
 8005970:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f103 0208 	add.w	r2, r3, #8
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f103 0208 	add.w	r2, r3, #8
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	601a      	str	r2, [r3, #0]
}
 80059ee:	bf00      	nop
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059fa:	b480      	push	{r7}
 80059fc:	b085      	sub	sp, #20
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a10:	d103      	bne.n	8005a1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	e00c      	b.n	8005a34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	3308      	adds	r3, #8
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	e002      	b.n	8005a28 <vListInsert+0x2e>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d2f6      	bcs.n	8005a22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	601a      	str	r2, [r3, #0]
}
 8005a60:	bf00      	nop
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6892      	ldr	r2, [r2, #8]
 8005a82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6852      	ldr	r2, [r2, #4]
 8005a8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d103      	bne.n	8005aa0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	1e5a      	subs	r2, r3, #1
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10b      	bne.n	8005aec <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ae6:	bf00      	nop
 8005ae8:	bf00      	nop
 8005aea:	e7fd      	b.n	8005ae8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005aec:	f002 fd74 	bl	80085d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af8:	68f9      	ldr	r1, [r7, #12]
 8005afa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005afc:	fb01 f303 	mul.w	r3, r1, r3
 8005b00:	441a      	add	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	68f9      	ldr	r1, [r7, #12]
 8005b20:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b22:	fb01 f303 	mul.w	r3, r1, r3
 8005b26:	441a      	add	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	22ff      	movs	r2, #255	@ 0xff
 8005b30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	22ff      	movs	r2, #255	@ 0xff
 8005b38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d114      	bne.n	8005b6c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d01a      	beq.n	8005b80 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3310      	adds	r3, #16
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f001 fd04 	bl	800755c <xTaskRemoveFromEventList>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d012      	beq.n	8005b80 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b90 <xQueueGenericReset+0xd0>)
 8005b5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	e009      	b.n	8005b80 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	3310      	adds	r3, #16
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7ff fef1 	bl	8005958 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3324      	adds	r3, #36	@ 0x24
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff feec 	bl	8005958 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b80:	f002 fd5c 	bl	800863c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b84:	2301      	movs	r3, #1
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	e000ed04 	.word	0xe000ed04

08005b94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08e      	sub	sp, #56	@ 0x38
 8005b98:	af02      	add	r7, sp, #8
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
 8005ba0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10b      	bne.n	8005bc0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005bba:	bf00      	nop
 8005bbc:	bf00      	nop
 8005bbe:	e7fd      	b.n	8005bbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10b      	bne.n	8005bde <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005bd8:	bf00      	nop
 8005bda:	bf00      	nop
 8005bdc:	e7fd      	b.n	8005bda <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <xQueueGenericCreateStatic+0x56>
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <xQueueGenericCreateStatic+0x5a>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e000      	b.n	8005bf0 <xQueueGenericCreateStatic+0x5c>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10b      	bne.n	8005c0c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	623b      	str	r3, [r7, #32]
}
 8005c06:	bf00      	nop
 8005c08:	bf00      	nop
 8005c0a:	e7fd      	b.n	8005c08 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d102      	bne.n	8005c18 <xQueueGenericCreateStatic+0x84>
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <xQueueGenericCreateStatic+0x88>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e000      	b.n	8005c1e <xQueueGenericCreateStatic+0x8a>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10b      	bne.n	8005c3a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	61fb      	str	r3, [r7, #28]
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop
 8005c38:	e7fd      	b.n	8005c36 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c3a:	2350      	movs	r3, #80	@ 0x50
 8005c3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b50      	cmp	r3, #80	@ 0x50
 8005c42:	d00b      	beq.n	8005c5c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	61bb      	str	r3, [r7, #24]
}
 8005c56:	bf00      	nop
 8005c58:	bf00      	nop
 8005c5a:	e7fd      	b.n	8005c58 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005c5c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00d      	beq.n	8005c84 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c70:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	68b9      	ldr	r1, [r7, #8]
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 f840 	bl	8005d04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3730      	adds	r7, #48	@ 0x30
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b08a      	sub	sp, #40	@ 0x28
 8005c92:	af02      	add	r7, sp, #8
 8005c94:	60f8      	str	r0, [r7, #12]
 8005c96:	60b9      	str	r1, [r7, #8]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10b      	bne.n	8005cba <xQueueGenericCreate+0x2c>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	613b      	str	r3, [r7, #16]
}
 8005cb4:	bf00      	nop
 8005cb6:	bf00      	nop
 8005cb8:	e7fd      	b.n	8005cb6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	fb02 f303 	mul.w	r3, r2, r3
 8005cc2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	3350      	adds	r3, #80	@ 0x50
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f002 fda7 	bl	800881c <pvPortMalloc>
 8005cce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d011      	beq.n	8005cfa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	3350      	adds	r3, #80	@ 0x50
 8005cde:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ce8:	79fa      	ldrb	r2, [r7, #7]
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	68b9      	ldr	r1, [r7, #8]
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f805 	bl	8005d04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005cfa:	69bb      	ldr	r3, [r7, #24]
	}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3720      	adds	r7, #32
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
 8005d10:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d103      	bne.n	8005d20 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	e002      	b.n	8005d26 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d32:	2101      	movs	r1, #1
 8005d34:	69b8      	ldr	r0, [r7, #24]
 8005d36:	f7ff fec3 	bl	8005ac0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	78fa      	ldrb	r2, [r7, #3]
 8005d3e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d42:	bf00      	nop
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b082      	sub	sp, #8
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00e      	beq.n	8005d76 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2100      	movs	r1, #0
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f911 	bl	8005f98 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005d76:	bf00      	nop
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b086      	sub	sp, #24
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	4603      	mov	r3, r0
 8005d86:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005d90:	79fb      	ldrb	r3, [r7, #7]
 8005d92:	461a      	mov	r2, r3
 8005d94:	6939      	ldr	r1, [r7, #16]
 8005d96:	6978      	ldr	r0, [r7, #20]
 8005d98:	f7ff ff79 	bl	8005c8e <xQueueGenericCreate>
 8005d9c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f7ff ffd3 	bl	8005d4a <prvInitialiseMutex>

		return xNewQueue;
 8005da4:	68fb      	ldr	r3, [r7, #12]
	}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b088      	sub	sp, #32
 8005db2:	af02      	add	r7, sp, #8
 8005db4:	4603      	mov	r3, r0
 8005db6:	6039      	str	r1, [r7, #0]
 8005db8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	617b      	str	r3, [r7, #20]
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	6939      	ldr	r1, [r7, #16]
 8005dcc:	6978      	ldr	r0, [r7, #20]
 8005dce:	f7ff fee1 	bl	8005b94 <xQueueGenericCreateStatic>
 8005dd2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f7ff ffb8 	bl	8005d4a <prvInitialiseMutex>

		return xNewQueue;
 8005dda:	68fb      	ldr	r3, [r7, #12]
	}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005de4:	b590      	push	{r4, r7, lr}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10b      	bne.n	8005e0e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dfa:	f383 8811 	msr	BASEPRI, r3
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	60fb      	str	r3, [r7, #12]
}
 8005e08:	bf00      	nop
 8005e0a:	bf00      	nop
 8005e0c:	e7fd      	b.n	8005e0a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	689c      	ldr	r4, [r3, #8]
 8005e12:	f001 fd63 	bl	80078dc <xTaskGetCurrentTaskHandle>
 8005e16:	4603      	mov	r3, r0
 8005e18:	429c      	cmp	r4, r3
 8005e1a:	d111      	bne.n	8005e40 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	1e5a      	subs	r2, r3, #1
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d105      	bne.n	8005e3a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005e2e:	2300      	movs	r3, #0
 8005e30:	2200      	movs	r2, #0
 8005e32:	2100      	movs	r1, #0
 8005e34:	6938      	ldr	r0, [r7, #16]
 8005e36:	f000 f8af 	bl	8005f98 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	617b      	str	r3, [r7, #20]
 8005e3e:	e001      	b.n	8005e44 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005e40:	2300      	movs	r3, #0
 8005e42:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005e44:	697b      	ldr	r3, [r7, #20]
	}
 8005e46:	4618      	mov	r0, r3
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd90      	pop	{r4, r7, pc}

08005e4e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005e4e:	b590      	push	{r4, r7, lr}
 8005e50:	b087      	sub	sp, #28
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10b      	bne.n	8005e7a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8005e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	60fb      	str	r3, [r7, #12]
}
 8005e74:	bf00      	nop
 8005e76:	bf00      	nop
 8005e78:	e7fd      	b.n	8005e76 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	689c      	ldr	r4, [r3, #8]
 8005e7e:	f001 fd2d 	bl	80078dc <xTaskGetCurrentTaskHandle>
 8005e82:	4603      	mov	r3, r0
 8005e84:	429c      	cmp	r4, r3
 8005e86:	d107      	bne.n	8005e98 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005e92:	2301      	movs	r3, #1
 8005e94:	617b      	str	r3, [r7, #20]
 8005e96:	e00c      	b.n	8005eb2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005e98:	6839      	ldr	r1, [r7, #0]
 8005e9a:	6938      	ldr	r0, [r7, #16]
 8005e9c:	f000 fb8e 	bl	80065bc <xQueueSemaphoreTake>
 8005ea0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d004      	beq.n	8005eb2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005eb2:	697b      	ldr	r3, [r7, #20]
	}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	371c      	adds	r7, #28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd90      	pop	{r4, r7, pc}

08005ebc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08a      	sub	sp, #40	@ 0x28
 8005ec0:	af02      	add	r7, sp, #8
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10b      	bne.n	8005ee6 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	61bb      	str	r3, [r7, #24]
}
 8005ee0:	bf00      	nop
 8005ee2:	bf00      	nop
 8005ee4:	e7fd      	b.n	8005ee2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d90b      	bls.n	8005f06 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	617b      	str	r3, [r7, #20]
}
 8005f00:	bf00      	nop
 8005f02:	bf00      	nop
 8005f04:	e7fd      	b.n	8005f02 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005f06:	2302      	movs	r3, #2
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	2100      	movs	r1, #0
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f7ff fe3f 	bl	8005b94 <xQueueGenericCreateStatic>
 8005f16:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005f24:	69fb      	ldr	r3, [r7, #28]
	}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3720      	adds	r7, #32
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b086      	sub	sp, #24
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10b      	bne.n	8005f56 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	613b      	str	r3, [r7, #16]
}
 8005f50:	bf00      	nop
 8005f52:	bf00      	nop
 8005f54:	e7fd      	b.n	8005f52 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d90b      	bls.n	8005f76 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	60fb      	str	r3, [r7, #12]
}
 8005f70:	bf00      	nop
 8005f72:	bf00      	nop
 8005f74:	e7fd      	b.n	8005f72 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005f76:	2202      	movs	r2, #2
 8005f78:	2100      	movs	r1, #0
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7ff fe87 	bl	8005c8e <xQueueGenericCreate>
 8005f80:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d002      	beq.n	8005f8e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005f8e:	697b      	ldr	r3, [r7, #20]
	}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3718      	adds	r7, #24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b08e      	sub	sp, #56	@ 0x38
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10b      	bne.n	8005fcc <xQueueGenericSend+0x34>
	__asm volatile
 8005fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005fc6:	bf00      	nop
 8005fc8:	bf00      	nop
 8005fca:	e7fd      	b.n	8005fc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d103      	bne.n	8005fda <xQueueGenericSend+0x42>
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <xQueueGenericSend+0x46>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e000      	b.n	8005fe0 <xQueueGenericSend+0x48>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10b      	bne.n	8005ffc <xQueueGenericSend+0x64>
	__asm volatile
 8005fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ff6:	bf00      	nop
 8005ff8:	bf00      	nop
 8005ffa:	e7fd      	b.n	8005ff8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d103      	bne.n	800600a <xQueueGenericSend+0x72>
 8006002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006006:	2b01      	cmp	r3, #1
 8006008:	d101      	bne.n	800600e <xQueueGenericSend+0x76>
 800600a:	2301      	movs	r3, #1
 800600c:	e000      	b.n	8006010 <xQueueGenericSend+0x78>
 800600e:	2300      	movs	r3, #0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10b      	bne.n	800602c <xQueueGenericSend+0x94>
	__asm volatile
 8006014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	623b      	str	r3, [r7, #32]
}
 8006026:	bf00      	nop
 8006028:	bf00      	nop
 800602a:	e7fd      	b.n	8006028 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800602c:	f001 fc66 	bl	80078fc <xTaskGetSchedulerState>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d102      	bne.n	800603c <xQueueGenericSend+0xa4>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <xQueueGenericSend+0xa8>
 800603c:	2301      	movs	r3, #1
 800603e:	e000      	b.n	8006042 <xQueueGenericSend+0xaa>
 8006040:	2300      	movs	r3, #0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10b      	bne.n	800605e <xQueueGenericSend+0xc6>
	__asm volatile
 8006046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	61fb      	str	r3, [r7, #28]
}
 8006058:	bf00      	nop
 800605a:	bf00      	nop
 800605c:	e7fd      	b.n	800605a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800605e:	f002 fabb 	bl	80085d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006064:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800606a:	429a      	cmp	r2, r3
 800606c:	d302      	bcc.n	8006074 <xQueueGenericSend+0xdc>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b02      	cmp	r3, #2
 8006072:	d129      	bne.n	80060c8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800607a:	f000 fc6d 	bl	8006958 <prvCopyDataToQueue>
 800607e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006084:	2b00      	cmp	r3, #0
 8006086:	d010      	beq.n	80060aa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608a:	3324      	adds	r3, #36	@ 0x24
 800608c:	4618      	mov	r0, r3
 800608e:	f001 fa65 	bl	800755c <xTaskRemoveFromEventList>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d013      	beq.n	80060c0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006098:	4b3f      	ldr	r3, [pc, #252]	@ (8006198 <xQueueGenericSend+0x200>)
 800609a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	e00a      	b.n	80060c0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80060aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d007      	beq.n	80060c0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80060b0:	4b39      	ldr	r3, [pc, #228]	@ (8006198 <xQueueGenericSend+0x200>)
 80060b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80060c0:	f002 fabc 	bl	800863c <vPortExitCritical>
				return pdPASS;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e063      	b.n	8006190 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d103      	bne.n	80060d6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060ce:	f002 fab5 	bl	800863c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80060d2:	2300      	movs	r3, #0
 80060d4:	e05c      	b.n	8006190 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d106      	bne.n	80060ea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060dc:	f107 0314 	add.w	r3, r7, #20
 80060e0:	4618      	mov	r0, r3
 80060e2:	f001 fa9f 	bl	8007624 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060e6:	2301      	movs	r3, #1
 80060e8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060ea:	f002 faa7 	bl	800863c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060ee:	f001 f80f 	bl	8007110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060f2:	f002 fa71 	bl	80085d8 <vPortEnterCritical>
 80060f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060fc:	b25b      	sxtb	r3, r3
 80060fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006102:	d103      	bne.n	800610c <xQueueGenericSend+0x174>
 8006104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800610c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006112:	b25b      	sxtb	r3, r3
 8006114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006118:	d103      	bne.n	8006122 <xQueueGenericSend+0x18a>
 800611a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006122:	f002 fa8b 	bl	800863c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006126:	1d3a      	adds	r2, r7, #4
 8006128:	f107 0314 	add.w	r3, r7, #20
 800612c:	4611      	mov	r1, r2
 800612e:	4618      	mov	r0, r3
 8006130:	f001 fa8e 	bl	8007650 <xTaskCheckForTimeOut>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d124      	bne.n	8006184 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800613a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800613c:	f000 fd04 	bl	8006b48 <prvIsQueueFull>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d018      	beq.n	8006178 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006148:	3310      	adds	r3, #16
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	4611      	mov	r1, r2
 800614e:	4618      	mov	r0, r3
 8006150:	f001 f9b2 	bl	80074b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006154:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006156:	f000 fc8f 	bl	8006a78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800615a:	f000 ffe7 	bl	800712c <xTaskResumeAll>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	f47f af7c 	bne.w	800605e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006166:	4b0c      	ldr	r3, [pc, #48]	@ (8006198 <xQueueGenericSend+0x200>)
 8006168:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	e772      	b.n	800605e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006178:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800617a:	f000 fc7d 	bl	8006a78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800617e:	f000 ffd5 	bl	800712c <xTaskResumeAll>
 8006182:	e76c      	b.n	800605e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006184:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006186:	f000 fc77 	bl	8006a78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800618a:	f000 ffcf 	bl	800712c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800618e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006190:	4618      	mov	r0, r3
 8006192:	3738      	adds	r7, #56	@ 0x38
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	e000ed04 	.word	0xe000ed04

0800619c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b090      	sub	sp, #64	@ 0x40
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80061ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10b      	bne.n	80061cc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80061c6:	bf00      	nop
 80061c8:	bf00      	nop
 80061ca:	e7fd      	b.n	80061c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d103      	bne.n	80061da <xQueueGenericSendFromISR+0x3e>
 80061d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <xQueueGenericSendFromISR+0x42>
 80061da:	2301      	movs	r3, #1
 80061dc:	e000      	b.n	80061e0 <xQueueGenericSendFromISR+0x44>
 80061de:	2300      	movs	r3, #0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10b      	bne.n	80061fc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80061e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e8:	f383 8811 	msr	BASEPRI, r3
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80061f6:	bf00      	nop
 80061f8:	bf00      	nop
 80061fa:	e7fd      	b.n	80061f8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d103      	bne.n	800620a <xQueueGenericSendFromISR+0x6e>
 8006202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006206:	2b01      	cmp	r3, #1
 8006208:	d101      	bne.n	800620e <xQueueGenericSendFromISR+0x72>
 800620a:	2301      	movs	r3, #1
 800620c:	e000      	b.n	8006210 <xQueueGenericSendFromISR+0x74>
 800620e:	2300      	movs	r3, #0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10b      	bne.n	800622c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	623b      	str	r3, [r7, #32]
}
 8006226:	bf00      	nop
 8006228:	bf00      	nop
 800622a:	e7fd      	b.n	8006228 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800622c:	f002 fab4 	bl	8008798 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006230:	f3ef 8211 	mrs	r2, BASEPRI
 8006234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	61fa      	str	r2, [r7, #28]
 8006246:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006248:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800624a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800624c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006254:	429a      	cmp	r2, r3
 8006256:	d302      	bcc.n	800625e <xQueueGenericSendFromISR+0xc2>
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2b02      	cmp	r3, #2
 800625c:	d12f      	bne.n	80062be <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800625e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006260:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006264:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	68b9      	ldr	r1, [r7, #8]
 8006272:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006274:	f000 fb70 	bl	8006958 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006278:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800627c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006280:	d112      	bne.n	80062a8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006286:	2b00      	cmp	r3, #0
 8006288:	d016      	beq.n	80062b8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800628a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800628c:	3324      	adds	r3, #36	@ 0x24
 800628e:	4618      	mov	r0, r3
 8006290:	f001 f964 	bl	800755c <xTaskRemoveFromEventList>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00e      	beq.n	80062b8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00b      	beq.n	80062b8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	e007      	b.n	80062b8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80062a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80062ac:	3301      	adds	r3, #1
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	b25a      	sxtb	r2, r3
 80062b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80062b8:	2301      	movs	r3, #1
 80062ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80062bc:	e001      	b.n	80062c2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80062be:	2300      	movs	r3, #0
 80062c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062c4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80062cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80062ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3740      	adds	r7, #64	@ 0x40
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08e      	sub	sp, #56	@ 0x38
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80062e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10b      	bne.n	8006304 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80062ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	623b      	str	r3, [r7, #32]
}
 80062fe:	bf00      	nop
 8006300:	bf00      	nop
 8006302:	e7fd      	b.n	8006300 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00b      	beq.n	8006324 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	61fb      	str	r3, [r7, #28]
}
 800631e:	bf00      	nop
 8006320:	bf00      	nop
 8006322:	e7fd      	b.n	8006320 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d103      	bne.n	8006334 <xQueueGiveFromISR+0x5c>
 800632c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <xQueueGiveFromISR+0x60>
 8006334:	2301      	movs	r3, #1
 8006336:	e000      	b.n	800633a <xQueueGiveFromISR+0x62>
 8006338:	2300      	movs	r3, #0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10b      	bne.n	8006356 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	61bb      	str	r3, [r7, #24]
}
 8006350:	bf00      	nop
 8006352:	bf00      	nop
 8006354:	e7fd      	b.n	8006352 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006356:	f002 fa1f 	bl	8008798 <vPortValidateInterruptPriority>
	__asm volatile
 800635a:	f3ef 8211 	mrs	r2, BASEPRI
 800635e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	617a      	str	r2, [r7, #20]
 8006370:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006372:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006374:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800637a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800637c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006380:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006382:	429a      	cmp	r2, r3
 8006384:	d22b      	bcs.n	80063de <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006388:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800638c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006392:	1c5a      	adds	r2, r3, #1
 8006394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006396:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006398:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800639c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a0:	d112      	bne.n	80063c8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d016      	beq.n	80063d8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ac:	3324      	adds	r3, #36	@ 0x24
 80063ae:	4618      	mov	r0, r3
 80063b0:	f001 f8d4 	bl	800755c <xTaskRemoveFromEventList>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00e      	beq.n	80063d8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00b      	beq.n	80063d8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2201      	movs	r2, #1
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	e007      	b.n	80063d8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063cc:	3301      	adds	r3, #1
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	b25a      	sxtb	r2, r3
 80063d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80063d8:	2301      	movs	r3, #1
 80063da:	637b      	str	r3, [r7, #52]	@ 0x34
 80063dc:	e001      	b.n	80063e2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063de:	2300      	movs	r3, #0
 80063e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80063e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f383 8811 	msr	BASEPRI, r3
}
 80063ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3738      	adds	r7, #56	@ 0x38
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08c      	sub	sp, #48	@ 0x30
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006404:	2300      	movs	r3, #0
 8006406:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800640c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10b      	bne.n	800642a <xQueueReceive+0x32>
	__asm volatile
 8006412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	623b      	str	r3, [r7, #32]
}
 8006424:	bf00      	nop
 8006426:	bf00      	nop
 8006428:	e7fd      	b.n	8006426 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d103      	bne.n	8006438 <xQueueReceive+0x40>
 8006430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006434:	2b00      	cmp	r3, #0
 8006436:	d101      	bne.n	800643c <xQueueReceive+0x44>
 8006438:	2301      	movs	r3, #1
 800643a:	e000      	b.n	800643e <xQueueReceive+0x46>
 800643c:	2300      	movs	r3, #0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10b      	bne.n	800645a <xQueueReceive+0x62>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	61fb      	str	r3, [r7, #28]
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop
 8006458:	e7fd      	b.n	8006456 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800645a:	f001 fa4f 	bl	80078fc <xTaskGetSchedulerState>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d102      	bne.n	800646a <xQueueReceive+0x72>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <xQueueReceive+0x76>
 800646a:	2301      	movs	r3, #1
 800646c:	e000      	b.n	8006470 <xQueueReceive+0x78>
 800646e:	2300      	movs	r3, #0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10b      	bne.n	800648c <xQueueReceive+0x94>
	__asm volatile
 8006474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	61bb      	str	r3, [r7, #24]
}
 8006486:	bf00      	nop
 8006488:	bf00      	nop
 800648a:	e7fd      	b.n	8006488 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800648c:	f002 f8a4 	bl	80085d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006494:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	2b00      	cmp	r3, #0
 800649a:	d01f      	beq.n	80064dc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800649c:	68b9      	ldr	r1, [r7, #8]
 800649e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064a0:	f000 fac4 	bl	8006a2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a6:	1e5a      	subs	r2, r3, #1
 80064a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064aa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00f      	beq.n	80064d4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b6:	3310      	adds	r3, #16
 80064b8:	4618      	mov	r0, r3
 80064ba:	f001 f84f 	bl	800755c <xTaskRemoveFromEventList>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d007      	beq.n	80064d4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064c4:	4b3c      	ldr	r3, [pc, #240]	@ (80065b8 <xQueueReceive+0x1c0>)
 80064c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064d4:	f002 f8b2 	bl	800863c <vPortExitCritical>
				return pdPASS;
 80064d8:	2301      	movs	r3, #1
 80064da:	e069      	b.n	80065b0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d103      	bne.n	80064ea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064e2:	f002 f8ab 	bl	800863c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064e6:	2300      	movs	r3, #0
 80064e8:	e062      	b.n	80065b0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d106      	bne.n	80064fe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064f0:	f107 0310 	add.w	r3, r7, #16
 80064f4:	4618      	mov	r0, r3
 80064f6:	f001 f895 	bl	8007624 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064fa:	2301      	movs	r3, #1
 80064fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064fe:	f002 f89d 	bl	800863c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006502:	f000 fe05 	bl	8007110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006506:	f002 f867 	bl	80085d8 <vPortEnterCritical>
 800650a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006510:	b25b      	sxtb	r3, r3
 8006512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006516:	d103      	bne.n	8006520 <xQueueReceive+0x128>
 8006518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651a:	2200      	movs	r2, #0
 800651c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006522:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006526:	b25b      	sxtb	r3, r3
 8006528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652c:	d103      	bne.n	8006536 <xQueueReceive+0x13e>
 800652e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006536:	f002 f881 	bl	800863c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800653a:	1d3a      	adds	r2, r7, #4
 800653c:	f107 0310 	add.w	r3, r7, #16
 8006540:	4611      	mov	r1, r2
 8006542:	4618      	mov	r0, r3
 8006544:	f001 f884 	bl	8007650 <xTaskCheckForTimeOut>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d123      	bne.n	8006596 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800654e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006550:	f000 fae4 	bl	8006b1c <prvIsQueueEmpty>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d017      	beq.n	800658a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800655a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655c:	3324      	adds	r3, #36	@ 0x24
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	4611      	mov	r1, r2
 8006562:	4618      	mov	r0, r3
 8006564:	f000 ffa8 	bl	80074b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006568:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800656a:	f000 fa85 	bl	8006a78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800656e:	f000 fddd 	bl	800712c <xTaskResumeAll>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d189      	bne.n	800648c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006578:	4b0f      	ldr	r3, [pc, #60]	@ (80065b8 <xQueueReceive+0x1c0>)
 800657a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	e780      	b.n	800648c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800658a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800658c:	f000 fa74 	bl	8006a78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006590:	f000 fdcc 	bl	800712c <xTaskResumeAll>
 8006594:	e77a      	b.n	800648c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006596:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006598:	f000 fa6e 	bl	8006a78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800659c:	f000 fdc6 	bl	800712c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065a2:	f000 fabb 	bl	8006b1c <prvIsQueueEmpty>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f43f af6f 	beq.w	800648c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3730      	adds	r7, #48	@ 0x30
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	e000ed04 	.word	0xe000ed04

080065bc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b08e      	sub	sp, #56	@ 0x38
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80065c6:	2300      	movs	r3, #0
 80065c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80065ce:	2300      	movs	r3, #0
 80065d0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10b      	bne.n	80065f0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80065d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065dc:	f383 8811 	msr	BASEPRI, r3
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	623b      	str	r3, [r7, #32]
}
 80065ea:	bf00      	nop
 80065ec:	bf00      	nop
 80065ee:	e7fd      	b.n	80065ec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80065f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00b      	beq.n	8006610 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80065f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	61fb      	str	r3, [r7, #28]
}
 800660a:	bf00      	nop
 800660c:	bf00      	nop
 800660e:	e7fd      	b.n	800660c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006610:	f001 f974 	bl	80078fc <xTaskGetSchedulerState>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d102      	bne.n	8006620 <xQueueSemaphoreTake+0x64>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <xQueueSemaphoreTake+0x68>
 8006620:	2301      	movs	r3, #1
 8006622:	e000      	b.n	8006626 <xQueueSemaphoreTake+0x6a>
 8006624:	2300      	movs	r3, #0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10b      	bne.n	8006642 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	61bb      	str	r3, [r7, #24]
}
 800663c:	bf00      	nop
 800663e:	bf00      	nop
 8006640:	e7fd      	b.n	800663e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006642:	f001 ffc9 	bl	80085d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800664a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800664c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664e:	2b00      	cmp	r3, #0
 8006650:	d024      	beq.n	800669c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006654:	1e5a      	subs	r2, r3, #1
 8006656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006658:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800665a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d104      	bne.n	800666c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006662:	f001 fac5 	bl	8007bf0 <pvTaskIncrementMutexHeldCount>
 8006666:	4602      	mov	r2, r0
 8006668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800666c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00f      	beq.n	8006694 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006676:	3310      	adds	r3, #16
 8006678:	4618      	mov	r0, r3
 800667a:	f000 ff6f 	bl	800755c <xTaskRemoveFromEventList>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d007      	beq.n	8006694 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006684:	4b54      	ldr	r3, [pc, #336]	@ (80067d8 <xQueueSemaphoreTake+0x21c>)
 8006686:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800668a:	601a      	str	r2, [r3, #0]
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006694:	f001 ffd2 	bl	800863c <vPortExitCritical>
				return pdPASS;
 8006698:	2301      	movs	r3, #1
 800669a:	e098      	b.n	80067ce <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d112      	bne.n	80066c8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80066a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00b      	beq.n	80066c0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80066a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	617b      	str	r3, [r7, #20]
}
 80066ba:	bf00      	nop
 80066bc:	bf00      	nop
 80066be:	e7fd      	b.n	80066bc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80066c0:	f001 ffbc 	bl	800863c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80066c4:	2300      	movs	r3, #0
 80066c6:	e082      	b.n	80067ce <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d106      	bne.n	80066dc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066ce:	f107 030c 	add.w	r3, r7, #12
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 ffa6 	bl	8007624 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066d8:	2301      	movs	r3, #1
 80066da:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066dc:	f001 ffae 	bl	800863c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066e0:	f000 fd16 	bl	8007110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066e4:	f001 ff78 	bl	80085d8 <vPortEnterCritical>
 80066e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066ee:	b25b      	sxtb	r3, r3
 80066f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f4:	d103      	bne.n	80066fe <xQueueSemaphoreTake+0x142>
 80066f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006700:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006704:	b25b      	sxtb	r3, r3
 8006706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670a:	d103      	bne.n	8006714 <xQueueSemaphoreTake+0x158>
 800670c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006714:	f001 ff92 	bl	800863c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006718:	463a      	mov	r2, r7
 800671a:	f107 030c 	add.w	r3, r7, #12
 800671e:	4611      	mov	r1, r2
 8006720:	4618      	mov	r0, r3
 8006722:	f000 ff95 	bl	8007650 <xTaskCheckForTimeOut>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d132      	bne.n	8006792 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800672c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800672e:	f000 f9f5 	bl	8006b1c <prvIsQueueEmpty>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d026      	beq.n	8006786 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d109      	bne.n	8006754 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006740:	f001 ff4a 	bl	80085d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	4618      	mov	r0, r3
 800674a:	f001 f8f5 	bl	8007938 <xTaskPriorityInherit>
 800674e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006750:	f001 ff74 	bl	800863c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006756:	3324      	adds	r3, #36	@ 0x24
 8006758:	683a      	ldr	r2, [r7, #0]
 800675a:	4611      	mov	r1, r2
 800675c:	4618      	mov	r0, r3
 800675e:	f000 feab 	bl	80074b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006762:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006764:	f000 f988 	bl	8006a78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006768:	f000 fce0 	bl	800712c <xTaskResumeAll>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	f47f af67 	bne.w	8006642 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006774:	4b18      	ldr	r3, [pc, #96]	@ (80067d8 <xQueueSemaphoreTake+0x21c>)
 8006776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	e75d      	b.n	8006642 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006786:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006788:	f000 f976 	bl	8006a78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800678c:	f000 fcce 	bl	800712c <xTaskResumeAll>
 8006790:	e757      	b.n	8006642 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006792:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006794:	f000 f970 	bl	8006a78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006798:	f000 fcc8 	bl	800712c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800679c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800679e:	f000 f9bd 	bl	8006b1c <prvIsQueueEmpty>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f43f af4c 	beq.w	8006642 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80067aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00d      	beq.n	80067cc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80067b0:	f001 ff12 	bl	80085d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80067b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067b6:	f000 f8b7 	bl	8006928 <prvGetDisinheritPriorityAfterTimeout>
 80067ba:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80067bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067c2:	4618      	mov	r0, r3
 80067c4:	f001 f990 	bl	8007ae8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80067c8:	f001 ff38 	bl	800863c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80067cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3738      	adds	r7, #56	@ 0x38
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	e000ed04 	.word	0xe000ed04

080067dc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08e      	sub	sp, #56	@ 0x38
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80067ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10b      	bne.n	800680a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	623b      	str	r3, [r7, #32]
}
 8006804:	bf00      	nop
 8006806:	bf00      	nop
 8006808:	e7fd      	b.n	8006806 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d103      	bne.n	8006818 <xQueueReceiveFromISR+0x3c>
 8006810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <xQueueReceiveFromISR+0x40>
 8006818:	2301      	movs	r3, #1
 800681a:	e000      	b.n	800681e <xQueueReceiveFromISR+0x42>
 800681c:	2300      	movs	r3, #0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10b      	bne.n	800683a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	61fb      	str	r3, [r7, #28]
}
 8006834:	bf00      	nop
 8006836:	bf00      	nop
 8006838:	e7fd      	b.n	8006836 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800683a:	f001 ffad 	bl	8008798 <vPortValidateInterruptPriority>
	__asm volatile
 800683e:	f3ef 8211 	mrs	r2, BASEPRI
 8006842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	61ba      	str	r2, [r7, #24]
 8006854:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006856:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006858:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800685a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006862:	2b00      	cmp	r3, #0
 8006864:	d02f      	beq.n	80068c6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006868:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800686c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006870:	68b9      	ldr	r1, [r7, #8]
 8006872:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006874:	f000 f8da 	bl	8006a2c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687a:	1e5a      	subs	r2, r3, #1
 800687c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006880:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006888:	d112      	bne.n	80068b0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800688a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d016      	beq.n	80068c0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006894:	3310      	adds	r3, #16
 8006896:	4618      	mov	r0, r3
 8006898:	f000 fe60 	bl	800755c <xTaskRemoveFromEventList>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00e      	beq.n	80068c0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00b      	beq.n	80068c0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	e007      	b.n	80068c0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80068b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80068b4:	3301      	adds	r3, #1
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	b25a      	sxtb	r2, r3
 80068ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80068c0:	2301      	movs	r3, #1
 80068c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80068c4:	e001      	b.n	80068ca <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80068c6:	2300      	movs	r3, #0
 80068c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f383 8811 	msr	BASEPRI, r3
}
 80068d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80068d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3738      	adds	r7, #56	@ 0x38
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10b      	bne.n	800690a <vQueueDelete+0x2a>
	__asm volatile
 80068f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	60bb      	str	r3, [r7, #8]
}
 8006904:	bf00      	nop
 8006906:	bf00      	nop
 8006908:	e7fd      	b.n	8006906 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 f95e 	bl	8006bcc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006916:	2b00      	cmp	r3, #0
 8006918:	d102      	bne.n	8006920 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f002 f84c 	bl	80089b8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006920:	bf00      	nop
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006934:	2b00      	cmp	r3, #0
 8006936:	d006      	beq.n	8006946 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	e001      	b.n	800694a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006946:	2300      	movs	r3, #0
 8006948:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800694a:	68fb      	ldr	r3, [r7, #12]
	}
 800694c:	4618      	mov	r0, r3
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006964:	2300      	movs	r3, #0
 8006966:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800696c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10d      	bne.n	8006992 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d14d      	bne.n	8006a1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	4618      	mov	r0, r3
 8006984:	f001 f840 	bl	8007a08 <xTaskPriorityDisinherit>
 8006988:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	609a      	str	r2, [r3, #8]
 8006990:	e043      	b.n	8006a1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d119      	bne.n	80069cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6858      	ldr	r0, [r3, #4]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a0:	461a      	mov	r2, r3
 80069a2:	68b9      	ldr	r1, [r7, #8]
 80069a4:	f002 f954 	bl	8008c50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b0:	441a      	add	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d32b      	bcc.n	8006a1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	605a      	str	r2, [r3, #4]
 80069ca:	e026      	b.n	8006a1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	68d8      	ldr	r0, [r3, #12]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d4:	461a      	mov	r2, r3
 80069d6:	68b9      	ldr	r1, [r7, #8]
 80069d8:	f002 f93a 	bl	8008c50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	68da      	ldr	r2, [r3, #12]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e4:	425b      	negs	r3, r3
 80069e6:	441a      	add	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	68da      	ldr	r2, [r3, #12]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d207      	bcs.n	8006a08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a00:	425b      	negs	r3, r3
 8006a02:	441a      	add	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d105      	bne.n	8006a1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d002      	beq.n	8006a1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006a22:	697b      	ldr	r3, [r7, #20]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d018      	beq.n	8006a70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a46:	441a      	add	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d303      	bcc.n	8006a60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68d9      	ldr	r1, [r3, #12]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a68:	461a      	mov	r2, r3
 8006a6a:	6838      	ldr	r0, [r7, #0]
 8006a6c:	f002 f8f0 	bl	8008c50 <memcpy>
	}
}
 8006a70:	bf00      	nop
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a80:	f001 fdaa 	bl	80085d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a8c:	e011      	b.n	8006ab2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d012      	beq.n	8006abc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	3324      	adds	r3, #36	@ 0x24
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 fd5e 	bl	800755c <xTaskRemoveFromEventList>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006aa6:	f000 fe37 	bl	8007718 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	dce9      	bgt.n	8006a8e <prvUnlockQueue+0x16>
 8006aba:	e000      	b.n	8006abe <prvUnlockQueue+0x46>
					break;
 8006abc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	22ff      	movs	r2, #255	@ 0xff
 8006ac2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006ac6:	f001 fdb9 	bl	800863c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006aca:	f001 fd85 	bl	80085d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ad4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ad6:	e011      	b.n	8006afc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d012      	beq.n	8006b06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	3310      	adds	r3, #16
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 fd39 	bl	800755c <xTaskRemoveFromEventList>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006af0:	f000 fe12 	bl	8007718 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006af4:	7bbb      	ldrb	r3, [r7, #14]
 8006af6:	3b01      	subs	r3, #1
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006afc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	dce9      	bgt.n	8006ad8 <prvUnlockQueue+0x60>
 8006b04:	e000      	b.n	8006b08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006b06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	22ff      	movs	r2, #255	@ 0xff
 8006b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006b10:	f001 fd94 	bl	800863c <vPortExitCritical>
}
 8006b14:	bf00      	nop
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b24:	f001 fd58 	bl	80085d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d102      	bne.n	8006b36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006b30:	2301      	movs	r3, #1
 8006b32:	60fb      	str	r3, [r7, #12]
 8006b34:	e001      	b.n	8006b3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006b36:	2300      	movs	r3, #0
 8006b38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b3a:	f001 fd7f 	bl	800863c <vPortExitCritical>

	return xReturn;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b50:	f001 fd42 	bl	80085d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d102      	bne.n	8006b66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006b60:	2301      	movs	r3, #1
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	e001      	b.n	8006b6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b6a:	f001 fd67 	bl	800863c <vPortExitCritical>

	return xReturn;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b82:	2300      	movs	r3, #0
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	e014      	b.n	8006bb2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b88:	4a0f      	ldr	r2, [pc, #60]	@ (8006bc8 <vQueueAddToRegistry+0x50>)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10b      	bne.n	8006bac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b94:	490c      	ldr	r1, [pc, #48]	@ (8006bc8 <vQueueAddToRegistry+0x50>)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	683a      	ldr	r2, [r7, #0]
 8006b9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8006bc8 <vQueueAddToRegistry+0x50>)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	00db      	lsls	r3, r3, #3
 8006ba4:	4413      	add	r3, r2
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006baa:	e006      	b.n	8006bba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	60fb      	str	r3, [r7, #12]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2b07      	cmp	r3, #7
 8006bb6:	d9e7      	bls.n	8006b88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006bb8:	bf00      	nop
 8006bba:	bf00      	nop
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	20000ea0 	.word	0x20000ea0

08006bcc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	e016      	b.n	8006c08 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006bda:	4a10      	ldr	r2, [pc, #64]	@ (8006c1c <vQueueUnregisterQueue+0x50>)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	4413      	add	r3, r2
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d10b      	bne.n	8006c02 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006bea:	4a0c      	ldr	r2, [pc, #48]	@ (8006c1c <vQueueUnregisterQueue+0x50>)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2100      	movs	r1, #0
 8006bf0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006bf4:	4a09      	ldr	r2, [pc, #36]	@ (8006c1c <vQueueUnregisterQueue+0x50>)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	00db      	lsls	r3, r3, #3
 8006bfa:	4413      	add	r3, r2
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	605a      	str	r2, [r3, #4]
				break;
 8006c00:	e006      	b.n	8006c10 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3301      	adds	r3, #1
 8006c06:	60fb      	str	r3, [r7, #12]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2b07      	cmp	r3, #7
 8006c0c:	d9e5      	bls.n	8006bda <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006c0e:	bf00      	nop
 8006c10:	bf00      	nop
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	20000ea0 	.word	0x20000ea0

08006c20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006c30:	f001 fcd2 	bl	80085d8 <vPortEnterCritical>
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c3a:	b25b      	sxtb	r3, r3
 8006c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c40:	d103      	bne.n	8006c4a <vQueueWaitForMessageRestricted+0x2a>
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c50:	b25b      	sxtb	r3, r3
 8006c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c56:	d103      	bne.n	8006c60 <vQueueWaitForMessageRestricted+0x40>
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c60:	f001 fcec 	bl	800863c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d106      	bne.n	8006c7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	3324      	adds	r3, #36	@ 0x24
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	68b9      	ldr	r1, [r7, #8]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 fc45 	bl	8007504 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006c7a:	6978      	ldr	r0, [r7, #20]
 8006c7c:	f7ff fefc 	bl	8006a78 <prvUnlockQueue>
	}
 8006c80:	bf00      	nop
 8006c82:	3718      	adds	r7, #24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b08e      	sub	sp, #56	@ 0x38
 8006c8c:	af04      	add	r7, sp, #16
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
 8006c94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10b      	bne.n	8006cb4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca0:	f383 8811 	msr	BASEPRI, r3
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	623b      	str	r3, [r7, #32]
}
 8006cae:	bf00      	nop
 8006cb0:	bf00      	nop
 8006cb2:	e7fd      	b.n	8006cb0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10b      	bne.n	8006cd2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	61fb      	str	r3, [r7, #28]
}
 8006ccc:	bf00      	nop
 8006cce:	bf00      	nop
 8006cd0:	e7fd      	b.n	8006cce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006cd2:	235c      	movs	r3, #92	@ 0x5c
 8006cd4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	2b5c      	cmp	r3, #92	@ 0x5c
 8006cda:	d00b      	beq.n	8006cf4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	61bb      	str	r3, [r7, #24]
}
 8006cee:	bf00      	nop
 8006cf0:	bf00      	nop
 8006cf2:	e7fd      	b.n	8006cf0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006cf4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d01e      	beq.n	8006d3a <xTaskCreateStatic+0xb2>
 8006cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d01b      	beq.n	8006d3a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d04:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d0a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0e:	2202      	movs	r2, #2
 8006d10:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d14:	2300      	movs	r3, #0
 8006d16:	9303      	str	r3, [sp, #12]
 8006d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1a:	9302      	str	r3, [sp, #8]
 8006d1c:	f107 0314 	add.w	r3, r7, #20
 8006d20:	9301      	str	r3, [sp, #4]
 8006d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	68b9      	ldr	r1, [r7, #8]
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 f850 	bl	8006dd2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006d34:	f000 f8de 	bl	8006ef4 <prvAddNewTaskToReadyList>
 8006d38:	e001      	b.n	8006d3e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d3e:	697b      	ldr	r3, [r7, #20]
	}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3728      	adds	r7, #40	@ 0x28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b08c      	sub	sp, #48	@ 0x30
 8006d4c:	af04      	add	r7, sp, #16
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	603b      	str	r3, [r7, #0]
 8006d54:	4613      	mov	r3, r2
 8006d56:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006d58:	88fb      	ldrh	r3, [r7, #6]
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f001 fd5d 	bl	800881c <pvPortMalloc>
 8006d62:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00e      	beq.n	8006d88 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006d6a:	205c      	movs	r0, #92	@ 0x5c
 8006d6c:	f001 fd56 	bl	800881c <pvPortMalloc>
 8006d70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d7e:	e005      	b.n	8006d8c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006d80:	6978      	ldr	r0, [r7, #20]
 8006d82:	f001 fe19 	bl	80089b8 <vPortFree>
 8006d86:	e001      	b.n	8006d8c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d017      	beq.n	8006dc2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006d9a:	88fa      	ldrh	r2, [r7, #6]
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	9303      	str	r3, [sp, #12]
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	9302      	str	r3, [sp, #8]
 8006da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da6:	9301      	str	r3, [sp, #4]
 8006da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	68b9      	ldr	r1, [r7, #8]
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 f80e 	bl	8006dd2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006db6:	69f8      	ldr	r0, [r7, #28]
 8006db8:	f000 f89c 	bl	8006ef4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	61bb      	str	r3, [r7, #24]
 8006dc0:	e002      	b.n	8006dc8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006dc8:	69bb      	ldr	r3, [r7, #24]
	}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3720      	adds	r7, #32
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b088      	sub	sp, #32
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	60f8      	str	r0, [r7, #12]
 8006dda:	60b9      	str	r1, [r7, #8]
 8006ddc:	607a      	str	r2, [r7, #4]
 8006dde:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	461a      	mov	r2, r3
 8006dea:	21a5      	movs	r1, #165	@ 0xa5
 8006dec:	f001 ff04 	bl	8008bf8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	f023 0307 	bic.w	r3, r3, #7
 8006e08:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00b      	beq.n	8006e2c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	617b      	str	r3, [r7, #20]
}
 8006e26:	bf00      	nop
 8006e28:	bf00      	nop
 8006e2a:	e7fd      	b.n	8006e28 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d01f      	beq.n	8006e72 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e32:	2300      	movs	r3, #0
 8006e34:	61fb      	str	r3, [r7, #28]
 8006e36:	e012      	b.n	8006e5e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	7819      	ldrb	r1, [r3, #0]
 8006e40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	4413      	add	r3, r2
 8006e46:	3334      	adds	r3, #52	@ 0x34
 8006e48:	460a      	mov	r2, r1
 8006e4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	4413      	add	r3, r2
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d006      	beq.n	8006e66 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	61fb      	str	r3, [r7, #28]
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	2b0f      	cmp	r3, #15
 8006e62:	d9e9      	bls.n	8006e38 <prvInitialiseNewTask+0x66>
 8006e64:	e000      	b.n	8006e68 <prvInitialiseNewTask+0x96>
			{
				break;
 8006e66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e70:	e003      	b.n	8006e7a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e7c:	2b37      	cmp	r3, #55	@ 0x37
 8006e7e:	d901      	bls.n	8006e84 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e80:	2337      	movs	r3, #55	@ 0x37
 8006e82:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e88:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e8e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e92:	2200      	movs	r2, #0
 8006e94:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e98:	3304      	adds	r3, #4
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fe fd7c 	bl	8005998 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea2:	3318      	adds	r3, #24
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7fe fd77 	bl	8005998 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ebc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ebe:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	68f9      	ldr	r1, [r7, #12]
 8006ed2:	69b8      	ldr	r0, [r7, #24]
 8006ed4:	f001 fa4e 	bl	8008374 <pxPortInitialiseStack>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006edc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d002      	beq.n	8006eea <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ee8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006eea:	bf00      	nop
 8006eec:	3720      	adds	r7, #32
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
	...

08006ef4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006efc:	f001 fb6c 	bl	80085d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f00:	4b2d      	ldr	r3, [pc, #180]	@ (8006fb8 <prvAddNewTaskToReadyList+0xc4>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3301      	adds	r3, #1
 8006f06:	4a2c      	ldr	r2, [pc, #176]	@ (8006fb8 <prvAddNewTaskToReadyList+0xc4>)
 8006f08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f0a:	4b2c      	ldr	r3, [pc, #176]	@ (8006fbc <prvAddNewTaskToReadyList+0xc8>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d109      	bne.n	8006f26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f12:	4a2a      	ldr	r2, [pc, #168]	@ (8006fbc <prvAddNewTaskToReadyList+0xc8>)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f18:	4b27      	ldr	r3, [pc, #156]	@ (8006fb8 <prvAddNewTaskToReadyList+0xc4>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d110      	bne.n	8006f42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f20:	f000 fc1e 	bl	8007760 <prvInitialiseTaskLists>
 8006f24:	e00d      	b.n	8006f42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f26:	4b26      	ldr	r3, [pc, #152]	@ (8006fc0 <prvAddNewTaskToReadyList+0xcc>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d109      	bne.n	8006f42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f2e:	4b23      	ldr	r3, [pc, #140]	@ (8006fbc <prvAddNewTaskToReadyList+0xc8>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d802      	bhi.n	8006f42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8006fbc <prvAddNewTaskToReadyList+0xc8>)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006f42:	4b20      	ldr	r3, [pc, #128]	@ (8006fc4 <prvAddNewTaskToReadyList+0xd0>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3301      	adds	r3, #1
 8006f48:	4a1e      	ldr	r2, [pc, #120]	@ (8006fc4 <prvAddNewTaskToReadyList+0xd0>)
 8006f4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8006fc4 <prvAddNewTaskToReadyList+0xd0>)
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f58:	4b1b      	ldr	r3, [pc, #108]	@ (8006fc8 <prvAddNewTaskToReadyList+0xd4>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d903      	bls.n	8006f68 <prvAddNewTaskToReadyList+0x74>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f64:	4a18      	ldr	r2, [pc, #96]	@ (8006fc8 <prvAddNewTaskToReadyList+0xd4>)
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4a15      	ldr	r2, [pc, #84]	@ (8006fcc <prvAddNewTaskToReadyList+0xd8>)
 8006f76:	441a      	add	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4610      	mov	r0, r2
 8006f80:	f7fe fd17 	bl	80059b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f84:	f001 fb5a 	bl	800863c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f88:	4b0d      	ldr	r3, [pc, #52]	@ (8006fc0 <prvAddNewTaskToReadyList+0xcc>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00e      	beq.n	8006fae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f90:	4b0a      	ldr	r3, [pc, #40]	@ (8006fbc <prvAddNewTaskToReadyList+0xc8>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d207      	bcs.n	8006fae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006fd0 <prvAddNewTaskToReadyList+0xdc>)
 8006fa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fa4:	601a      	str	r2, [r3, #0]
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fae:	bf00      	nop
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	200013b4 	.word	0x200013b4
 8006fbc:	20000ee0 	.word	0x20000ee0
 8006fc0:	200013c0 	.word	0x200013c0
 8006fc4:	200013d0 	.word	0x200013d0
 8006fc8:	200013bc 	.word	0x200013bc
 8006fcc:	20000ee4 	.word	0x20000ee4
 8006fd0:	e000ed04 	.word	0xe000ed04

08006fd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d018      	beq.n	8007018 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006fe6:	4b14      	ldr	r3, [pc, #80]	@ (8007038 <vTaskDelay+0x64>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00b      	beq.n	8007006 <vTaskDelay+0x32>
	__asm volatile
 8006fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	60bb      	str	r3, [r7, #8]
}
 8007000:	bf00      	nop
 8007002:	bf00      	nop
 8007004:	e7fd      	b.n	8007002 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007006:	f000 f883 	bl	8007110 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800700a:	2100      	movs	r1, #0
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fe03 	bl	8007c18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007012:	f000 f88b 	bl	800712c <xTaskResumeAll>
 8007016:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d107      	bne.n	800702e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800701e:	4b07      	ldr	r3, [pc, #28]	@ (800703c <vTaskDelay+0x68>)
 8007020:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007024:	601a      	str	r2, [r3, #0]
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800702e:	bf00      	nop
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	200013dc 	.word	0x200013dc
 800703c:	e000ed04 	.word	0xe000ed04

08007040 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b08a      	sub	sp, #40	@ 0x28
 8007044:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007046:	2300      	movs	r3, #0
 8007048:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800704a:	2300      	movs	r3, #0
 800704c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800704e:	463a      	mov	r2, r7
 8007050:	1d39      	adds	r1, r7, #4
 8007052:	f107 0308 	add.w	r3, r7, #8
 8007056:	4618      	mov	r0, r3
 8007058:	f7fe fc4a 	bl	80058f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	9202      	str	r2, [sp, #8]
 8007064:	9301      	str	r3, [sp, #4]
 8007066:	2300      	movs	r3, #0
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	2300      	movs	r3, #0
 800706c:	460a      	mov	r2, r1
 800706e:	4922      	ldr	r1, [pc, #136]	@ (80070f8 <vTaskStartScheduler+0xb8>)
 8007070:	4822      	ldr	r0, [pc, #136]	@ (80070fc <vTaskStartScheduler+0xbc>)
 8007072:	f7ff fe09 	bl	8006c88 <xTaskCreateStatic>
 8007076:	4603      	mov	r3, r0
 8007078:	4a21      	ldr	r2, [pc, #132]	@ (8007100 <vTaskStartScheduler+0xc0>)
 800707a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800707c:	4b20      	ldr	r3, [pc, #128]	@ (8007100 <vTaskStartScheduler+0xc0>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007084:	2301      	movs	r3, #1
 8007086:	617b      	str	r3, [r7, #20]
 8007088:	e001      	b.n	800708e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800708a:	2300      	movs	r3, #0
 800708c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d102      	bne.n	800709a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007094:	f000 fe14 	bl	8007cc0 <xTimerCreateTimerTask>
 8007098:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d116      	bne.n	80070ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80070a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	613b      	str	r3, [r7, #16]
}
 80070b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80070b4:	4b13      	ldr	r3, [pc, #76]	@ (8007104 <vTaskStartScheduler+0xc4>)
 80070b6:	f04f 32ff 	mov.w	r2, #4294967295
 80070ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80070bc:	4b12      	ldr	r3, [pc, #72]	@ (8007108 <vTaskStartScheduler+0xc8>)
 80070be:	2201      	movs	r2, #1
 80070c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80070c2:	4b12      	ldr	r3, [pc, #72]	@ (800710c <vTaskStartScheduler+0xcc>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80070c8:	f001 f9e2 	bl	8008490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80070cc:	e00f      	b.n	80070ee <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d4:	d10b      	bne.n	80070ee <vTaskStartScheduler+0xae>
	__asm volatile
 80070d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070da:	f383 8811 	msr	BASEPRI, r3
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	60fb      	str	r3, [r7, #12]
}
 80070e8:	bf00      	nop
 80070ea:	bf00      	nop
 80070ec:	e7fd      	b.n	80070ea <vTaskStartScheduler+0xaa>
}
 80070ee:	bf00      	nop
 80070f0:	3718      	adds	r7, #24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	08008ca8 	.word	0x08008ca8
 80070fc:	08007731 	.word	0x08007731
 8007100:	200013d8 	.word	0x200013d8
 8007104:	200013d4 	.word	0x200013d4
 8007108:	200013c0 	.word	0x200013c0
 800710c:	200013b8 	.word	0x200013b8

08007110 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007110:	b480      	push	{r7}
 8007112:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007114:	4b04      	ldr	r3, [pc, #16]	@ (8007128 <vTaskSuspendAll+0x18>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	3301      	adds	r3, #1
 800711a:	4a03      	ldr	r2, [pc, #12]	@ (8007128 <vTaskSuspendAll+0x18>)
 800711c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800711e:	bf00      	nop
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr
 8007128:	200013dc 	.word	0x200013dc

0800712c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007132:	2300      	movs	r3, #0
 8007134:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007136:	2300      	movs	r3, #0
 8007138:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800713a:	4b42      	ldr	r3, [pc, #264]	@ (8007244 <xTaskResumeAll+0x118>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10b      	bne.n	800715a <xTaskResumeAll+0x2e>
	__asm volatile
 8007142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	603b      	str	r3, [r7, #0]
}
 8007154:	bf00      	nop
 8007156:	bf00      	nop
 8007158:	e7fd      	b.n	8007156 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800715a:	f001 fa3d 	bl	80085d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800715e:	4b39      	ldr	r3, [pc, #228]	@ (8007244 <xTaskResumeAll+0x118>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3b01      	subs	r3, #1
 8007164:	4a37      	ldr	r2, [pc, #220]	@ (8007244 <xTaskResumeAll+0x118>)
 8007166:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007168:	4b36      	ldr	r3, [pc, #216]	@ (8007244 <xTaskResumeAll+0x118>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d162      	bne.n	8007236 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007170:	4b35      	ldr	r3, [pc, #212]	@ (8007248 <xTaskResumeAll+0x11c>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d05e      	beq.n	8007236 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007178:	e02f      	b.n	80071da <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800717a:	4b34      	ldr	r3, [pc, #208]	@ (800724c <xTaskResumeAll+0x120>)
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	3318      	adds	r3, #24
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe fc70 	bl	8005a6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	3304      	adds	r3, #4
 8007190:	4618      	mov	r0, r3
 8007192:	f7fe fc6b 	bl	8005a6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800719a:	4b2d      	ldr	r3, [pc, #180]	@ (8007250 <xTaskResumeAll+0x124>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d903      	bls.n	80071aa <xTaskResumeAll+0x7e>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a6:	4a2a      	ldr	r2, [pc, #168]	@ (8007250 <xTaskResumeAll+0x124>)
 80071a8:	6013      	str	r3, [r2, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ae:	4613      	mov	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4a27      	ldr	r2, [pc, #156]	@ (8007254 <xTaskResumeAll+0x128>)
 80071b8:	441a      	add	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	3304      	adds	r3, #4
 80071be:	4619      	mov	r1, r3
 80071c0:	4610      	mov	r0, r2
 80071c2:	f7fe fbf6 	bl	80059b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ca:	4b23      	ldr	r3, [pc, #140]	@ (8007258 <xTaskResumeAll+0x12c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d302      	bcc.n	80071da <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80071d4:	4b21      	ldr	r3, [pc, #132]	@ (800725c <xTaskResumeAll+0x130>)
 80071d6:	2201      	movs	r2, #1
 80071d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071da:	4b1c      	ldr	r3, [pc, #112]	@ (800724c <xTaskResumeAll+0x120>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1cb      	bne.n	800717a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d001      	beq.n	80071ec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80071e8:	f000 fb58 	bl	800789c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80071ec:	4b1c      	ldr	r3, [pc, #112]	@ (8007260 <xTaskResumeAll+0x134>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d010      	beq.n	800721a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80071f8:	f000 f846 	bl	8007288 <xTaskIncrementTick>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007202:	4b16      	ldr	r3, [pc, #88]	@ (800725c <xTaskResumeAll+0x130>)
 8007204:	2201      	movs	r2, #1
 8007206:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	3b01      	subs	r3, #1
 800720c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1f1      	bne.n	80071f8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007214:	4b12      	ldr	r3, [pc, #72]	@ (8007260 <xTaskResumeAll+0x134>)
 8007216:	2200      	movs	r2, #0
 8007218:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800721a:	4b10      	ldr	r3, [pc, #64]	@ (800725c <xTaskResumeAll+0x130>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d009      	beq.n	8007236 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007222:	2301      	movs	r3, #1
 8007224:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007226:	4b0f      	ldr	r3, [pc, #60]	@ (8007264 <xTaskResumeAll+0x138>)
 8007228:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800722c:	601a      	str	r2, [r3, #0]
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007236:	f001 fa01 	bl	800863c <vPortExitCritical>

	return xAlreadyYielded;
 800723a:	68bb      	ldr	r3, [r7, #8]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	200013dc 	.word	0x200013dc
 8007248:	200013b4 	.word	0x200013b4
 800724c:	20001374 	.word	0x20001374
 8007250:	200013bc 	.word	0x200013bc
 8007254:	20000ee4 	.word	0x20000ee4
 8007258:	20000ee0 	.word	0x20000ee0
 800725c:	200013c8 	.word	0x200013c8
 8007260:	200013c4 	.word	0x200013c4
 8007264:	e000ed04 	.word	0xe000ed04

08007268 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800726e:	4b05      	ldr	r3, [pc, #20]	@ (8007284 <xTaskGetTickCount+0x1c>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007274:	687b      	ldr	r3, [r7, #4]
}
 8007276:	4618      	mov	r0, r3
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	200013b8 	.word	0x200013b8

08007288 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800728e:	2300      	movs	r3, #0
 8007290:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007292:	4b4f      	ldr	r3, [pc, #316]	@ (80073d0 <xTaskIncrementTick+0x148>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	f040 8090 	bne.w	80073bc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800729c:	4b4d      	ldr	r3, [pc, #308]	@ (80073d4 <xTaskIncrementTick+0x14c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3301      	adds	r3, #1
 80072a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80072a4:	4a4b      	ldr	r2, [pc, #300]	@ (80073d4 <xTaskIncrementTick+0x14c>)
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d121      	bne.n	80072f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80072b0:	4b49      	ldr	r3, [pc, #292]	@ (80073d8 <xTaskIncrementTick+0x150>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00b      	beq.n	80072d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80072ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072be:	f383 8811 	msr	BASEPRI, r3
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	603b      	str	r3, [r7, #0]
}
 80072cc:	bf00      	nop
 80072ce:	bf00      	nop
 80072d0:	e7fd      	b.n	80072ce <xTaskIncrementTick+0x46>
 80072d2:	4b41      	ldr	r3, [pc, #260]	@ (80073d8 <xTaskIncrementTick+0x150>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	60fb      	str	r3, [r7, #12]
 80072d8:	4b40      	ldr	r3, [pc, #256]	@ (80073dc <xTaskIncrementTick+0x154>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a3e      	ldr	r2, [pc, #248]	@ (80073d8 <xTaskIncrementTick+0x150>)
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	4a3e      	ldr	r2, [pc, #248]	@ (80073dc <xTaskIncrementTick+0x154>)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6013      	str	r3, [r2, #0]
 80072e6:	4b3e      	ldr	r3, [pc, #248]	@ (80073e0 <xTaskIncrementTick+0x158>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	3301      	adds	r3, #1
 80072ec:	4a3c      	ldr	r2, [pc, #240]	@ (80073e0 <xTaskIncrementTick+0x158>)
 80072ee:	6013      	str	r3, [r2, #0]
 80072f0:	f000 fad4 	bl	800789c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80072f4:	4b3b      	ldr	r3, [pc, #236]	@ (80073e4 <xTaskIncrementTick+0x15c>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d349      	bcc.n	8007392 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072fe:	4b36      	ldr	r3, [pc, #216]	@ (80073d8 <xTaskIncrementTick+0x150>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d104      	bne.n	8007312 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007308:	4b36      	ldr	r3, [pc, #216]	@ (80073e4 <xTaskIncrementTick+0x15c>)
 800730a:	f04f 32ff 	mov.w	r2, #4294967295
 800730e:	601a      	str	r2, [r3, #0]
					break;
 8007310:	e03f      	b.n	8007392 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007312:	4b31      	ldr	r3, [pc, #196]	@ (80073d8 <xTaskIncrementTick+0x150>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	429a      	cmp	r2, r3
 8007328:	d203      	bcs.n	8007332 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800732a:	4a2e      	ldr	r2, [pc, #184]	@ (80073e4 <xTaskIncrementTick+0x15c>)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007330:	e02f      	b.n	8007392 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	3304      	adds	r3, #4
 8007336:	4618      	mov	r0, r3
 8007338:	f7fe fb98 	bl	8005a6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007340:	2b00      	cmp	r3, #0
 8007342:	d004      	beq.n	800734e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	3318      	adds	r3, #24
 8007348:	4618      	mov	r0, r3
 800734a:	f7fe fb8f 	bl	8005a6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007352:	4b25      	ldr	r3, [pc, #148]	@ (80073e8 <xTaskIncrementTick+0x160>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	429a      	cmp	r2, r3
 8007358:	d903      	bls.n	8007362 <xTaskIncrementTick+0xda>
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735e:	4a22      	ldr	r2, [pc, #136]	@ (80073e8 <xTaskIncrementTick+0x160>)
 8007360:	6013      	str	r3, [r2, #0]
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007366:	4613      	mov	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4a1f      	ldr	r2, [pc, #124]	@ (80073ec <xTaskIncrementTick+0x164>)
 8007370:	441a      	add	r2, r3
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	3304      	adds	r3, #4
 8007376:	4619      	mov	r1, r3
 8007378:	4610      	mov	r0, r2
 800737a:	f7fe fb1a 	bl	80059b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007382:	4b1b      	ldr	r3, [pc, #108]	@ (80073f0 <xTaskIncrementTick+0x168>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007388:	429a      	cmp	r2, r3
 800738a:	d3b8      	bcc.n	80072fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800738c:	2301      	movs	r3, #1
 800738e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007390:	e7b5      	b.n	80072fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007392:	4b17      	ldr	r3, [pc, #92]	@ (80073f0 <xTaskIncrementTick+0x168>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007398:	4914      	ldr	r1, [pc, #80]	@ (80073ec <xTaskIncrementTick+0x164>)
 800739a:	4613      	mov	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	440b      	add	r3, r1
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d901      	bls.n	80073ae <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80073aa:	2301      	movs	r3, #1
 80073ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80073ae:	4b11      	ldr	r3, [pc, #68]	@ (80073f4 <xTaskIncrementTick+0x16c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d007      	beq.n	80073c6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80073b6:	2301      	movs	r3, #1
 80073b8:	617b      	str	r3, [r7, #20]
 80073ba:	e004      	b.n	80073c6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80073bc:	4b0e      	ldr	r3, [pc, #56]	@ (80073f8 <xTaskIncrementTick+0x170>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3301      	adds	r3, #1
 80073c2:	4a0d      	ldr	r2, [pc, #52]	@ (80073f8 <xTaskIncrementTick+0x170>)
 80073c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80073c6:	697b      	ldr	r3, [r7, #20]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3718      	adds	r7, #24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	200013dc 	.word	0x200013dc
 80073d4:	200013b8 	.word	0x200013b8
 80073d8:	2000136c 	.word	0x2000136c
 80073dc:	20001370 	.word	0x20001370
 80073e0:	200013cc 	.word	0x200013cc
 80073e4:	200013d4 	.word	0x200013d4
 80073e8:	200013bc 	.word	0x200013bc
 80073ec:	20000ee4 	.word	0x20000ee4
 80073f0:	20000ee0 	.word	0x20000ee0
 80073f4:	200013c8 	.word	0x200013c8
 80073f8:	200013c4 	.word	0x200013c4

080073fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007402:	4b28      	ldr	r3, [pc, #160]	@ (80074a4 <vTaskSwitchContext+0xa8>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800740a:	4b27      	ldr	r3, [pc, #156]	@ (80074a8 <vTaskSwitchContext+0xac>)
 800740c:	2201      	movs	r2, #1
 800740e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007410:	e042      	b.n	8007498 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007412:	4b25      	ldr	r3, [pc, #148]	@ (80074a8 <vTaskSwitchContext+0xac>)
 8007414:	2200      	movs	r2, #0
 8007416:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007418:	4b24      	ldr	r3, [pc, #144]	@ (80074ac <vTaskSwitchContext+0xb0>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	60fb      	str	r3, [r7, #12]
 800741e:	e011      	b.n	8007444 <vTaskSwitchContext+0x48>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10b      	bne.n	800743e <vTaskSwitchContext+0x42>
	__asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	607b      	str	r3, [r7, #4]
}
 8007438:	bf00      	nop
 800743a:	bf00      	nop
 800743c:	e7fd      	b.n	800743a <vTaskSwitchContext+0x3e>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3b01      	subs	r3, #1
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	491a      	ldr	r1, [pc, #104]	@ (80074b0 <vTaskSwitchContext+0xb4>)
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	4613      	mov	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	440b      	add	r3, r1
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d0e3      	beq.n	8007420 <vTaskSwitchContext+0x24>
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	4613      	mov	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4a13      	ldr	r2, [pc, #76]	@ (80074b0 <vTaskSwitchContext+0xb4>)
 8007464:	4413      	add	r3, r2
 8007466:	60bb      	str	r3, [r7, #8]
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	605a      	str	r2, [r3, #4]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	3308      	adds	r3, #8
 800747a:	429a      	cmp	r2, r3
 800747c:	d104      	bne.n	8007488 <vTaskSwitchContext+0x8c>
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	685a      	ldr	r2, [r3, #4]
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	605a      	str	r2, [r3, #4]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	4a09      	ldr	r2, [pc, #36]	@ (80074b4 <vTaskSwitchContext+0xb8>)
 8007490:	6013      	str	r3, [r2, #0]
 8007492:	4a06      	ldr	r2, [pc, #24]	@ (80074ac <vTaskSwitchContext+0xb0>)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6013      	str	r3, [r2, #0]
}
 8007498:	bf00      	nop
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr
 80074a4:	200013dc 	.word	0x200013dc
 80074a8:	200013c8 	.word	0x200013c8
 80074ac:	200013bc 	.word	0x200013bc
 80074b0:	20000ee4 	.word	0x20000ee4
 80074b4:	20000ee0 	.word	0x20000ee0

080074b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10b      	bne.n	80074e0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80074c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	60fb      	str	r3, [r7, #12]
}
 80074da:	bf00      	nop
 80074dc:	bf00      	nop
 80074de:	e7fd      	b.n	80074dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074e0:	4b07      	ldr	r3, [pc, #28]	@ (8007500 <vTaskPlaceOnEventList+0x48>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3318      	adds	r3, #24
 80074e6:	4619      	mov	r1, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f7fe fa86 	bl	80059fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80074ee:	2101      	movs	r1, #1
 80074f0:	6838      	ldr	r0, [r7, #0]
 80074f2:	f000 fb91 	bl	8007c18 <prvAddCurrentTaskToDelayedList>
}
 80074f6:	bf00      	nop
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	20000ee0 	.word	0x20000ee0

08007504 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10b      	bne.n	800752e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	617b      	str	r3, [r7, #20]
}
 8007528:	bf00      	nop
 800752a:	bf00      	nop
 800752c:	e7fd      	b.n	800752a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800752e:	4b0a      	ldr	r3, [pc, #40]	@ (8007558 <vTaskPlaceOnEventListRestricted+0x54>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3318      	adds	r3, #24
 8007534:	4619      	mov	r1, r3
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f7fe fa3b 	bl	80059b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007542:	f04f 33ff 	mov.w	r3, #4294967295
 8007546:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007548:	6879      	ldr	r1, [r7, #4]
 800754a:	68b8      	ldr	r0, [r7, #8]
 800754c:	f000 fb64 	bl	8007c18 <prvAddCurrentTaskToDelayedList>
	}
 8007550:	bf00      	nop
 8007552:	3718      	adds	r7, #24
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	20000ee0 	.word	0x20000ee0

0800755c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10b      	bne.n	800758a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	60fb      	str	r3, [r7, #12]
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop
 8007588:	e7fd      	b.n	8007586 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	3318      	adds	r3, #24
 800758e:	4618      	mov	r0, r3
 8007590:	f7fe fa6c 	bl	8005a6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007594:	4b1d      	ldr	r3, [pc, #116]	@ (800760c <xTaskRemoveFromEventList+0xb0>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d11d      	bne.n	80075d8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	3304      	adds	r3, #4
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fe fa63 	bl	8005a6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075aa:	4b19      	ldr	r3, [pc, #100]	@ (8007610 <xTaskRemoveFromEventList+0xb4>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d903      	bls.n	80075ba <xTaskRemoveFromEventList+0x5e>
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b6:	4a16      	ldr	r2, [pc, #88]	@ (8007610 <xTaskRemoveFromEventList+0xb4>)
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075be:	4613      	mov	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4a13      	ldr	r2, [pc, #76]	@ (8007614 <xTaskRemoveFromEventList+0xb8>)
 80075c8:	441a      	add	r2, r3
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	3304      	adds	r3, #4
 80075ce:	4619      	mov	r1, r3
 80075d0:	4610      	mov	r0, r2
 80075d2:	f7fe f9ee 	bl	80059b2 <vListInsertEnd>
 80075d6:	e005      	b.n	80075e4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	3318      	adds	r3, #24
 80075dc:	4619      	mov	r1, r3
 80075de:	480e      	ldr	r0, [pc, #56]	@ (8007618 <xTaskRemoveFromEventList+0xbc>)
 80075e0:	f7fe f9e7 	bl	80059b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075e8:	4b0c      	ldr	r3, [pc, #48]	@ (800761c <xTaskRemoveFromEventList+0xc0>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d905      	bls.n	80075fe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80075f2:	2301      	movs	r3, #1
 80075f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80075f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007620 <xTaskRemoveFromEventList+0xc4>)
 80075f8:	2201      	movs	r2, #1
 80075fa:	601a      	str	r2, [r3, #0]
 80075fc:	e001      	b.n	8007602 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80075fe:	2300      	movs	r3, #0
 8007600:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007602:	697b      	ldr	r3, [r7, #20]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3718      	adds	r7, #24
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	200013dc 	.word	0x200013dc
 8007610:	200013bc 	.word	0x200013bc
 8007614:	20000ee4 	.word	0x20000ee4
 8007618:	20001374 	.word	0x20001374
 800761c:	20000ee0 	.word	0x20000ee0
 8007620:	200013c8 	.word	0x200013c8

08007624 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800762c:	4b06      	ldr	r3, [pc, #24]	@ (8007648 <vTaskInternalSetTimeOutState+0x24>)
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007634:	4b05      	ldr	r3, [pc, #20]	@ (800764c <vTaskInternalSetTimeOutState+0x28>)
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	605a      	str	r2, [r3, #4]
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	200013cc 	.word	0x200013cc
 800764c:	200013b8 	.word	0x200013b8

08007650 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b088      	sub	sp, #32
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10b      	bne.n	8007678 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	613b      	str	r3, [r7, #16]
}
 8007672:	bf00      	nop
 8007674:	bf00      	nop
 8007676:	e7fd      	b.n	8007674 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10b      	bne.n	8007696 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	60fb      	str	r3, [r7, #12]
}
 8007690:	bf00      	nop
 8007692:	bf00      	nop
 8007694:	e7fd      	b.n	8007692 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007696:	f000 ff9f 	bl	80085d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800769a:	4b1d      	ldr	r3, [pc, #116]	@ (8007710 <xTaskCheckForTimeOut+0xc0>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b2:	d102      	bne.n	80076ba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80076b4:	2300      	movs	r3, #0
 80076b6:	61fb      	str	r3, [r7, #28]
 80076b8:	e023      	b.n	8007702 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	4b15      	ldr	r3, [pc, #84]	@ (8007714 <xTaskCheckForTimeOut+0xc4>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d007      	beq.n	80076d6 <xTaskCheckForTimeOut+0x86>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	69ba      	ldr	r2, [r7, #24]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d302      	bcc.n	80076d6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076d0:	2301      	movs	r3, #1
 80076d2:	61fb      	str	r3, [r7, #28]
 80076d4:	e015      	b.n	8007702 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d20b      	bcs.n	80076f8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	1ad2      	subs	r2, r2, r3
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7ff ff99 	bl	8007624 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80076f2:	2300      	movs	r3, #0
 80076f4:	61fb      	str	r3, [r7, #28]
 80076f6:	e004      	b.n	8007702 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	2200      	movs	r2, #0
 80076fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80076fe:	2301      	movs	r3, #1
 8007700:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007702:	f000 ff9b 	bl	800863c <vPortExitCritical>

	return xReturn;
 8007706:	69fb      	ldr	r3, [r7, #28]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3720      	adds	r7, #32
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	200013b8 	.word	0x200013b8
 8007714:	200013cc 	.word	0x200013cc

08007718 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007718:	b480      	push	{r7}
 800771a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800771c:	4b03      	ldr	r3, [pc, #12]	@ (800772c <vTaskMissedYield+0x14>)
 800771e:	2201      	movs	r2, #1
 8007720:	601a      	str	r2, [r3, #0]
}
 8007722:	bf00      	nop
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	200013c8 	.word	0x200013c8

08007730 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007738:	f000 f852 	bl	80077e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800773c:	4b06      	ldr	r3, [pc, #24]	@ (8007758 <prvIdleTask+0x28>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d9f9      	bls.n	8007738 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007744:	4b05      	ldr	r3, [pc, #20]	@ (800775c <prvIdleTask+0x2c>)
 8007746:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007754:	e7f0      	b.n	8007738 <prvIdleTask+0x8>
 8007756:	bf00      	nop
 8007758:	20000ee4 	.word	0x20000ee4
 800775c:	e000ed04 	.word	0xe000ed04

08007760 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007766:	2300      	movs	r3, #0
 8007768:	607b      	str	r3, [r7, #4]
 800776a:	e00c      	b.n	8007786 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	4613      	mov	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4a12      	ldr	r2, [pc, #72]	@ (80077c0 <prvInitialiseTaskLists+0x60>)
 8007778:	4413      	add	r3, r2
 800777a:	4618      	mov	r0, r3
 800777c:	f7fe f8ec 	bl	8005958 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	3301      	adds	r3, #1
 8007784:	607b      	str	r3, [r7, #4]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2b37      	cmp	r3, #55	@ 0x37
 800778a:	d9ef      	bls.n	800776c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800778c:	480d      	ldr	r0, [pc, #52]	@ (80077c4 <prvInitialiseTaskLists+0x64>)
 800778e:	f7fe f8e3 	bl	8005958 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007792:	480d      	ldr	r0, [pc, #52]	@ (80077c8 <prvInitialiseTaskLists+0x68>)
 8007794:	f7fe f8e0 	bl	8005958 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007798:	480c      	ldr	r0, [pc, #48]	@ (80077cc <prvInitialiseTaskLists+0x6c>)
 800779a:	f7fe f8dd 	bl	8005958 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800779e:	480c      	ldr	r0, [pc, #48]	@ (80077d0 <prvInitialiseTaskLists+0x70>)
 80077a0:	f7fe f8da 	bl	8005958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80077a4:	480b      	ldr	r0, [pc, #44]	@ (80077d4 <prvInitialiseTaskLists+0x74>)
 80077a6:	f7fe f8d7 	bl	8005958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80077aa:	4b0b      	ldr	r3, [pc, #44]	@ (80077d8 <prvInitialiseTaskLists+0x78>)
 80077ac:	4a05      	ldr	r2, [pc, #20]	@ (80077c4 <prvInitialiseTaskLists+0x64>)
 80077ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077b0:	4b0a      	ldr	r3, [pc, #40]	@ (80077dc <prvInitialiseTaskLists+0x7c>)
 80077b2:	4a05      	ldr	r2, [pc, #20]	@ (80077c8 <prvInitialiseTaskLists+0x68>)
 80077b4:	601a      	str	r2, [r3, #0]
}
 80077b6:	bf00      	nop
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	20000ee4 	.word	0x20000ee4
 80077c4:	20001344 	.word	0x20001344
 80077c8:	20001358 	.word	0x20001358
 80077cc:	20001374 	.word	0x20001374
 80077d0:	20001388 	.word	0x20001388
 80077d4:	200013a0 	.word	0x200013a0
 80077d8:	2000136c 	.word	0x2000136c
 80077dc:	20001370 	.word	0x20001370

080077e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077e6:	e019      	b.n	800781c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077e8:	f000 fef6 	bl	80085d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077ec:	4b10      	ldr	r3, [pc, #64]	@ (8007830 <prvCheckTasksWaitingTermination+0x50>)
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	3304      	adds	r3, #4
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7fe f937 	bl	8005a6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007834 <prvCheckTasksWaitingTermination+0x54>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3b01      	subs	r3, #1
 8007804:	4a0b      	ldr	r2, [pc, #44]	@ (8007834 <prvCheckTasksWaitingTermination+0x54>)
 8007806:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007808:	4b0b      	ldr	r3, [pc, #44]	@ (8007838 <prvCheckTasksWaitingTermination+0x58>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3b01      	subs	r3, #1
 800780e:	4a0a      	ldr	r2, [pc, #40]	@ (8007838 <prvCheckTasksWaitingTermination+0x58>)
 8007810:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007812:	f000 ff13 	bl	800863c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f810 	bl	800783c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800781c:	4b06      	ldr	r3, [pc, #24]	@ (8007838 <prvCheckTasksWaitingTermination+0x58>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1e1      	bne.n	80077e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007824:	bf00      	nop
 8007826:	bf00      	nop
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	20001388 	.word	0x20001388
 8007834:	200013b4 	.word	0x200013b4
 8007838:	2000139c 	.word	0x2000139c

0800783c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800784a:	2b00      	cmp	r3, #0
 800784c:	d108      	bne.n	8007860 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007852:	4618      	mov	r0, r3
 8007854:	f001 f8b0 	bl	80089b8 <vPortFree>
				vPortFree( pxTCB );
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f001 f8ad 	bl	80089b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800785e:	e019      	b.n	8007894 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007866:	2b01      	cmp	r3, #1
 8007868:	d103      	bne.n	8007872 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f001 f8a4 	bl	80089b8 <vPortFree>
	}
 8007870:	e010      	b.n	8007894 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007878:	2b02      	cmp	r3, #2
 800787a:	d00b      	beq.n	8007894 <prvDeleteTCB+0x58>
	__asm volatile
 800787c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	60fb      	str	r3, [r7, #12]
}
 800788e:	bf00      	nop
 8007890:	bf00      	nop
 8007892:	e7fd      	b.n	8007890 <prvDeleteTCB+0x54>
	}
 8007894:	bf00      	nop
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078a2:	4b0c      	ldr	r3, [pc, #48]	@ (80078d4 <prvResetNextTaskUnblockTime+0x38>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d104      	bne.n	80078b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80078ac:	4b0a      	ldr	r3, [pc, #40]	@ (80078d8 <prvResetNextTaskUnblockTime+0x3c>)
 80078ae:	f04f 32ff 	mov.w	r2, #4294967295
 80078b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078b4:	e008      	b.n	80078c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078b6:	4b07      	ldr	r3, [pc, #28]	@ (80078d4 <prvResetNextTaskUnblockTime+0x38>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	4a04      	ldr	r2, [pc, #16]	@ (80078d8 <prvResetNextTaskUnblockTime+0x3c>)
 80078c6:	6013      	str	r3, [r2, #0]
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	2000136c 	.word	0x2000136c
 80078d8:	200013d4 	.word	0x200013d4

080078dc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80078e2:	4b05      	ldr	r3, [pc, #20]	@ (80078f8 <xTaskGetCurrentTaskHandle+0x1c>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80078e8:	687b      	ldr	r3, [r7, #4]
	}
 80078ea:	4618      	mov	r0, r3
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	20000ee0 	.word	0x20000ee0

080078fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007902:	4b0b      	ldr	r3, [pc, #44]	@ (8007930 <xTaskGetSchedulerState+0x34>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d102      	bne.n	8007910 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800790a:	2301      	movs	r3, #1
 800790c:	607b      	str	r3, [r7, #4]
 800790e:	e008      	b.n	8007922 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007910:	4b08      	ldr	r3, [pc, #32]	@ (8007934 <xTaskGetSchedulerState+0x38>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d102      	bne.n	800791e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007918:	2302      	movs	r3, #2
 800791a:	607b      	str	r3, [r7, #4]
 800791c:	e001      	b.n	8007922 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800791e:	2300      	movs	r3, #0
 8007920:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007922:	687b      	ldr	r3, [r7, #4]
	}
 8007924:	4618      	mov	r0, r3
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	200013c0 	.word	0x200013c0
 8007934:	200013dc 	.word	0x200013dc

08007938 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007944:	2300      	movs	r3, #0
 8007946:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d051      	beq.n	80079f2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007952:	4b2a      	ldr	r3, [pc, #168]	@ (80079fc <xTaskPriorityInherit+0xc4>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007958:	429a      	cmp	r2, r3
 800795a:	d241      	bcs.n	80079e0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	2b00      	cmp	r3, #0
 8007962:	db06      	blt.n	8007972 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007964:	4b25      	ldr	r3, [pc, #148]	@ (80079fc <xTaskPriorityInherit+0xc4>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	6959      	ldr	r1, [r3, #20]
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800797a:	4613      	mov	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4a1f      	ldr	r2, [pc, #124]	@ (8007a00 <xTaskPriorityInherit+0xc8>)
 8007984:	4413      	add	r3, r2
 8007986:	4299      	cmp	r1, r3
 8007988:	d122      	bne.n	80079d0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	3304      	adds	r3, #4
 800798e:	4618      	mov	r0, r3
 8007990:	f7fe f86c 	bl	8005a6c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007994:	4b19      	ldr	r3, [pc, #100]	@ (80079fc <xTaskPriorityInherit+0xc4>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a2:	4b18      	ldr	r3, [pc, #96]	@ (8007a04 <xTaskPriorityInherit+0xcc>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d903      	bls.n	80079b2 <xTaskPriorityInherit+0x7a>
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ae:	4a15      	ldr	r2, [pc, #84]	@ (8007a04 <xTaskPriorityInherit+0xcc>)
 80079b0:	6013      	str	r3, [r2, #0]
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079b6:	4613      	mov	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4413      	add	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4a10      	ldr	r2, [pc, #64]	@ (8007a00 <xTaskPriorityInherit+0xc8>)
 80079c0:	441a      	add	r2, r3
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	3304      	adds	r3, #4
 80079c6:	4619      	mov	r1, r3
 80079c8:	4610      	mov	r0, r2
 80079ca:	f7fd fff2 	bl	80059b2 <vListInsertEnd>
 80079ce:	e004      	b.n	80079da <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80079d0:	4b0a      	ldr	r3, [pc, #40]	@ (80079fc <xTaskPriorityInherit+0xc4>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80079da:	2301      	movs	r3, #1
 80079dc:	60fb      	str	r3, [r7, #12]
 80079de:	e008      	b.n	80079f2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80079e4:	4b05      	ldr	r3, [pc, #20]	@ (80079fc <xTaskPriorityInherit+0xc4>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d201      	bcs.n	80079f2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80079ee:	2301      	movs	r3, #1
 80079f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079f2:	68fb      	ldr	r3, [r7, #12]
	}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	20000ee0 	.word	0x20000ee0
 8007a00:	20000ee4 	.word	0x20000ee4
 8007a04:	200013bc 	.word	0x200013bc

08007a08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a14:	2300      	movs	r3, #0
 8007a16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d058      	beq.n	8007ad0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a1e:	4b2f      	ldr	r3, [pc, #188]	@ (8007adc <xTaskPriorityDisinherit+0xd4>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	693a      	ldr	r2, [r7, #16]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d00b      	beq.n	8007a40 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	60fb      	str	r3, [r7, #12]
}
 8007a3a:	bf00      	nop
 8007a3c:	bf00      	nop
 8007a3e:	e7fd      	b.n	8007a3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10b      	bne.n	8007a60 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	60bb      	str	r3, [r7, #8]
}
 8007a5a:	bf00      	nop
 8007a5c:	bf00      	nop
 8007a5e:	e7fd      	b.n	8007a5c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a64:	1e5a      	subs	r2, r3, #1
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d02c      	beq.n	8007ad0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d128      	bne.n	8007ad0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	3304      	adds	r3, #4
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fd fff2 	bl	8005a6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a94:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8007ae0 <xTaskPriorityDisinherit+0xd8>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d903      	bls.n	8007ab0 <xTaskPriorityDisinherit+0xa8>
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aac:	4a0c      	ldr	r2, [pc, #48]	@ (8007ae0 <xTaskPriorityDisinherit+0xd8>)
 8007aae:	6013      	str	r3, [r2, #0]
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	4413      	add	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4a09      	ldr	r2, [pc, #36]	@ (8007ae4 <xTaskPriorityDisinherit+0xdc>)
 8007abe:	441a      	add	r2, r3
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	4610      	mov	r0, r2
 8007ac8:	f7fd ff73 	bl	80059b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007acc:	2301      	movs	r3, #1
 8007ace:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ad0:	697b      	ldr	r3, [r7, #20]
	}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3718      	adds	r7, #24
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	20000ee0 	.word	0x20000ee0
 8007ae0:	200013bc 	.word	0x200013bc
 8007ae4:	20000ee4 	.word	0x20000ee4

08007ae8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b088      	sub	sp, #32
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007af6:	2301      	movs	r3, #1
 8007af8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d06c      	beq.n	8007bda <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10b      	bne.n	8007b20 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	60fb      	str	r3, [r7, #12]
}
 8007b1a:	bf00      	nop
 8007b1c:	bf00      	nop
 8007b1e:	e7fd      	b.n	8007b1c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d902      	bls.n	8007b30 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	61fb      	str	r3, [r7, #28]
 8007b2e:	e002      	b.n	8007b36 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b34:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b3a:	69fa      	ldr	r2, [r7, #28]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d04c      	beq.n	8007bda <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d147      	bne.n	8007bda <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007b4a:	4b26      	ldr	r3, [pc, #152]	@ (8007be4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	69ba      	ldr	r2, [r7, #24]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d10b      	bne.n	8007b6c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	60bb      	str	r3, [r7, #8]
}
 8007b66:	bf00      	nop
 8007b68:	bf00      	nop
 8007b6a:	e7fd      	b.n	8007b68 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b70:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	69fa      	ldr	r2, [r7, #28]
 8007b76:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	db04      	blt.n	8007b8a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	6959      	ldr	r1, [r3, #20]
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	4613      	mov	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4413      	add	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4a13      	ldr	r2, [pc, #76]	@ (8007be8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007b9a:	4413      	add	r3, r2
 8007b9c:	4299      	cmp	r1, r3
 8007b9e:	d11c      	bne.n	8007bda <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7fd ff61 	bl	8005a6c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bae:	4b0f      	ldr	r3, [pc, #60]	@ (8007bec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d903      	bls.n	8007bbe <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bba:	4a0c      	ldr	r2, [pc, #48]	@ (8007bec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007bbc:	6013      	str	r3, [r2, #0]
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	4a07      	ldr	r2, [pc, #28]	@ (8007be8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007bcc:	441a      	add	r2, r3
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	3304      	adds	r3, #4
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	f7fd feec 	bl	80059b2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bda:	bf00      	nop
 8007bdc:	3720      	adds	r7, #32
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	20000ee0 	.word	0x20000ee0
 8007be8:	20000ee4 	.word	0x20000ee4
 8007bec:	200013bc 	.word	0x200013bc

08007bf0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007bf0:	b480      	push	{r7}
 8007bf2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007bf4:	4b07      	ldr	r3, [pc, #28]	@ (8007c14 <pvTaskIncrementMutexHeldCount+0x24>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d004      	beq.n	8007c06 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007bfc:	4b05      	ldr	r3, [pc, #20]	@ (8007c14 <pvTaskIncrementMutexHeldCount+0x24>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c02:	3201      	adds	r2, #1
 8007c04:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007c06:	4b03      	ldr	r3, [pc, #12]	@ (8007c14 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c08:	681b      	ldr	r3, [r3, #0]
	}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	20000ee0 	.word	0x20000ee0

08007c18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c22:	4b21      	ldr	r3, [pc, #132]	@ (8007ca8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c28:	4b20      	ldr	r3, [pc, #128]	@ (8007cac <prvAddCurrentTaskToDelayedList+0x94>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3304      	adds	r3, #4
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fd ff1c 	bl	8005a6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3a:	d10a      	bne.n	8007c52 <prvAddCurrentTaskToDelayedList+0x3a>
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d007      	beq.n	8007c52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c42:	4b1a      	ldr	r3, [pc, #104]	@ (8007cac <prvAddCurrentTaskToDelayedList+0x94>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	3304      	adds	r3, #4
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4819      	ldr	r0, [pc, #100]	@ (8007cb0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007c4c:	f7fd feb1 	bl	80059b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c50:	e026      	b.n	8007ca0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4413      	add	r3, r2
 8007c58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c5a:	4b14      	ldr	r3, [pc, #80]	@ (8007cac <prvAddCurrentTaskToDelayedList+0x94>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d209      	bcs.n	8007c7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c6a:	4b12      	ldr	r3, [pc, #72]	@ (8007cb4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8007cac <prvAddCurrentTaskToDelayedList+0x94>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	3304      	adds	r3, #4
 8007c74:	4619      	mov	r1, r3
 8007c76:	4610      	mov	r0, r2
 8007c78:	f7fd febf 	bl	80059fa <vListInsert>
}
 8007c7c:	e010      	b.n	8007ca0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8007cb8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	4b0a      	ldr	r3, [pc, #40]	@ (8007cac <prvAddCurrentTaskToDelayedList+0x94>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3304      	adds	r3, #4
 8007c88:	4619      	mov	r1, r3
 8007c8a:	4610      	mov	r0, r2
 8007c8c:	f7fd feb5 	bl	80059fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c90:	4b0a      	ldr	r3, [pc, #40]	@ (8007cbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d202      	bcs.n	8007ca0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c9a:	4a08      	ldr	r2, [pc, #32]	@ (8007cbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	6013      	str	r3, [r2, #0]
}
 8007ca0:	bf00      	nop
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	200013b8 	.word	0x200013b8
 8007cac:	20000ee0 	.word	0x20000ee0
 8007cb0:	200013a0 	.word	0x200013a0
 8007cb4:	20001370 	.word	0x20001370
 8007cb8:	2000136c 	.word	0x2000136c
 8007cbc:	200013d4 	.word	0x200013d4

08007cc0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b08a      	sub	sp, #40	@ 0x28
 8007cc4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007cca:	f000 fb13 	bl	80082f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007cce:	4b1d      	ldr	r3, [pc, #116]	@ (8007d44 <xTimerCreateTimerTask+0x84>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d021      	beq.n	8007d1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007cde:	1d3a      	adds	r2, r7, #4
 8007ce0:	f107 0108 	add.w	r1, r7, #8
 8007ce4:	f107 030c 	add.w	r3, r7, #12
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7fd fe1b 	bl	8005924 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	9202      	str	r2, [sp, #8]
 8007cf6:	9301      	str	r3, [sp, #4]
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	460a      	mov	r2, r1
 8007d00:	4911      	ldr	r1, [pc, #68]	@ (8007d48 <xTimerCreateTimerTask+0x88>)
 8007d02:	4812      	ldr	r0, [pc, #72]	@ (8007d4c <xTimerCreateTimerTask+0x8c>)
 8007d04:	f7fe ffc0 	bl	8006c88 <xTaskCreateStatic>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	4a11      	ldr	r2, [pc, #68]	@ (8007d50 <xTimerCreateTimerTask+0x90>)
 8007d0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007d0e:	4b10      	ldr	r3, [pc, #64]	@ (8007d50 <xTimerCreateTimerTask+0x90>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007d16:	2301      	movs	r3, #1
 8007d18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10b      	bne.n	8007d38 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	613b      	str	r3, [r7, #16]
}
 8007d32:	bf00      	nop
 8007d34:	bf00      	nop
 8007d36:	e7fd      	b.n	8007d34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007d38:	697b      	ldr	r3, [r7, #20]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3718      	adds	r7, #24
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20001410 	.word	0x20001410
 8007d48:	08008cb0 	.word	0x08008cb0
 8007d4c:	08007e8d 	.word	0x08007e8d
 8007d50:	20001414 	.word	0x20001414

08007d54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b08a      	sub	sp, #40	@ 0x28
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
 8007d60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007d62:	2300      	movs	r3, #0
 8007d64:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10b      	bne.n	8007d84 <xTimerGenericCommand+0x30>
	__asm volatile
 8007d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	623b      	str	r3, [r7, #32]
}
 8007d7e:	bf00      	nop
 8007d80:	bf00      	nop
 8007d82:	e7fd      	b.n	8007d80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007d84:	4b19      	ldr	r3, [pc, #100]	@ (8007dec <xTimerGenericCommand+0x98>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d02a      	beq.n	8007de2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2b05      	cmp	r3, #5
 8007d9c:	dc18      	bgt.n	8007dd0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007d9e:	f7ff fdad 	bl	80078fc <xTaskGetSchedulerState>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d109      	bne.n	8007dbc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007da8:	4b10      	ldr	r3, [pc, #64]	@ (8007dec <xTimerGenericCommand+0x98>)
 8007daa:	6818      	ldr	r0, [r3, #0]
 8007dac:	f107 0110 	add.w	r1, r7, #16
 8007db0:	2300      	movs	r3, #0
 8007db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007db4:	f7fe f8f0 	bl	8005f98 <xQueueGenericSend>
 8007db8:	6278      	str	r0, [r7, #36]	@ 0x24
 8007dba:	e012      	b.n	8007de2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8007dec <xTimerGenericCommand+0x98>)
 8007dbe:	6818      	ldr	r0, [r3, #0]
 8007dc0:	f107 0110 	add.w	r1, r7, #16
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f7fe f8e6 	bl	8005f98 <xQueueGenericSend>
 8007dcc:	6278      	str	r0, [r7, #36]	@ 0x24
 8007dce:	e008      	b.n	8007de2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007dd0:	4b06      	ldr	r3, [pc, #24]	@ (8007dec <xTimerGenericCommand+0x98>)
 8007dd2:	6818      	ldr	r0, [r3, #0]
 8007dd4:	f107 0110 	add.w	r1, r7, #16
 8007dd8:	2300      	movs	r3, #0
 8007dda:	683a      	ldr	r2, [r7, #0]
 8007ddc:	f7fe f9de 	bl	800619c <xQueueGenericSendFromISR>
 8007de0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3728      	adds	r7, #40	@ 0x28
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	20001410 	.word	0x20001410

08007df0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b088      	sub	sp, #32
 8007df4:	af02      	add	r7, sp, #8
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dfa:	4b23      	ldr	r3, [pc, #140]	@ (8007e88 <prvProcessExpiredTimer+0x98>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	3304      	adds	r3, #4
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fd fe2f 	bl	8005a6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e14:	f003 0304 	and.w	r3, r3, #4
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d023      	beq.n	8007e64 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	699a      	ldr	r2, [r3, #24]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	18d1      	adds	r1, r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	6978      	ldr	r0, [r7, #20]
 8007e2a:	f000 f8d5 	bl	8007fd8 <prvInsertTimerInActiveList>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d020      	beq.n	8007e76 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e34:	2300      	movs	r3, #0
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	2300      	movs	r3, #0
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	6978      	ldr	r0, [r7, #20]
 8007e40:	f7ff ff88 	bl	8007d54 <xTimerGenericCommand>
 8007e44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d114      	bne.n	8007e76 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e50:	f383 8811 	msr	BASEPRI, r3
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	60fb      	str	r3, [r7, #12]
}
 8007e5e:	bf00      	nop
 8007e60:	bf00      	nop
 8007e62:	e7fd      	b.n	8007e60 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e6a:	f023 0301 	bic.w	r3, r3, #1
 8007e6e:	b2da      	uxtb	r2, r3
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	6978      	ldr	r0, [r7, #20]
 8007e7c:	4798      	blx	r3
}
 8007e7e:	bf00      	nop
 8007e80:	3718      	adds	r7, #24
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	20001408 	.word	0x20001408

08007e8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e94:	f107 0308 	add.w	r3, r7, #8
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f000 f859 	bl	8007f50 <prvGetNextExpireTime>
 8007e9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f000 f805 	bl	8007eb4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007eaa:	f000 f8d7 	bl	800805c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007eae:	bf00      	nop
 8007eb0:	e7f0      	b.n	8007e94 <prvTimerTask+0x8>
	...

08007eb4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007ebe:	f7ff f927 	bl	8007110 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ec2:	f107 0308 	add.w	r3, r7, #8
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 f866 	bl	8007f98 <prvSampleTimeNow>
 8007ecc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d130      	bne.n	8007f36 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10a      	bne.n	8007ef0 <prvProcessTimerOrBlockTask+0x3c>
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d806      	bhi.n	8007ef0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007ee2:	f7ff f923 	bl	800712c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007ee6:	68f9      	ldr	r1, [r7, #12]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7ff ff81 	bl	8007df0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007eee:	e024      	b.n	8007f3a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d008      	beq.n	8007f08 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007ef6:	4b13      	ldr	r3, [pc, #76]	@ (8007f44 <prvProcessTimerOrBlockTask+0x90>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d101      	bne.n	8007f04 <prvProcessTimerOrBlockTask+0x50>
 8007f00:	2301      	movs	r3, #1
 8007f02:	e000      	b.n	8007f06 <prvProcessTimerOrBlockTask+0x52>
 8007f04:	2300      	movs	r3, #0
 8007f06:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f08:	4b0f      	ldr	r3, [pc, #60]	@ (8007f48 <prvProcessTimerOrBlockTask+0x94>)
 8007f0a:	6818      	ldr	r0, [r3, #0]
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	683a      	ldr	r2, [r7, #0]
 8007f14:	4619      	mov	r1, r3
 8007f16:	f7fe fe83 	bl	8006c20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007f1a:	f7ff f907 	bl	800712c <xTaskResumeAll>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10a      	bne.n	8007f3a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007f24:	4b09      	ldr	r3, [pc, #36]	@ (8007f4c <prvProcessTimerOrBlockTask+0x98>)
 8007f26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f2a:	601a      	str	r2, [r3, #0]
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	f3bf 8f6f 	isb	sy
}
 8007f34:	e001      	b.n	8007f3a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007f36:	f7ff f8f9 	bl	800712c <xTaskResumeAll>
}
 8007f3a:	bf00      	nop
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	2000140c 	.word	0x2000140c
 8007f48:	20001410 	.word	0x20001410
 8007f4c:	e000ed04 	.word	0xe000ed04

08007f50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f58:	4b0e      	ldr	r3, [pc, #56]	@ (8007f94 <prvGetNextExpireTime+0x44>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <prvGetNextExpireTime+0x16>
 8007f62:	2201      	movs	r2, #1
 8007f64:	e000      	b.n	8007f68 <prvGetNextExpireTime+0x18>
 8007f66:	2200      	movs	r2, #0
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d105      	bne.n	8007f80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f74:	4b07      	ldr	r3, [pc, #28]	@ (8007f94 <prvGetNextExpireTime+0x44>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	60fb      	str	r3, [r7, #12]
 8007f7e:	e001      	b.n	8007f84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007f80:	2300      	movs	r3, #0
 8007f82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007f84:	68fb      	ldr	r3, [r7, #12]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	20001408 	.word	0x20001408

08007f98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007fa0:	f7ff f962 	bl	8007268 <xTaskGetTickCount>
 8007fa4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8007fd4 <prvSampleTimeNow+0x3c>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d205      	bcs.n	8007fbc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007fb0:	f000 f93a 	bl	8008228 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	601a      	str	r2, [r3, #0]
 8007fba:	e002      	b.n	8007fc2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007fc2:	4a04      	ldr	r2, [pc, #16]	@ (8007fd4 <prvSampleTimeNow+0x3c>)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	20001418 	.word	0x20001418

08007fd8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
 8007fe4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d812      	bhi.n	8008024 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	1ad2      	subs	r2, r2, r3
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	699b      	ldr	r3, [r3, #24]
 8008008:	429a      	cmp	r2, r3
 800800a:	d302      	bcc.n	8008012 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800800c:	2301      	movs	r3, #1
 800800e:	617b      	str	r3, [r7, #20]
 8008010:	e01b      	b.n	800804a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008012:	4b10      	ldr	r3, [pc, #64]	@ (8008054 <prvInsertTimerInActiveList+0x7c>)
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	3304      	adds	r3, #4
 800801a:	4619      	mov	r1, r3
 800801c:	4610      	mov	r0, r2
 800801e:	f7fd fcec 	bl	80059fa <vListInsert>
 8008022:	e012      	b.n	800804a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	429a      	cmp	r2, r3
 800802a:	d206      	bcs.n	800803a <prvInsertTimerInActiveList+0x62>
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	429a      	cmp	r2, r3
 8008032:	d302      	bcc.n	800803a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008034:	2301      	movs	r3, #1
 8008036:	617b      	str	r3, [r7, #20]
 8008038:	e007      	b.n	800804a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800803a:	4b07      	ldr	r3, [pc, #28]	@ (8008058 <prvInsertTimerInActiveList+0x80>)
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	3304      	adds	r3, #4
 8008042:	4619      	mov	r1, r3
 8008044:	4610      	mov	r0, r2
 8008046:	f7fd fcd8 	bl	80059fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800804a:	697b      	ldr	r3, [r7, #20]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3718      	adds	r7, #24
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	2000140c 	.word	0x2000140c
 8008058:	20001408 	.word	0x20001408

0800805c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b08e      	sub	sp, #56	@ 0x38
 8008060:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008062:	e0ce      	b.n	8008202 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	da19      	bge.n	800809e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800806a:	1d3b      	adds	r3, r7, #4
 800806c:	3304      	adds	r3, #4
 800806e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10b      	bne.n	800808e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	61fb      	str	r3, [r7, #28]
}
 8008088:	bf00      	nop
 800808a:	bf00      	nop
 800808c:	e7fd      	b.n	800808a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800808e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008094:	6850      	ldr	r0, [r2, #4]
 8008096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008098:	6892      	ldr	r2, [r2, #8]
 800809a:	4611      	mov	r1, r2
 800809c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f2c0 80ae 	blt.w	8008202 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80080aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d004      	beq.n	80080bc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b4:	3304      	adds	r3, #4
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fd fcd8 	bl	8005a6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080bc:	463b      	mov	r3, r7
 80080be:	4618      	mov	r0, r3
 80080c0:	f7ff ff6a 	bl	8007f98 <prvSampleTimeNow>
 80080c4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2b09      	cmp	r3, #9
 80080ca:	f200 8097 	bhi.w	80081fc <prvProcessReceivedCommands+0x1a0>
 80080ce:	a201      	add	r2, pc, #4	@ (adr r2, 80080d4 <prvProcessReceivedCommands+0x78>)
 80080d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d4:	080080fd 	.word	0x080080fd
 80080d8:	080080fd 	.word	0x080080fd
 80080dc:	080080fd 	.word	0x080080fd
 80080e0:	08008173 	.word	0x08008173
 80080e4:	08008187 	.word	0x08008187
 80080e8:	080081d3 	.word	0x080081d3
 80080ec:	080080fd 	.word	0x080080fd
 80080f0:	080080fd 	.word	0x080080fd
 80080f4:	08008173 	.word	0x08008173
 80080f8:	08008187 	.word	0x08008187
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008102:	f043 0301 	orr.w	r3, r3, #1
 8008106:	b2da      	uxtb	r2, r3
 8008108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	18d1      	adds	r1, r2, r3
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800811a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800811c:	f7ff ff5c 	bl	8007fd8 <prvInsertTimerInActiveList>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d06c      	beq.n	8008200 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800812c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800812e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008130:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008134:	f003 0304 	and.w	r3, r3, #4
 8008138:	2b00      	cmp	r3, #0
 800813a:	d061      	beq.n	8008200 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	441a      	add	r2, r3
 8008144:	2300      	movs	r3, #0
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	2300      	movs	r3, #0
 800814a:	2100      	movs	r1, #0
 800814c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800814e:	f7ff fe01 	bl	8007d54 <xTimerGenericCommand>
 8008152:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008154:	6a3b      	ldr	r3, [r7, #32]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d152      	bne.n	8008200 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800815a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800815e:	f383 8811 	msr	BASEPRI, r3
 8008162:	f3bf 8f6f 	isb	sy
 8008166:	f3bf 8f4f 	dsb	sy
 800816a:	61bb      	str	r3, [r7, #24]
}
 800816c:	bf00      	nop
 800816e:	bf00      	nop
 8008170:	e7fd      	b.n	800816e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008174:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008178:	f023 0301 	bic.w	r3, r3, #1
 800817c:	b2da      	uxtb	r2, r3
 800817e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008180:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008184:	e03d      	b.n	8008202 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008188:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800818c:	f043 0301 	orr.w	r3, r3, #1
 8008190:	b2da      	uxtb	r2, r3
 8008192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008194:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800819e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10b      	bne.n	80081be <prvProcessReceivedCommands+0x162>
	__asm volatile
 80081a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	617b      	str	r3, [r7, #20]
}
 80081b8:	bf00      	nop
 80081ba:	bf00      	nop
 80081bc:	e7fd      	b.n	80081ba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80081be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c0:	699a      	ldr	r2, [r3, #24]
 80081c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c4:	18d1      	adds	r1, r2, r3
 80081c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081cc:	f7ff ff04 	bl	8007fd8 <prvInsertTimerInActiveList>
					break;
 80081d0:	e017      	b.n	8008202 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80081d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081d8:	f003 0302 	and.w	r3, r3, #2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d103      	bne.n	80081e8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80081e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081e2:	f000 fbe9 	bl	80089b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80081e6:	e00c      	b.n	8008202 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081ee:	f023 0301 	bic.w	r3, r3, #1
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80081fa:	e002      	b.n	8008202 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80081fc:	bf00      	nop
 80081fe:	e000      	b.n	8008202 <prvProcessReceivedCommands+0x1a6>
					break;
 8008200:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008202:	4b08      	ldr	r3, [pc, #32]	@ (8008224 <prvProcessReceivedCommands+0x1c8>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	1d39      	adds	r1, r7, #4
 8008208:	2200      	movs	r2, #0
 800820a:	4618      	mov	r0, r3
 800820c:	f7fe f8f4 	bl	80063f8 <xQueueReceive>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	f47f af26 	bne.w	8008064 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008218:	bf00      	nop
 800821a:	bf00      	nop
 800821c:	3730      	adds	r7, #48	@ 0x30
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	20001410 	.word	0x20001410

08008228 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b088      	sub	sp, #32
 800822c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800822e:	e049      	b.n	80082c4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008230:	4b2e      	ldr	r3, [pc, #184]	@ (80082ec <prvSwitchTimerLists+0xc4>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800823a:	4b2c      	ldr	r3, [pc, #176]	@ (80082ec <prvSwitchTimerLists+0xc4>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	3304      	adds	r3, #4
 8008248:	4618      	mov	r0, r3
 800824a:	f7fd fc0f 	bl	8005a6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800825c:	f003 0304 	and.w	r3, r3, #4
 8008260:	2b00      	cmp	r3, #0
 8008262:	d02f      	beq.n	80082c4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	4413      	add	r3, r2
 800826c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	429a      	cmp	r2, r3
 8008274:	d90e      	bls.n	8008294 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008282:	4b1a      	ldr	r3, [pc, #104]	@ (80082ec <prvSwitchTimerLists+0xc4>)
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	3304      	adds	r3, #4
 800828a:	4619      	mov	r1, r3
 800828c:	4610      	mov	r0, r2
 800828e:	f7fd fbb4 	bl	80059fa <vListInsert>
 8008292:	e017      	b.n	80082c4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008294:	2300      	movs	r3, #0
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	2300      	movs	r3, #0
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	2100      	movs	r1, #0
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f7ff fd58 	bl	8007d54 <xTimerGenericCommand>
 80082a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10b      	bne.n	80082c4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80082ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b0:	f383 8811 	msr	BASEPRI, r3
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	603b      	str	r3, [r7, #0]
}
 80082be:	bf00      	nop
 80082c0:	bf00      	nop
 80082c2:	e7fd      	b.n	80082c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082c4:	4b09      	ldr	r3, [pc, #36]	@ (80082ec <prvSwitchTimerLists+0xc4>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1b0      	bne.n	8008230 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80082ce:	4b07      	ldr	r3, [pc, #28]	@ (80082ec <prvSwitchTimerLists+0xc4>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80082d4:	4b06      	ldr	r3, [pc, #24]	@ (80082f0 <prvSwitchTimerLists+0xc8>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a04      	ldr	r2, [pc, #16]	@ (80082ec <prvSwitchTimerLists+0xc4>)
 80082da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80082dc:	4a04      	ldr	r2, [pc, #16]	@ (80082f0 <prvSwitchTimerLists+0xc8>)
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	6013      	str	r3, [r2, #0]
}
 80082e2:	bf00      	nop
 80082e4:	3718      	adds	r7, #24
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	20001408 	.word	0x20001408
 80082f0:	2000140c 	.word	0x2000140c

080082f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80082fa:	f000 f96d 	bl	80085d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80082fe:	4b15      	ldr	r3, [pc, #84]	@ (8008354 <prvCheckForValidListAndQueue+0x60>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d120      	bne.n	8008348 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008306:	4814      	ldr	r0, [pc, #80]	@ (8008358 <prvCheckForValidListAndQueue+0x64>)
 8008308:	f7fd fb26 	bl	8005958 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800830c:	4813      	ldr	r0, [pc, #76]	@ (800835c <prvCheckForValidListAndQueue+0x68>)
 800830e:	f7fd fb23 	bl	8005958 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008312:	4b13      	ldr	r3, [pc, #76]	@ (8008360 <prvCheckForValidListAndQueue+0x6c>)
 8008314:	4a10      	ldr	r2, [pc, #64]	@ (8008358 <prvCheckForValidListAndQueue+0x64>)
 8008316:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008318:	4b12      	ldr	r3, [pc, #72]	@ (8008364 <prvCheckForValidListAndQueue+0x70>)
 800831a:	4a10      	ldr	r2, [pc, #64]	@ (800835c <prvCheckForValidListAndQueue+0x68>)
 800831c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800831e:	2300      	movs	r3, #0
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	4b11      	ldr	r3, [pc, #68]	@ (8008368 <prvCheckForValidListAndQueue+0x74>)
 8008324:	4a11      	ldr	r2, [pc, #68]	@ (800836c <prvCheckForValidListAndQueue+0x78>)
 8008326:	2110      	movs	r1, #16
 8008328:	200a      	movs	r0, #10
 800832a:	f7fd fc33 	bl	8005b94 <xQueueGenericCreateStatic>
 800832e:	4603      	mov	r3, r0
 8008330:	4a08      	ldr	r2, [pc, #32]	@ (8008354 <prvCheckForValidListAndQueue+0x60>)
 8008332:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008334:	4b07      	ldr	r3, [pc, #28]	@ (8008354 <prvCheckForValidListAndQueue+0x60>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d005      	beq.n	8008348 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800833c:	4b05      	ldr	r3, [pc, #20]	@ (8008354 <prvCheckForValidListAndQueue+0x60>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	490b      	ldr	r1, [pc, #44]	@ (8008370 <prvCheckForValidListAndQueue+0x7c>)
 8008342:	4618      	mov	r0, r3
 8008344:	f7fe fc18 	bl	8006b78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008348:	f000 f978 	bl	800863c <vPortExitCritical>
}
 800834c:	bf00      	nop
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	20001410 	.word	0x20001410
 8008358:	200013e0 	.word	0x200013e0
 800835c:	200013f4 	.word	0x200013f4
 8008360:	20001408 	.word	0x20001408
 8008364:	2000140c 	.word	0x2000140c
 8008368:	200014bc 	.word	0x200014bc
 800836c:	2000141c 	.word	0x2000141c
 8008370:	08008cb8 	.word	0x08008cb8

08008374 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	3b04      	subs	r3, #4
 8008384:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800838c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	3b04      	subs	r3, #4
 8008392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	f023 0201 	bic.w	r2, r3, #1
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	3b04      	subs	r3, #4
 80083a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80083a4:	4a0c      	ldr	r2, [pc, #48]	@ (80083d8 <pxPortInitialiseStack+0x64>)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3b14      	subs	r3, #20
 80083ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	3b04      	subs	r3, #4
 80083ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f06f 0202 	mvn.w	r2, #2
 80083c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	3b20      	subs	r3, #32
 80083c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80083ca:	68fb      	ldr	r3, [r7, #12]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr
 80083d8:	080083dd 	.word	0x080083dd

080083dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80083e6:	4b13      	ldr	r3, [pc, #76]	@ (8008434 <prvTaskExitError+0x58>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ee:	d00b      	beq.n	8008408 <prvTaskExitError+0x2c>
	__asm volatile
 80083f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	60fb      	str	r3, [r7, #12]
}
 8008402:	bf00      	nop
 8008404:	bf00      	nop
 8008406:	e7fd      	b.n	8008404 <prvTaskExitError+0x28>
	__asm volatile
 8008408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800840c:	f383 8811 	msr	BASEPRI, r3
 8008410:	f3bf 8f6f 	isb	sy
 8008414:	f3bf 8f4f 	dsb	sy
 8008418:	60bb      	str	r3, [r7, #8]
}
 800841a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800841c:	bf00      	nop
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d0fc      	beq.n	800841e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	2000000c 	.word	0x2000000c
	...

08008440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008440:	4b07      	ldr	r3, [pc, #28]	@ (8008460 <pxCurrentTCBConst2>)
 8008442:	6819      	ldr	r1, [r3, #0]
 8008444:	6808      	ldr	r0, [r1, #0]
 8008446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844a:	f380 8809 	msr	PSP, r0
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f04f 0000 	mov.w	r0, #0
 8008456:	f380 8811 	msr	BASEPRI, r0
 800845a:	4770      	bx	lr
 800845c:	f3af 8000 	nop.w

08008460 <pxCurrentTCBConst2>:
 8008460:	20000ee0 	.word	0x20000ee0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008464:	bf00      	nop
 8008466:	bf00      	nop

08008468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008468:	4808      	ldr	r0, [pc, #32]	@ (800848c <prvPortStartFirstTask+0x24>)
 800846a:	6800      	ldr	r0, [r0, #0]
 800846c:	6800      	ldr	r0, [r0, #0]
 800846e:	f380 8808 	msr	MSP, r0
 8008472:	f04f 0000 	mov.w	r0, #0
 8008476:	f380 8814 	msr	CONTROL, r0
 800847a:	b662      	cpsie	i
 800847c:	b661      	cpsie	f
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	df00      	svc	0
 8008488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800848a:	bf00      	nop
 800848c:	e000ed08 	.word	0xe000ed08

08008490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008496:	4b47      	ldr	r3, [pc, #284]	@ (80085b4 <xPortStartScheduler+0x124>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a47      	ldr	r2, [pc, #284]	@ (80085b8 <xPortStartScheduler+0x128>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d10b      	bne.n	80084b8 <xPortStartScheduler+0x28>
	__asm volatile
 80084a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a4:	f383 8811 	msr	BASEPRI, r3
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	60fb      	str	r3, [r7, #12]
}
 80084b2:	bf00      	nop
 80084b4:	bf00      	nop
 80084b6:	e7fd      	b.n	80084b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80084b8:	4b3e      	ldr	r3, [pc, #248]	@ (80085b4 <xPortStartScheduler+0x124>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a3f      	ldr	r2, [pc, #252]	@ (80085bc <xPortStartScheduler+0x12c>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d10b      	bne.n	80084da <xPortStartScheduler+0x4a>
	__asm volatile
 80084c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c6:	f383 8811 	msr	BASEPRI, r3
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	f3bf 8f4f 	dsb	sy
 80084d2:	613b      	str	r3, [r7, #16]
}
 80084d4:	bf00      	nop
 80084d6:	bf00      	nop
 80084d8:	e7fd      	b.n	80084d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80084da:	4b39      	ldr	r3, [pc, #228]	@ (80085c0 <xPortStartScheduler+0x130>)
 80084dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	22ff      	movs	r2, #255	@ 0xff
 80084ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084f4:	78fb      	ldrb	r3, [r7, #3]
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	4b31      	ldr	r3, [pc, #196]	@ (80085c4 <xPortStartScheduler+0x134>)
 8008500:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008502:	4b31      	ldr	r3, [pc, #196]	@ (80085c8 <xPortStartScheduler+0x138>)
 8008504:	2207      	movs	r2, #7
 8008506:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008508:	e009      	b.n	800851e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800850a:	4b2f      	ldr	r3, [pc, #188]	@ (80085c8 <xPortStartScheduler+0x138>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3b01      	subs	r3, #1
 8008510:	4a2d      	ldr	r2, [pc, #180]	@ (80085c8 <xPortStartScheduler+0x138>)
 8008512:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008514:	78fb      	ldrb	r3, [r7, #3]
 8008516:	b2db      	uxtb	r3, r3
 8008518:	005b      	lsls	r3, r3, #1
 800851a:	b2db      	uxtb	r3, r3
 800851c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800851e:	78fb      	ldrb	r3, [r7, #3]
 8008520:	b2db      	uxtb	r3, r3
 8008522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008526:	2b80      	cmp	r3, #128	@ 0x80
 8008528:	d0ef      	beq.n	800850a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800852a:	4b27      	ldr	r3, [pc, #156]	@ (80085c8 <xPortStartScheduler+0x138>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f1c3 0307 	rsb	r3, r3, #7
 8008532:	2b04      	cmp	r3, #4
 8008534:	d00b      	beq.n	800854e <xPortStartScheduler+0xbe>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	60bb      	str	r3, [r7, #8]
}
 8008548:	bf00      	nop
 800854a:	bf00      	nop
 800854c:	e7fd      	b.n	800854a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800854e:	4b1e      	ldr	r3, [pc, #120]	@ (80085c8 <xPortStartScheduler+0x138>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	021b      	lsls	r3, r3, #8
 8008554:	4a1c      	ldr	r2, [pc, #112]	@ (80085c8 <xPortStartScheduler+0x138>)
 8008556:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008558:	4b1b      	ldr	r3, [pc, #108]	@ (80085c8 <xPortStartScheduler+0x138>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008560:	4a19      	ldr	r2, [pc, #100]	@ (80085c8 <xPortStartScheduler+0x138>)
 8008562:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	b2da      	uxtb	r2, r3
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800856c:	4b17      	ldr	r3, [pc, #92]	@ (80085cc <xPortStartScheduler+0x13c>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a16      	ldr	r2, [pc, #88]	@ (80085cc <xPortStartScheduler+0x13c>)
 8008572:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008576:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008578:	4b14      	ldr	r3, [pc, #80]	@ (80085cc <xPortStartScheduler+0x13c>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a13      	ldr	r2, [pc, #76]	@ (80085cc <xPortStartScheduler+0x13c>)
 800857e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008582:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008584:	f000 f8da 	bl	800873c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008588:	4b11      	ldr	r3, [pc, #68]	@ (80085d0 <xPortStartScheduler+0x140>)
 800858a:	2200      	movs	r2, #0
 800858c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800858e:	f000 f8f9 	bl	8008784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008592:	4b10      	ldr	r3, [pc, #64]	@ (80085d4 <xPortStartScheduler+0x144>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a0f      	ldr	r2, [pc, #60]	@ (80085d4 <xPortStartScheduler+0x144>)
 8008598:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800859c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800859e:	f7ff ff63 	bl	8008468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80085a2:	f7fe ff2b 	bl	80073fc <vTaskSwitchContext>
	prvTaskExitError();
 80085a6:	f7ff ff19 	bl	80083dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	e000ed00 	.word	0xe000ed00
 80085b8:	410fc271 	.word	0x410fc271
 80085bc:	410fc270 	.word	0x410fc270
 80085c0:	e000e400 	.word	0xe000e400
 80085c4:	2000150c 	.word	0x2000150c
 80085c8:	20001510 	.word	0x20001510
 80085cc:	e000ed20 	.word	0xe000ed20
 80085d0:	2000000c 	.word	0x2000000c
 80085d4:	e000ef34 	.word	0xe000ef34

080085d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	607b      	str	r3, [r7, #4]
}
 80085f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80085f2:	4b10      	ldr	r3, [pc, #64]	@ (8008634 <vPortEnterCritical+0x5c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	3301      	adds	r3, #1
 80085f8:	4a0e      	ldr	r2, [pc, #56]	@ (8008634 <vPortEnterCritical+0x5c>)
 80085fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80085fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008634 <vPortEnterCritical+0x5c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d110      	bne.n	8008626 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008604:	4b0c      	ldr	r3, [pc, #48]	@ (8008638 <vPortEnterCritical+0x60>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00b      	beq.n	8008626 <vPortEnterCritical+0x4e>
	__asm volatile
 800860e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	603b      	str	r3, [r7, #0]
}
 8008620:	bf00      	nop
 8008622:	bf00      	nop
 8008624:	e7fd      	b.n	8008622 <vPortEnterCritical+0x4a>
	}
}
 8008626:	bf00      	nop
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	2000000c 	.word	0x2000000c
 8008638:	e000ed04 	.word	0xe000ed04

0800863c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008642:	4b12      	ldr	r3, [pc, #72]	@ (800868c <vPortExitCritical+0x50>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10b      	bne.n	8008662 <vPortExitCritical+0x26>
	__asm volatile
 800864a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	607b      	str	r3, [r7, #4]
}
 800865c:	bf00      	nop
 800865e:	bf00      	nop
 8008660:	e7fd      	b.n	800865e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008662:	4b0a      	ldr	r3, [pc, #40]	@ (800868c <vPortExitCritical+0x50>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3b01      	subs	r3, #1
 8008668:	4a08      	ldr	r2, [pc, #32]	@ (800868c <vPortExitCritical+0x50>)
 800866a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800866c:	4b07      	ldr	r3, [pc, #28]	@ (800868c <vPortExitCritical+0x50>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d105      	bne.n	8008680 <vPortExitCritical+0x44>
 8008674:	2300      	movs	r3, #0
 8008676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	f383 8811 	msr	BASEPRI, r3
}
 800867e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr
 800868c:	2000000c 	.word	0x2000000c

08008690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008690:	f3ef 8009 	mrs	r0, PSP
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	4b15      	ldr	r3, [pc, #84]	@ (80086f0 <pxCurrentTCBConst>)
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	f01e 0f10 	tst.w	lr, #16
 80086a0:	bf08      	it	eq
 80086a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80086a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086aa:	6010      	str	r0, [r2, #0]
 80086ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80086b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80086b4:	f380 8811 	msr	BASEPRI, r0
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f7fe fe9c 	bl	80073fc <vTaskSwitchContext>
 80086c4:	f04f 0000 	mov.w	r0, #0
 80086c8:	f380 8811 	msr	BASEPRI, r0
 80086cc:	bc09      	pop	{r0, r3}
 80086ce:	6819      	ldr	r1, [r3, #0]
 80086d0:	6808      	ldr	r0, [r1, #0]
 80086d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d6:	f01e 0f10 	tst.w	lr, #16
 80086da:	bf08      	it	eq
 80086dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80086e0:	f380 8809 	msr	PSP, r0
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	f3af 8000 	nop.w

080086f0 <pxCurrentTCBConst>:
 80086f0:	20000ee0 	.word	0x20000ee0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80086f4:	bf00      	nop
 80086f6:	bf00      	nop

080086f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
	__asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	607b      	str	r3, [r7, #4]
}
 8008710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008712:	f7fe fdb9 	bl	8007288 <xTaskIncrementTick>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800871c:	4b06      	ldr	r3, [pc, #24]	@ (8008738 <xPortSysTickHandler+0x40>)
 800871e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008722:	601a      	str	r2, [r3, #0]
 8008724:	2300      	movs	r3, #0
 8008726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	f383 8811 	msr	BASEPRI, r3
}
 800872e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008730:	bf00      	nop
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	e000ed04 	.word	0xe000ed04

0800873c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800873c:	b480      	push	{r7}
 800873e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008740:	4b0b      	ldr	r3, [pc, #44]	@ (8008770 <vPortSetupTimerInterrupt+0x34>)
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008746:	4b0b      	ldr	r3, [pc, #44]	@ (8008774 <vPortSetupTimerInterrupt+0x38>)
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800874c:	4b0a      	ldr	r3, [pc, #40]	@ (8008778 <vPortSetupTimerInterrupt+0x3c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a0a      	ldr	r2, [pc, #40]	@ (800877c <vPortSetupTimerInterrupt+0x40>)
 8008752:	fba2 2303 	umull	r2, r3, r2, r3
 8008756:	099b      	lsrs	r3, r3, #6
 8008758:	4a09      	ldr	r2, [pc, #36]	@ (8008780 <vPortSetupTimerInterrupt+0x44>)
 800875a:	3b01      	subs	r3, #1
 800875c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800875e:	4b04      	ldr	r3, [pc, #16]	@ (8008770 <vPortSetupTimerInterrupt+0x34>)
 8008760:	2207      	movs	r2, #7
 8008762:	601a      	str	r2, [r3, #0]
}
 8008764:	bf00      	nop
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	e000e010 	.word	0xe000e010
 8008774:	e000e018 	.word	0xe000e018
 8008778:	20000000 	.word	0x20000000
 800877c:	10624dd3 	.word	0x10624dd3
 8008780:	e000e014 	.word	0xe000e014

08008784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008784:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008794 <vPortEnableVFP+0x10>
 8008788:	6801      	ldr	r1, [r0, #0]
 800878a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800878e:	6001      	str	r1, [r0, #0]
 8008790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008792:	bf00      	nop
 8008794:	e000ed88 	.word	0xe000ed88

08008798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800879e:	f3ef 8305 	mrs	r3, IPSR
 80087a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2b0f      	cmp	r3, #15
 80087a8:	d915      	bls.n	80087d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80087aa:	4a18      	ldr	r2, [pc, #96]	@ (800880c <vPortValidateInterruptPriority+0x74>)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	4413      	add	r3, r2
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80087b4:	4b16      	ldr	r3, [pc, #88]	@ (8008810 <vPortValidateInterruptPriority+0x78>)
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	7afa      	ldrb	r2, [r7, #11]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d20b      	bcs.n	80087d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	607b      	str	r3, [r7, #4]
}
 80087d0:	bf00      	nop
 80087d2:	bf00      	nop
 80087d4:	e7fd      	b.n	80087d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80087d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008814 <vPortValidateInterruptPriority+0x7c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80087de:	4b0e      	ldr	r3, [pc, #56]	@ (8008818 <vPortValidateInterruptPriority+0x80>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d90b      	bls.n	80087fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80087e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ea:	f383 8811 	msr	BASEPRI, r3
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	f3bf 8f4f 	dsb	sy
 80087f6:	603b      	str	r3, [r7, #0]
}
 80087f8:	bf00      	nop
 80087fa:	bf00      	nop
 80087fc:	e7fd      	b.n	80087fa <vPortValidateInterruptPriority+0x62>
	}
 80087fe:	bf00      	nop
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	e000e3f0 	.word	0xe000e3f0
 8008810:	2000150c 	.word	0x2000150c
 8008814:	e000ed0c 	.word	0xe000ed0c
 8008818:	20001510 	.word	0x20001510

0800881c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08a      	sub	sp, #40	@ 0x28
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008824:	2300      	movs	r3, #0
 8008826:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008828:	f7fe fc72 	bl	8007110 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800882c:	4b5c      	ldr	r3, [pc, #368]	@ (80089a0 <pvPortMalloc+0x184>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d101      	bne.n	8008838 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008834:	f000 f924 	bl	8008a80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008838:	4b5a      	ldr	r3, [pc, #360]	@ (80089a4 <pvPortMalloc+0x188>)
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4013      	ands	r3, r2
 8008840:	2b00      	cmp	r3, #0
 8008842:	f040 8095 	bne.w	8008970 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d01e      	beq.n	800888a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800884c:	2208      	movs	r2, #8
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4413      	add	r3, r2
 8008852:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	2b00      	cmp	r3, #0
 800885c:	d015      	beq.n	800888a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f023 0307 	bic.w	r3, r3, #7
 8008864:	3308      	adds	r3, #8
 8008866:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f003 0307 	and.w	r3, r3, #7
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00b      	beq.n	800888a <pvPortMalloc+0x6e>
	__asm volatile
 8008872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	617b      	str	r3, [r7, #20]
}
 8008884:	bf00      	nop
 8008886:	bf00      	nop
 8008888:	e7fd      	b.n	8008886 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d06f      	beq.n	8008970 <pvPortMalloc+0x154>
 8008890:	4b45      	ldr	r3, [pc, #276]	@ (80089a8 <pvPortMalloc+0x18c>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	429a      	cmp	r2, r3
 8008898:	d86a      	bhi.n	8008970 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800889a:	4b44      	ldr	r3, [pc, #272]	@ (80089ac <pvPortMalloc+0x190>)
 800889c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800889e:	4b43      	ldr	r3, [pc, #268]	@ (80089ac <pvPortMalloc+0x190>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088a4:	e004      	b.n	80088b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80088a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80088aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d903      	bls.n	80088c2 <pvPortMalloc+0xa6>
 80088ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1f1      	bne.n	80088a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80088c2:	4b37      	ldr	r3, [pc, #220]	@ (80089a0 <pvPortMalloc+0x184>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d051      	beq.n	8008970 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2208      	movs	r2, #8
 80088d2:	4413      	add	r3, r2
 80088d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80088d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80088de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e0:	685a      	ldr	r2, [r3, #4]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	1ad2      	subs	r2, r2, r3
 80088e6:	2308      	movs	r3, #8
 80088e8:	005b      	lsls	r3, r3, #1
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d920      	bls.n	8008930 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80088ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4413      	add	r3, r2
 80088f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	f003 0307 	and.w	r3, r3, #7
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00b      	beq.n	8008918 <pvPortMalloc+0xfc>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	613b      	str	r3, [r7, #16]
}
 8008912:	bf00      	nop
 8008914:	bf00      	nop
 8008916:	e7fd      	b.n	8008914 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	1ad2      	subs	r2, r2, r3
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800892a:	69b8      	ldr	r0, [r7, #24]
 800892c:	f000 f90a 	bl	8008b44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008930:	4b1d      	ldr	r3, [pc, #116]	@ (80089a8 <pvPortMalloc+0x18c>)
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	4a1b      	ldr	r2, [pc, #108]	@ (80089a8 <pvPortMalloc+0x18c>)
 800893c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800893e:	4b1a      	ldr	r3, [pc, #104]	@ (80089a8 <pvPortMalloc+0x18c>)
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	4b1b      	ldr	r3, [pc, #108]	@ (80089b0 <pvPortMalloc+0x194>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	429a      	cmp	r2, r3
 8008948:	d203      	bcs.n	8008952 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800894a:	4b17      	ldr	r3, [pc, #92]	@ (80089a8 <pvPortMalloc+0x18c>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a18      	ldr	r2, [pc, #96]	@ (80089b0 <pvPortMalloc+0x194>)
 8008950:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008954:	685a      	ldr	r2, [r3, #4]
 8008956:	4b13      	ldr	r3, [pc, #76]	@ (80089a4 <pvPortMalloc+0x188>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	431a      	orrs	r2, r3
 800895c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008962:	2200      	movs	r2, #0
 8008964:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008966:	4b13      	ldr	r3, [pc, #76]	@ (80089b4 <pvPortMalloc+0x198>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	3301      	adds	r3, #1
 800896c:	4a11      	ldr	r2, [pc, #68]	@ (80089b4 <pvPortMalloc+0x198>)
 800896e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008970:	f7fe fbdc 	bl	800712c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	f003 0307 	and.w	r3, r3, #7
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00b      	beq.n	8008996 <pvPortMalloc+0x17a>
	__asm volatile
 800897e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	60fb      	str	r3, [r7, #12]
}
 8008990:	bf00      	nop
 8008992:	bf00      	nop
 8008994:	e7fd      	b.n	8008992 <pvPortMalloc+0x176>
	return pvReturn;
 8008996:	69fb      	ldr	r3, [r7, #28]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3728      	adds	r7, #40	@ 0x28
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	200020d4 	.word	0x200020d4
 80089a4:	200020e8 	.word	0x200020e8
 80089a8:	200020d8 	.word	0x200020d8
 80089ac:	200020cc 	.word	0x200020cc
 80089b0:	200020dc 	.word	0x200020dc
 80089b4:	200020e0 	.word	0x200020e0

080089b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b086      	sub	sp, #24
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d04f      	beq.n	8008a6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80089ca:	2308      	movs	r3, #8
 80089cc:	425b      	negs	r3, r3
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	4413      	add	r3, r2
 80089d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	4b25      	ldr	r3, [pc, #148]	@ (8008a74 <vPortFree+0xbc>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4013      	ands	r3, r2
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10b      	bne.n	80089fe <vPortFree+0x46>
	__asm volatile
 80089e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	60fb      	str	r3, [r7, #12]
}
 80089f8:	bf00      	nop
 80089fa:	bf00      	nop
 80089fc:	e7fd      	b.n	80089fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00b      	beq.n	8008a1e <vPortFree+0x66>
	__asm volatile
 8008a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f3bf 8f4f 	dsb	sy
 8008a16:	60bb      	str	r3, [r7, #8]
}
 8008a18:	bf00      	nop
 8008a1a:	bf00      	nop
 8008a1c:	e7fd      	b.n	8008a1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	4b14      	ldr	r3, [pc, #80]	@ (8008a74 <vPortFree+0xbc>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4013      	ands	r3, r2
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d01e      	beq.n	8008a6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d11a      	bne.n	8008a6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	4b0e      	ldr	r3, [pc, #56]	@ (8008a74 <vPortFree+0xbc>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	43db      	mvns	r3, r3
 8008a3e:	401a      	ands	r2, r3
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a44:	f7fe fb64 	bl	8007110 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a78 <vPortFree+0xc0>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4413      	add	r3, r2
 8008a52:	4a09      	ldr	r2, [pc, #36]	@ (8008a78 <vPortFree+0xc0>)
 8008a54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a56:	6938      	ldr	r0, [r7, #16]
 8008a58:	f000 f874 	bl	8008b44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008a5c:	4b07      	ldr	r3, [pc, #28]	@ (8008a7c <vPortFree+0xc4>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3301      	adds	r3, #1
 8008a62:	4a06      	ldr	r2, [pc, #24]	@ (8008a7c <vPortFree+0xc4>)
 8008a64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008a66:	f7fe fb61 	bl	800712c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a6a:	bf00      	nop
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	200020e8 	.word	0x200020e8
 8008a78:	200020d8 	.word	0x200020d8
 8008a7c:	200020e4 	.word	0x200020e4

08008a80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a86:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008a8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a8c:	4b27      	ldr	r3, [pc, #156]	@ (8008b2c <prvHeapInit+0xac>)
 8008a8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f003 0307 	and.w	r3, r3, #7
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00c      	beq.n	8008ab4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	3307      	adds	r3, #7
 8008a9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f023 0307 	bic.w	r3, r3, #7
 8008aa6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	4a1f      	ldr	r2, [pc, #124]	@ (8008b2c <prvHeapInit+0xac>)
 8008ab0:	4413      	add	r3, r2
 8008ab2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8008b30 <prvHeapInit+0xb0>)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008abe:	4b1c      	ldr	r3, [pc, #112]	@ (8008b30 <prvHeapInit+0xb0>)
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	4413      	add	r3, r2
 8008aca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008acc:	2208      	movs	r2, #8
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	1a9b      	subs	r3, r3, r2
 8008ad2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f023 0307 	bic.w	r3, r3, #7
 8008ada:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	4a15      	ldr	r2, [pc, #84]	@ (8008b34 <prvHeapInit+0xb4>)
 8008ae0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ae2:	4b14      	ldr	r3, [pc, #80]	@ (8008b34 <prvHeapInit+0xb4>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008aea:	4b12      	ldr	r3, [pc, #72]	@ (8008b34 <prvHeapInit+0xb4>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2200      	movs	r2, #0
 8008af0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	1ad2      	subs	r2, r2, r3
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b00:	4b0c      	ldr	r3, [pc, #48]	@ (8008b34 <prvHeapInit+0xb4>)
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8008b38 <prvHeapInit+0xb8>)
 8008b0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	4a09      	ldr	r2, [pc, #36]	@ (8008b3c <prvHeapInit+0xbc>)
 8008b16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b18:	4b09      	ldr	r3, [pc, #36]	@ (8008b40 <prvHeapInit+0xc0>)
 8008b1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008b1e:	601a      	str	r2, [r3, #0]
}
 8008b20:	bf00      	nop
 8008b22:	3714      	adds	r7, #20
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	20001514 	.word	0x20001514
 8008b30:	200020cc 	.word	0x200020cc
 8008b34:	200020d4 	.word	0x200020d4
 8008b38:	200020dc 	.word	0x200020dc
 8008b3c:	200020d8 	.word	0x200020d8
 8008b40:	200020e8 	.word	0x200020e8

08008b44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b4c:	4b28      	ldr	r3, [pc, #160]	@ (8008bf0 <prvInsertBlockIntoFreeList+0xac>)
 8008b4e:	60fb      	str	r3, [r7, #12]
 8008b50:	e002      	b.n	8008b58 <prvInsertBlockIntoFreeList+0x14>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	60fb      	str	r3, [r7, #12]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d8f7      	bhi.n	8008b52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	68ba      	ldr	r2, [r7, #8]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d108      	bne.n	8008b86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	685a      	ldr	r2, [r3, #4]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	441a      	add	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	441a      	add	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d118      	bne.n	8008bcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	4b15      	ldr	r3, [pc, #84]	@ (8008bf4 <prvInsertBlockIntoFreeList+0xb0>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d00d      	beq.n	8008bc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	685a      	ldr	r2, [r3, #4]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	441a      	add	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	601a      	str	r2, [r3, #0]
 8008bc0:	e008      	b.n	8008bd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8008bf4 <prvInsertBlockIntoFreeList+0xb0>)
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	601a      	str	r2, [r3, #0]
 8008bca:	e003      	b.n	8008bd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d002      	beq.n	8008be2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008be2:	bf00      	nop
 8008be4:	3714      	adds	r7, #20
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	200020cc 	.word	0x200020cc
 8008bf4:	200020d4 	.word	0x200020d4

08008bf8 <memset>:
 8008bf8:	4402      	add	r2, r0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d100      	bne.n	8008c02 <memset+0xa>
 8008c00:	4770      	bx	lr
 8008c02:	f803 1b01 	strb.w	r1, [r3], #1
 8008c06:	e7f9      	b.n	8008bfc <memset+0x4>

08008c08 <__libc_init_array>:
 8008c08:	b570      	push	{r4, r5, r6, lr}
 8008c0a:	4d0d      	ldr	r5, [pc, #52]	@ (8008c40 <__libc_init_array+0x38>)
 8008c0c:	4c0d      	ldr	r4, [pc, #52]	@ (8008c44 <__libc_init_array+0x3c>)
 8008c0e:	1b64      	subs	r4, r4, r5
 8008c10:	10a4      	asrs	r4, r4, #2
 8008c12:	2600      	movs	r6, #0
 8008c14:	42a6      	cmp	r6, r4
 8008c16:	d109      	bne.n	8008c2c <__libc_init_array+0x24>
 8008c18:	4d0b      	ldr	r5, [pc, #44]	@ (8008c48 <__libc_init_array+0x40>)
 8008c1a:	4c0c      	ldr	r4, [pc, #48]	@ (8008c4c <__libc_init_array+0x44>)
 8008c1c:	f000 f826 	bl	8008c6c <_init>
 8008c20:	1b64      	subs	r4, r4, r5
 8008c22:	10a4      	asrs	r4, r4, #2
 8008c24:	2600      	movs	r6, #0
 8008c26:	42a6      	cmp	r6, r4
 8008c28:	d105      	bne.n	8008c36 <__libc_init_array+0x2e>
 8008c2a:	bd70      	pop	{r4, r5, r6, pc}
 8008c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c30:	4798      	blx	r3
 8008c32:	3601      	adds	r6, #1
 8008c34:	e7ee      	b.n	8008c14 <__libc_init_array+0xc>
 8008c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c3a:	4798      	blx	r3
 8008c3c:	3601      	adds	r6, #1
 8008c3e:	e7f2      	b.n	8008c26 <__libc_init_array+0x1e>
 8008c40:	08008d7c 	.word	0x08008d7c
 8008c44:	08008d7c 	.word	0x08008d7c
 8008c48:	08008d7c 	.word	0x08008d7c
 8008c4c:	08008d80 	.word	0x08008d80

08008c50 <memcpy>:
 8008c50:	440a      	add	r2, r1
 8008c52:	4291      	cmp	r1, r2
 8008c54:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c58:	d100      	bne.n	8008c5c <memcpy+0xc>
 8008c5a:	4770      	bx	lr
 8008c5c:	b510      	push	{r4, lr}
 8008c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c66:	4291      	cmp	r1, r2
 8008c68:	d1f9      	bne.n	8008c5e <memcpy+0xe>
 8008c6a:	bd10      	pop	{r4, pc}

08008c6c <_init>:
 8008c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6e:	bf00      	nop
 8008c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c72:	bc08      	pop	{r3}
 8008c74:	469e      	mov	lr, r3
 8008c76:	4770      	bx	lr

08008c78 <_fini>:
 8008c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7a:	bf00      	nop
 8008c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c7e:	bc08      	pop	{r3}
 8008c80:	469e      	mov	lr, r3
 8008c82:	4770      	bx	lr
