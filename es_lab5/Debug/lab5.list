
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005c80  08005c80  00006c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cc8  08005cc8  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005cc8  08005cc8  00006cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cd0  08005cd0  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cd0  08005cd0  00006cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cd4  08005cd4  00006cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005cd8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007bc  2000000c  08005ce4  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c8  08005ce4  000077c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc3a  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ec  00000000  00000000  00022c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae0  00000000  00000000  00025f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001516  00000000  00000000  00027a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028504  00000000  00000000  00028f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ea31  00000000  00000000  00051462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa70c  00000000  00000000  0006fe93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016a59f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007530  00000000  00000000  0016a5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00171b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005c68 	.word	0x08005c68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005c68 	.word	0x08005c68

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 ffab 	bl	8001452 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f81a 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 fa5c 	bl	80009bc <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000504:	f000 f878 	bl	80005f8 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000508:	f000 f8ae 	bl	8000668 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800050c:	f000 f8ea 	bl	80006e4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000510:	f000 f90e 	bl	8000730 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000514:	f000 f9c4 	bl	80008a0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000518:	f000 f9f2 	bl	8000900 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800051c:	f000 fa20 	bl	8000960 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000520:	f000 f944 	bl	80007ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // PA5 → LED1
 8000524:	2100      	movs	r1, #0
 8000526:	4802      	ldr	r0, [pc, #8]	@ (8000530 <main+0x3c>)
 8000528:	f003 fbfc 	bl	8003d24 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <main+0x38>
 8000530:	2000015c 	.word	0x2000015c

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b096      	sub	sp, #88	@ 0x58
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	2244      	movs	r2, #68	@ 0x44
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f005 fb63 	bl	8005c0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	463b      	mov	r3, r7
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000556:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800055a:	f001 fe99 	bl	8002290 <HAL_PWREx_ControlVoltageScaling>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000564:	f000 fbb8 	bl	8000cd8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000568:	f001 fe74 	bl	8002254 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800056c:	4b21      	ldr	r3, [pc, #132]	@ (80005f4 <SystemClock_Config+0xc0>)
 800056e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000572:	4a20      	ldr	r2, [pc, #128]	@ (80005f4 <SystemClock_Config+0xc0>)
 8000574:	f023 0318 	bic.w	r3, r3, #24
 8000578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800057c:	2314      	movs	r3, #20
 800057e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000584:	2301      	movs	r3, #1
 8000586:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800058c:	2360      	movs	r3, #96	@ 0x60
 800058e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
 8000592:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000594:	2301      	movs	r3, #1
 8000596:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000598:	2301      	movs	r3, #1
 800059a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800059c:	2328      	movs	r3, #40	@ 0x28
 800059e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005a0:	2307      	movs	r3, #7
 80005a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 ff8f 	bl	80024d4 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005bc:	f000 fb8c 	bl	8000cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c4:	2303      	movs	r3, #3
 80005c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d4:	463b      	mov	r3, r7
 80005d6:	2104      	movs	r1, #4
 80005d8:	4618      	mov	r0, r3
 80005da:	f002 fb57 	bl	8002c8c <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005e4:	f000 fb78 	bl	8000cd8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005e8:	f003 f85e 	bl	80036a8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005ec:	bf00      	nop
 80005ee:	3758      	adds	r7, #88	@ 0x58
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40021000 	.word	0x40021000

080005f8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80005fc:	4b18      	ldr	r3, [pc, #96]	@ (8000660 <MX_DFSDM1_Init+0x68>)
 80005fe:	4a19      	ldr	r2, [pc, #100]	@ (8000664 <MX_DFSDM1_Init+0x6c>)
 8000600:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000602:	4b17      	ldr	r3, [pc, #92]	@ (8000660 <MX_DFSDM1_Init+0x68>)
 8000604:	2201      	movs	r2, #1
 8000606:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000608:	4b15      	ldr	r3, [pc, #84]	@ (8000660 <MX_DFSDM1_Init+0x68>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800060e:	4b14      	ldr	r3, [pc, #80]	@ (8000660 <MX_DFSDM1_Init+0x68>)
 8000610:	2202      	movs	r2, #2
 8000612:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000614:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <MX_DFSDM1_Init+0x68>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800061a:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <MX_DFSDM1_Init+0x68>)
 800061c:	2200      	movs	r2, #0
 800061e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000620:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <MX_DFSDM1_Init+0x68>)
 8000622:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000626:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000628:	4b0d      	ldr	r3, [pc, #52]	@ (8000660 <MX_DFSDM1_Init+0x68>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_DFSDM1_Init+0x68>)
 8000630:	2204      	movs	r2, #4
 8000632:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <MX_DFSDM1_Init+0x68>)
 8000636:	2200      	movs	r2, #0
 8000638:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800063a:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <MX_DFSDM1_Init+0x68>)
 800063c:	2201      	movs	r2, #1
 800063e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000640:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <MX_DFSDM1_Init+0x68>)
 8000642:	2200      	movs	r2, #0
 8000644:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000646:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_DFSDM1_Init+0x68>)
 8000648:	2200      	movs	r2, #0
 800064a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	@ (8000660 <MX_DFSDM1_Init+0x68>)
 800064e:	f001 f8ab 	bl	80017a8 <HAL_DFSDM_ChannelInit>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000658:	f000 fb3e 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000028 	.word	0x20000028
 8000664:	40016020 	.word	0x40016020

08000668 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800066c:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <MX_I2C2_Init+0x74>)
 800066e:	4a1c      	ldr	r2, [pc, #112]	@ (80006e0 <MX_I2C2_Init+0x78>)
 8000670:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000672:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <MX_I2C2_Init+0x74>)
 8000674:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000678:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800067a:	4b18      	ldr	r3, [pc, #96]	@ (80006dc <MX_I2C2_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000680:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <MX_I2C2_Init+0x74>)
 8000682:	2201      	movs	r2, #1
 8000684:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000686:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <MX_I2C2_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800068c:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <MX_I2C2_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_I2C2_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000698:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <MX_I2C2_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069e:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_I2C2_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006a4:	480d      	ldr	r0, [pc, #52]	@ (80006dc <MX_I2C2_Init+0x74>)
 80006a6:	f001 fb70 	bl	8001d8a <HAL_I2C_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006b0:	f000 fb12 	bl	8000cd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006b4:	2100      	movs	r1, #0
 80006b6:	4809      	ldr	r0, [pc, #36]	@ (80006dc <MX_I2C2_Init+0x74>)
 80006b8:	f001 fc02 	bl	8001ec0 <HAL_I2CEx_ConfigAnalogFilter>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80006c2:	f000 fb09 	bl	8000cd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006c6:	2100      	movs	r1, #0
 80006c8:	4804      	ldr	r0, [pc, #16]	@ (80006dc <MX_I2C2_Init+0x74>)
 80006ca:	f001 fc44 	bl	8001f56 <HAL_I2CEx_ConfigDigitalFilter>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80006d4:	f000 fb00 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000060 	.word	0x20000060
 80006e0:	40005800 	.word	0x40005800

080006e4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_QUADSPI_Init+0x44>)
 80006ea:	4a10      	ldr	r2, [pc, #64]	@ (800072c <MX_QUADSPI_Init+0x48>)
 80006ec:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_QUADSPI_Init+0x44>)
 80006f0:	2202      	movs	r2, #2
 80006f2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_QUADSPI_Init+0x44>)
 80006f6:	2204      	movs	r2, #4
 80006f8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <MX_QUADSPI_Init+0x44>)
 80006fc:	2210      	movs	r2, #16
 80006fe:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_QUADSPI_Init+0x44>)
 8000702:	2217      	movs	r2, #23
 8000704:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <MX_QUADSPI_Init+0x44>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_QUADSPI_Init+0x44>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_QUADSPI_Init+0x44>)
 8000714:	f001 fe22 	bl	800235c <HAL_QSPI_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800071e:	f000 fadb 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200000b4 	.word	0x200000b4
 800072c:	a0001000 	.word	0xa0001000

08000730 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <MX_SPI3_Init+0x74>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	@ (80007a8 <MX_SPI3_Init+0x78>)
 8000738:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800073a:	4b1a      	ldr	r3, [pc, #104]	@ (80007a4 <MX_SPI3_Init+0x74>)
 800073c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000740:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000742:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <MX_SPI3_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000748:	4b16      	ldr	r3, [pc, #88]	@ (80007a4 <MX_SPI3_Init+0x74>)
 800074a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800074e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000750:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <MX_SPI3_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000756:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <MX_SPI3_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_SPI3_Init+0x74>)
 800075e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000762:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_SPI3_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_SPI3_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_SPI3_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <MX_SPI3_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800077c:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_SPI3_Init+0x74>)
 800077e:	2207      	movs	r2, #7
 8000780:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <MX_SPI3_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_SPI3_Init+0x74>)
 800078a:	2208      	movs	r2, #8
 800078c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <MX_SPI3_Init+0x74>)
 8000790:	f003 f96c 	bl	8003a6c <HAL_SPI_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800079a:	f000 fa9d 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000f8 	.word	0x200000f8
 80007a8:	40003c00 	.word	0x40003c00

080007ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08e      	sub	sp, #56	@ 0x38
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007cc:	463b      	mov	r3, r7
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
 80007da:	615a      	str	r2, [r3, #20]
 80007dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007de:	4b2d      	ldr	r3, [pc, #180]	@ (8000894 <MX_TIM2_Init+0xe8>)
 80007e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 80007e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000894 <MX_TIM2_Init+0xe8>)
 80007e8:	221f      	movs	r2, #31
 80007ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ec:	4b29      	ldr	r3, [pc, #164]	@ (8000894 <MX_TIM2_Init+0xe8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 80007f2:	4b28      	ldr	r3, [pc, #160]	@ (8000894 <MX_TIM2_Init+0xe8>)
 80007f4:	4a28      	ldr	r2, [pc, #160]	@ (8000898 <MX_TIM2_Init+0xec>)
 80007f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f8:	4b26      	ldr	r3, [pc, #152]	@ (8000894 <MX_TIM2_Init+0xe8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fe:	4b25      	ldr	r3, [pc, #148]	@ (8000894 <MX_TIM2_Init+0xe8>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000804:	4823      	ldr	r0, [pc, #140]	@ (8000894 <MX_TIM2_Init+0xe8>)
 8000806:	f003 f9d4 	bl	8003bb2 <HAL_TIM_Base_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000810:	f000 fa62 	bl	8000cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000814:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000818:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800081a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800081e:	4619      	mov	r1, r3
 8000820:	481c      	ldr	r0, [pc, #112]	@ (8000894 <MX_TIM2_Init+0xe8>)
 8000822:	f003 fc99 	bl	8004158 <HAL_TIM_ConfigClockSource>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800082c:	f000 fa54 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000830:	4818      	ldr	r0, [pc, #96]	@ (8000894 <MX_TIM2_Init+0xe8>)
 8000832:	f003 fa15 	bl	8003c60 <HAL_TIM_PWM_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800083c:	f000 fa4c 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	4811      	ldr	r0, [pc, #68]	@ (8000894 <MX_TIM2_Init+0xe8>)
 8000850:	f004 f988 	bl	8004b64 <HAL_TIMEx_MasterConfigSynchronization>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800085a:	f000 fa3d 	bl	8000cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800085e:	2360      	movs	r3, #96	@ 0x60
 8000860:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 250000 ;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_TIM2_Init+0xf0>)
 8000864:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800086e:	463b      	mov	r3, r7
 8000870:	2200      	movs	r2, #0
 8000872:	4619      	mov	r1, r3
 8000874:	4807      	ldr	r0, [pc, #28]	@ (8000894 <MX_TIM2_Init+0xe8>)
 8000876:	f003 fb5b 	bl	8003f30 <HAL_TIM_PWM_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000880:	f000 fa2a 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000884:	4803      	ldr	r0, [pc, #12]	@ (8000894 <MX_TIM2_Init+0xe8>)
 8000886:	f000 fbdb 	bl	8001040 <HAL_TIM_MspPostInit>

}
 800088a:	bf00      	nop
 800088c:	3738      	adds	r7, #56	@ 0x38
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000015c 	.word	0x2000015c
 8000898:	000f423f 	.word	0x000f423f
 800089c:	0003d090 	.word	0x0003d090

080008a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008a4:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <MX_USART1_UART_Init+0x58>)
 80008a6:	4a15      	ldr	r2, [pc, #84]	@ (80008fc <MX_USART1_UART_Init+0x5c>)
 80008a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008aa:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <MX_USART1_UART_Init+0x58>)
 80008ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <MX_USART1_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <MX_USART1_UART_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <MX_USART1_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <MX_USART1_UART_Init+0x58>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <MX_USART1_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <MX_USART1_UART_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <MX_USART1_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <MX_USART1_UART_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <MX_USART1_UART_Init+0x58>)
 80008e4:	f004 f9c6 	bl	8004c74 <HAL_UART_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008ee:	f000 f9f3 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200001a8 	.word	0x200001a8
 80008fc:	40013800 	.word	0x40013800

08000900 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000904:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <MX_USART3_UART_Init+0x58>)
 8000906:	4a15      	ldr	r2, [pc, #84]	@ (800095c <MX_USART3_UART_Init+0x5c>)
 8000908:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800090a:	4b13      	ldr	r3, [pc, #76]	@ (8000958 <MX_USART3_UART_Init+0x58>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <MX_USART3_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <MX_USART3_UART_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <MX_USART3_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <MX_USART3_UART_Init+0x58>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	@ (8000958 <MX_USART3_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <MX_USART3_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000936:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <MX_USART3_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093c:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <MX_USART3_UART_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	@ (8000958 <MX_USART3_UART_Init+0x58>)
 8000944:	f004 f996 	bl	8004c74 <HAL_UART_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800094e:	f000 f9c3 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000230 	.word	0x20000230
 800095c:	40004800 	.word	0x40004800

08000960 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000964:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000966:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800096a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800096c:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096e:	2206      	movs	r2, #6
 8000970:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000972:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000974:	2202      	movs	r2, #2
 8000976:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000978:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097a:	2202      	movs	r2, #2
 800097c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800097e:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000984:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800098a:	4b0b      	ldr	r3, [pc, #44]	@ (80009b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000990:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000996:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	@ (80009b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a4:	f001 fb23 	bl	8001fee <HAL_PCD_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009ae:	f000 f993 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200002b8 	.word	0x200002b8

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	@ 0x28
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009d2:	4bbc      	ldr	r3, [pc, #752]	@ (8000cc4 <MX_GPIO_Init+0x308>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	4abb      	ldr	r2, [pc, #748]	@ (8000cc4 <MX_GPIO_Init+0x308>)
 80009d8:	f043 0310 	orr.w	r3, r3, #16
 80009dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009de:	4bb9      	ldr	r3, [pc, #740]	@ (8000cc4 <MX_GPIO_Init+0x308>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	f003 0310 	and.w	r3, r3, #16
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	4bb6      	ldr	r3, [pc, #728]	@ (8000cc4 <MX_GPIO_Init+0x308>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	4ab5      	ldr	r2, [pc, #724]	@ (8000cc4 <MX_GPIO_Init+0x308>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f6:	4bb3      	ldr	r3, [pc, #716]	@ (8000cc4 <MX_GPIO_Init+0x308>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4bb0      	ldr	r3, [pc, #704]	@ (8000cc4 <MX_GPIO_Init+0x308>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	4aaf      	ldr	r2, [pc, #700]	@ (8000cc4 <MX_GPIO_Init+0x308>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a0e:	4bad      	ldr	r3, [pc, #692]	@ (8000cc4 <MX_GPIO_Init+0x308>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	4baa      	ldr	r3, [pc, #680]	@ (8000cc4 <MX_GPIO_Init+0x308>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1e:	4aa9      	ldr	r2, [pc, #676]	@ (8000cc4 <MX_GPIO_Init+0x308>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a26:	4ba7      	ldr	r3, [pc, #668]	@ (8000cc4 <MX_GPIO_Init+0x308>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a32:	4ba4      	ldr	r3, [pc, #656]	@ (8000cc4 <MX_GPIO_Init+0x308>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	4aa3      	ldr	r2, [pc, #652]	@ (8000cc4 <MX_GPIO_Init+0x308>)
 8000a38:	f043 0308 	orr.w	r3, r3, #8
 8000a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3e:	4ba1      	ldr	r3, [pc, #644]	@ (8000cc4 <MX_GPIO_Init+0x308>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a42:	f003 0308 	and.w	r3, r3, #8
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000a50:	489d      	ldr	r0, [pc, #628]	@ (8000cc8 <MX_GPIO_Init+0x30c>)
 8000a52:	f001 f95f 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000a5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a60:	f001 f958 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a64:	2200      	movs	r2, #0
 8000a66:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000a6a:	4898      	ldr	r0, [pc, #608]	@ (8000ccc <MX_GPIO_Init+0x310>)
 8000a6c:	f001 f952 	bl	8001d14 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000a76:	4896      	ldr	r0, [pc, #600]	@ (8000cd0 <MX_GPIO_Init+0x314>)
 8000a78:	f001 f94c 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a82:	4893      	ldr	r0, [pc, #588]	@ (8000cd0 <MX_GPIO_Init+0x314>)
 8000a84:	f001 f946 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000a8e:	4891      	ldr	r0, [pc, #580]	@ (8000cd4 <MX_GPIO_Init+0x318>)
 8000a90:	f001 f940 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2120      	movs	r1, #32
 8000a98:	488c      	ldr	r0, [pc, #560]	@ (8000ccc <MX_GPIO_Init+0x310>)
 8000a9a:	f001 f93b 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	4889      	ldr	r0, [pc, #548]	@ (8000cc8 <MX_GPIO_Init+0x30c>)
 8000aa4:	f001 f936 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000aa8:	f240 1315 	movw	r3, #277	@ 0x115
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4881      	ldr	r0, [pc, #516]	@ (8000cc8 <MX_GPIO_Init+0x30c>)
 8000ac2:	f000 ff7d 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000ac6:	236a      	movs	r3, #106	@ 0x6a
 8000ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	487b      	ldr	r0, [pc, #492]	@ (8000cc8 <MX_GPIO_Init+0x30c>)
 8000adc:	f000 ff70 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000ae0:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	4877      	ldr	r0, [pc, #476]	@ (8000cd4 <MX_GPIO_Init+0x318>)
 8000af8:	f000 ff62 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000afc:	233f      	movs	r3, #63	@ 0x3f
 8000afe:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b00:	230b      	movs	r3, #11
 8000b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4871      	ldr	r0, [pc, #452]	@ (8000cd4 <MX_GPIO_Init+0x318>)
 8000b10:	f000 ff56 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin;
 8000b14:	2301      	movs	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b24:	2308      	movs	r3, #8
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D1_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b32:	f000 ff45 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin;
 8000b36:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b52:	f000 ff35 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b56:	2310      	movs	r3, #16
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b5a:	230b      	movs	r3, #11
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b6c:	f000 ff28 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000b70:	23c0      	movs	r3, #192	@ 0xc0
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b80:	2305      	movs	r3, #5
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b8e:	f000 ff17 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b92:	2301      	movs	r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4849      	ldr	r0, [pc, #292]	@ (8000ccc <MX_GPIO_Init+0x310>)
 8000ba8:	f000 ff0a 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000bac:	2302      	movs	r3, #2
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bb0:	230b      	movs	r3, #11
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4843      	ldr	r0, [pc, #268]	@ (8000ccc <MX_GPIO_Init+0x310>)
 8000bc0:	f000 fefe 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000bc4:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000bc8:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	483b      	ldr	r0, [pc, #236]	@ (8000ccc <MX_GPIO_Init+0x310>)
 8000bde:	f000 feef 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000be2:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000be6:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4835      	ldr	r0, [pc, #212]	@ (8000cd0 <MX_GPIO_Init+0x314>)
 8000bfa:	f000 fee1 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000bfe:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	482e      	ldr	r0, [pc, #184]	@ (8000cd0 <MX_GPIO_Init+0x314>)
 8000c18:	f000 fed2 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c1c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4827      	ldr	r0, [pc, #156]	@ (8000cd4 <MX_GPIO_Init+0x318>)
 8000c36:	f000 fec3 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	481e      	ldr	r0, [pc, #120]	@ (8000cd0 <MX_GPIO_Init+0x314>)
 8000c56:	f000 feb3 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c5a:	2378      	movs	r3, #120	@ 0x78
 8000c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c6a:	2307      	movs	r3, #7
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4816      	ldr	r0, [pc, #88]	@ (8000cd0 <MX_GPIO_Init+0x314>)
 8000c76:	f000 fea3 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c80:	2312      	movs	r3, #18
 8000c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	480d      	ldr	r0, [pc, #52]	@ (8000ccc <MX_GPIO_Init+0x310>)
 8000c98:	f000 fe92 	bl	80019c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2017      	movs	r0, #23
 8000ca2:	f000 fd4a 	bl	800173a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ca6:	2017      	movs	r0, #23
 8000ca8:	f000 fd63 	bl	8001772 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2028      	movs	r0, #40	@ 0x28
 8000cb2:	f000 fd42 	bl	800173a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cb6:	2028      	movs	r0, #40	@ 0x28
 8000cb8:	f000 fd5b 	bl	8001772 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cbc:	bf00      	nop
 8000cbe:	3728      	adds	r7, #40	@ 0x28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	48001000 	.word	0x48001000
 8000ccc:	48000400 	.word	0x48000400
 8000cd0:	48000c00 	.word	0x48000c00
 8000cd4:	48000800 	.word	0x48000800

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <Error_Handler+0x8>

08000ce4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <HAL_MspInit+0x44>)
 8000cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cee:	4a0e      	ldr	r2, [pc, #56]	@ (8000d28 <HAL_MspInit+0x44>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <HAL_MspInit+0x44>)
 8000cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <HAL_MspInit+0x44>)
 8000d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d06:	4a08      	ldr	r2, [pc, #32]	@ (8000d28 <HAL_MspInit+0x44>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_MspInit+0x44>)
 8000d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40021000 	.word	0x40021000

08000d2c <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b0ac      	sub	sp, #176	@ 0xb0
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2288      	movs	r2, #136	@ 0x88
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f004 ff5e 	bl	8005c0e <memset>
  if(DFSDM1_Init == 0)
 8000d52:	4b25      	ldr	r3, [pc, #148]	@ (8000de8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d142      	bne.n	8000de0 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000d5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d5e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000d60:	2300      	movs	r3, #0
 8000d62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f002 f9b2 	bl	80030d4 <HAL_RCCEx_PeriphCLKConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000d76:	f7ff ffaf 	bl	8000cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dec <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8000dec <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d84:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d86:	4b19      	ldr	r3, [pc, #100]	@ (8000dec <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d92:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d96:	4a15      	ldr	r2, [pc, #84]	@ (8000dec <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d98:	f043 0310 	orr.w	r3, r3, #16
 8000d9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d9e:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da2:	f003 0310 	and.w	r3, r3, #16
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000daa:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000dae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000dc4:	2306      	movs	r3, #6
 8000dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4807      	ldr	r0, [pc, #28]	@ (8000df0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000dd2:	f000 fdf5 	bl	80019c0 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000dd6:	4b04      	ldr	r3, [pc, #16]	@ (8000de8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	4a02      	ldr	r2, [pc, #8]	@ (8000de8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000dde:	6013      	str	r3, [r2, #0]
  }

}
 8000de0:	bf00      	nop
 8000de2:	37b0      	adds	r7, #176	@ 0xb0
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	2000079c 	.word	0x2000079c
 8000dec:	40021000 	.word	0x40021000
 8000df0:	48001000 	.word	0x48001000

08000df4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b0ac      	sub	sp, #176	@ 0xb0
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2288      	movs	r2, #136	@ 0x88
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f004 fefa 	bl	8005c0e <memset>
  if(hi2c->Instance==I2C2)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a21      	ldr	r2, [pc, #132]	@ (8000ea4 <HAL_I2C_MspInit+0xb0>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d13b      	bne.n	8000e9c <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e24:	2380      	movs	r3, #128	@ 0x80
 8000e26:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4618      	mov	r0, r3
 8000e32:	f002 f94f 	bl	80030d4 <HAL_RCCEx_PeriphCLKConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e3c:	f7ff ff4c 	bl	8000cd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e40:	4b19      	ldr	r3, [pc, #100]	@ (8000ea8 <HAL_I2C_MspInit+0xb4>)
 8000e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e44:	4a18      	ldr	r2, [pc, #96]	@ (8000ea8 <HAL_I2C_MspInit+0xb4>)
 8000e46:	f043 0302 	orr.w	r3, r3, #2
 8000e4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <HAL_I2C_MspInit+0xb4>)
 8000e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000e58:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e60:	2312      	movs	r3, #18
 8000e62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e72:	2304      	movs	r3, #4
 8000e74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	480b      	ldr	r0, [pc, #44]	@ (8000eac <HAL_I2C_MspInit+0xb8>)
 8000e80:	f000 fd9e 	bl	80019c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e84:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <HAL_I2C_MspInit+0xb4>)
 8000e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e88:	4a07      	ldr	r2, [pc, #28]	@ (8000ea8 <HAL_I2C_MspInit+0xb4>)
 8000e8a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e90:	4b05      	ldr	r3, [pc, #20]	@ (8000ea8 <HAL_I2C_MspInit+0xb4>)
 8000e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000e9c:	bf00      	nop
 8000e9e:	37b0      	adds	r7, #176	@ 0xb0
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40005800 	.word	0x40005800
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	48000400 	.word	0x48000400

08000eb0 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	@ 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a17      	ldr	r2, [pc, #92]	@ (8000f2c <HAL_QSPI_MspInit+0x7c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d128      	bne.n	8000f24 <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000ed2:	4b17      	ldr	r3, [pc, #92]	@ (8000f30 <HAL_QSPI_MspInit+0x80>)
 8000ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ed6:	4a16      	ldr	r2, [pc, #88]	@ (8000f30 <HAL_QSPI_MspInit+0x80>)
 8000ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000edc:	6513      	str	r3, [r2, #80]	@ 0x50
 8000ede:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <HAL_QSPI_MspInit+0x80>)
 8000ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eea:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <HAL_QSPI_MspInit+0x80>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eee:	4a10      	ldr	r2, [pc, #64]	@ (8000f30 <HAL_QSPI_MspInit+0x80>)
 8000ef0:	f043 0310 	orr.w	r3, r3, #16
 8000ef4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <HAL_QSPI_MspInit+0x80>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000f02:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000f06:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f14:	230a      	movs	r3, #10
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4805      	ldr	r0, [pc, #20]	@ (8000f34 <HAL_QSPI_MspInit+0x84>)
 8000f20:	f000 fd4e 	bl	80019c0 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8000f24:	bf00      	nop
 8000f26:	3728      	adds	r7, #40	@ 0x28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	a0001000 	.word	0xa0001000
 8000f30:	40021000 	.word	0x40021000
 8000f34:	48001000 	.word	0x48001000

08000f38 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	@ 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a17      	ldr	r2, [pc, #92]	@ (8000fb4 <HAL_SPI_MspInit+0x7c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d128      	bne.n	8000fac <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f5a:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5e:	4a16      	ldr	r2, [pc, #88]	@ (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f64:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f66:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f76:	4a10      	ldr	r2, [pc, #64]	@ (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f78:	f043 0304 	orr.w	r3, r3, #4
 8000f7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000f8a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f9c:	2306      	movs	r3, #6
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <HAL_SPI_MspInit+0x84>)
 8000fa8:	f000 fd0a 	bl	80019c0 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	@ 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40003c00 	.word	0x40003c00
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	48000800 	.word	0x48000800

08000fc0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	@ 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fe0:	d128      	bne.n	8001034 <HAL_TIM_Base_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe2:	4b16      	ldr	r3, [pc, #88]	@ (800103c <HAL_TIM_Base_MspInit+0x7c>)
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe6:	4a15      	ldr	r2, [pc, #84]	@ (800103c <HAL_TIM_Base_MspInit+0x7c>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fee:	4b13      	ldr	r3, [pc, #76]	@ (800103c <HAL_TIM_Base_MspInit+0x7c>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	4b10      	ldr	r3, [pc, #64]	@ (800103c <HAL_TIM_Base_MspInit+0x7c>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	4a0f      	ldr	r2, [pc, #60]	@ (800103c <HAL_TIM_Base_MspInit+0x7c>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001006:	4b0d      	ldr	r3, [pc, #52]	@ (800103c <HAL_TIM_Base_MspInit+0x7c>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|ARD_D4_Pin;
 8001012:	230a      	movs	r3, #10
 8001014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001022:	2301      	movs	r3, #1
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001030:	f000 fcc6 	bl	80019c0 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001034:	bf00      	nop
 8001036:	3728      	adds	r7, #40	@ 0x28
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40021000 	.word	0x40021000

08001040 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001060:	d11d      	bne.n	800109e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <HAL_TIM_MspPostInit+0x68>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001066:	4a10      	ldr	r2, [pc, #64]	@ (80010a8 <HAL_TIM_MspPostInit+0x68>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800106e:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <HAL_TIM_MspPostInit+0x68>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LED1_Pin;
 800107a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800107e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800108c:	2301      	movs	r3, #1
 800108e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	4619      	mov	r1, r3
 8001096:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800109a:	f000 fc91 	bl	80019c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800109e:	bf00      	nop
 80010a0:	3720      	adds	r7, #32
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000

080010ac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b0ae      	sub	sp, #184	@ 0xb8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	2288      	movs	r2, #136	@ 0x88
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f004 fd9e 	bl	8005c0e <memset>
  if(huart->Instance==USART1)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a42      	ldr	r2, [pc, #264]	@ (80011e0 <HAL_UART_MspInit+0x134>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d13b      	bne.n	8001154 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010dc:	2301      	movs	r3, #1
 80010de:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010e0:	2300      	movs	r3, #0
 80010e2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fff3 	bl	80030d4 <HAL_RCCEx_PeriphCLKConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010f4:	f7ff fdf0 	bl	8000cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010f8:	4b3a      	ldr	r3, [pc, #232]	@ (80011e4 <HAL_UART_MspInit+0x138>)
 80010fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010fc:	4a39      	ldr	r2, [pc, #228]	@ (80011e4 <HAL_UART_MspInit+0x138>)
 80010fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001102:	6613      	str	r3, [r2, #96]	@ 0x60
 8001104:	4b37      	ldr	r3, [pc, #220]	@ (80011e4 <HAL_UART_MspInit+0x138>)
 8001106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001108:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800110c:	61bb      	str	r3, [r7, #24]
 800110e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001110:	4b34      	ldr	r3, [pc, #208]	@ (80011e4 <HAL_UART_MspInit+0x138>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001114:	4a33      	ldr	r2, [pc, #204]	@ (80011e4 <HAL_UART_MspInit+0x138>)
 8001116:	f043 0302 	orr.w	r3, r3, #2
 800111a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111c:	4b31      	ldr	r3, [pc, #196]	@ (80011e4 <HAL_UART_MspInit+0x138>)
 800111e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001128:	23c0      	movs	r3, #192	@ 0xc0
 800112a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001140:	2307      	movs	r3, #7
 8001142:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001146:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800114a:	4619      	mov	r1, r3
 800114c:	4826      	ldr	r0, [pc, #152]	@ (80011e8 <HAL_UART_MspInit+0x13c>)
 800114e:	f000 fc37 	bl	80019c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001152:	e040      	b.n	80011d6 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a24      	ldr	r2, [pc, #144]	@ (80011ec <HAL_UART_MspInit+0x140>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d13b      	bne.n	80011d6 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800115e:	2304      	movs	r3, #4
 8001160:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001162:	2300      	movs	r3, #0
 8001164:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	4618      	mov	r0, r3
 800116c:	f001 ffb2 	bl	80030d4 <HAL_RCCEx_PeriphCLKConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001176:	f7ff fdaf 	bl	8000cd8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800117a:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <HAL_UART_MspInit+0x138>)
 800117c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117e:	4a19      	ldr	r2, [pc, #100]	@ (80011e4 <HAL_UART_MspInit+0x138>)
 8001180:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001184:	6593      	str	r3, [r2, #88]	@ 0x58
 8001186:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <HAL_UART_MspInit+0x138>)
 8001188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001192:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <HAL_UART_MspInit+0x138>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	4a13      	ldr	r2, [pc, #76]	@ (80011e4 <HAL_UART_MspInit+0x138>)
 8001198:	f043 0308 	orr.w	r3, r3, #8
 800119c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119e:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <HAL_UART_MspInit+0x138>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80011aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011be:	2303      	movs	r3, #3
 80011c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011c4:	2307      	movs	r3, #7
 80011c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ca:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011ce:	4619      	mov	r1, r3
 80011d0:	4807      	ldr	r0, [pc, #28]	@ (80011f0 <HAL_UART_MspInit+0x144>)
 80011d2:	f000 fbf5 	bl	80019c0 <HAL_GPIO_Init>
}
 80011d6:	bf00      	nop
 80011d8:	37b8      	adds	r7, #184	@ 0xb8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40013800 	.word	0x40013800
 80011e4:	40021000 	.word	0x40021000
 80011e8:	48000400 	.word	0x48000400
 80011ec:	40004800 	.word	0x40004800
 80011f0:	48000c00 	.word	0x48000c00

080011f4 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b0ac      	sub	sp, #176	@ 0xb0
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2288      	movs	r2, #136	@ 0x88
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f004 fcfa 	bl	8005c0e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001222:	d17c      	bne.n	800131e <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001224:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001228:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800122a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800122e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001232:	2301      	movs	r3, #1
 8001234:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001236:	2301      	movs	r3, #1
 8001238:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800123a:	2318      	movs	r3, #24
 800123c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800123e:	2307      	movs	r3, #7
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001242:	2302      	movs	r3, #2
 8001244:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001246:	2302      	movs	r3, #2
 8001248:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800124a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800124e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4618      	mov	r0, r3
 8001256:	f001 ff3d 	bl	80030d4 <HAL_RCCEx_PeriphCLKConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001260:	f7ff fd3a 	bl	8000cd8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001264:	4b30      	ldr	r3, [pc, #192]	@ (8001328 <HAL_PCD_MspInit+0x134>)
 8001266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001268:	4a2f      	ldr	r2, [pc, #188]	@ (8001328 <HAL_PCD_MspInit+0x134>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001270:	4b2d      	ldr	r3, [pc, #180]	@ (8001328 <HAL_PCD_MspInit+0x134>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800127c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001280:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001290:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001294:	4619      	mov	r1, r3
 8001296:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800129a:	f000 fb91 	bl	80019c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800129e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80012a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012b8:	230a      	movs	r3, #10
 80012ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012c2:	4619      	mov	r1, r3
 80012c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012c8:	f000 fb7a 	bl	80019c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012cc:	4b16      	ldr	r3, [pc, #88]	@ (8001328 <HAL_PCD_MspInit+0x134>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d0:	4a15      	ldr	r2, [pc, #84]	@ (8001328 <HAL_PCD_MspInit+0x134>)
 80012d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d8:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <HAL_PCD_MspInit+0x134>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e4:	4b10      	ldr	r3, [pc, #64]	@ (8001328 <HAL_PCD_MspInit+0x134>)
 80012e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d114      	bne.n	800131a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001328 <HAL_PCD_MspInit+0x134>)
 80012f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001328 <HAL_PCD_MspInit+0x134>)
 80012f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80012fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001328 <HAL_PCD_MspInit+0x134>)
 80012fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001300:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001308:	f001 f818 	bl	800233c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800130c:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <HAL_PCD_MspInit+0x134>)
 800130e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001310:	4a05      	ldr	r2, [pc, #20]	@ (8001328 <HAL_PCD_MspInit+0x134>)
 8001312:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001316:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001318:	e001      	b.n	800131e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800131a:	f001 f80f 	bl	800233c <HAL_PWREx_EnableVddUSB>
}
 800131e:	bf00      	nop
 8001320:	37b0      	adds	r7, #176	@ 0xb0
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000

0800132c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <NMI_Handler+0x4>

08001334 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <HardFault_Handler+0x4>

0800133c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <MemManage_Handler+0x4>

08001344 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <BusFault_Handler+0x4>

0800134c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <UsageFault_Handler+0x4>

08001354 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001382:	f000 f8bb 	bl	80014fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}

0800138a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800138e:	2020      	movs	r0, #32
 8001390:	f000 fcd8 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001394:	2040      	movs	r0, #64	@ 0x40
 8001396:	f000 fcd5 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800139a:	2080      	movs	r0, #128	@ 0x80
 800139c:	f000 fcd2 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80013a0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80013a4:	f000 fcce 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}

080013ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80013b0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80013b4:	f000 fcc6 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80013b8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80013bc:	f000 fcc2 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80013c0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013c4:	f000 fcbe 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80013c8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80013cc:	f000 fcba 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80013d0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80013d4:	f000 fcb6 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}

080013dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013e0:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <SystemInit+0x20>)
 80013e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013e6:	4a05      	ldr	r2, [pc, #20]	@ (80013fc <SystemInit+0x20>)
 80013e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001400:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001438 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001404:	f7ff ffea 	bl	80013dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001408:	480c      	ldr	r0, [pc, #48]	@ (800143c <LoopForever+0x6>)
  ldr r1, =_edata
 800140a:	490d      	ldr	r1, [pc, #52]	@ (8001440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800140c:	4a0d      	ldr	r2, [pc, #52]	@ (8001444 <LoopForever+0xe>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001410:	e002      	b.n	8001418 <LoopCopyDataInit>

08001412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001416:	3304      	adds	r3, #4

08001418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800141c:	d3f9      	bcc.n	8001412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141e:	4a0a      	ldr	r2, [pc, #40]	@ (8001448 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001420:	4c0a      	ldr	r4, [pc, #40]	@ (800144c <LoopForever+0x16>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001424:	e001      	b.n	800142a <LoopFillZerobss>

08001426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001428:	3204      	adds	r2, #4

0800142a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800142c:	d3fb      	bcc.n	8001426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800142e:	f004 fbf7 	bl	8005c20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001432:	f7ff f85f 	bl	80004f4 <main>

08001436 <LoopForever>:

LoopForever:
    b LoopForever
 8001436:	e7fe      	b.n	8001436 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001438:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800143c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001440:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001444:	08005cd8 	.word	0x08005cd8
  ldr r2, =_sbss
 8001448:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800144c:	200007c8 	.word	0x200007c8

08001450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001450:	e7fe      	b.n	8001450 <ADC1_2_IRQHandler>

08001452 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145c:	2003      	movs	r0, #3
 800145e:	f000 f961 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001462:	2000      	movs	r0, #0
 8001464:	f000 f80e 	bl	8001484 <HAL_InitTick>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d002      	beq.n	8001474 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	71fb      	strb	r3, [r7, #7]
 8001472:	e001      	b.n	8001478 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001474:	f7ff fc36 	bl	8000ce4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001478:	79fb      	ldrb	r3, [r7, #7]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001490:	4b17      	ldr	r3, [pc, #92]	@ (80014f0 <HAL_InitTick+0x6c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d023      	beq.n	80014e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001498:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <HAL_InitTick+0x70>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <HAL_InitTick+0x6c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 f96d 	bl	800178e <HAL_SYSTICK_Config>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10f      	bne.n	80014da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b0f      	cmp	r3, #15
 80014be:	d809      	bhi.n	80014d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c0:	2200      	movs	r2, #0
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	f000 f937 	bl	800173a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014cc:	4a0a      	ldr	r2, [pc, #40]	@ (80014f8 <HAL_InitTick+0x74>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e007      	b.n	80014e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	e004      	b.n	80014e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	73fb      	strb	r3, [r7, #15]
 80014de:	e001      	b.n	80014e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000008 	.word	0x20000008
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20000004 	.word	0x20000004

080014fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <HAL_IncTick+0x20>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <HAL_IncTick+0x24>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4413      	add	r3, r2
 800150c:	4a04      	ldr	r2, [pc, #16]	@ (8001520 <HAL_IncTick+0x24>)
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000008 	.word	0x20000008
 8001520:	200007a0 	.word	0x200007a0

08001524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return uwTick;
 8001528:	4b03      	ldr	r3, [pc, #12]	@ (8001538 <HAL_GetTick+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	200007a0 	.word	0x200007a0

0800153c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001544:	f7ff ffee 	bl	8001524 <HAL_GetTick>
 8001548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001554:	d005      	beq.n	8001562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001556:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <HAL_Delay+0x44>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001562:	bf00      	nop
 8001564:	f7ff ffde 	bl	8001524 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	429a      	cmp	r2, r3
 8001572:	d8f7      	bhi.n	8001564 <HAL_Delay+0x28>
  {
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000008 	.word	0x20000008

08001584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	@ (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	@ (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	db0b      	blt.n	8001612 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	f003 021f 	and.w	r2, r3, #31
 8001600:	4907      	ldr	r1, [pc, #28]	@ (8001620 <__NVIC_EnableIRQ+0x38>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	2001      	movs	r0, #1
 800160a:	fa00 f202 	lsl.w	r2, r0, r2
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000e100 	.word	0xe000e100

08001624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db0a      	blt.n	800164e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	b2da      	uxtb	r2, r3
 800163c:	490c      	ldr	r1, [pc, #48]	@ (8001670 <__NVIC_SetPriority+0x4c>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	0112      	lsls	r2, r2, #4
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	440b      	add	r3, r1
 8001648:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800164c:	e00a      	b.n	8001664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4908      	ldr	r1, [pc, #32]	@ (8001674 <__NVIC_SetPriority+0x50>)
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	3b04      	subs	r3, #4
 800165c:	0112      	lsls	r2, r2, #4
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	440b      	add	r3, r1
 8001662:	761a      	strb	r2, [r3, #24]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000e100 	.word	0xe000e100
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	@ 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f1c3 0307 	rsb	r3, r3, #7
 8001692:	2b04      	cmp	r3, #4
 8001694:	bf28      	it	cs
 8001696:	2304      	movcs	r3, #4
 8001698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d902      	bls.n	80016a8 <NVIC_EncodePriority+0x30>
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3b03      	subs	r3, #3
 80016a6:	e000      	b.n	80016aa <NVIC_EncodePriority+0x32>
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	401a      	ands	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	43d9      	mvns	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	4313      	orrs	r3, r2
         );
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3724      	adds	r7, #36	@ 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016f0:	d301      	bcc.n	80016f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00f      	b.n	8001716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001720 <SysTick_Config+0x40>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fe:	210f      	movs	r1, #15
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f7ff ff8e 	bl	8001624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001708:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <SysTick_Config+0x40>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170e:	4b04      	ldr	r3, [pc, #16]	@ (8001720 <SysTick_Config+0x40>)
 8001710:	2207      	movs	r2, #7
 8001712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	e000e010 	.word	0xe000e010

08001724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff29 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800174c:	f7ff ff3e 	bl	80015cc <__NVIC_GetPriorityGrouping>
 8001750:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	6978      	ldr	r0, [r7, #20]
 8001758:	f7ff ff8e 	bl	8001678 <NVIC_EncodePriority>
 800175c:	4602      	mov	r2, r0
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff5d 	bl	8001624 <__NVIC_SetPriority>
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff31 	bl	80015e8 <__NVIC_EnableIRQ>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffa2 	bl	80016e0 <SysTick_Config>
 800179c:	4603      	mov	r3, r0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e0ac      	b.n	8001914 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f8b2 	bl	8001928 <DFSDM_GetChannelFromInstance>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4a55      	ldr	r2, [pc, #340]	@ (800191c <HAL_DFSDM_ChannelInit+0x174>)
 80017c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e09f      	b.n	8001914 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff faa9 	bl	8000d2c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80017da:	4b51      	ldr	r3, [pc, #324]	@ (8001920 <HAL_DFSDM_ChannelInit+0x178>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001920 <HAL_DFSDM_ChannelInit+0x178>)
 80017e2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80017e4:	4b4e      	ldr	r3, [pc, #312]	@ (8001920 <HAL_DFSDM_ChannelInit+0x178>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d125      	bne.n	8001838 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80017ec:	4b4d      	ldr	r3, [pc, #308]	@ (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 80017f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80017f6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80017f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4948      	ldr	r1, [pc, #288]	@ (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001806:	4b47      	ldr	r3, [pc, #284]	@ (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a46      	ldr	r2, [pc, #280]	@ (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 800180c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001810:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	791b      	ldrb	r3, [r3, #4]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d108      	bne.n	800182c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800181a:	4b42      	ldr	r3, [pc, #264]	@ (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	3b01      	subs	r3, #1
 8001824:	041b      	lsls	r3, r3, #16
 8001826:	493f      	ldr	r1, [pc, #252]	@ (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 8001828:	4313      	orrs	r3, r2
 800182a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800182c:	4b3d      	ldr	r3, [pc, #244]	@ (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a3c      	ldr	r2, [pc, #240]	@ (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 8001832:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001836:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8001846:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6819      	ldr	r1, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001856:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800185c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 020f 	bic.w	r2, r2, #15
 8001874:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6819      	ldr	r1, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001884:	431a      	orrs	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 800189c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6899      	ldr	r1, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ac:	3b01      	subs	r3, #1
 80018ae:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f002 0207 	and.w	r2, r2, #7
 80018c8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6859      	ldr	r1, [r3, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80018f4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f810 	bl	8001928 <DFSDM_GetChannelFromInstance>
 8001908:	4602      	mov	r2, r0
 800190a:	4904      	ldr	r1, [pc, #16]	@ (800191c <HAL_DFSDM_ChannelInit+0x174>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200007a8 	.word	0x200007a8
 8001920:	200007a4 	.word	0x200007a4
 8001924:	40016000 	.word	0x40016000

08001928 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a1c      	ldr	r2, [pc, #112]	@ (80019a4 <DFSDM_GetChannelFromInstance+0x7c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d102      	bne.n	800193e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	e02b      	b.n	8001996 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a19      	ldr	r2, [pc, #100]	@ (80019a8 <DFSDM_GetChannelFromInstance+0x80>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d102      	bne.n	800194c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001946:	2301      	movs	r3, #1
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	e024      	b.n	8001996 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a17      	ldr	r2, [pc, #92]	@ (80019ac <DFSDM_GetChannelFromInstance+0x84>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d102      	bne.n	800195a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001954:	2302      	movs	r3, #2
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	e01d      	b.n	8001996 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a14      	ldr	r2, [pc, #80]	@ (80019b0 <DFSDM_GetChannelFromInstance+0x88>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d102      	bne.n	8001968 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001962:	2304      	movs	r3, #4
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	e016      	b.n	8001996 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a12      	ldr	r2, [pc, #72]	@ (80019b4 <DFSDM_GetChannelFromInstance+0x8c>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d102      	bne.n	8001976 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001970:	2305      	movs	r3, #5
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	e00f      	b.n	8001996 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a0f      	ldr	r2, [pc, #60]	@ (80019b8 <DFSDM_GetChannelFromInstance+0x90>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d102      	bne.n	8001984 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800197e:	2306      	movs	r3, #6
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	e008      	b.n	8001996 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a0d      	ldr	r2, [pc, #52]	@ (80019bc <DFSDM_GetChannelFromInstance+0x94>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d102      	bne.n	8001992 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800198c:	2307      	movs	r3, #7
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	e001      	b.n	8001996 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001992:	2303      	movs	r3, #3
 8001994:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001996:	68fb      	ldr	r3, [r7, #12]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	40016000 	.word	0x40016000
 80019a8:	40016020 	.word	0x40016020
 80019ac:	40016040 	.word	0x40016040
 80019b0:	40016080 	.word	0x40016080
 80019b4:	400160a0 	.word	0x400160a0
 80019b8:	400160c0 	.word	0x400160c0
 80019bc:	400160e0 	.word	0x400160e0

080019c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ce:	e17f      	b.n	8001cd0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2101      	movs	r1, #1
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	fa01 f303 	lsl.w	r3, r1, r3
 80019dc:	4013      	ands	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 8171 	beq.w	8001cca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d005      	beq.n	8001a00 <HAL_GPIO_Init+0x40>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d130      	bne.n	8001a62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a36:	2201      	movs	r2, #1
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	f003 0201 	and.w	r2, r3, #1
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d118      	bne.n	8001aa0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a74:	2201      	movs	r2, #1
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	08db      	lsrs	r3, r3, #3
 8001a8a:	f003 0201 	and.w	r2, r3, #1
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d017      	beq.n	8001adc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d123      	bne.n	8001b30 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	08da      	lsrs	r2, r3, #3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3208      	adds	r2, #8
 8001af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	220f      	movs	r2, #15
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	08da      	lsrs	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3208      	adds	r2, #8
 8001b2a:	6939      	ldr	r1, [r7, #16]
 8001b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0203 	and.w	r2, r3, #3
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80ac 	beq.w	8001cca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b72:	4b5f      	ldr	r3, [pc, #380]	@ (8001cf0 <HAL_GPIO_Init+0x330>)
 8001b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b76:	4a5e      	ldr	r2, [pc, #376]	@ (8001cf0 <HAL_GPIO_Init+0x330>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b7e:	4b5c      	ldr	r3, [pc, #368]	@ (8001cf0 <HAL_GPIO_Init+0x330>)
 8001b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b8a:	4a5a      	ldr	r2, [pc, #360]	@ (8001cf4 <HAL_GPIO_Init+0x334>)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	3302      	adds	r3, #2
 8001b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bb4:	d025      	beq.n	8001c02 <HAL_GPIO_Init+0x242>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4f      	ldr	r2, [pc, #316]	@ (8001cf8 <HAL_GPIO_Init+0x338>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d01f      	beq.n	8001bfe <HAL_GPIO_Init+0x23e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4e      	ldr	r2, [pc, #312]	@ (8001cfc <HAL_GPIO_Init+0x33c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d019      	beq.n	8001bfa <HAL_GPIO_Init+0x23a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4d      	ldr	r2, [pc, #308]	@ (8001d00 <HAL_GPIO_Init+0x340>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d013      	beq.n	8001bf6 <HAL_GPIO_Init+0x236>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4c      	ldr	r2, [pc, #304]	@ (8001d04 <HAL_GPIO_Init+0x344>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00d      	beq.n	8001bf2 <HAL_GPIO_Init+0x232>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4b      	ldr	r2, [pc, #300]	@ (8001d08 <HAL_GPIO_Init+0x348>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d007      	beq.n	8001bee <HAL_GPIO_Init+0x22e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4a      	ldr	r2, [pc, #296]	@ (8001d0c <HAL_GPIO_Init+0x34c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d101      	bne.n	8001bea <HAL_GPIO_Init+0x22a>
 8001be6:	2306      	movs	r3, #6
 8001be8:	e00c      	b.n	8001c04 <HAL_GPIO_Init+0x244>
 8001bea:	2307      	movs	r3, #7
 8001bec:	e00a      	b.n	8001c04 <HAL_GPIO_Init+0x244>
 8001bee:	2305      	movs	r3, #5
 8001bf0:	e008      	b.n	8001c04 <HAL_GPIO_Init+0x244>
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x244>
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e004      	b.n	8001c04 <HAL_GPIO_Init+0x244>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e002      	b.n	8001c04 <HAL_GPIO_Init+0x244>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <HAL_GPIO_Init+0x244>
 8001c02:	2300      	movs	r3, #0
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	f002 0203 	and.w	r2, r2, #3
 8001c0a:	0092      	lsls	r2, r2, #2
 8001c0c:	4093      	lsls	r3, r2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c14:	4937      	ldr	r1, [pc, #220]	@ (8001cf4 <HAL_GPIO_Init+0x334>)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	089b      	lsrs	r3, r3, #2
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c22:	4b3b      	ldr	r3, [pc, #236]	@ (8001d10 <HAL_GPIO_Init+0x350>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c46:	4a32      	ldr	r2, [pc, #200]	@ (8001d10 <HAL_GPIO_Init+0x350>)
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c4c:	4b30      	ldr	r3, [pc, #192]	@ (8001d10 <HAL_GPIO_Init+0x350>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c70:	4a27      	ldr	r2, [pc, #156]	@ (8001d10 <HAL_GPIO_Init+0x350>)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c76:	4b26      	ldr	r3, [pc, #152]	@ (8001d10 <HAL_GPIO_Init+0x350>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001d10 <HAL_GPIO_Init+0x350>)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d10 <HAL_GPIO_Init+0x350>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cc4:	4a12      	ldr	r2, [pc, #72]	@ (8001d10 <HAL_GPIO_Init+0x350>)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f47f ae78 	bne.w	80019d0 <HAL_GPIO_Init+0x10>
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	371c      	adds	r7, #28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40010000 	.word	0x40010000
 8001cf8:	48000400 	.word	0x48000400
 8001cfc:	48000800 	.word	0x48000800
 8001d00:	48000c00 	.word	0x48000c00
 8001d04:	48001000 	.word	0x48001000
 8001d08:	48001400 	.word	0x48001400
 8001d0c:	48001800 	.word	0x48001800
 8001d10:	40010400 	.word	0x40010400

08001d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	807b      	strh	r3, [r7, #2]
 8001d20:	4613      	mov	r3, r2
 8001d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d24:	787b      	ldrb	r3, [r7, #1]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d30:	e002      	b.n	8001d38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d32:	887a      	ldrh	r2, [r7, #2]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d4e:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d006      	beq.n	8001d68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d5a:	4a05      	ldr	r2, [pc, #20]	@ (8001d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f806 	bl	8001d74 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40010400 	.word	0x40010400

08001d74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e08d      	b.n	8001eb8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d106      	bne.n	8001db6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff f81f 	bl	8000df4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2224      	movs	r2, #36	@ 0x24
 8001dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0201 	bic.w	r2, r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001dda:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d107      	bne.n	8001e04 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	e006      	b.n	8001e12 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e10:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d108      	bne.n	8001e2c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	e007      	b.n	8001e3c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e3a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e4e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e5e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69d9      	ldr	r1, [r3, #28]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1a      	ldr	r2, [r3, #32]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0201 	orr.w	r2, r2, #1
 8001e98:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b20      	cmp	r3, #32
 8001ed4:	d138      	bne.n	8001f48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e032      	b.n	8001f4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2224      	movs	r2, #36	@ 0x24
 8001ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0201 	bic.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6819      	ldr	r1, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0201 	orr.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2220      	movs	r2, #32
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	e000      	b.n	8001f4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f48:	2302      	movs	r3, #2
  }
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b085      	sub	sp, #20
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b20      	cmp	r3, #32
 8001f6a:	d139      	bne.n	8001fe0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e033      	b.n	8001fe2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2224      	movs	r2, #36	@ 0x24
 8001f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0201 	bic.w	r2, r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001fa8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	e000      	b.n	8001fe2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fe0:	2302      	movs	r3, #2
  }
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af02      	add	r7, sp, #8
 8001ff4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e101      	b.n	8002204 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d106      	bne.n	800201a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff f8ed 	bl	80011f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2203      	movs	r2, #3
 800201e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f003 fb6f 	bl	8005710 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	7c1a      	ldrb	r2, [r3, #16]
 800203a:	f88d 2000 	strb.w	r2, [sp]
 800203e:	3304      	adds	r3, #4
 8002040:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002042:	f003 fb38 	bl	80056b6 <USB_CoreInit>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0d5      	b.n	8002204 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2100      	movs	r1, #0
 800205e:	4618      	mov	r0, r3
 8002060:	f003 fb67 	bl	8005732 <USB_SetCurrentMode>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d005      	beq.n	8002076 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2202      	movs	r2, #2
 800206e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e0c6      	b.n	8002204 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002076:	2300      	movs	r3, #0
 8002078:	73fb      	strb	r3, [r7, #15]
 800207a:	e04a      	b.n	8002112 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	3315      	adds	r3, #21
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	3314      	adds	r3, #20
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	b298      	uxth	r0, r3
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	332e      	adds	r3, #46	@ 0x2e
 80020b8:	4602      	mov	r2, r0
 80020ba:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020bc:	7bfa      	ldrb	r2, [r7, #15]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	3318      	adds	r3, #24
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	331c      	adds	r3, #28
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	3320      	adds	r3, #32
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	3324      	adds	r3, #36	@ 0x24
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	3301      	adds	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	791b      	ldrb	r3, [r3, #4]
 8002116:	7bfa      	ldrb	r2, [r7, #15]
 8002118:	429a      	cmp	r2, r3
 800211a:	d3af      	bcc.n	800207c <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800211c:	2300      	movs	r3, #0
 800211e:	73fb      	strb	r3, [r7, #15]
 8002120:	e044      	b.n	80021ac <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002164:	7bfa      	ldrb	r2, [r7, #15]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4413      	add	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800217a:	7bfa      	ldrb	r2, [r7, #15]
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002190:	7bfa      	ldrb	r2, [r7, #15]
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	3301      	adds	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	791b      	ldrb	r3, [r3, #4]
 80021b0:	7bfa      	ldrb	r2, [r7, #15]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d3b5      	bcc.n	8002122 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	7c1a      	ldrb	r2, [r3, #16]
 80021be:	f88d 2000 	strb.w	r2, [sp]
 80021c2:	3304      	adds	r3, #4
 80021c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c6:	f003 fb01 	bl	80057cc <USB_DevInit>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e013      	b.n	8002204 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	7b1b      	ldrb	r3, [r3, #12]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d102      	bne.n	80021f8 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f80a 	bl	800220c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f003 fca6 	bl	8005b4e <USB_DevDisconnect>

  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800223e:	f043 0303 	orr.w	r3, r3, #3
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002258:	4b05      	ldr	r3, [pc, #20]	@ (8002270 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a04      	ldr	r2, [pc, #16]	@ (8002270 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800225e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002262:	6013      	str	r3, [r2, #0]
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40007000 	.word	0x40007000

08002274 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002278:	4b04      	ldr	r3, [pc, #16]	@ (800228c <HAL_PWREx_GetVoltageRange+0x18>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40007000 	.word	0x40007000

08002290 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800229e:	d130      	bne.n	8002302 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022a0:	4b23      	ldr	r3, [pc, #140]	@ (8002330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022ac:	d038      	beq.n	8002320 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022ae:	4b20      	ldr	r3, [pc, #128]	@ (8002330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022be:	4b1d      	ldr	r3, [pc, #116]	@ (8002334 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2232      	movs	r2, #50	@ 0x32
 80022c4:	fb02 f303 	mul.w	r3, r2, r3
 80022c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002338 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	0c9b      	lsrs	r3, r3, #18
 80022d0:	3301      	adds	r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022d4:	e002      	b.n	80022dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3b01      	subs	r3, #1
 80022da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022dc:	4b14      	ldr	r3, [pc, #80]	@ (8002330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022e8:	d102      	bne.n	80022f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f2      	bne.n	80022d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022fc:	d110      	bne.n	8002320 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e00f      	b.n	8002322 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002302:	4b0b      	ldr	r3, [pc, #44]	@ (8002330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800230a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800230e:	d007      	beq.n	8002320 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002310:	4b07      	ldr	r3, [pc, #28]	@ (8002330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002318:	4a05      	ldr	r2, [pc, #20]	@ (8002330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800231a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800231e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40007000 	.word	0x40007000
 8002334:	20000000 	.word	0x20000000
 8002338:	431bde83 	.word	0x431bde83

0800233c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002340:	4b05      	ldr	r3, [pc, #20]	@ (8002358 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4a04      	ldr	r2, [pc, #16]	@ (8002358 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002346:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800234a:	6053      	str	r3, [r2, #4]
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40007000 	.word	0x40007000

0800235c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af02      	add	r7, sp, #8
 8002362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002364:	f7ff f8de 	bl	8001524 <HAL_GetTick>
 8002368:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e063      	b.n	800243c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10b      	bne.n	8002398 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7fe fd91 	bl	8000eb0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800238e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f858 	bl	8002448 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	021a      	lsls	r2, r3, #8
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	2120      	movs	r1, #32
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f850 	bl	8002464 <QSPI_WaitFlagStateUntilTimeout>
 80023c4:	4603      	mov	r3, r0
 80023c6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80023c8:	7afb      	ldrb	r3, [r7, #11]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d131      	bne.n	8002432 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80023d8:	f023 0310 	bic.w	r3, r3, #16
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6852      	ldr	r2, [r2, #4]
 80023e0:	0611      	lsls	r1, r2, #24
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68d2      	ldr	r2, [r2, #12]
 80023e6:	4311      	orrs	r1, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	430b      	orrs	r3, r1
 80023ee:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	4b13      	ldr	r3, [pc, #76]	@ (8002444 <HAL_QSPI_Init+0xe8>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6912      	ldr	r2, [r2, #16]
 80023fe:	0411      	lsls	r1, r2, #16
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6952      	ldr	r2, [r2, #20]
 8002404:	4311      	orrs	r1, r2
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6992      	ldr	r2, [r2, #24]
 800240a:	4311      	orrs	r1, r2
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	430b      	orrs	r3, r1
 8002412:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800243a:	7afb      	ldrb	r3, [r7, #11]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	ffe0f8fe 	.word	0xffe0f8fe

08002448 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	4613      	mov	r3, r2
 8002472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002474:	e01a      	b.n	80024ac <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247c:	d016      	beq.n	80024ac <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800247e:	f7ff f851 	bl	8001524 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	429a      	cmp	r2, r3
 800248c:	d302      	bcc.n	8002494 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10b      	bne.n	80024ac <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2204      	movs	r2, #4
 8002498:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a0:	f043 0201 	orr.w	r2, r3, #1
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e00e      	b.n	80024ca <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	bf14      	ite	ne
 80024ba:	2301      	movne	r3, #1
 80024bc:	2300      	moveq	r3, #0
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d1d6      	bne.n	8002476 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e3ca      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024e6:	4b97      	ldr	r3, [pc, #604]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024f0:	4b94      	ldr	r3, [pc, #592]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 80e4 	beq.w	80026d0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d007      	beq.n	800251e <HAL_RCC_OscConfig+0x4a>
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2b0c      	cmp	r3, #12
 8002512:	f040 808b 	bne.w	800262c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b01      	cmp	r3, #1
 800251a:	f040 8087 	bne.w	800262c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800251e:	4b89      	ldr	r3, [pc, #548]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_RCC_OscConfig+0x62>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e3a2      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1a      	ldr	r2, [r3, #32]
 800253a:	4b82      	ldr	r3, [pc, #520]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d004      	beq.n	8002550 <HAL_RCC_OscConfig+0x7c>
 8002546:	4b7f      	ldr	r3, [pc, #508]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800254e:	e005      	b.n	800255c <HAL_RCC_OscConfig+0x88>
 8002550:	4b7c      	ldr	r3, [pc, #496]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002552:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800255c:	4293      	cmp	r3, r2
 800255e:	d223      	bcs.n	80025a8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	4618      	mov	r0, r3
 8002566:	f000 fd55 	bl	8003014 <RCC_SetFlashLatencyFromMSIRange>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e383      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002574:	4b73      	ldr	r3, [pc, #460]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a72      	ldr	r2, [pc, #456]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 800257a:	f043 0308 	orr.w	r3, r3, #8
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b70      	ldr	r3, [pc, #448]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	496d      	ldr	r1, [pc, #436]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002592:	4b6c      	ldr	r3, [pc, #432]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	021b      	lsls	r3, r3, #8
 80025a0:	4968      	ldr	r1, [pc, #416]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	604b      	str	r3, [r1, #4]
 80025a6:	e025      	b.n	80025f4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025a8:	4b66      	ldr	r3, [pc, #408]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a65      	ldr	r2, [pc, #404]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80025ae:	f043 0308 	orr.w	r3, r3, #8
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b63      	ldr	r3, [pc, #396]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4960      	ldr	r1, [pc, #384]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	021b      	lsls	r3, r3, #8
 80025d4:	495b      	ldr	r1, [pc, #364]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d109      	bne.n	80025f4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 fd15 	bl	8003014 <RCC_SetFlashLatencyFromMSIRange>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e343      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025f4:	f000 fc4a 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4b52      	ldr	r3, [pc, #328]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	4950      	ldr	r1, [pc, #320]	@ (8002748 <HAL_RCC_OscConfig+0x274>)
 8002606:	5ccb      	ldrb	r3, [r1, r3]
 8002608:	f003 031f 	and.w	r3, r3, #31
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
 8002610:	4a4e      	ldr	r2, [pc, #312]	@ (800274c <HAL_RCC_OscConfig+0x278>)
 8002612:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002614:	4b4e      	ldr	r3, [pc, #312]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7fe ff33 	bl	8001484 <HAL_InitTick>
 800261e:	4603      	mov	r3, r0
 8002620:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d052      	beq.n	80026ce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	e327      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d032      	beq.n	800269a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002634:	4b43      	ldr	r3, [pc, #268]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a42      	ldr	r2, [pc, #264]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002640:	f7fe ff70 	bl	8001524 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002648:	f7fe ff6c 	bl	8001524 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e310      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800265a:	4b3a      	ldr	r3, [pc, #232]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002666:	4b37      	ldr	r3, [pc, #220]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a36      	ldr	r2, [pc, #216]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 800266c:	f043 0308 	orr.w	r3, r3, #8
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	4b34      	ldr	r3, [pc, #208]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	4931      	ldr	r1, [pc, #196]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002680:	4313      	orrs	r3, r2
 8002682:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002684:	4b2f      	ldr	r3, [pc, #188]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	021b      	lsls	r3, r3, #8
 8002692:	492c      	ldr	r1, [pc, #176]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
 8002698:	e01a      	b.n	80026d0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800269a:	4b2a      	ldr	r3, [pc, #168]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a29      	ldr	r2, [pc, #164]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80026a0:	f023 0301 	bic.w	r3, r3, #1
 80026a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026a6:	f7fe ff3d 	bl	8001524 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026ae:	f7fe ff39 	bl	8001524 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e2dd      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026c0:	4b20      	ldr	r3, [pc, #128]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f0      	bne.n	80026ae <HAL_RCC_OscConfig+0x1da>
 80026cc:	e000      	b.n	80026d0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d074      	beq.n	80027c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d005      	beq.n	80026ee <HAL_RCC_OscConfig+0x21a>
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	2b0c      	cmp	r3, #12
 80026e6:	d10e      	bne.n	8002706 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d10b      	bne.n	8002706 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ee:	4b15      	ldr	r3, [pc, #84]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d064      	beq.n	80027c4 <HAL_RCC_OscConfig+0x2f0>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d160      	bne.n	80027c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e2ba      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x24a>
 8002710:	4b0c      	ldr	r3, [pc, #48]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a0b      	ldr	r2, [pc, #44]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002716:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	e026      	b.n	800276c <HAL_RCC_OscConfig+0x298>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002726:	d115      	bne.n	8002754 <HAL_RCC_OscConfig+0x280>
 8002728:	4b06      	ldr	r3, [pc, #24]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a05      	ldr	r2, [pc, #20]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 800272e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	4b03      	ldr	r3, [pc, #12]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a02      	ldr	r2, [pc, #8]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 800273a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	e014      	b.n	800276c <HAL_RCC_OscConfig+0x298>
 8002742:	bf00      	nop
 8002744:	40021000 	.word	0x40021000
 8002748:	08005c80 	.word	0x08005c80
 800274c:	20000000 	.word	0x20000000
 8002750:	20000004 	.word	0x20000004
 8002754:	4ba0      	ldr	r3, [pc, #640]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a9f      	ldr	r2, [pc, #636]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 800275a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	4b9d      	ldr	r3, [pc, #628]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a9c      	ldr	r2, [pc, #624]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 8002766:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800276a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d013      	beq.n	800279c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7fe fed6 	bl	8001524 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800277c:	f7fe fed2 	bl	8001524 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b64      	cmp	r3, #100	@ 0x64
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e276      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800278e:	4b92      	ldr	r3, [pc, #584]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x2a8>
 800279a:	e014      	b.n	80027c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279c:	f7fe fec2 	bl	8001524 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a4:	f7fe febe 	bl	8001524 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b64      	cmp	r3, #100	@ 0x64
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e262      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027b6:	4b88      	ldr	r3, [pc, #544]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x2d0>
 80027c2:	e000      	b.n	80027c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d060      	beq.n	8002894 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_OscConfig+0x310>
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2b0c      	cmp	r3, #12
 80027dc:	d119      	bne.n	8002812 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d116      	bne.n	8002812 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027e4:	4b7c      	ldr	r3, [pc, #496]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <HAL_RCC_OscConfig+0x328>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e23f      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fc:	4b76      	ldr	r3, [pc, #472]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	061b      	lsls	r3, r3, #24
 800280a:	4973      	ldr	r1, [pc, #460]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 800280c:	4313      	orrs	r3, r2
 800280e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002810:	e040      	b.n	8002894 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d023      	beq.n	8002862 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800281a:	4b6f      	ldr	r3, [pc, #444]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a6e      	ldr	r2, [pc, #440]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 8002820:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7fe fe7d 	bl	8001524 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282e:	f7fe fe79 	bl	8001524 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e21d      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002840:	4b65      	ldr	r3, [pc, #404]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284c:	4b62      	ldr	r3, [pc, #392]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	061b      	lsls	r3, r3, #24
 800285a:	495f      	ldr	r1, [pc, #380]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
 8002860:	e018      	b.n	8002894 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002862:	4b5d      	ldr	r3, [pc, #372]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a5c      	ldr	r2, [pc, #368]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 8002868:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800286c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286e:	f7fe fe59 	bl	8001524 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002876:	f7fe fe55 	bl	8001524 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e1f9      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002888:	4b53      	ldr	r3, [pc, #332]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f0      	bne.n	8002876 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d03c      	beq.n	800291a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d01c      	beq.n	80028e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a8:	4b4b      	ldr	r3, [pc, #300]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80028aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028ae:	4a4a      	ldr	r2, [pc, #296]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b8:	f7fe fe34 	bl	8001524 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c0:	f7fe fe30 	bl	8001524 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e1d4      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028d2:	4b41      	ldr	r3, [pc, #260]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80028d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0ef      	beq.n	80028c0 <HAL_RCC_OscConfig+0x3ec>
 80028e0:	e01b      	b.n	800291a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e2:	4b3d      	ldr	r3, [pc, #244]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80028e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028e8:	4a3b      	ldr	r2, [pc, #236]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80028ea:	f023 0301 	bic.w	r3, r3, #1
 80028ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f2:	f7fe fe17 	bl	8001524 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028fa:	f7fe fe13 	bl	8001524 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e1b7      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800290c:	4b32      	ldr	r3, [pc, #200]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 800290e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1ef      	bne.n	80028fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 80a6 	beq.w	8002a74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002928:	2300      	movs	r3, #0
 800292a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800292c:	4b2a      	ldr	r3, [pc, #168]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10d      	bne.n	8002954 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002938:	4b27      	ldr	r3, [pc, #156]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 800293a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293c:	4a26      	ldr	r2, [pc, #152]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 800293e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002942:	6593      	str	r3, [r2, #88]	@ 0x58
 8002944:	4b24      	ldr	r3, [pc, #144]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 8002946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002950:	2301      	movs	r3, #1
 8002952:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002954:	4b21      	ldr	r3, [pc, #132]	@ (80029dc <HAL_RCC_OscConfig+0x508>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d118      	bne.n	8002992 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002960:	4b1e      	ldr	r3, [pc, #120]	@ (80029dc <HAL_RCC_OscConfig+0x508>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a1d      	ldr	r2, [pc, #116]	@ (80029dc <HAL_RCC_OscConfig+0x508>)
 8002966:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800296a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800296c:	f7fe fdda 	bl	8001524 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002974:	f7fe fdd6 	bl	8001524 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e17a      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002986:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <HAL_RCC_OscConfig+0x508>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d108      	bne.n	80029ac <HAL_RCC_OscConfig+0x4d8>
 800299a:	4b0f      	ldr	r3, [pc, #60]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 800299c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a0:	4a0d      	ldr	r2, [pc, #52]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029aa:	e029      	b.n	8002a00 <HAL_RCC_OscConfig+0x52c>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b05      	cmp	r3, #5
 80029b2:	d115      	bne.n	80029e0 <HAL_RCC_OscConfig+0x50c>
 80029b4:	4b08      	ldr	r3, [pc, #32]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ba:	4a07      	ldr	r2, [pc, #28]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80029bc:	f043 0304 	orr.w	r3, r3, #4
 80029c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029c4:	4b04      	ldr	r3, [pc, #16]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80029c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ca:	4a03      	ldr	r2, [pc, #12]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029d4:	e014      	b.n	8002a00 <HAL_RCC_OscConfig+0x52c>
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40007000 	.word	0x40007000
 80029e0:	4b9c      	ldr	r3, [pc, #624]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e6:	4a9b      	ldr	r2, [pc, #620]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 80029e8:	f023 0301 	bic.w	r3, r3, #1
 80029ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029f0:	4b98      	ldr	r3, [pc, #608]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 80029f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f6:	4a97      	ldr	r2, [pc, #604]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 80029f8:	f023 0304 	bic.w	r3, r3, #4
 80029fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d016      	beq.n	8002a36 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a08:	f7fe fd8c 	bl	8001524 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a10:	f7fe fd88 	bl	8001524 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e12a      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a26:	4b8b      	ldr	r3, [pc, #556]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0ed      	beq.n	8002a10 <HAL_RCC_OscConfig+0x53c>
 8002a34:	e015      	b.n	8002a62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a36:	f7fe fd75 	bl	8001524 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a3c:	e00a      	b.n	8002a54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3e:	f7fe fd71 	bl	8001524 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e113      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a54:	4b7f      	ldr	r3, [pc, #508]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1ed      	bne.n	8002a3e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a62:	7ffb      	ldrb	r3, [r7, #31]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d105      	bne.n	8002a74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a68:	4b7a      	ldr	r3, [pc, #488]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6c:	4a79      	ldr	r2, [pc, #484]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002a6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a72:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80fe 	beq.w	8002c7a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	f040 80d0 	bne.w	8002c28 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a88:	4b72      	ldr	r3, [pc, #456]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f003 0203 	and.w	r2, r3, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d130      	bne.n	8002afe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d127      	bne.n	8002afe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d11f      	bne.n	8002afe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ac8:	2a07      	cmp	r2, #7
 8002aca:	bf14      	ite	ne
 8002acc:	2201      	movne	r2, #1
 8002ace:	2200      	moveq	r2, #0
 8002ad0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d113      	bne.n	8002afe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae0:	085b      	lsrs	r3, r3, #1
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d109      	bne.n	8002afe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	085b      	lsrs	r3, r3, #1
 8002af6:	3b01      	subs	r3, #1
 8002af8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d06e      	beq.n	8002bdc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	2b0c      	cmp	r3, #12
 8002b02:	d069      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b04:	4b53      	ldr	r3, [pc, #332]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d105      	bne.n	8002b1c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b10:	4b50      	ldr	r3, [pc, #320]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0ad      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b20:	4b4c      	ldr	r3, [pc, #304]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a4b      	ldr	r2, [pc, #300]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002b26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b2a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b2c:	f7fe fcfa 	bl	8001524 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b34:	f7fe fcf6 	bl	8001524 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e09a      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b46:	4b43      	ldr	r3, [pc, #268]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b52:	4b40      	ldr	r3, [pc, #256]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	4b40      	ldr	r3, [pc, #256]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b62:	3a01      	subs	r2, #1
 8002b64:	0112      	lsls	r2, r2, #4
 8002b66:	4311      	orrs	r1, r2
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b6c:	0212      	lsls	r2, r2, #8
 8002b6e:	4311      	orrs	r1, r2
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b74:	0852      	lsrs	r2, r2, #1
 8002b76:	3a01      	subs	r2, #1
 8002b78:	0552      	lsls	r2, r2, #21
 8002b7a:	4311      	orrs	r1, r2
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b80:	0852      	lsrs	r2, r2, #1
 8002b82:	3a01      	subs	r2, #1
 8002b84:	0652      	lsls	r2, r2, #25
 8002b86:	4311      	orrs	r1, r2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b8c:	0912      	lsrs	r2, r2, #4
 8002b8e:	0452      	lsls	r2, r2, #17
 8002b90:	430a      	orrs	r2, r1
 8002b92:	4930      	ldr	r1, [pc, #192]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b98:	4b2e      	ldr	r3, [pc, #184]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a2d      	ldr	r2, [pc, #180]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002b9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ba2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4a2a      	ldr	r2, [pc, #168]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002baa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bb0:	f7fe fcb8 	bl	8001524 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7fe fcb4 	bl	8001524 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e058      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bca:	4b22      	ldr	r3, [pc, #136]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bd6:	e050      	b.n	8002c7a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e04f      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d148      	bne.n	8002c7a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002be8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a19      	ldr	r2, [pc, #100]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002bee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bf2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bf4:	4b17      	ldr	r3, [pc, #92]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4a16      	ldr	r2, [pc, #88]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002bfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bfe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c00:	f7fe fc90 	bl	8001524 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c08:	f7fe fc8c 	bl	8001524 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e030      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0x734>
 8002c26:	e028      	b.n	8002c7a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	2b0c      	cmp	r3, #12
 8002c2c:	d023      	beq.n	8002c76 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2e:	4b09      	ldr	r3, [pc, #36]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a08      	ldr	r2, [pc, #32]	@ (8002c54 <HAL_RCC_OscConfig+0x780>)
 8002c34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3a:	f7fe fc73 	bl	8001524 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c40:	e00c      	b.n	8002c5c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c42:	f7fe fc6f 	bl	8001524 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d905      	bls.n	8002c5c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e013      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
 8002c54:	40021000 	.word	0x40021000
 8002c58:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c5c:	4b09      	ldr	r3, [pc, #36]	@ (8002c84 <HAL_RCC_OscConfig+0x7b0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1ec      	bne.n	8002c42 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c68:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <HAL_RCC_OscConfig+0x7b0>)
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	4905      	ldr	r1, [pc, #20]	@ (8002c84 <HAL_RCC_OscConfig+0x7b0>)
 8002c6e:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <HAL_RCC_OscConfig+0x7b4>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	60cb      	str	r3, [r1, #12]
 8002c74:	e001      	b.n	8002c7a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3720      	adds	r7, #32
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000
 8002c88:	feeefffc 	.word	0xfeeefffc

08002c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0e7      	b.n	8002e70 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca0:	4b75      	ldr	r3, [pc, #468]	@ (8002e78 <HAL_RCC_ClockConfig+0x1ec>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d910      	bls.n	8002cd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cae:	4b72      	ldr	r3, [pc, #456]	@ (8002e78 <HAL_RCC_ClockConfig+0x1ec>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 0207 	bic.w	r2, r3, #7
 8002cb6:	4970      	ldr	r1, [pc, #448]	@ (8002e78 <HAL_RCC_ClockConfig+0x1ec>)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cbe:	4b6e      	ldr	r3, [pc, #440]	@ (8002e78 <HAL_RCC_ClockConfig+0x1ec>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0cf      	b.n	8002e70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d010      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	4b66      	ldr	r3, [pc, #408]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d908      	bls.n	8002cfe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cec:	4b63      	ldr	r3, [pc, #396]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	4960      	ldr	r1, [pc, #384]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d04c      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d107      	bne.n	8002d22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d12:	4b5a      	ldr	r3, [pc, #360]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d121      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e0a6      	b.n	8002e70 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d107      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d2a:	4b54      	ldr	r3, [pc, #336]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d115      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e09a      	b.n	8002e70 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d42:	4b4e      	ldr	r3, [pc, #312]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e08e      	b.n	8002e70 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d52:	4b4a      	ldr	r3, [pc, #296]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e086      	b.n	8002e70 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d62:	4b46      	ldr	r3, [pc, #280]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f023 0203 	bic.w	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	4943      	ldr	r1, [pc, #268]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d74:	f7fe fbd6 	bl	8001524 <HAL_GetTick>
 8002d78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	e00a      	b.n	8002d92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7c:	f7fe fbd2 	bl	8001524 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e06e      	b.n	8002e70 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d92:	4b3a      	ldr	r3, [pc, #232]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 020c 	and.w	r2, r3, #12
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d1eb      	bne.n	8002d7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d010      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	4b31      	ldr	r3, [pc, #196]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d208      	bcs.n	8002dd2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc0:	4b2e      	ldr	r3, [pc, #184]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	492b      	ldr	r1, [pc, #172]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd2:	4b29      	ldr	r3, [pc, #164]	@ (8002e78 <HAL_RCC_ClockConfig+0x1ec>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d210      	bcs.n	8002e02 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de0:	4b25      	ldr	r3, [pc, #148]	@ (8002e78 <HAL_RCC_ClockConfig+0x1ec>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 0207 	bic.w	r2, r3, #7
 8002de8:	4923      	ldr	r1, [pc, #140]	@ (8002e78 <HAL_RCC_ClockConfig+0x1ec>)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df0:	4b21      	ldr	r3, [pc, #132]	@ (8002e78 <HAL_RCC_ClockConfig+0x1ec>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d001      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e036      	b.n	8002e70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d008      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	4918      	ldr	r1, [pc, #96]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d009      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e2c:	4b13      	ldr	r3, [pc, #76]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4910      	ldr	r1, [pc, #64]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e40:	f000 f824 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 8002e44:	4602      	mov	r2, r0
 8002e46:	4b0d      	ldr	r3, [pc, #52]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	091b      	lsrs	r3, r3, #4
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	490b      	ldr	r1, [pc, #44]	@ (8002e80 <HAL_RCC_ClockConfig+0x1f4>)
 8002e52:	5ccb      	ldrb	r3, [r1, r3]
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5c:	4a09      	ldr	r2, [pc, #36]	@ (8002e84 <HAL_RCC_ClockConfig+0x1f8>)
 8002e5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e60:	4b09      	ldr	r3, [pc, #36]	@ (8002e88 <HAL_RCC_ClockConfig+0x1fc>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fe fb0d 	bl	8001484 <HAL_InitTick>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e6e:	7afb      	ldrb	r3, [r7, #11]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40022000 	.word	0x40022000
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	08005c80 	.word	0x08005c80
 8002e84:	20000000 	.word	0x20000000
 8002e88:	20000004 	.word	0x20000004

08002e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b089      	sub	sp, #36	@ 0x24
 8002e90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	2300      	movs	r3, #0
 8002e98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e9a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ea4:	4b3b      	ldr	r3, [pc, #236]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	2b0c      	cmp	r3, #12
 8002eb8:	d121      	bne.n	8002efe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d11e      	bne.n	8002efe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ec0:	4b34      	ldr	r3, [pc, #208]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d107      	bne.n	8002edc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ecc:	4b31      	ldr	r3, [pc, #196]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ed2:	0a1b      	lsrs	r3, r3, #8
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	e005      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002edc:	4b2d      	ldr	r3, [pc, #180]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10d      	bne.n	8002f14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002efc:	e00a      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d102      	bne.n	8002f0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f04:	4b25      	ldr	r3, [pc, #148]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x110>)
 8002f06:	61bb      	str	r3, [r7, #24]
 8002f08:	e004      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f10:	4b23      	ldr	r3, [pc, #140]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	2b0c      	cmp	r3, #12
 8002f18:	d134      	bne.n	8002f84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d003      	beq.n	8002f32 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d003      	beq.n	8002f38 <HAL_RCC_GetSysClockFreq+0xac>
 8002f30:	e005      	b.n	8002f3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f32:	4b1a      	ldr	r3, [pc, #104]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x110>)
 8002f34:	617b      	str	r3, [r7, #20]
      break;
 8002f36:	e005      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f38:	4b19      	ldr	r3, [pc, #100]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f3a:	617b      	str	r3, [r7, #20]
      break;
 8002f3c:	e002      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	617b      	str	r3, [r7, #20]
      break;
 8002f42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f44:	4b13      	ldr	r3, [pc, #76]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	3301      	adds	r3, #1
 8002f50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f52:	4b10      	ldr	r3, [pc, #64]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	0a1b      	lsrs	r3, r3, #8
 8002f58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	fb03 f202 	mul.w	r2, r3, r2
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	0e5b      	lsrs	r3, r3, #25
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	3301      	adds	r3, #1
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f84:	69bb      	ldr	r3, [r7, #24]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3724      	adds	r7, #36	@ 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000
 8002f98:	08005c98 	.word	0x08005c98
 8002f9c:	00f42400 	.word	0x00f42400
 8002fa0:	007a1200 	.word	0x007a1200

08002fa4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa8:	4b03      	ldr	r3, [pc, #12]	@ (8002fb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002faa:	681b      	ldr	r3, [r3, #0]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20000000 	.word	0x20000000

08002fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fc0:	f7ff fff0 	bl	8002fa4 <HAL_RCC_GetHCLKFreq>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4b06      	ldr	r3, [pc, #24]	@ (8002fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	0a1b      	lsrs	r3, r3, #8
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	4904      	ldr	r1, [pc, #16]	@ (8002fe4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fd2:	5ccb      	ldrb	r3, [r1, r3]
 8002fd4:	f003 031f 	and.w	r3, r3, #31
 8002fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	08005c90 	.word	0x08005c90

08002fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fec:	f7ff ffda 	bl	8002fa4 <HAL_RCC_GetHCLKFreq>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	4b06      	ldr	r3, [pc, #24]	@ (800300c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	0adb      	lsrs	r3, r3, #11
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	4904      	ldr	r1, [pc, #16]	@ (8003010 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ffe:	5ccb      	ldrb	r3, [r1, r3]
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003008:	4618      	mov	r0, r3
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021000 	.word	0x40021000
 8003010:	08005c90 	.word	0x08005c90

08003014 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800301c:	2300      	movs	r3, #0
 800301e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003020:	4b2a      	ldr	r3, [pc, #168]	@ (80030cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003024:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800302c:	f7ff f922 	bl	8002274 <HAL_PWREx_GetVoltageRange>
 8003030:	6178      	str	r0, [r7, #20]
 8003032:	e014      	b.n	800305e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003034:	4b25      	ldr	r3, [pc, #148]	@ (80030cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003038:	4a24      	ldr	r2, [pc, #144]	@ (80030cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800303a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800303e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003040:	4b22      	ldr	r3, [pc, #136]	@ (80030cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800304c:	f7ff f912 	bl	8002274 <HAL_PWREx_GetVoltageRange>
 8003050:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003052:	4b1e      	ldr	r3, [pc, #120]	@ (80030cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003056:	4a1d      	ldr	r2, [pc, #116]	@ (80030cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003058:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800305c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003064:	d10b      	bne.n	800307e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b80      	cmp	r3, #128	@ 0x80
 800306a:	d919      	bls.n	80030a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003070:	d902      	bls.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003072:	2302      	movs	r3, #2
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	e013      	b.n	80030a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003078:	2301      	movs	r3, #1
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	e010      	b.n	80030a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b80      	cmp	r3, #128	@ 0x80
 8003082:	d902      	bls.n	800308a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003084:	2303      	movs	r3, #3
 8003086:	613b      	str	r3, [r7, #16]
 8003088:	e00a      	b.n	80030a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b80      	cmp	r3, #128	@ 0x80
 800308e:	d102      	bne.n	8003096 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003090:	2302      	movs	r3, #2
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	e004      	b.n	80030a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b70      	cmp	r3, #112	@ 0x70
 800309a:	d101      	bne.n	80030a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800309c:	2301      	movs	r3, #1
 800309e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030a0:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f023 0207 	bic.w	r2, r3, #7
 80030a8:	4909      	ldr	r1, [pc, #36]	@ (80030d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030b0:	4b07      	ldr	r3, [pc, #28]	@ (80030d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d001      	beq.n	80030c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40022000 	.word	0x40022000

080030d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030dc:	2300      	movs	r3, #0
 80030de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030e0:	2300      	movs	r3, #0
 80030e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d041      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030f4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80030f8:	d02a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80030fa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80030fe:	d824      	bhi.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003100:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003104:	d008      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003106:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800310a:	d81e      	bhi.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00a      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003110:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003114:	d010      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003116:	e018      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003118:	4b86      	ldr	r3, [pc, #536]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4a85      	ldr	r2, [pc, #532]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003122:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003124:	e015      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3304      	adds	r3, #4
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f000 facb 	bl	80036c8 <RCCEx_PLLSAI1_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003136:	e00c      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3320      	adds	r3, #32
 800313c:	2100      	movs	r1, #0
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fbb6 	bl	80038b0 <RCCEx_PLLSAI2_Config>
 8003144:	4603      	mov	r3, r0
 8003146:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003148:	e003      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	74fb      	strb	r3, [r7, #19]
      break;
 800314e:	e000      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003152:	7cfb      	ldrb	r3, [r7, #19]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10b      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003158:	4b76      	ldr	r3, [pc, #472]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800315e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003166:	4973      	ldr	r1, [pc, #460]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800316e:	e001      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003170:	7cfb      	ldrb	r3, [r7, #19]
 8003172:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d041      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003184:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003188:	d02a      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800318a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800318e:	d824      	bhi.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003190:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003194:	d008      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003196:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800319a:	d81e      	bhi.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x106>
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031a4:	d010      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031a6:	e018      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031a8:	4b62      	ldr	r3, [pc, #392]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4a61      	ldr	r2, [pc, #388]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031b4:	e015      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3304      	adds	r3, #4
 80031ba:	2100      	movs	r1, #0
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 fa83 	bl	80036c8 <RCCEx_PLLSAI1_Config>
 80031c2:	4603      	mov	r3, r0
 80031c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031c6:	e00c      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3320      	adds	r3, #32
 80031cc:	2100      	movs	r1, #0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fb6e 	bl	80038b0 <RCCEx_PLLSAI2_Config>
 80031d4:	4603      	mov	r3, r0
 80031d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031d8:	e003      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	74fb      	strb	r3, [r7, #19]
      break;
 80031de:	e000      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80031e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031e2:	7cfb      	ldrb	r3, [r7, #19]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10b      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031e8:	4b52      	ldr	r3, [pc, #328]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031f6:	494f      	ldr	r1, [pc, #316]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80031fe:	e001      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003200:	7cfb      	ldrb	r3, [r7, #19]
 8003202:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 80a0 	beq.w	8003352 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003212:	2300      	movs	r3, #0
 8003214:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003216:	4b47      	ldr	r3, [pc, #284]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003226:	2300      	movs	r3, #0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00d      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800322c:	4b41      	ldr	r3, [pc, #260]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003230:	4a40      	ldr	r2, [pc, #256]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003236:	6593      	str	r3, [r2, #88]	@ 0x58
 8003238:	4b3e      	ldr	r3, [pc, #248]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003244:	2301      	movs	r3, #1
 8003246:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003248:	4b3b      	ldr	r3, [pc, #236]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a3a      	ldr	r2, [pc, #232]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800324e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003252:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003254:	f7fe f966 	bl	8001524 <HAL_GetTick>
 8003258:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800325a:	e009      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800325c:	f7fe f962 	bl	8001524 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d902      	bls.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	74fb      	strb	r3, [r7, #19]
        break;
 800326e:	e005      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003270:	4b31      	ldr	r3, [pc, #196]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0ef      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800327c:	7cfb      	ldrb	r3, [r7, #19]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d15c      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003282:	4b2c      	ldr	r3, [pc, #176]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003288:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800328c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01f      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	429a      	cmp	r2, r3
 800329e:	d019      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032a0:	4b24      	ldr	r3, [pc, #144]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032ac:	4b21      	ldr	r3, [pc, #132]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b2:	4a20      	ldr	r2, [pc, #128]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032cc:	4a19      	ldr	r2, [pc, #100]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d016      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032de:	f7fe f921 	bl	8001524 <HAL_GetTick>
 80032e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e4:	e00b      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e6:	f7fe f91d 	bl	8001524 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d902      	bls.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	74fb      	strb	r3, [r7, #19]
            break;
 80032fc:	e006      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0ec      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800330c:	7cfb      	ldrb	r3, [r7, #19]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10c      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003312:	4b08      	ldr	r3, [pc, #32]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003318:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003322:	4904      	ldr	r1, [pc, #16]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800332a:	e009      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800332c:	7cfb      	ldrb	r3, [r7, #19]
 800332e:	74bb      	strb	r3, [r7, #18]
 8003330:	e006      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003332:	bf00      	nop
 8003334:	40021000 	.word	0x40021000
 8003338:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333c:	7cfb      	ldrb	r3, [r7, #19]
 800333e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003340:	7c7b      	ldrb	r3, [r7, #17]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d105      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003346:	4b9e      	ldr	r3, [pc, #632]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334a:	4a9d      	ldr	r2, [pc, #628]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003350:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800335e:	4b98      	ldr	r3, [pc, #608]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003364:	f023 0203 	bic.w	r2, r3, #3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336c:	4994      	ldr	r1, [pc, #592]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003380:	4b8f      	ldr	r3, [pc, #572]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003386:	f023 020c 	bic.w	r2, r3, #12
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800338e:	498c      	ldr	r1, [pc, #560]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033a2:	4b87      	ldr	r3, [pc, #540]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b0:	4983      	ldr	r1, [pc, #524]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033c4:	4b7e      	ldr	r3, [pc, #504]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d2:	497b      	ldr	r1, [pc, #492]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033e6:	4b76      	ldr	r3, [pc, #472]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033f4:	4972      	ldr	r1, [pc, #456]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0320 	and.w	r3, r3, #32
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003408:	4b6d      	ldr	r3, [pc, #436]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800340e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003416:	496a      	ldr	r1, [pc, #424]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800342a:	4b65      	ldr	r3, [pc, #404]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003430:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003438:	4961      	ldr	r1, [pc, #388]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800344c:	4b5c      	ldr	r3, [pc, #368]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003452:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800345a:	4959      	ldr	r1, [pc, #356]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800346e:	4b54      	ldr	r3, [pc, #336]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003474:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800347c:	4950      	ldr	r1, [pc, #320]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003490:	4b4b      	ldr	r3, [pc, #300]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003496:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800349e:	4948      	ldr	r1, [pc, #288]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034b2:	4b43      	ldr	r3, [pc, #268]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c0:	493f      	ldr	r1, [pc, #252]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d028      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034d4:	4b3a      	ldr	r3, [pc, #232]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034e2:	4937      	ldr	r1, [pc, #220]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034f2:	d106      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034f4:	4b32      	ldr	r3, [pc, #200]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4a31      	ldr	r2, [pc, #196]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034fe:	60d3      	str	r3, [r2, #12]
 8003500:	e011      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003506:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800350a:	d10c      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3304      	adds	r3, #4
 8003510:	2101      	movs	r1, #1
 8003512:	4618      	mov	r0, r3
 8003514:	f000 f8d8 	bl	80036c8 <RCCEx_PLLSAI1_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800351c:	7cfb      	ldrb	r3, [r7, #19]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003522:	7cfb      	ldrb	r3, [r7, #19]
 8003524:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d028      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003532:	4b23      	ldr	r3, [pc, #140]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003538:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003540:	491f      	ldr	r1, [pc, #124]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003550:	d106      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003552:	4b1b      	ldr	r3, [pc, #108]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	4a1a      	ldr	r2, [pc, #104]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003558:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800355c:	60d3      	str	r3, [r2, #12]
 800355e:	e011      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003564:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003568:	d10c      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3304      	adds	r3, #4
 800356e:	2101      	movs	r1, #1
 8003570:	4618      	mov	r0, r3
 8003572:	f000 f8a9 	bl	80036c8 <RCCEx_PLLSAI1_Config>
 8003576:	4603      	mov	r3, r0
 8003578:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800357a:	7cfb      	ldrb	r3, [r7, #19]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003580:	7cfb      	ldrb	r3, [r7, #19]
 8003582:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d02b      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003590:	4b0b      	ldr	r3, [pc, #44]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003596:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800359e:	4908      	ldr	r1, [pc, #32]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035ae:	d109      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035b0:	4b03      	ldr	r3, [pc, #12]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	4a02      	ldr	r2, [pc, #8]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035ba:	60d3      	str	r3, [r2, #12]
 80035bc:	e014      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035be:	bf00      	nop
 80035c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035cc:	d10c      	bne.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3304      	adds	r3, #4
 80035d2:	2101      	movs	r1, #1
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 f877 	bl	80036c8 <RCCEx_PLLSAI1_Config>
 80035da:	4603      	mov	r3, r0
 80035dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035de:	7cfb      	ldrb	r3, [r7, #19]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80035e4:	7cfb      	ldrb	r3, [r7, #19]
 80035e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d02f      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035f4:	4b2b      	ldr	r3, [pc, #172]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003602:	4928      	ldr	r1, [pc, #160]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003604:	4313      	orrs	r3, r2
 8003606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800360e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003612:	d10d      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3304      	adds	r3, #4
 8003618:	2102      	movs	r1, #2
 800361a:	4618      	mov	r0, r3
 800361c:	f000 f854 	bl	80036c8 <RCCEx_PLLSAI1_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003624:	7cfb      	ldrb	r3, [r7, #19]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d014      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800362a:	7cfb      	ldrb	r3, [r7, #19]
 800362c:	74bb      	strb	r3, [r7, #18]
 800362e:	e011      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003634:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003638:	d10c      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3320      	adds	r3, #32
 800363e:	2102      	movs	r1, #2
 8003640:	4618      	mov	r0, r3
 8003642:	f000 f935 	bl	80038b0 <RCCEx_PLLSAI2_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800364a:	7cfb      	ldrb	r3, [r7, #19]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003650:	7cfb      	ldrb	r3, [r7, #19]
 8003652:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00a      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003660:	4b10      	ldr	r3, [pc, #64]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003666:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800366e:	490d      	ldr	r1, [pc, #52]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00b      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003682:	4b08      	ldr	r3, [pc, #32]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003688:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003692:	4904      	ldr	r1, [pc, #16]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800369a:	7cbb      	ldrb	r3, [r7, #18]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40021000 	.word	0x40021000

080036a8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80036ac:	4b05      	ldr	r3, [pc, #20]	@ (80036c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a04      	ldr	r2, [pc, #16]	@ (80036c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036b2:	f043 0304 	orr.w	r3, r3, #4
 80036b6:	6013      	str	r3, [r2, #0]
}
 80036b8:	bf00      	nop
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40021000 	.word	0x40021000

080036c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036d6:	4b75      	ldr	r3, [pc, #468]	@ (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d018      	beq.n	8003714 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036e2:	4b72      	ldr	r3, [pc, #456]	@ (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f003 0203 	and.w	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d10d      	bne.n	800370e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
       ||
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036fa:	4b6c      	ldr	r3, [pc, #432]	@ (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	091b      	lsrs	r3, r3, #4
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
       ||
 800370a:	429a      	cmp	r2, r3
 800370c:	d047      	beq.n	800379e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
 8003712:	e044      	b.n	800379e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b03      	cmp	r3, #3
 800371a:	d018      	beq.n	800374e <RCCEx_PLLSAI1_Config+0x86>
 800371c:	2b03      	cmp	r3, #3
 800371e:	d825      	bhi.n	800376c <RCCEx_PLLSAI1_Config+0xa4>
 8003720:	2b01      	cmp	r3, #1
 8003722:	d002      	beq.n	800372a <RCCEx_PLLSAI1_Config+0x62>
 8003724:	2b02      	cmp	r3, #2
 8003726:	d009      	beq.n	800373c <RCCEx_PLLSAI1_Config+0x74>
 8003728:	e020      	b.n	800376c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800372a:	4b60      	ldr	r3, [pc, #384]	@ (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d11d      	bne.n	8003772 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800373a:	e01a      	b.n	8003772 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800373c:	4b5b      	ldr	r3, [pc, #364]	@ (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003744:	2b00      	cmp	r3, #0
 8003746:	d116      	bne.n	8003776 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800374c:	e013      	b.n	8003776 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800374e:	4b57      	ldr	r3, [pc, #348]	@ (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10f      	bne.n	800377a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800375a:	4b54      	ldr	r3, [pc, #336]	@ (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800376a:	e006      	b.n	800377a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
      break;
 8003770:	e004      	b.n	800377c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003772:	bf00      	nop
 8003774:	e002      	b.n	800377c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003776:	bf00      	nop
 8003778:	e000      	b.n	800377c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800377a:	bf00      	nop
    }

    if(status == HAL_OK)
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10d      	bne.n	800379e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003782:	4b4a      	ldr	r3, [pc, #296]	@ (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6819      	ldr	r1, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	3b01      	subs	r3, #1
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	430b      	orrs	r3, r1
 8003798:	4944      	ldr	r1, [pc, #272]	@ (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800379a:	4313      	orrs	r3, r2
 800379c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d17d      	bne.n	80038a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037a4:	4b41      	ldr	r3, [pc, #260]	@ (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a40      	ldr	r2, [pc, #256]	@ (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80037aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b0:	f7fd feb8 	bl	8001524 <HAL_GetTick>
 80037b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037b6:	e009      	b.n	80037cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037b8:	f7fd feb4 	bl	8001524 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d902      	bls.n	80037cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	73fb      	strb	r3, [r7, #15]
        break;
 80037ca:	e005      	b.n	80037d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037cc:	4b37      	ldr	r3, [pc, #220]	@ (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ef      	bne.n	80037b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d160      	bne.n	80038a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d111      	bne.n	8003808 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037e4:	4b31      	ldr	r3, [pc, #196]	@ (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80037ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6892      	ldr	r2, [r2, #8]
 80037f4:	0211      	lsls	r1, r2, #8
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	68d2      	ldr	r2, [r2, #12]
 80037fa:	0912      	lsrs	r2, r2, #4
 80037fc:	0452      	lsls	r2, r2, #17
 80037fe:	430a      	orrs	r2, r1
 8003800:	492a      	ldr	r1, [pc, #168]	@ (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003802:	4313      	orrs	r3, r2
 8003804:	610b      	str	r3, [r1, #16]
 8003806:	e027      	b.n	8003858 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d112      	bne.n	8003834 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800380e:	4b27      	ldr	r3, [pc, #156]	@ (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003816:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6892      	ldr	r2, [r2, #8]
 800381e:	0211      	lsls	r1, r2, #8
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6912      	ldr	r2, [r2, #16]
 8003824:	0852      	lsrs	r2, r2, #1
 8003826:	3a01      	subs	r2, #1
 8003828:	0552      	lsls	r2, r2, #21
 800382a:	430a      	orrs	r2, r1
 800382c:	491f      	ldr	r1, [pc, #124]	@ (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800382e:	4313      	orrs	r3, r2
 8003830:	610b      	str	r3, [r1, #16]
 8003832:	e011      	b.n	8003858 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003834:	4b1d      	ldr	r3, [pc, #116]	@ (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800383c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6892      	ldr	r2, [r2, #8]
 8003844:	0211      	lsls	r1, r2, #8
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6952      	ldr	r2, [r2, #20]
 800384a:	0852      	lsrs	r2, r2, #1
 800384c:	3a01      	subs	r2, #1
 800384e:	0652      	lsls	r2, r2, #25
 8003850:	430a      	orrs	r2, r1
 8003852:	4916      	ldr	r1, [pc, #88]	@ (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003854:	4313      	orrs	r3, r2
 8003856:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003858:	4b14      	ldr	r3, [pc, #80]	@ (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a13      	ldr	r2, [pc, #76]	@ (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800385e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003862:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003864:	f7fd fe5e 	bl	8001524 <HAL_GetTick>
 8003868:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800386a:	e009      	b.n	8003880 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800386c:	f7fd fe5a 	bl	8001524 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d902      	bls.n	8003880 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	73fb      	strb	r3, [r7, #15]
          break;
 800387e:	e005      	b.n	800388c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003880:	4b0a      	ldr	r3, [pc, #40]	@ (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0ef      	beq.n	800386c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003892:	4b06      	ldr	r3, [pc, #24]	@ (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003894:	691a      	ldr	r2, [r3, #16]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	4904      	ldr	r1, [pc, #16]	@ (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800389c:	4313      	orrs	r3, r2
 800389e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40021000 	.word	0x40021000

080038b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038be:	4b6a      	ldr	r3, [pc, #424]	@ (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d018      	beq.n	80038fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038ca:	4b67      	ldr	r3, [pc, #412]	@ (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f003 0203 	and.w	r2, r3, #3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d10d      	bne.n	80038f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
       ||
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d009      	beq.n	80038f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038e2:	4b61      	ldr	r3, [pc, #388]	@ (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	091b      	lsrs	r3, r3, #4
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
       ||
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d047      	beq.n	8003986 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]
 80038fa:	e044      	b.n	8003986 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b03      	cmp	r3, #3
 8003902:	d018      	beq.n	8003936 <RCCEx_PLLSAI2_Config+0x86>
 8003904:	2b03      	cmp	r3, #3
 8003906:	d825      	bhi.n	8003954 <RCCEx_PLLSAI2_Config+0xa4>
 8003908:	2b01      	cmp	r3, #1
 800390a:	d002      	beq.n	8003912 <RCCEx_PLLSAI2_Config+0x62>
 800390c:	2b02      	cmp	r3, #2
 800390e:	d009      	beq.n	8003924 <RCCEx_PLLSAI2_Config+0x74>
 8003910:	e020      	b.n	8003954 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003912:	4b55      	ldr	r3, [pc, #340]	@ (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d11d      	bne.n	800395a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003922:	e01a      	b.n	800395a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003924:	4b50      	ldr	r3, [pc, #320]	@ (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800392c:	2b00      	cmp	r3, #0
 800392e:	d116      	bne.n	800395e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003934:	e013      	b.n	800395e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003936:	4b4c      	ldr	r3, [pc, #304]	@ (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10f      	bne.n	8003962 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003942:	4b49      	ldr	r3, [pc, #292]	@ (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003952:	e006      	b.n	8003962 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	73fb      	strb	r3, [r7, #15]
      break;
 8003958:	e004      	b.n	8003964 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800395a:	bf00      	nop
 800395c:	e002      	b.n	8003964 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800395e:	bf00      	nop
 8003960:	e000      	b.n	8003964 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003962:	bf00      	nop
    }

    if(status == HAL_OK)
 8003964:	7bfb      	ldrb	r3, [r7, #15]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10d      	bne.n	8003986 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800396a:	4b3f      	ldr	r3, [pc, #252]	@ (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6819      	ldr	r1, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	3b01      	subs	r3, #1
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	430b      	orrs	r3, r1
 8003980:	4939      	ldr	r1, [pc, #228]	@ (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003982:	4313      	orrs	r3, r2
 8003984:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003986:	7bfb      	ldrb	r3, [r7, #15]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d167      	bne.n	8003a5c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800398c:	4b36      	ldr	r3, [pc, #216]	@ (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a35      	ldr	r2, [pc, #212]	@ (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003992:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003996:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003998:	f7fd fdc4 	bl	8001524 <HAL_GetTick>
 800399c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800399e:	e009      	b.n	80039b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039a0:	f7fd fdc0 	bl	8001524 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d902      	bls.n	80039b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	73fb      	strb	r3, [r7, #15]
        break;
 80039b2:	e005      	b.n	80039c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1ef      	bne.n	80039a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d14a      	bne.n	8003a5c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d111      	bne.n	80039f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039cc:	4b26      	ldr	r3, [pc, #152]	@ (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80039d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6892      	ldr	r2, [r2, #8]
 80039dc:	0211      	lsls	r1, r2, #8
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	68d2      	ldr	r2, [r2, #12]
 80039e2:	0912      	lsrs	r2, r2, #4
 80039e4:	0452      	lsls	r2, r2, #17
 80039e6:	430a      	orrs	r2, r1
 80039e8:	491f      	ldr	r1, [pc, #124]	@ (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	614b      	str	r3, [r1, #20]
 80039ee:	e011      	b.n	8003a14 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80039f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6892      	ldr	r2, [r2, #8]
 8003a00:	0211      	lsls	r1, r2, #8
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6912      	ldr	r2, [r2, #16]
 8003a06:	0852      	lsrs	r2, r2, #1
 8003a08:	3a01      	subs	r2, #1
 8003a0a:	0652      	lsls	r2, r2, #25
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	4916      	ldr	r1, [pc, #88]	@ (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a14:	4b14      	ldr	r3, [pc, #80]	@ (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a13      	ldr	r2, [pc, #76]	@ (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a20:	f7fd fd80 	bl	8001524 <HAL_GetTick>
 8003a24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a26:	e009      	b.n	8003a3c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a28:	f7fd fd7c 	bl	8001524 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d902      	bls.n	8003a3c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	73fb      	strb	r3, [r7, #15]
          break;
 8003a3a:	e005      	b.n	8003a48 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0ef      	beq.n	8003a28 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a4e:	4b06      	ldr	r3, [pc, #24]	@ (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a50:	695a      	ldr	r2, [r3, #20]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	4904      	ldr	r1, [pc, #16]	@ (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000

08003a6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e095      	b.n	8003baa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d108      	bne.n	8003a98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a8e:	d009      	beq.n	8003aa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	61da      	str	r2, [r3, #28]
 8003a96:	e005      	b.n	8003aa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fd fa3a 	bl	8000f38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ada:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ae4:	d902      	bls.n	8003aec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	e002      	b.n	8003af2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003aec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003af0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003afa:	d007      	beq.n	8003b0c <HAL_SPI_Init+0xa0>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b04:	d002      	beq.n	8003b0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4e:	ea42 0103 	orr.w	r1, r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b56:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	0c1b      	lsrs	r3, r3, #16
 8003b68:	f003 0204 	and.w	r2, r3, #4
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003b88:	ea42 0103 	orr.w	r1, r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e049      	b.n	8003c58 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d106      	bne.n	8003bde <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7fd f9f1 	bl	8000fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2202      	movs	r2, #2
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3304      	adds	r3, #4
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	f000 fb7b 	bl	80042ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e049      	b.n	8003d06 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f841 	bl	8003d0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	f000 fb24 	bl	80042ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d109      	bne.n	8003d48 <HAL_TIM_PWM_Start+0x24>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	bf14      	ite	ne
 8003d40:	2301      	movne	r3, #1
 8003d42:	2300      	moveq	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	e03c      	b.n	8003dc2 <HAL_TIM_PWM_Start+0x9e>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d109      	bne.n	8003d62 <HAL_TIM_PWM_Start+0x3e>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	bf14      	ite	ne
 8003d5a:	2301      	movne	r3, #1
 8003d5c:	2300      	moveq	r3, #0
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	e02f      	b.n	8003dc2 <HAL_TIM_PWM_Start+0x9e>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d109      	bne.n	8003d7c <HAL_TIM_PWM_Start+0x58>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	bf14      	ite	ne
 8003d74:	2301      	movne	r3, #1
 8003d76:	2300      	moveq	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	e022      	b.n	8003dc2 <HAL_TIM_PWM_Start+0x9e>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	2b0c      	cmp	r3, #12
 8003d80:	d109      	bne.n	8003d96 <HAL_TIM_PWM_Start+0x72>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	bf14      	ite	ne
 8003d8e:	2301      	movne	r3, #1
 8003d90:	2300      	moveq	r3, #0
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	e015      	b.n	8003dc2 <HAL_TIM_PWM_Start+0x9e>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b10      	cmp	r3, #16
 8003d9a:	d109      	bne.n	8003db0 <HAL_TIM_PWM_Start+0x8c>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	bf14      	ite	ne
 8003da8:	2301      	movne	r3, #1
 8003daa:	2300      	moveq	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	e008      	b.n	8003dc2 <HAL_TIM_PWM_Start+0x9e>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	bf14      	ite	ne
 8003dbc:	2301      	movne	r3, #1
 8003dbe:	2300      	moveq	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e09c      	b.n	8003f04 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d104      	bne.n	8003dda <HAL_TIM_PWM_Start+0xb6>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dd8:	e023      	b.n	8003e22 <HAL_TIM_PWM_Start+0xfe>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d104      	bne.n	8003dea <HAL_TIM_PWM_Start+0xc6>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003de8:	e01b      	b.n	8003e22 <HAL_TIM_PWM_Start+0xfe>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d104      	bne.n	8003dfa <HAL_TIM_PWM_Start+0xd6>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003df8:	e013      	b.n	8003e22 <HAL_TIM_PWM_Start+0xfe>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b0c      	cmp	r3, #12
 8003dfe:	d104      	bne.n	8003e0a <HAL_TIM_PWM_Start+0xe6>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e08:	e00b      	b.n	8003e22 <HAL_TIM_PWM_Start+0xfe>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b10      	cmp	r3, #16
 8003e0e:	d104      	bne.n	8003e1a <HAL_TIM_PWM_Start+0xf6>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e18:	e003      	b.n	8003e22 <HAL_TIM_PWM_Start+0xfe>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2201      	movs	r2, #1
 8003e28:	6839      	ldr	r1, [r7, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fe74 	bl	8004b18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a35      	ldr	r2, [pc, #212]	@ (8003f0c <HAL_TIM_PWM_Start+0x1e8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d013      	beq.n	8003e62 <HAL_TIM_PWM_Start+0x13e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a34      	ldr	r2, [pc, #208]	@ (8003f10 <HAL_TIM_PWM_Start+0x1ec>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00e      	beq.n	8003e62 <HAL_TIM_PWM_Start+0x13e>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a32      	ldr	r2, [pc, #200]	@ (8003f14 <HAL_TIM_PWM_Start+0x1f0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d009      	beq.n	8003e62 <HAL_TIM_PWM_Start+0x13e>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a31      	ldr	r2, [pc, #196]	@ (8003f18 <HAL_TIM_PWM_Start+0x1f4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d004      	beq.n	8003e62 <HAL_TIM_PWM_Start+0x13e>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a2f      	ldr	r2, [pc, #188]	@ (8003f1c <HAL_TIM_PWM_Start+0x1f8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d101      	bne.n	8003e66 <HAL_TIM_PWM_Start+0x142>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <HAL_TIM_PWM_Start+0x144>
 8003e66:	2300      	movs	r3, #0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d007      	beq.n	8003e7c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e7a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a22      	ldr	r2, [pc, #136]	@ (8003f0c <HAL_TIM_PWM_Start+0x1e8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d01d      	beq.n	8003ec2 <HAL_TIM_PWM_Start+0x19e>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e8e:	d018      	beq.n	8003ec2 <HAL_TIM_PWM_Start+0x19e>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a22      	ldr	r2, [pc, #136]	@ (8003f20 <HAL_TIM_PWM_Start+0x1fc>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d013      	beq.n	8003ec2 <HAL_TIM_PWM_Start+0x19e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a21      	ldr	r2, [pc, #132]	@ (8003f24 <HAL_TIM_PWM_Start+0x200>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00e      	beq.n	8003ec2 <HAL_TIM_PWM_Start+0x19e>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f28 <HAL_TIM_PWM_Start+0x204>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d009      	beq.n	8003ec2 <HAL_TIM_PWM_Start+0x19e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a17      	ldr	r2, [pc, #92]	@ (8003f10 <HAL_TIM_PWM_Start+0x1ec>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d004      	beq.n	8003ec2 <HAL_TIM_PWM_Start+0x19e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a15      	ldr	r2, [pc, #84]	@ (8003f14 <HAL_TIM_PWM_Start+0x1f0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d115      	bne.n	8003eee <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	4b18      	ldr	r3, [pc, #96]	@ (8003f2c <HAL_TIM_PWM_Start+0x208>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b06      	cmp	r3, #6
 8003ed2:	d015      	beq.n	8003f00 <HAL_TIM_PWM_Start+0x1dc>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eda:	d011      	beq.n	8003f00 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eec:	e008      	b.n	8003f00 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0201 	orr.w	r2, r2, #1
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	e000      	b.n	8003f02 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40012c00 	.word	0x40012c00
 8003f10:	40013400 	.word	0x40013400
 8003f14:	40014000 	.word	0x40014000
 8003f18:	40014400 	.word	0x40014400
 8003f1c:	40014800 	.word	0x40014800
 8003f20:	40000400 	.word	0x40000400
 8003f24:	40000800 	.word	0x40000800
 8003f28:	40000c00 	.word	0x40000c00
 8003f2c:	00010007 	.word	0x00010007

08003f30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	e0ff      	b.n	800414e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b14      	cmp	r3, #20
 8003f5a:	f200 80f0 	bhi.w	800413e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f64:	08003fb9 	.word	0x08003fb9
 8003f68:	0800413f 	.word	0x0800413f
 8003f6c:	0800413f 	.word	0x0800413f
 8003f70:	0800413f 	.word	0x0800413f
 8003f74:	08003ff9 	.word	0x08003ff9
 8003f78:	0800413f 	.word	0x0800413f
 8003f7c:	0800413f 	.word	0x0800413f
 8003f80:	0800413f 	.word	0x0800413f
 8003f84:	0800403b 	.word	0x0800403b
 8003f88:	0800413f 	.word	0x0800413f
 8003f8c:	0800413f 	.word	0x0800413f
 8003f90:	0800413f 	.word	0x0800413f
 8003f94:	0800407b 	.word	0x0800407b
 8003f98:	0800413f 	.word	0x0800413f
 8003f9c:	0800413f 	.word	0x0800413f
 8003fa0:	0800413f 	.word	0x0800413f
 8003fa4:	080040bd 	.word	0x080040bd
 8003fa8:	0800413f 	.word	0x0800413f
 8003fac:	0800413f 	.word	0x0800413f
 8003fb0:	0800413f 	.word	0x0800413f
 8003fb4:	080040fd 	.word	0x080040fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68b9      	ldr	r1, [r7, #8]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fa3a 	bl	8004438 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699a      	ldr	r2, [r3, #24]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0208 	orr.w	r2, r2, #8
 8003fd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699a      	ldr	r2, [r3, #24]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0204 	bic.w	r2, r2, #4
 8003fe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6999      	ldr	r1, [r3, #24]
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	619a      	str	r2, [r3, #24]
      break;
 8003ff6:	e0a5      	b.n	8004144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 faaa 	bl	8004558 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699a      	ldr	r2, [r3, #24]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699a      	ldr	r2, [r3, #24]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6999      	ldr	r1, [r3, #24]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	021a      	lsls	r2, r3, #8
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	619a      	str	r2, [r3, #24]
      break;
 8004038:	e084      	b.n	8004144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68b9      	ldr	r1, [r7, #8]
 8004040:	4618      	mov	r0, r3
 8004042:	f000 fb13 	bl	800466c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69da      	ldr	r2, [r3, #28]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 0208 	orr.w	r2, r2, #8
 8004054:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69da      	ldr	r2, [r3, #28]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0204 	bic.w	r2, r2, #4
 8004064:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69d9      	ldr	r1, [r3, #28]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	61da      	str	r2, [r3, #28]
      break;
 8004078:	e064      	b.n	8004144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68b9      	ldr	r1, [r7, #8]
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fb7b 	bl	800477c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69da      	ldr	r2, [r3, #28]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69d9      	ldr	r1, [r3, #28]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	021a      	lsls	r2, r3, #8
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	61da      	str	r2, [r3, #28]
      break;
 80040ba:	e043      	b.n	8004144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fbc4 	bl	8004850 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0208 	orr.w	r2, r2, #8
 80040d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0204 	bic.w	r2, r2, #4
 80040e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	691a      	ldr	r2, [r3, #16]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80040fa:	e023      	b.n	8004144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68b9      	ldr	r1, [r7, #8]
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fc08 	bl	8004918 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004116:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004126:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	021a      	lsls	r2, r3, #8
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800413c:	e002      	b.n	8004144 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	75fb      	strb	r3, [r7, #23]
      break;
 8004142:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800414c:	7dfb      	ldrb	r3, [r7, #23]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop

08004158 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_TIM_ConfigClockSource+0x1c>
 8004170:	2302      	movs	r3, #2
 8004172:	e0b6      	b.n	80042e2 <HAL_TIM_ConfigClockSource+0x18a>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004192:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800419e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041b0:	d03e      	beq.n	8004230 <HAL_TIM_ConfigClockSource+0xd8>
 80041b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041b6:	f200 8087 	bhi.w	80042c8 <HAL_TIM_ConfigClockSource+0x170>
 80041ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041be:	f000 8086 	beq.w	80042ce <HAL_TIM_ConfigClockSource+0x176>
 80041c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041c6:	d87f      	bhi.n	80042c8 <HAL_TIM_ConfigClockSource+0x170>
 80041c8:	2b70      	cmp	r3, #112	@ 0x70
 80041ca:	d01a      	beq.n	8004202 <HAL_TIM_ConfigClockSource+0xaa>
 80041cc:	2b70      	cmp	r3, #112	@ 0x70
 80041ce:	d87b      	bhi.n	80042c8 <HAL_TIM_ConfigClockSource+0x170>
 80041d0:	2b60      	cmp	r3, #96	@ 0x60
 80041d2:	d050      	beq.n	8004276 <HAL_TIM_ConfigClockSource+0x11e>
 80041d4:	2b60      	cmp	r3, #96	@ 0x60
 80041d6:	d877      	bhi.n	80042c8 <HAL_TIM_ConfigClockSource+0x170>
 80041d8:	2b50      	cmp	r3, #80	@ 0x50
 80041da:	d03c      	beq.n	8004256 <HAL_TIM_ConfigClockSource+0xfe>
 80041dc:	2b50      	cmp	r3, #80	@ 0x50
 80041de:	d873      	bhi.n	80042c8 <HAL_TIM_ConfigClockSource+0x170>
 80041e0:	2b40      	cmp	r3, #64	@ 0x40
 80041e2:	d058      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x13e>
 80041e4:	2b40      	cmp	r3, #64	@ 0x40
 80041e6:	d86f      	bhi.n	80042c8 <HAL_TIM_ConfigClockSource+0x170>
 80041e8:	2b30      	cmp	r3, #48	@ 0x30
 80041ea:	d064      	beq.n	80042b6 <HAL_TIM_ConfigClockSource+0x15e>
 80041ec:	2b30      	cmp	r3, #48	@ 0x30
 80041ee:	d86b      	bhi.n	80042c8 <HAL_TIM_ConfigClockSource+0x170>
 80041f0:	2b20      	cmp	r3, #32
 80041f2:	d060      	beq.n	80042b6 <HAL_TIM_ConfigClockSource+0x15e>
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d867      	bhi.n	80042c8 <HAL_TIM_ConfigClockSource+0x170>
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d05c      	beq.n	80042b6 <HAL_TIM_ConfigClockSource+0x15e>
 80041fc:	2b10      	cmp	r3, #16
 80041fe:	d05a      	beq.n	80042b6 <HAL_TIM_ConfigClockSource+0x15e>
 8004200:	e062      	b.n	80042c8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004212:	f000 fc61 	bl	8004ad8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004224:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	609a      	str	r2, [r3, #8]
      break;
 800422e:	e04f      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004240:	f000 fc4a 	bl	8004ad8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004252:	609a      	str	r2, [r3, #8]
      break;
 8004254:	e03c      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004262:	461a      	mov	r2, r3
 8004264:	f000 fbbe 	bl	80049e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2150      	movs	r1, #80	@ 0x50
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fc17 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 8004274:	e02c      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004282:	461a      	mov	r2, r3
 8004284:	f000 fbdd 	bl	8004a42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2160      	movs	r1, #96	@ 0x60
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fc07 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 8004294:	e01c      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042a2:	461a      	mov	r2, r3
 80042a4:	f000 fb9e 	bl	80049e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2140      	movs	r1, #64	@ 0x40
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fbf7 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 80042b4:	e00c      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4619      	mov	r1, r3
 80042c0:	4610      	mov	r0, r2
 80042c2:	f000 fbee 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 80042c6:	e003      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	73fb      	strb	r3, [r7, #15]
      break;
 80042cc:	e000      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80042ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a46      	ldr	r2, [pc, #280]	@ (8004418 <TIM_Base_SetConfig+0x12c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d013      	beq.n	800432c <TIM_Base_SetConfig+0x40>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800430a:	d00f      	beq.n	800432c <TIM_Base_SetConfig+0x40>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a43      	ldr	r2, [pc, #268]	@ (800441c <TIM_Base_SetConfig+0x130>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00b      	beq.n	800432c <TIM_Base_SetConfig+0x40>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a42      	ldr	r2, [pc, #264]	@ (8004420 <TIM_Base_SetConfig+0x134>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d007      	beq.n	800432c <TIM_Base_SetConfig+0x40>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a41      	ldr	r2, [pc, #260]	@ (8004424 <TIM_Base_SetConfig+0x138>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d003      	beq.n	800432c <TIM_Base_SetConfig+0x40>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a40      	ldr	r2, [pc, #256]	@ (8004428 <TIM_Base_SetConfig+0x13c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d108      	bne.n	800433e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a35      	ldr	r2, [pc, #212]	@ (8004418 <TIM_Base_SetConfig+0x12c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d01f      	beq.n	8004386 <TIM_Base_SetConfig+0x9a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800434c:	d01b      	beq.n	8004386 <TIM_Base_SetConfig+0x9a>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a32      	ldr	r2, [pc, #200]	@ (800441c <TIM_Base_SetConfig+0x130>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d017      	beq.n	8004386 <TIM_Base_SetConfig+0x9a>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a31      	ldr	r2, [pc, #196]	@ (8004420 <TIM_Base_SetConfig+0x134>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d013      	beq.n	8004386 <TIM_Base_SetConfig+0x9a>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a30      	ldr	r2, [pc, #192]	@ (8004424 <TIM_Base_SetConfig+0x138>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00f      	beq.n	8004386 <TIM_Base_SetConfig+0x9a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a2f      	ldr	r2, [pc, #188]	@ (8004428 <TIM_Base_SetConfig+0x13c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d00b      	beq.n	8004386 <TIM_Base_SetConfig+0x9a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a2e      	ldr	r2, [pc, #184]	@ (800442c <TIM_Base_SetConfig+0x140>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d007      	beq.n	8004386 <TIM_Base_SetConfig+0x9a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a2d      	ldr	r2, [pc, #180]	@ (8004430 <TIM_Base_SetConfig+0x144>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d003      	beq.n	8004386 <TIM_Base_SetConfig+0x9a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a2c      	ldr	r2, [pc, #176]	@ (8004434 <TIM_Base_SetConfig+0x148>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d108      	bne.n	8004398 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800438c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4313      	orrs	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a16      	ldr	r2, [pc, #88]	@ (8004418 <TIM_Base_SetConfig+0x12c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00f      	beq.n	80043e4 <TIM_Base_SetConfig+0xf8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a18      	ldr	r2, [pc, #96]	@ (8004428 <TIM_Base_SetConfig+0x13c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00b      	beq.n	80043e4 <TIM_Base_SetConfig+0xf8>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a17      	ldr	r2, [pc, #92]	@ (800442c <TIM_Base_SetConfig+0x140>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d007      	beq.n	80043e4 <TIM_Base_SetConfig+0xf8>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a16      	ldr	r2, [pc, #88]	@ (8004430 <TIM_Base_SetConfig+0x144>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d003      	beq.n	80043e4 <TIM_Base_SetConfig+0xf8>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a15      	ldr	r2, [pc, #84]	@ (8004434 <TIM_Base_SetConfig+0x148>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d103      	bne.n	80043ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d105      	bne.n	800440a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f023 0201 	bic.w	r2, r3, #1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	611a      	str	r2, [r3, #16]
  }
}
 800440a:	bf00      	nop
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40012c00 	.word	0x40012c00
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800
 8004424:	40000c00 	.word	0x40000c00
 8004428:	40013400 	.word	0x40013400
 800442c:	40014000 	.word	0x40014000
 8004430:	40014400 	.word	0x40014400
 8004434:	40014800 	.word	0x40014800

08004438 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	f023 0201 	bic.w	r2, r3, #1
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800446a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0303 	bic.w	r3, r3, #3
 8004472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f023 0302 	bic.w	r3, r3, #2
 8004484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4313      	orrs	r3, r2
 800448e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a2c      	ldr	r2, [pc, #176]	@ (8004544 <TIM_OC1_SetConfig+0x10c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d00f      	beq.n	80044b8 <TIM_OC1_SetConfig+0x80>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a2b      	ldr	r2, [pc, #172]	@ (8004548 <TIM_OC1_SetConfig+0x110>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00b      	beq.n	80044b8 <TIM_OC1_SetConfig+0x80>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a2a      	ldr	r2, [pc, #168]	@ (800454c <TIM_OC1_SetConfig+0x114>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d007      	beq.n	80044b8 <TIM_OC1_SetConfig+0x80>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a29      	ldr	r2, [pc, #164]	@ (8004550 <TIM_OC1_SetConfig+0x118>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d003      	beq.n	80044b8 <TIM_OC1_SetConfig+0x80>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a28      	ldr	r2, [pc, #160]	@ (8004554 <TIM_OC1_SetConfig+0x11c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d10c      	bne.n	80044d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f023 0308 	bic.w	r3, r3, #8
 80044be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f023 0304 	bic.w	r3, r3, #4
 80044d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004544 <TIM_OC1_SetConfig+0x10c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00f      	beq.n	80044fa <TIM_OC1_SetConfig+0xc2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a1a      	ldr	r2, [pc, #104]	@ (8004548 <TIM_OC1_SetConfig+0x110>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00b      	beq.n	80044fa <TIM_OC1_SetConfig+0xc2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a19      	ldr	r2, [pc, #100]	@ (800454c <TIM_OC1_SetConfig+0x114>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d007      	beq.n	80044fa <TIM_OC1_SetConfig+0xc2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a18      	ldr	r2, [pc, #96]	@ (8004550 <TIM_OC1_SetConfig+0x118>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d003      	beq.n	80044fa <TIM_OC1_SetConfig+0xc2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a17      	ldr	r2, [pc, #92]	@ (8004554 <TIM_OC1_SetConfig+0x11c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d111      	bne.n	800451e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	621a      	str	r2, [r3, #32]
}
 8004538:	bf00      	nop
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	40012c00 	.word	0x40012c00
 8004548:	40013400 	.word	0x40013400
 800454c:	40014000 	.word	0x40014000
 8004550:	40014400 	.word	0x40014400
 8004554:	40014800 	.word	0x40014800

08004558 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f023 0210 	bic.w	r2, r3, #16
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004586:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800458a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	021b      	lsls	r3, r3, #8
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f023 0320 	bic.w	r3, r3, #32
 80045a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a28      	ldr	r2, [pc, #160]	@ (8004658 <TIM_OC2_SetConfig+0x100>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d003      	beq.n	80045c4 <TIM_OC2_SetConfig+0x6c>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a27      	ldr	r2, [pc, #156]	@ (800465c <TIM_OC2_SetConfig+0x104>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d10d      	bne.n	80045e0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004658 <TIM_OC2_SetConfig+0x100>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d00f      	beq.n	8004608 <TIM_OC2_SetConfig+0xb0>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a1c      	ldr	r2, [pc, #112]	@ (800465c <TIM_OC2_SetConfig+0x104>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00b      	beq.n	8004608 <TIM_OC2_SetConfig+0xb0>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004660 <TIM_OC2_SetConfig+0x108>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d007      	beq.n	8004608 <TIM_OC2_SetConfig+0xb0>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004664 <TIM_OC2_SetConfig+0x10c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d003      	beq.n	8004608 <TIM_OC2_SetConfig+0xb0>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a19      	ldr	r2, [pc, #100]	@ (8004668 <TIM_OC2_SetConfig+0x110>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d113      	bne.n	8004630 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800460e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004616:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	621a      	str	r2, [r3, #32]
}
 800464a:	bf00      	nop
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40012c00 	.word	0x40012c00
 800465c:	40013400 	.word	0x40013400
 8004660:	40014000 	.word	0x40014000
 8004664:	40014400 	.word	0x40014400
 8004668:	40014800 	.word	0x40014800

0800466c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800469a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800469e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0303 	bic.w	r3, r3, #3
 80046a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	021b      	lsls	r3, r3, #8
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a27      	ldr	r2, [pc, #156]	@ (8004768 <TIM_OC3_SetConfig+0xfc>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d003      	beq.n	80046d6 <TIM_OC3_SetConfig+0x6a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a26      	ldr	r2, [pc, #152]	@ (800476c <TIM_OC3_SetConfig+0x100>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d10d      	bne.n	80046f2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	021b      	lsls	r3, r3, #8
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004768 <TIM_OC3_SetConfig+0xfc>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00f      	beq.n	800471a <TIM_OC3_SetConfig+0xae>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a1b      	ldr	r2, [pc, #108]	@ (800476c <TIM_OC3_SetConfig+0x100>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00b      	beq.n	800471a <TIM_OC3_SetConfig+0xae>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a1a      	ldr	r2, [pc, #104]	@ (8004770 <TIM_OC3_SetConfig+0x104>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d007      	beq.n	800471a <TIM_OC3_SetConfig+0xae>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a19      	ldr	r2, [pc, #100]	@ (8004774 <TIM_OC3_SetConfig+0x108>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d003      	beq.n	800471a <TIM_OC3_SetConfig+0xae>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a18      	ldr	r2, [pc, #96]	@ (8004778 <TIM_OC3_SetConfig+0x10c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d113      	bne.n	8004742 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	621a      	str	r2, [r3, #32]
}
 800475c:	bf00      	nop
 800475e:	371c      	adds	r7, #28
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	40012c00 	.word	0x40012c00
 800476c:	40013400 	.word	0x40013400
 8004770:	40014000 	.word	0x40014000
 8004774:	40014400 	.word	0x40014400
 8004778:	40014800 	.word	0x40014800

0800477c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	021b      	lsls	r3, r3, #8
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	031b      	lsls	r3, r3, #12
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a18      	ldr	r2, [pc, #96]	@ (800483c <TIM_OC4_SetConfig+0xc0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00f      	beq.n	8004800 <TIM_OC4_SetConfig+0x84>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a17      	ldr	r2, [pc, #92]	@ (8004840 <TIM_OC4_SetConfig+0xc4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00b      	beq.n	8004800 <TIM_OC4_SetConfig+0x84>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a16      	ldr	r2, [pc, #88]	@ (8004844 <TIM_OC4_SetConfig+0xc8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d007      	beq.n	8004800 <TIM_OC4_SetConfig+0x84>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a15      	ldr	r2, [pc, #84]	@ (8004848 <TIM_OC4_SetConfig+0xcc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d003      	beq.n	8004800 <TIM_OC4_SetConfig+0x84>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a14      	ldr	r2, [pc, #80]	@ (800484c <TIM_OC4_SetConfig+0xd0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d109      	bne.n	8004814 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004806:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	019b      	lsls	r3, r3, #6
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	621a      	str	r2, [r3, #32]
}
 800482e:	bf00      	nop
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40012c00 	.word	0x40012c00
 8004840:	40013400 	.word	0x40013400
 8004844:	40014000 	.word	0x40014000
 8004848:	40014400 	.word	0x40014400
 800484c:	40014800 	.word	0x40014800

08004850 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800487e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004894:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	041b      	lsls	r3, r3, #16
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4313      	orrs	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a17      	ldr	r2, [pc, #92]	@ (8004904 <TIM_OC5_SetConfig+0xb4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00f      	beq.n	80048ca <TIM_OC5_SetConfig+0x7a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a16      	ldr	r2, [pc, #88]	@ (8004908 <TIM_OC5_SetConfig+0xb8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00b      	beq.n	80048ca <TIM_OC5_SetConfig+0x7a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a15      	ldr	r2, [pc, #84]	@ (800490c <TIM_OC5_SetConfig+0xbc>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d007      	beq.n	80048ca <TIM_OC5_SetConfig+0x7a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a14      	ldr	r2, [pc, #80]	@ (8004910 <TIM_OC5_SetConfig+0xc0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d003      	beq.n	80048ca <TIM_OC5_SetConfig+0x7a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a13      	ldr	r2, [pc, #76]	@ (8004914 <TIM_OC5_SetConfig+0xc4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d109      	bne.n	80048de <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	021b      	lsls	r3, r3, #8
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	4313      	orrs	r3, r2
 80048dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	621a      	str	r2, [r3, #32]
}
 80048f8:	bf00      	nop
 80048fa:	371c      	adds	r7, #28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	40012c00 	.word	0x40012c00
 8004908:	40013400 	.word	0x40013400
 800490c:	40014000 	.word	0x40014000
 8004910:	40014400 	.word	0x40014400
 8004914:	40014800 	.word	0x40014800

08004918 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800493e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004946:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800494a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	021b      	lsls	r3, r3, #8
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800495e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	051b      	lsls	r3, r3, #20
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a18      	ldr	r2, [pc, #96]	@ (80049d0 <TIM_OC6_SetConfig+0xb8>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d00f      	beq.n	8004994 <TIM_OC6_SetConfig+0x7c>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a17      	ldr	r2, [pc, #92]	@ (80049d4 <TIM_OC6_SetConfig+0xbc>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d00b      	beq.n	8004994 <TIM_OC6_SetConfig+0x7c>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a16      	ldr	r2, [pc, #88]	@ (80049d8 <TIM_OC6_SetConfig+0xc0>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d007      	beq.n	8004994 <TIM_OC6_SetConfig+0x7c>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a15      	ldr	r2, [pc, #84]	@ (80049dc <TIM_OC6_SetConfig+0xc4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d003      	beq.n	8004994 <TIM_OC6_SetConfig+0x7c>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a14      	ldr	r2, [pc, #80]	@ (80049e0 <TIM_OC6_SetConfig+0xc8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d109      	bne.n	80049a8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800499a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	029b      	lsls	r3, r3, #10
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	621a      	str	r2, [r3, #32]
}
 80049c2:	bf00      	nop
 80049c4:	371c      	adds	r7, #28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40012c00 	.word	0x40012c00
 80049d4:	40013400 	.word	0x40013400
 80049d8:	40014000 	.word	0x40014000
 80049dc:	40014400 	.word	0x40014400
 80049e0:	40014800 	.word	0x40014800

080049e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	f023 0201 	bic.w	r2, r3, #1
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f023 030a 	bic.w	r3, r3, #10
 8004a20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	621a      	str	r2, [r3, #32]
}
 8004a36:	bf00      	nop
 8004a38:	371c      	adds	r7, #28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b087      	sub	sp, #28
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	f023 0210 	bic.w	r2, r3, #16
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	031b      	lsls	r3, r3, #12
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	621a      	str	r2, [r3, #32]
}
 8004a96:	bf00      	nop
 8004a98:	371c      	adds	r7, #28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b085      	sub	sp, #20
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f043 0307 	orr.w	r3, r3, #7
 8004ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	609a      	str	r2, [r3, #8]
}
 8004acc:	bf00      	nop
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004af2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	021a      	lsls	r2, r3, #8
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	609a      	str	r2, [r3, #8]
}
 8004b0c:	bf00      	nop
 8004b0e:	371c      	adds	r7, #28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f003 031f 	and.w	r3, r3, #31
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a1a      	ldr	r2, [r3, #32]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	401a      	ands	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a1a      	ldr	r2, [r3, #32]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f003 031f 	and.w	r3, r3, #31
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b50:	431a      	orrs	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	621a      	str	r2, [r3, #32]
}
 8004b56:	bf00      	nop
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e068      	b.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a2e      	ldr	r2, [pc, #184]	@ (8004c5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d004      	beq.n	8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a2d      	ldr	r2, [pc, #180]	@ (8004c60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d108      	bne.n	8004bc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004bb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bc8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1e      	ldr	r2, [pc, #120]	@ (8004c5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d01d      	beq.n	8004c22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bee:	d018      	beq.n	8004c22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8004c64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d013      	beq.n	8004c22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a1a      	ldr	r2, [pc, #104]	@ (8004c68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d00e      	beq.n	8004c22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a18      	ldr	r2, [pc, #96]	@ (8004c6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d009      	beq.n	8004c22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a13      	ldr	r2, [pc, #76]	@ (8004c60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d004      	beq.n	8004c22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a14      	ldr	r2, [pc, #80]	@ (8004c70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d10c      	bne.n	8004c3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40012c00 	.word	0x40012c00
 8004c60:	40013400 	.word	0x40013400
 8004c64:	40000400 	.word	0x40000400
 8004c68:	40000800 	.word	0x40000800
 8004c6c:	40000c00 	.word	0x40000c00
 8004c70:	40014000 	.word	0x40014000

08004c74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e040      	b.n	8004d08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fc fa08 	bl	80010ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2224      	movs	r2, #36	@ 0x24
 8004ca0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0201 	bic.w	r2, r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fae0 	bl	8005280 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f825 	bl	8004d10 <UART_SetConfig>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e01b      	b.n	8004d08 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fb5f 	bl	80053c4 <UART_CheckIdleState>
 8004d06:	4603      	mov	r3, r0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d14:	b08a      	sub	sp, #40	@ 0x28
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	4ba4      	ldr	r3, [pc, #656]	@ (8004fd0 <UART_SetConfig+0x2c0>)
 8004d40:	4013      	ands	r3, r2
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	6812      	ldr	r2, [r2, #0]
 8004d46:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d48:	430b      	orrs	r3, r1
 8004d4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a99      	ldr	r2, [pc, #612]	@ (8004fd4 <UART_SetConfig+0x2c4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d004      	beq.n	8004d7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a90      	ldr	r2, [pc, #576]	@ (8004fd8 <UART_SetConfig+0x2c8>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d126      	bne.n	8004de8 <UART_SetConfig+0xd8>
 8004d9a:	4b90      	ldr	r3, [pc, #576]	@ (8004fdc <UART_SetConfig+0x2cc>)
 8004d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da0:	f003 0303 	and.w	r3, r3, #3
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	d81b      	bhi.n	8004de0 <UART_SetConfig+0xd0>
 8004da8:	a201      	add	r2, pc, #4	@ (adr r2, 8004db0 <UART_SetConfig+0xa0>)
 8004daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dae:	bf00      	nop
 8004db0:	08004dc1 	.word	0x08004dc1
 8004db4:	08004dd1 	.word	0x08004dd1
 8004db8:	08004dc9 	.word	0x08004dc9
 8004dbc:	08004dd9 	.word	0x08004dd9
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dc6:	e116      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dce:	e112      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004dd0:	2304      	movs	r3, #4
 8004dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dd6:	e10e      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004dd8:	2308      	movs	r3, #8
 8004dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dde:	e10a      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004de0:	2310      	movs	r3, #16
 8004de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004de6:	e106      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a7c      	ldr	r2, [pc, #496]	@ (8004fe0 <UART_SetConfig+0x2d0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d138      	bne.n	8004e64 <UART_SetConfig+0x154>
 8004df2:	4b7a      	ldr	r3, [pc, #488]	@ (8004fdc <UART_SetConfig+0x2cc>)
 8004df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df8:	f003 030c 	and.w	r3, r3, #12
 8004dfc:	2b0c      	cmp	r3, #12
 8004dfe:	d82d      	bhi.n	8004e5c <UART_SetConfig+0x14c>
 8004e00:	a201      	add	r2, pc, #4	@ (adr r2, 8004e08 <UART_SetConfig+0xf8>)
 8004e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e06:	bf00      	nop
 8004e08:	08004e3d 	.word	0x08004e3d
 8004e0c:	08004e5d 	.word	0x08004e5d
 8004e10:	08004e5d 	.word	0x08004e5d
 8004e14:	08004e5d 	.word	0x08004e5d
 8004e18:	08004e4d 	.word	0x08004e4d
 8004e1c:	08004e5d 	.word	0x08004e5d
 8004e20:	08004e5d 	.word	0x08004e5d
 8004e24:	08004e5d 	.word	0x08004e5d
 8004e28:	08004e45 	.word	0x08004e45
 8004e2c:	08004e5d 	.word	0x08004e5d
 8004e30:	08004e5d 	.word	0x08004e5d
 8004e34:	08004e5d 	.word	0x08004e5d
 8004e38:	08004e55 	.word	0x08004e55
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e42:	e0d8      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004e44:	2302      	movs	r3, #2
 8004e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e4a:	e0d4      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004e4c:	2304      	movs	r3, #4
 8004e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e52:	e0d0      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004e54:	2308      	movs	r3, #8
 8004e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e5a:	e0cc      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004e5c:	2310      	movs	r3, #16
 8004e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e62:	e0c8      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a5e      	ldr	r2, [pc, #376]	@ (8004fe4 <UART_SetConfig+0x2d4>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d125      	bne.n	8004eba <UART_SetConfig+0x1aa>
 8004e6e:	4b5b      	ldr	r3, [pc, #364]	@ (8004fdc <UART_SetConfig+0x2cc>)
 8004e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e74:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e78:	2b30      	cmp	r3, #48	@ 0x30
 8004e7a:	d016      	beq.n	8004eaa <UART_SetConfig+0x19a>
 8004e7c:	2b30      	cmp	r3, #48	@ 0x30
 8004e7e:	d818      	bhi.n	8004eb2 <UART_SetConfig+0x1a2>
 8004e80:	2b20      	cmp	r3, #32
 8004e82:	d00a      	beq.n	8004e9a <UART_SetConfig+0x18a>
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d814      	bhi.n	8004eb2 <UART_SetConfig+0x1a2>
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <UART_SetConfig+0x182>
 8004e8c:	2b10      	cmp	r3, #16
 8004e8e:	d008      	beq.n	8004ea2 <UART_SetConfig+0x192>
 8004e90:	e00f      	b.n	8004eb2 <UART_SetConfig+0x1a2>
 8004e92:	2300      	movs	r3, #0
 8004e94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e98:	e0ad      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ea0:	e0a9      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004ea2:	2304      	movs	r3, #4
 8004ea4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ea8:	e0a5      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004eaa:	2308      	movs	r3, #8
 8004eac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eb0:	e0a1      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004eb2:	2310      	movs	r3, #16
 8004eb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eb8:	e09d      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a4a      	ldr	r2, [pc, #296]	@ (8004fe8 <UART_SetConfig+0x2d8>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d125      	bne.n	8004f10 <UART_SetConfig+0x200>
 8004ec4:	4b45      	ldr	r3, [pc, #276]	@ (8004fdc <UART_SetConfig+0x2cc>)
 8004ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004ece:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ed0:	d016      	beq.n	8004f00 <UART_SetConfig+0x1f0>
 8004ed2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ed4:	d818      	bhi.n	8004f08 <UART_SetConfig+0x1f8>
 8004ed6:	2b80      	cmp	r3, #128	@ 0x80
 8004ed8:	d00a      	beq.n	8004ef0 <UART_SetConfig+0x1e0>
 8004eda:	2b80      	cmp	r3, #128	@ 0x80
 8004edc:	d814      	bhi.n	8004f08 <UART_SetConfig+0x1f8>
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d002      	beq.n	8004ee8 <UART_SetConfig+0x1d8>
 8004ee2:	2b40      	cmp	r3, #64	@ 0x40
 8004ee4:	d008      	beq.n	8004ef8 <UART_SetConfig+0x1e8>
 8004ee6:	e00f      	b.n	8004f08 <UART_SetConfig+0x1f8>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eee:	e082      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ef6:	e07e      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004ef8:	2304      	movs	r3, #4
 8004efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004efe:	e07a      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004f00:	2308      	movs	r3, #8
 8004f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f06:	e076      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004f08:	2310      	movs	r3, #16
 8004f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f0e:	e072      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a35      	ldr	r2, [pc, #212]	@ (8004fec <UART_SetConfig+0x2dc>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d12a      	bne.n	8004f70 <UART_SetConfig+0x260>
 8004f1a:	4b30      	ldr	r3, [pc, #192]	@ (8004fdc <UART_SetConfig+0x2cc>)
 8004f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f28:	d01a      	beq.n	8004f60 <UART_SetConfig+0x250>
 8004f2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f2e:	d81b      	bhi.n	8004f68 <UART_SetConfig+0x258>
 8004f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f34:	d00c      	beq.n	8004f50 <UART_SetConfig+0x240>
 8004f36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f3a:	d815      	bhi.n	8004f68 <UART_SetConfig+0x258>
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d003      	beq.n	8004f48 <UART_SetConfig+0x238>
 8004f40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f44:	d008      	beq.n	8004f58 <UART_SetConfig+0x248>
 8004f46:	e00f      	b.n	8004f68 <UART_SetConfig+0x258>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f4e:	e052      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004f50:	2302      	movs	r3, #2
 8004f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f56:	e04e      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004f58:	2304      	movs	r3, #4
 8004f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f5e:	e04a      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004f60:	2308      	movs	r3, #8
 8004f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f66:	e046      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004f68:	2310      	movs	r3, #16
 8004f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f6e:	e042      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a17      	ldr	r2, [pc, #92]	@ (8004fd4 <UART_SetConfig+0x2c4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d13a      	bne.n	8004ff0 <UART_SetConfig+0x2e0>
 8004f7a:	4b18      	ldr	r3, [pc, #96]	@ (8004fdc <UART_SetConfig+0x2cc>)
 8004f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f88:	d01a      	beq.n	8004fc0 <UART_SetConfig+0x2b0>
 8004f8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f8e:	d81b      	bhi.n	8004fc8 <UART_SetConfig+0x2b8>
 8004f90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f94:	d00c      	beq.n	8004fb0 <UART_SetConfig+0x2a0>
 8004f96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f9a:	d815      	bhi.n	8004fc8 <UART_SetConfig+0x2b8>
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <UART_SetConfig+0x298>
 8004fa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fa4:	d008      	beq.n	8004fb8 <UART_SetConfig+0x2a8>
 8004fa6:	e00f      	b.n	8004fc8 <UART_SetConfig+0x2b8>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fae:	e022      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fb6:	e01e      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004fb8:	2304      	movs	r3, #4
 8004fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fbe:	e01a      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004fc0:	2308      	movs	r3, #8
 8004fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fc6:	e016      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004fc8:	2310      	movs	r3, #16
 8004fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fce:	e012      	b.n	8004ff6 <UART_SetConfig+0x2e6>
 8004fd0:	efff69f3 	.word	0xefff69f3
 8004fd4:	40008000 	.word	0x40008000
 8004fd8:	40013800 	.word	0x40013800
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	40004400 	.word	0x40004400
 8004fe4:	40004800 	.word	0x40004800
 8004fe8:	40004c00 	.word	0x40004c00
 8004fec:	40005000 	.word	0x40005000
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a9f      	ldr	r2, [pc, #636]	@ (8005278 <UART_SetConfig+0x568>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d17a      	bne.n	80050f6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005000:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005004:	2b08      	cmp	r3, #8
 8005006:	d824      	bhi.n	8005052 <UART_SetConfig+0x342>
 8005008:	a201      	add	r2, pc, #4	@ (adr r2, 8005010 <UART_SetConfig+0x300>)
 800500a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500e:	bf00      	nop
 8005010:	08005035 	.word	0x08005035
 8005014:	08005053 	.word	0x08005053
 8005018:	0800503d 	.word	0x0800503d
 800501c:	08005053 	.word	0x08005053
 8005020:	08005043 	.word	0x08005043
 8005024:	08005053 	.word	0x08005053
 8005028:	08005053 	.word	0x08005053
 800502c:	08005053 	.word	0x08005053
 8005030:	0800504b 	.word	0x0800504b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005034:	f7fd ffc2 	bl	8002fbc <HAL_RCC_GetPCLK1Freq>
 8005038:	61f8      	str	r0, [r7, #28]
        break;
 800503a:	e010      	b.n	800505e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800503c:	4b8f      	ldr	r3, [pc, #572]	@ (800527c <UART_SetConfig+0x56c>)
 800503e:	61fb      	str	r3, [r7, #28]
        break;
 8005040:	e00d      	b.n	800505e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005042:	f7fd ff23 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 8005046:	61f8      	str	r0, [r7, #28]
        break;
 8005048:	e009      	b.n	800505e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800504a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800504e:	61fb      	str	r3, [r7, #28]
        break;
 8005050:	e005      	b.n	800505e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800505c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 80fb 	beq.w	800525c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	4613      	mov	r3, r2
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	4413      	add	r3, r2
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	429a      	cmp	r2, r3
 8005074:	d305      	bcc.n	8005082 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800507c:	69fa      	ldr	r2, [r7, #28]
 800507e:	429a      	cmp	r2, r3
 8005080:	d903      	bls.n	800508a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005088:	e0e8      	b.n	800525c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	2200      	movs	r2, #0
 800508e:	461c      	mov	r4, r3
 8005090:	4615      	mov	r5, r2
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	022b      	lsls	r3, r5, #8
 800509c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80050a0:	0222      	lsls	r2, r4, #8
 80050a2:	68f9      	ldr	r1, [r7, #12]
 80050a4:	6849      	ldr	r1, [r1, #4]
 80050a6:	0849      	lsrs	r1, r1, #1
 80050a8:	2000      	movs	r0, #0
 80050aa:	4688      	mov	r8, r1
 80050ac:	4681      	mov	r9, r0
 80050ae:	eb12 0a08 	adds.w	sl, r2, r8
 80050b2:	eb43 0b09 	adc.w	fp, r3, r9
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	603b      	str	r3, [r7, #0]
 80050be:	607a      	str	r2, [r7, #4]
 80050c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050c4:	4650      	mov	r0, sl
 80050c6:	4659      	mov	r1, fp
 80050c8:	f7fb f87e 	bl	80001c8 <__aeabi_uldivmod>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4613      	mov	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050da:	d308      	bcc.n	80050ee <UART_SetConfig+0x3de>
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050e2:	d204      	bcs.n	80050ee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	60da      	str	r2, [r3, #12]
 80050ec:	e0b6      	b.n	800525c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80050f4:	e0b2      	b.n	800525c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050fe:	d15e      	bne.n	80051be <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005100:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005104:	2b08      	cmp	r3, #8
 8005106:	d828      	bhi.n	800515a <UART_SetConfig+0x44a>
 8005108:	a201      	add	r2, pc, #4	@ (adr r2, 8005110 <UART_SetConfig+0x400>)
 800510a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510e:	bf00      	nop
 8005110:	08005135 	.word	0x08005135
 8005114:	0800513d 	.word	0x0800513d
 8005118:	08005145 	.word	0x08005145
 800511c:	0800515b 	.word	0x0800515b
 8005120:	0800514b 	.word	0x0800514b
 8005124:	0800515b 	.word	0x0800515b
 8005128:	0800515b 	.word	0x0800515b
 800512c:	0800515b 	.word	0x0800515b
 8005130:	08005153 	.word	0x08005153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005134:	f7fd ff42 	bl	8002fbc <HAL_RCC_GetPCLK1Freq>
 8005138:	61f8      	str	r0, [r7, #28]
        break;
 800513a:	e014      	b.n	8005166 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800513c:	f7fd ff54 	bl	8002fe8 <HAL_RCC_GetPCLK2Freq>
 8005140:	61f8      	str	r0, [r7, #28]
        break;
 8005142:	e010      	b.n	8005166 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005144:	4b4d      	ldr	r3, [pc, #308]	@ (800527c <UART_SetConfig+0x56c>)
 8005146:	61fb      	str	r3, [r7, #28]
        break;
 8005148:	e00d      	b.n	8005166 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800514a:	f7fd fe9f 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 800514e:	61f8      	str	r0, [r7, #28]
        break;
 8005150:	e009      	b.n	8005166 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005156:	61fb      	str	r3, [r7, #28]
        break;
 8005158:	e005      	b.n	8005166 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005164:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d077      	beq.n	800525c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	005a      	lsls	r2, r3, #1
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	085b      	lsrs	r3, r3, #1
 8005176:	441a      	add	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005180:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	2b0f      	cmp	r3, #15
 8005186:	d916      	bls.n	80051b6 <UART_SetConfig+0x4a6>
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800518e:	d212      	bcs.n	80051b6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	b29b      	uxth	r3, r3
 8005194:	f023 030f 	bic.w	r3, r3, #15
 8005198:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	085b      	lsrs	r3, r3, #1
 800519e:	b29b      	uxth	r3, r3
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	8afb      	ldrh	r3, [r7, #22]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	8afa      	ldrh	r2, [r7, #22]
 80051b2:	60da      	str	r2, [r3, #12]
 80051b4:	e052      	b.n	800525c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051bc:	e04e      	b.n	800525c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d827      	bhi.n	8005216 <UART_SetConfig+0x506>
 80051c6:	a201      	add	r2, pc, #4	@ (adr r2, 80051cc <UART_SetConfig+0x4bc>)
 80051c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051cc:	080051f1 	.word	0x080051f1
 80051d0:	080051f9 	.word	0x080051f9
 80051d4:	08005201 	.word	0x08005201
 80051d8:	08005217 	.word	0x08005217
 80051dc:	08005207 	.word	0x08005207
 80051e0:	08005217 	.word	0x08005217
 80051e4:	08005217 	.word	0x08005217
 80051e8:	08005217 	.word	0x08005217
 80051ec:	0800520f 	.word	0x0800520f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f0:	f7fd fee4 	bl	8002fbc <HAL_RCC_GetPCLK1Freq>
 80051f4:	61f8      	str	r0, [r7, #28]
        break;
 80051f6:	e014      	b.n	8005222 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051f8:	f7fd fef6 	bl	8002fe8 <HAL_RCC_GetPCLK2Freq>
 80051fc:	61f8      	str	r0, [r7, #28]
        break;
 80051fe:	e010      	b.n	8005222 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005200:	4b1e      	ldr	r3, [pc, #120]	@ (800527c <UART_SetConfig+0x56c>)
 8005202:	61fb      	str	r3, [r7, #28]
        break;
 8005204:	e00d      	b.n	8005222 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005206:	f7fd fe41 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 800520a:	61f8      	str	r0, [r7, #28]
        break;
 800520c:	e009      	b.n	8005222 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800520e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005212:	61fb      	str	r3, [r7, #28]
        break;
 8005214:	e005      	b.n	8005222 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005220:	bf00      	nop
    }

    if (pclk != 0U)
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d019      	beq.n	800525c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	085a      	lsrs	r2, r3, #1
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	441a      	add	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	fbb2 f3f3 	udiv	r3, r2, r3
 800523a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	2b0f      	cmp	r3, #15
 8005240:	d909      	bls.n	8005256 <UART_SetConfig+0x546>
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005248:	d205      	bcs.n	8005256 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	60da      	str	r2, [r3, #12]
 8005254:	e002      	b.n	800525c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005268:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800526c:	4618      	mov	r0, r3
 800526e:	3728      	adds	r7, #40	@ 0x28
 8005270:	46bd      	mov	sp, r7
 8005272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005276:	bf00      	nop
 8005278:	40008000 	.word	0x40008000
 800527c:	00f42400 	.word	0x00f42400

08005280 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528c:	f003 0308 	and.w	r3, r3, #8
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00a      	beq.n	80052aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00a      	beq.n	80052ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f2:	f003 0304 	and.w	r3, r3, #4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005314:	f003 0310 	and.w	r3, r3, #16
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005336:	f003 0320 	and.w	r3, r3, #32
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800535c:	2b00      	cmp	r3, #0
 800535e:	d01a      	beq.n	8005396 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800537e:	d10a      	bne.n	8005396 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	605a      	str	r2, [r3, #4]
  }
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b098      	sub	sp, #96	@ 0x60
 80053c8:	af02      	add	r7, sp, #8
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053d4:	f7fc f8a6 	bl	8001524 <HAL_GetTick>
 80053d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0308 	and.w	r3, r3, #8
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d12e      	bne.n	8005446 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053f0:	2200      	movs	r2, #0
 80053f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f88c 	bl	8005514 <UART_WaitOnFlagUntilTimeout>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d021      	beq.n	8005446 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005412:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005416:	653b      	str	r3, [r7, #80]	@ 0x50
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	461a      	mov	r2, r3
 800541e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005420:	647b      	str	r3, [r7, #68]	@ 0x44
 8005422:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005424:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005426:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005428:	e841 2300 	strex	r3, r2, [r1]
 800542c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800542e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1e6      	bne.n	8005402 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2220      	movs	r2, #32
 8005438:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e062      	b.n	800550c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b04      	cmp	r3, #4
 8005452:	d149      	bne.n	80054e8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005454:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800545c:	2200      	movs	r2, #0
 800545e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f856 	bl	8005514 <UART_WaitOnFlagUntilTimeout>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d03c      	beq.n	80054e8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005476:	e853 3f00 	ldrex	r3, [r3]
 800547a:	623b      	str	r3, [r7, #32]
   return(result);
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005482:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	461a      	mov	r2, r3
 800548a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800548c:	633b      	str	r3, [r7, #48]	@ 0x30
 800548e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005490:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005494:	e841 2300 	strex	r3, r2, [r1]
 8005498:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800549a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1e6      	bne.n	800546e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3308      	adds	r3, #8
 80054a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	e853 3f00 	ldrex	r3, [r3]
 80054ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f023 0301 	bic.w	r3, r3, #1
 80054b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3308      	adds	r3, #8
 80054be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054c0:	61fa      	str	r2, [r7, #28]
 80054c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c4:	69b9      	ldr	r1, [r7, #24]
 80054c6:	69fa      	ldr	r2, [r7, #28]
 80054c8:	e841 2300 	strex	r3, r2, [r1]
 80054cc:	617b      	str	r3, [r7, #20]
   return(result);
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1e5      	bne.n	80054a0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e011      	b.n	800550c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3758      	adds	r7, #88	@ 0x58
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	603b      	str	r3, [r7, #0]
 8005520:	4613      	mov	r3, r2
 8005522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005524:	e04f      	b.n	80055c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552c:	d04b      	beq.n	80055c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800552e:	f7fb fff9 	bl	8001524 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	429a      	cmp	r2, r3
 800553c:	d302      	bcc.n	8005544 <UART_WaitOnFlagUntilTimeout+0x30>
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e04e      	b.n	80055e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	2b00      	cmp	r3, #0
 8005554:	d037      	beq.n	80055c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b80      	cmp	r3, #128	@ 0x80
 800555a:	d034      	beq.n	80055c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b40      	cmp	r3, #64	@ 0x40
 8005560:	d031      	beq.n	80055c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	69db      	ldr	r3, [r3, #28]
 8005568:	f003 0308 	and.w	r3, r3, #8
 800556c:	2b08      	cmp	r3, #8
 800556e:	d110      	bne.n	8005592 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2208      	movs	r2, #8
 8005576:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 f838 	bl	80055ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2208      	movs	r2, #8
 8005582:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e029      	b.n	80055e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800559c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055a0:	d111      	bne.n	80055c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 f81e 	bl	80055ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e00f      	b.n	80055e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69da      	ldr	r2, [r3, #28]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4013      	ands	r3, r2
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	bf0c      	ite	eq
 80055d6:	2301      	moveq	r3, #1
 80055d8:	2300      	movne	r3, #0
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	461a      	mov	r2, r3
 80055de:	79fb      	ldrb	r3, [r7, #7]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d0a0      	beq.n	8005526 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b095      	sub	sp, #84	@ 0x54
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055fe:	e853 3f00 	ldrex	r3, [r3]
 8005602:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005606:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800560a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	461a      	mov	r2, r3
 8005612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005614:	643b      	str	r3, [r7, #64]	@ 0x40
 8005616:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005618:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800561a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800561c:	e841 2300 	strex	r3, r2, [r1]
 8005620:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1e6      	bne.n	80055f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3308      	adds	r3, #8
 800562e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	61fb      	str	r3, [r7, #28]
   return(result);
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	f023 0301 	bic.w	r3, r3, #1
 800563e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3308      	adds	r3, #8
 8005646:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005648:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800564a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800564e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e5      	bne.n	8005628 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005660:	2b01      	cmp	r3, #1
 8005662:	d118      	bne.n	8005696 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	60bb      	str	r3, [r7, #8]
   return(result);
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f023 0310 	bic.w	r3, r3, #16
 8005678:	647b      	str	r3, [r7, #68]	@ 0x44
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005682:	61bb      	str	r3, [r7, #24]
 8005684:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005686:	6979      	ldr	r1, [r7, #20]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	613b      	str	r3, [r7, #16]
   return(result);
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1e6      	bne.n	8005664 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2220      	movs	r2, #32
 800569a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80056aa:	bf00      	nop
 80056ac:	3754      	adds	r7, #84	@ 0x54
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056b6:	b084      	sub	sp, #16
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	f107 001c 	add.w	r0, r7, #28
 80056c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fa69 	bl	8005bac <USB_CoreReset>
 80056da:	4603      	mov	r3, r0
 80056dc:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80056de:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80056f2:	e005      	b.n	8005700 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8005700:	7bfb      	ldrb	r3, [r7, #15]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800570c:	b004      	add	sp, #16
 800570e:	4770      	bx	lr

08005710 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f023 0201 	bic.w	r2, r3, #1
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b084      	sub	sp, #16
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	460b      	mov	r3, r1
 800573c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800574e:	78fb      	ldrb	r3, [r7, #3]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d115      	bne.n	8005780 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005760:	200a      	movs	r0, #10
 8005762:	f7fb feeb 	bl	800153c <HAL_Delay>
      ms += 10U;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	330a      	adds	r3, #10
 800576a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fa0f 	bl	8005b90 <USB_GetMode>
 8005772:	4603      	mov	r3, r0
 8005774:	2b01      	cmp	r3, #1
 8005776:	d01e      	beq.n	80057b6 <USB_SetCurrentMode+0x84>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2bc7      	cmp	r3, #199	@ 0xc7
 800577c:	d9f0      	bls.n	8005760 <USB_SetCurrentMode+0x2e>
 800577e:	e01a      	b.n	80057b6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005780:	78fb      	ldrb	r3, [r7, #3]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d115      	bne.n	80057b2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005792:	200a      	movs	r0, #10
 8005794:	f7fb fed2 	bl	800153c <HAL_Delay>
      ms += 10U;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	330a      	adds	r3, #10
 800579c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f9f6 	bl	8005b90 <USB_GetMode>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d005      	beq.n	80057b6 <USB_SetCurrentMode+0x84>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2bc7      	cmp	r3, #199	@ 0xc7
 80057ae:	d9f0      	bls.n	8005792 <USB_SetCurrentMode+0x60>
 80057b0:	e001      	b.n	80057b6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e005      	b.n	80057c2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2bc8      	cmp	r3, #200	@ 0xc8
 80057ba:	d101      	bne.n	80057c0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e000      	b.n	80057c2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057cc:	b084      	sub	sp, #16
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b086      	sub	sp, #24
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80057da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80057e6:	2300      	movs	r3, #0
 80057e8:	613b      	str	r3, [r7, #16]
 80057ea:	e009      	b.n	8005800 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	3340      	adds	r3, #64	@ 0x40
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	2200      	movs	r2, #0
 80057f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	3301      	adds	r3, #1
 80057fe:	613b      	str	r3, [r7, #16]
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	2b0e      	cmp	r3, #14
 8005804:	d9f2      	bls.n	80057ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005806:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800580a:	2b00      	cmp	r3, #0
 800580c:	d11c      	bne.n	8005848 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800581c:	f043 0302 	orr.w	r3, r3, #2
 8005820:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005826:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	e005      	b.n	8005854 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800585a:	461a      	mov	r2, r3
 800585c:	2300      	movs	r3, #0
 800585e:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005860:	2103      	movs	r1, #3
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f95a 	bl	8005b1c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005868:	2110      	movs	r1, #16
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f8f6 	bl	8005a5c <USB_FlushTxFifo>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f920 	bl	8005ac0 <USB_FlushRxFifo>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005890:	461a      	mov	r2, r3
 8005892:	2300      	movs	r3, #0
 8005894:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800589c:	461a      	mov	r2, r3
 800589e:	2300      	movs	r3, #0
 80058a0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058a8:	461a      	mov	r2, r3
 80058aa:	2300      	movs	r3, #0
 80058ac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058ae:	2300      	movs	r3, #0
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	e043      	b.n	800593c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058ca:	d118      	bne.n	80058fe <USB_DevInit+0x132>
    {
      if (i == 0U)
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10a      	bne.n	80058e8 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058de:	461a      	mov	r2, r3
 80058e0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	e013      	b.n	8005910 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058f4:	461a      	mov	r2, r3
 80058f6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80058fa:	6013      	str	r3, [r2, #0]
 80058fc:	e008      	b.n	8005910 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800590a:	461a      	mov	r2, r3
 800590c:	2300      	movs	r3, #0
 800590e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800591c:	461a      	mov	r2, r3
 800591e:	2300      	movs	r3, #0
 8005920:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800592e:	461a      	mov	r2, r3
 8005930:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005934:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	3301      	adds	r3, #1
 800593a:	613b      	str	r3, [r7, #16]
 800593c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005940:	461a      	mov	r2, r3
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	4293      	cmp	r3, r2
 8005946:	d3b5      	bcc.n	80058b4 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005948:	2300      	movs	r3, #0
 800594a:	613b      	str	r3, [r7, #16]
 800594c:	e043      	b.n	80059d6 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005960:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005964:	d118      	bne.n	8005998 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10a      	bne.n	8005982 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005978:	461a      	mov	r2, r3
 800597a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800597e:	6013      	str	r3, [r2, #0]
 8005980:	e013      	b.n	80059aa <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4413      	add	r3, r2
 800598a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800598e:	461a      	mov	r2, r3
 8005990:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	e008      	b.n	80059aa <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059a4:	461a      	mov	r2, r3
 80059a6:	2300      	movs	r3, #0
 80059a8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059b6:	461a      	mov	r2, r3
 80059b8:	2300      	movs	r3, #0
 80059ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059c8:	461a      	mov	r2, r3
 80059ca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80059ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	3301      	adds	r3, #1
 80059d4:	613b      	str	r3, [r7, #16]
 80059d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80059da:	461a      	mov	r2, r3
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	4293      	cmp	r3, r2
 80059e0:	d3b5      	bcc.n	800594e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059f4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005a02:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	f043 0210 	orr.w	r2, r3, #16
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	699a      	ldr	r2, [r3, #24]
 8005a14:	4b10      	ldr	r3, [pc, #64]	@ (8005a58 <USB_DevInit+0x28c>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d005      	beq.n	8005a30 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	f043 0208 	orr.w	r2, r3, #8
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d107      	bne.n	8005a48 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a40:	f043 0304 	orr.w	r3, r3, #4
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3718      	adds	r7, #24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a54:	b004      	add	sp, #16
 8005a56:	4770      	bx	lr
 8005a58:	803c3800 	.word	0x803c3800

08005a5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a76:	d901      	bls.n	8005a7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e01b      	b.n	8005ab4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	daf2      	bge.n	8005a6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	019b      	lsls	r3, r3, #6
 8005a8c:	f043 0220 	orr.w	r2, r3, #32
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	3301      	adds	r3, #1
 8005a98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005aa0:	d901      	bls.n	8005aa6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e006      	b.n	8005ab4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	d0f0      	beq.n	8005a94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ad8:	d901      	bls.n	8005ade <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e018      	b.n	8005b10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	daf2      	bge.n	8005acc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2210      	movs	r2, #16
 8005aee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3301      	adds	r3, #1
 8005af4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005afc:	d901      	bls.n	8005b02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e006      	b.n	8005b10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f003 0310 	and.w	r3, r3, #16
 8005b0a:	2b10      	cmp	r3, #16
 8005b0c:	d0f0      	beq.n	8005af0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	78fb      	ldrb	r3, [r7, #3]
 8005b36:	68f9      	ldr	r1, [r7, #12]
 8005b38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b085      	sub	sp, #20
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005b68:	f023 0303 	bic.w	r3, r3, #3
 8005b6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b7c:	f043 0302 	orr.w	r3, r3, #2
 8005b80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	f003 0301 	and.w	r3, r3, #1
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005bc4:	d901      	bls.n	8005bca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e01b      	b.n	8005c02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	daf2      	bge.n	8005bb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f043 0201 	orr.w	r2, r3, #1
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	3301      	adds	r3, #1
 8005be6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005bee:	d901      	bls.n	8005bf4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e006      	b.n	8005c02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d0f0      	beq.n	8005be2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <memset>:
 8005c0e:	4402      	add	r2, r0
 8005c10:	4603      	mov	r3, r0
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d100      	bne.n	8005c18 <memset+0xa>
 8005c16:	4770      	bx	lr
 8005c18:	f803 1b01 	strb.w	r1, [r3], #1
 8005c1c:	e7f9      	b.n	8005c12 <memset+0x4>
	...

08005c20 <__libc_init_array>:
 8005c20:	b570      	push	{r4, r5, r6, lr}
 8005c22:	4d0d      	ldr	r5, [pc, #52]	@ (8005c58 <__libc_init_array+0x38>)
 8005c24:	4c0d      	ldr	r4, [pc, #52]	@ (8005c5c <__libc_init_array+0x3c>)
 8005c26:	1b64      	subs	r4, r4, r5
 8005c28:	10a4      	asrs	r4, r4, #2
 8005c2a:	2600      	movs	r6, #0
 8005c2c:	42a6      	cmp	r6, r4
 8005c2e:	d109      	bne.n	8005c44 <__libc_init_array+0x24>
 8005c30:	4d0b      	ldr	r5, [pc, #44]	@ (8005c60 <__libc_init_array+0x40>)
 8005c32:	4c0c      	ldr	r4, [pc, #48]	@ (8005c64 <__libc_init_array+0x44>)
 8005c34:	f000 f818 	bl	8005c68 <_init>
 8005c38:	1b64      	subs	r4, r4, r5
 8005c3a:	10a4      	asrs	r4, r4, #2
 8005c3c:	2600      	movs	r6, #0
 8005c3e:	42a6      	cmp	r6, r4
 8005c40:	d105      	bne.n	8005c4e <__libc_init_array+0x2e>
 8005c42:	bd70      	pop	{r4, r5, r6, pc}
 8005c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c48:	4798      	blx	r3
 8005c4a:	3601      	adds	r6, #1
 8005c4c:	e7ee      	b.n	8005c2c <__libc_init_array+0xc>
 8005c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c52:	4798      	blx	r3
 8005c54:	3601      	adds	r6, #1
 8005c56:	e7f2      	b.n	8005c3e <__libc_init_array+0x1e>
 8005c58:	08005cd0 	.word	0x08005cd0
 8005c5c:	08005cd0 	.word	0x08005cd0
 8005c60:	08005cd0 	.word	0x08005cd0
 8005c64:	08005cd4 	.word	0x08005cd4

08005c68 <_init>:
 8005c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6a:	bf00      	nop
 8005c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6e:	bc08      	pop	{r3}
 8005c70:	469e      	mov	lr, r3
 8005c72:	4770      	bx	lr

08005c74 <_fini>:
 8005c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c76:	bf00      	nop
 8005c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7a:	bc08      	pop	{r3}
 8005c7c:	469e      	mov	lr, r3
 8005c7e:	4770      	bx	lr
