
lab1_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ec4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08008054  08008054  00009054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008114  08008114  0000a010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008114  08008114  00009114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800811c  0800811c  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800811c  0800811c  0000911c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008120  08008120  00009120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08008124  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000208c  20000010  08008134  0000a010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000209c  08008134  0000a09c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002118d  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004343  00000000  00000000  0002b1cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d88  00000000  00000000  0002f510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016e4  00000000  00000000  00031298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004401  00000000  00000000  0003297c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020d1d  00000000  00000000  00036d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd6c3  00000000  00000000  00057a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015515d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007eac  00000000  00000000  001551a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0015d04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800803c 	.word	0x0800803c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800803c 	.word	0x0800803c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 ff4b 	bl	800139a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f832 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f9fa 	bl	8000900 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800050c:	f000 f890 	bl	8000630 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000510:	f000 f8c6 	bl	80006a0 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000514:	f000 f902 	bl	800071c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000518:	f000 f926 	bl	8000768 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800051c:	f000 f962 	bl	80007e4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000520:	f000 f990 	bl	8000844 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000524:	f000 f9be 	bl	80008a4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000528:	f004 fafa 	bl	8004b20 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800052c:	4a09      	ldr	r2, [pc, #36]	@ (8000554 <main+0x58>)
 800052e:	2100      	movs	r1, #0
 8000530:	4809      	ldr	r0, [pc, #36]	@ (8000558 <main+0x5c>)
 8000532:	f004 fb3f 	bl	8004bb4 <osThreadNew>
 8000536:	4603      	mov	r3, r0
 8000538:	4a08      	ldr	r2, [pc, #32]	@ (800055c <main+0x60>)
 800053a:	6013      	str	r3, [r2, #0]

  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 800053c:	4a08      	ldr	r2, [pc, #32]	@ (8000560 <main+0x64>)
 800053e:	2100      	movs	r1, #0
 8000540:	4808      	ldr	r0, [pc, #32]	@ (8000564 <main+0x68>)
 8000542:	f004 fb37 	bl	8004bb4 <osThreadNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a07      	ldr	r2, [pc, #28]	@ (8000568 <main+0x6c>)
 800054a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800054c:	f004 fb0c 	bl	8004b68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000550:	bf00      	nop
 8000552:	e7fd      	b.n	8000550 <main+0x54>
 8000554:	08008084 	.word	0x08008084
 8000558:	08000c6d 	.word	0x08000c6d
 800055c:	20000754 	.word	0x20000754
 8000560:	080080a8 	.word	0x080080a8
 8000564:	08000cb1 	.word	0x08000cb1
 8000568:	20000758 	.word	0x20000758

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b096      	sub	sp, #88	@ 0x58
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2244      	movs	r2, #68	@ 0x44
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f007 fd24 	bl	8007fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	463b      	mov	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800058e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000592:	f001 fe31 	bl	80021f8 <HAL_PWREx_ControlVoltageScaling>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800059c:	f000 fbb8 	bl	8000d10 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005a0:	f001 fe0c 	bl	80021bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005a4:	4b21      	ldr	r3, [pc, #132]	@ (800062c <SystemClock_Config+0xc0>)
 80005a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80005aa:	4a20      	ldr	r2, [pc, #128]	@ (800062c <SystemClock_Config+0xc0>)
 80005ac:	f023 0318 	bic.w	r3, r3, #24
 80005b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005b4:	2314      	movs	r3, #20
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005c4:	2360      	movs	r3, #96	@ 0x60
 80005c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2302      	movs	r3, #2
 80005ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005cc:	2301      	movs	r3, #1
 80005ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d0:	2301      	movs	r3, #1
 80005d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005d4:	2328      	movs	r3, #40	@ 0x28
 80005d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005d8:	2307      	movs	r3, #7
 80005da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 ff27 	bl	800243c <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005f4:	f000 fb8c 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2303      	movs	r3, #3
 80005fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800060c:	463b      	mov	r3, r7
 800060e:	2104      	movs	r1, #4
 8000610:	4618      	mov	r0, r3
 8000612:	f002 faef 	bl	8002bf4 <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800061c:	f000 fb78 	bl	8000d10 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000620:	f002 fff6 	bl	8003610 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000624:	bf00      	nop
 8000626:	3758      	adds	r7, #88	@ 0x58
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40021000 	.word	0x40021000

08000630 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000634:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <MX_DFSDM1_Init+0x68>)
 8000636:	4a19      	ldr	r2, [pc, #100]	@ (800069c <MX_DFSDM1_Init+0x6c>)
 8000638:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800063a:	4b17      	ldr	r3, [pc, #92]	@ (8000698 <MX_DFSDM1_Init+0x68>)
 800063c:	2201      	movs	r2, #1
 800063e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000640:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <MX_DFSDM1_Init+0x68>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <MX_DFSDM1_Init+0x68>)
 8000648:	2202      	movs	r2, #2
 800064a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <MX_DFSDM1_Init+0x68>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000652:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <MX_DFSDM1_Init+0x68>)
 8000654:	2200      	movs	r2, #0
 8000656:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000658:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <MX_DFSDM1_Init+0x68>)
 800065a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800065e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000660:	4b0d      	ldr	r3, [pc, #52]	@ (8000698 <MX_DFSDM1_Init+0x68>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000666:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <MX_DFSDM1_Init+0x68>)
 8000668:	2204      	movs	r2, #4
 800066a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800066c:	4b0a      	ldr	r3, [pc, #40]	@ (8000698 <MX_DFSDM1_Init+0x68>)
 800066e:	2200      	movs	r2, #0
 8000670:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000672:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <MX_DFSDM1_Init+0x68>)
 8000674:	2201      	movs	r2, #1
 8000676:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000678:	4b07      	ldr	r3, [pc, #28]	@ (8000698 <MX_DFSDM1_Init+0x68>)
 800067a:	2200      	movs	r2, #0
 800067c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800067e:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <MX_DFSDM1_Init+0x68>)
 8000680:	2200      	movs	r2, #0
 8000682:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	@ (8000698 <MX_DFSDM1_Init+0x68>)
 8000686:	f001 f833 	bl	80016f0 <HAL_DFSDM_ChannelInit>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000690:	f000 fb3e 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	2000002c 	.word	0x2000002c
 800069c:	40016020 	.word	0x40016020

080006a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000714 <MX_I2C2_Init+0x74>)
 80006a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000718 <MX_I2C2_Init+0x78>)
 80006a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80006aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000714 <MX_I2C2_Init+0x74>)
 80006ac:	f640 6214 	movw	r2, #3604	@ 0xe14
 80006b0:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006b2:	4b18      	ldr	r3, [pc, #96]	@ (8000714 <MX_I2C2_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b8:	4b16      	ldr	r3, [pc, #88]	@ (8000714 <MX_I2C2_Init+0x74>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006be:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <MX_I2C2_Init+0x74>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006c4:	4b13      	ldr	r3, [pc, #76]	@ (8000714 <MX_I2C2_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ca:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <MX_I2C2_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d0:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <MX_I2C2_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <MX_I2C2_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006dc:	480d      	ldr	r0, [pc, #52]	@ (8000714 <MX_I2C2_Init+0x74>)
 80006de:	f001 fb07 	bl	8001cf0 <HAL_I2C_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006e8:	f000 fb12 	bl	8000d10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ec:	2100      	movs	r1, #0
 80006ee:	4809      	ldr	r0, [pc, #36]	@ (8000714 <MX_I2C2_Init+0x74>)
 80006f0:	f001 fb99 	bl	8001e26 <HAL_I2CEx_ConfigAnalogFilter>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80006fa:	f000 fb09 	bl	8000d10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006fe:	2100      	movs	r1, #0
 8000700:	4804      	ldr	r0, [pc, #16]	@ (8000714 <MX_I2C2_Init+0x74>)
 8000702:	f001 fbdb 	bl	8001ebc <HAL_I2CEx_ConfigDigitalFilter>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800070c:	f000 fb00 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000064 	.word	0x20000064
 8000718:	40005800 	.word	0x40005800

0800071c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000720:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <MX_QUADSPI_Init+0x44>)
 8000722:	4a10      	ldr	r2, [pc, #64]	@ (8000764 <MX_QUADSPI_Init+0x48>)
 8000724:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <MX_QUADSPI_Init+0x44>)
 8000728:	2202      	movs	r2, #2
 800072a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800072c:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <MX_QUADSPI_Init+0x44>)
 800072e:	2204      	movs	r2, #4
 8000730:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	@ (8000760 <MX_QUADSPI_Init+0x44>)
 8000734:	2210      	movs	r2, #16
 8000736:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000738:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <MX_QUADSPI_Init+0x44>)
 800073a:	2217      	movs	r2, #23
 800073c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800073e:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <MX_QUADSPI_Init+0x44>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000744:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <MX_QUADSPI_Init+0x44>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_QUADSPI_Init+0x44>)
 800074c:	f001 fdba 	bl	80022c4 <HAL_QSPI_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000756:	f000 fadb 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000b8 	.word	0x200000b8
 8000764:	a0001000 	.word	0xa0001000

08000768 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800076c:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <MX_SPI3_Init+0x74>)
 800076e:	4a1c      	ldr	r2, [pc, #112]	@ (80007e0 <MX_SPI3_Init+0x78>)
 8000770:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000772:	4b1a      	ldr	r3, [pc, #104]	@ (80007dc <MX_SPI3_Init+0x74>)
 8000774:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000778:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800077a:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <MX_SPI3_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000780:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <MX_SPI3_Init+0x74>)
 8000782:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000786:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <MX_SPI3_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800078e:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <MX_SPI3_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_SPI3_Init+0x74>)
 8000796:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800079a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_SPI3_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_SPI3_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_SPI3_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <MX_SPI3_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_SPI3_Init+0x74>)
 80007b6:	2207      	movs	r2, #7
 80007b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <MX_SPI3_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_SPI3_Init+0x74>)
 80007c2:	2208      	movs	r2, #8
 80007c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_SPI3_Init+0x74>)
 80007c8:	f003 f904 	bl	80039d4 <HAL_SPI_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007d2:	f000 fa9d 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000fc 	.word	0x200000fc
 80007e0:	40003c00 	.word	0x40003c00

080007e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <MX_USART1_UART_Init+0x58>)
 80007ea:	4a15      	ldr	r2, [pc, #84]	@ (8000840 <MX_USART1_UART_Init+0x5c>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ee:	4b13      	ldr	r3, [pc, #76]	@ (800083c <MX_USART1_UART_Init+0x58>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_USART1_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <MX_USART1_UART_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_USART1_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_USART1_UART_Init+0x58>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <MX_USART1_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_USART1_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <MX_USART1_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_USART1_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_USART1_UART_Init+0x58>)
 8000828:	f003 f977 	bl	8003b1a <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000832:	f000 fa6d 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000160 	.word	0x20000160
 8000840:	40013800 	.word	0x40013800

08000844 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000848:	4b14      	ldr	r3, [pc, #80]	@ (800089c <MX_USART3_UART_Init+0x58>)
 800084a:	4a15      	ldr	r2, [pc, #84]	@ (80008a0 <MX_USART3_UART_Init+0x5c>)
 800084c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800084e:	4b13      	ldr	r3, [pc, #76]	@ (800089c <MX_USART3_UART_Init+0x58>)
 8000850:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000854:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_USART3_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_USART3_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_USART3_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_USART3_UART_Init+0x58>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <MX_USART3_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_USART3_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <MX_USART3_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_USART3_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_USART3_UART_Init+0x58>)
 8000888:	f003 f947 	bl	8003b1a <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000892:	f000 fa3d 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200001e8 	.word	0x200001e8
 80008a0:	40004800 	.word	0x40004800

080008a4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008a8:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008b0:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b2:	2206      	movs	r2, #6
 80008b4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b8:	2202      	movs	r2, #2
 80008ba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008be:	2202      	movs	r2, #2
 80008c0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e8:	f001 fb34 	bl	8001f54 <HAL_PCD_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008f2:	f000 fa0d 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000270 	.word	0x20000270

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	@ 0x28
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000916:	4bbd      	ldr	r3, [pc, #756]	@ (8000c0c <MX_GPIO_Init+0x30c>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	4abc      	ldr	r2, [pc, #752]	@ (8000c0c <MX_GPIO_Init+0x30c>)
 800091c:	f043 0310 	orr.w	r3, r3, #16
 8000920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000922:	4bba      	ldr	r3, [pc, #744]	@ (8000c0c <MX_GPIO_Init+0x30c>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	f003 0310 	and.w	r3, r3, #16
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	4bb7      	ldr	r3, [pc, #732]	@ (8000c0c <MX_GPIO_Init+0x30c>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	4ab6      	ldr	r2, [pc, #728]	@ (8000c0c <MX_GPIO_Init+0x30c>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093a:	4bb4      	ldr	r3, [pc, #720]	@ (8000c0c <MX_GPIO_Init+0x30c>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4bb1      	ldr	r3, [pc, #708]	@ (8000c0c <MX_GPIO_Init+0x30c>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094a:	4ab0      	ldr	r2, [pc, #704]	@ (8000c0c <MX_GPIO_Init+0x30c>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000952:	4bae      	ldr	r3, [pc, #696]	@ (8000c0c <MX_GPIO_Init+0x30c>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	4bab      	ldr	r3, [pc, #684]	@ (8000c0c <MX_GPIO_Init+0x30c>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000962:	4aaa      	ldr	r2, [pc, #680]	@ (8000c0c <MX_GPIO_Init+0x30c>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800096a:	4ba8      	ldr	r3, [pc, #672]	@ (8000c0c <MX_GPIO_Init+0x30c>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000976:	4ba5      	ldr	r3, [pc, #660]	@ (8000c0c <MX_GPIO_Init+0x30c>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097a:	4aa4      	ldr	r2, [pc, #656]	@ (8000c0c <MX_GPIO_Init+0x30c>)
 800097c:	f043 0308 	orr.w	r3, r3, #8
 8000980:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000982:	4ba2      	ldr	r3, [pc, #648]	@ (8000c0c <MX_GPIO_Init+0x30c>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000986:	f003 0308 	and.w	r3, r3, #8
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000994:	489e      	ldr	r0, [pc, #632]	@ (8000c10 <MX_GPIO_Init+0x310>)
 8000996:	f001 f961 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f248 1104 	movw	r1, #33028	@ 0x8104
 80009a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a4:	f001 f95a 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80009a8:	2200      	movs	r2, #0
 80009aa:	f24f 0114 	movw	r1, #61460	@ 0xf014
 80009ae:	4899      	ldr	r0, [pc, #612]	@ (8000c14 <MX_GPIO_Init+0x314>)
 80009b0:	f001 f954 	bl	8001c5c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	f241 0181 	movw	r1, #4225	@ 0x1081
 80009ba:	4897      	ldr	r0, [pc, #604]	@ (8000c18 <MX_GPIO_Init+0x318>)
 80009bc:	f001 f94e 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009c6:	4894      	ldr	r0, [pc, #592]	@ (8000c18 <MX_GPIO_Init+0x318>)
 80009c8:	f001 f948 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80009d2:	4892      	ldr	r0, [pc, #584]	@ (8000c1c <MX_GPIO_Init+0x31c>)
 80009d4:	f001 f942 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	2120      	movs	r1, #32
 80009dc:	488d      	ldr	r0, [pc, #564]	@ (8000c14 <MX_GPIO_Init+0x314>)
 80009de:	f001 f93d 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	2101      	movs	r1, #1
 80009e6:	488a      	ldr	r0, [pc, #552]	@ (8000c10 <MX_GPIO_Init+0x310>)
 80009e8:	f001 f938 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80009ec:	f240 1315 	movw	r3, #277	@ 0x115
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	4882      	ldr	r0, [pc, #520]	@ (8000c10 <MX_GPIO_Init+0x310>)
 8000a06:	f000 ff7f 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a0a:	236a      	movs	r3, #106	@ 0x6a
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a0e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	487c      	ldr	r0, [pc, #496]	@ (8000c10 <MX_GPIO_Init+0x310>)
 8000a20:	f000 ff72 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000a24:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 8000a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4878      	ldr	r0, [pc, #480]	@ (8000c1c <MX_GPIO_Init+0x31c>)
 8000a3c:	f000 ff64 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000a40:	233f      	movs	r3, #63	@ 0x3f
 8000a42:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a44:	230b      	movs	r3, #11
 8000a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	4872      	ldr	r0, [pc, #456]	@ (8000c1c <MX_GPIO_Init+0x31c>)
 8000a54:	f000 ff58 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a68:	2308      	movs	r3, #8
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a76:	f000 ff47 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a7a:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a96:	f000 ff37 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000a9a:	2308      	movs	r3, #8
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab8:	f000 ff26 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000abc:	2310      	movs	r3, #16
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ac0:	230b      	movs	r3, #11
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad2:	f000 ff19 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000ad6:	23e0      	movs	r3, #224	@ 0xe0
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ae6:	2305      	movs	r3, #5
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af4:	f000 ff08 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000af8:	2301      	movs	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4841      	ldr	r0, [pc, #260]	@ (8000c14 <MX_GPIO_Init+0x314>)
 8000b0e:	f000 fefb 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b12:	2302      	movs	r3, #2
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b16:	230b      	movs	r3, #11
 8000b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	483b      	ldr	r0, [pc, #236]	@ (8000c14 <MX_GPIO_Init+0x314>)
 8000b26:	f000 feef 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b2a:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000b2e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	4834      	ldr	r0, [pc, #208]	@ (8000c14 <MX_GPIO_Init+0x314>)
 8000b44:	f000 fee0 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b48:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000b4c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b4e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	482e      	ldr	r0, [pc, #184]	@ (8000c18 <MX_GPIO_Init+0x318>)
 8000b60:	f000 fed2 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b64:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4826      	ldr	r0, [pc, #152]	@ (8000c18 <MX_GPIO_Init+0x318>)
 8000b7e:	f000 fec3 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b82:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4820      	ldr	r0, [pc, #128]	@ (8000c1c <MX_GPIO_Init+0x31c>)
 8000b9c:	f000 feb4 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bb0:	2305      	movs	r3, #5
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4817      	ldr	r0, [pc, #92]	@ (8000c18 <MX_GPIO_Init+0x318>)
 8000bbc:	f000 fea4 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000bc0:	2378      	movs	r3, #120	@ 0x78
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bd0:	2307      	movs	r3, #7
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	480f      	ldr	r0, [pc, #60]	@ (8000c18 <MX_GPIO_Init+0x318>)
 8000bdc:	f000 fe94 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000be0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be6:	2312      	movs	r3, #18
 8000be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <MX_GPIO_Init+0x314>)
 8000bfe:	f000 fe83 	bl	8001908 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2105      	movs	r1, #5
 8000c06:	2017      	movs	r0, #23
 8000c08:	e00a      	b.n	8000c20 <MX_GPIO_Init+0x320>
 8000c0a:	bf00      	nop
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	48001000 	.word	0x48001000
 8000c14:	48000400 	.word	0x48000400
 8000c18:	48000c00 	.word	0x48000c00
 8000c1c:	48000800 	.word	0x48000800
 8000c20:	f000 fd2f 	bl	8001682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c24:	2017      	movs	r0, #23
 8000c26:	f000 fd48 	bl	80016ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2105      	movs	r1, #5
 8000c2e:	2028      	movs	r0, #40	@ 0x28
 8000c30:	f000 fd27 	bl	8001682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c34:	2028      	movs	r0, #40	@ 0x28
 8000c36:	f000 fd40 	bl	80016ba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3728      	adds	r7, #40	@ 0x28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop

08000c44 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_13 ) { // 按鍵被按下
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c54:	d104      	bne.n	8000c60 <HAL_GPIO_EXTI_Callback+0x1c>
        osSemaphoreRelease(semButton); // 釋放 Semaphore，通知 Task_1 啟動
 8000c56:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <HAL_GPIO_EXTI_Callback+0x24>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f004 f932 	bl	8004ec4 <osSemaphoreRelease>
    }
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000760 	.word	0x20000760

08000c6c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	for (;;) {
	        osSemaphoreAcquire(semButton, osWaitForever); // 等待 Semaphore 觸發
 8000c74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <StartDefaultTask+0x3c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f04f 31ff 	mov.w	r1, #4294967295
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f004 f8cf 	bl	8004e20 <osSemaphoreAcquire>
	        // 當 Semaphore 被釋放後，開始閃爍 LED2
	        HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000c82:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c86:	4809      	ldr	r0, [pc, #36]	@ (8000cac <StartDefaultTask+0x40>)
 8000c88:	f001 f800 	bl	8001c8c <HAL_GPIO_TogglePin>
	        osDelay(100);  // 控制閃爍頻率 (10Hz)
 8000c8c:	2064      	movs	r0, #100	@ 0x64
 8000c8e:	f004 f823 	bl	8004cd8 <osDelay>
	        HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000c92:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c96:	4805      	ldr	r0, [pc, #20]	@ (8000cac <StartDefaultTask+0x40>)
 8000c98:	f000 fff8 	bl	8001c8c <HAL_GPIO_TogglePin>
	        osDelay(100);  // 控制閃爍頻率 (10Hz)
 8000c9c:	2064      	movs	r0, #100	@ 0x64
 8000c9e:	f004 f81b 	bl	8004cd8 <osDelay>
	        osSemaphoreAcquire(semButton, osWaitForever); // 等待 Semaphore 觸發
 8000ca2:	bf00      	nop
 8000ca4:	e7e6      	b.n	8000c74 <StartDefaultTask+0x8>
 8000ca6:	bf00      	nop
 8000ca8:	20000760 	.word	0x20000760
 8000cac:	48000400 	.word	0x48000400

08000cb0 <StartTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
	for(;;) {
	        osSemaphoreAcquire(semTimer, osWaitForever); // 等待計時器觸發
 8000cb8:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <StartTask01+0x54>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f004 f8ad 	bl	8004e20 <osSemaphoreAcquire>
	        osMutexAcquire(ledMutex, osWaitForever); // 確保獨占 LED2
 8000cc6:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <StartTask01+0x58>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f04f 31ff 	mov.w	r1, #4294967295
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f004 f81d 	bl	8004d0e <osMutexAcquire>

	        for (int i = 0; i < 20; i++) { // 10Hz，閃爍 2 秒
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	e00a      	b.n	8000cf0 <StartTask01+0x40>
	            HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000cda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cde:	480b      	ldr	r0, [pc, #44]	@ (8000d0c <StartTask01+0x5c>)
 8000ce0:	f000 ffd4 	bl	8001c8c <HAL_GPIO_TogglePin>
	            osDelay(100); // 10Hz，亮 0.1 秒、滅 0.1 秒
 8000ce4:	2064      	movs	r0, #100	@ 0x64
 8000ce6:	f003 fff7 	bl	8004cd8 <osDelay>
	        for (int i = 0; i < 20; i++) { // 10Hz，閃爍 2 秒
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	3301      	adds	r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2b13      	cmp	r3, #19
 8000cf4:	ddf1      	ble.n	8000cda <StartTask01+0x2a>
	        }

	        osMutexRelease(ledMutex); // 釋放 Mutex
 8000cf6:	4b04      	ldr	r3, [pc, #16]	@ (8000d08 <StartTask01+0x58>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f004 f852 	bl	8004da4 <osMutexRelease>
	        osSemaphoreAcquire(semTimer, osWaitForever); // 等待計時器觸發
 8000d00:	e7da      	b.n	8000cb8 <StartTask01+0x8>
 8000d02:	bf00      	nop
 8000d04:	20000764 	.word	0x20000764
 8000d08:	2000075c 	.word	0x2000075c
 8000d0c:	48000400 	.word	0x48000400

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <Error_Handler+0x8>

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <HAL_MspInit+0x4c>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d26:	4a10      	ldr	r2, [pc, #64]	@ (8000d68 <HAL_MspInit+0x4c>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <HAL_MspInit+0x4c>)
 8000d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d68 <HAL_MspInit+0x4c>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d68 <HAL_MspInit+0x4c>)
 8000d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d46:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <HAL_MspInit+0x4c>)
 8000d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	210f      	movs	r1, #15
 8000d56:	f06f 0001 	mvn.w	r0, #1
 8000d5a:	f000 fc92 	bl	8001682 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000

08000d6c <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b0ac      	sub	sp, #176	@ 0xb0
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2288      	movs	r2, #136	@ 0x88
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f007 f91b 	bl	8007fc8 <memset>
  if(DFSDM1_Init == 0)
 8000d92:	4b25      	ldr	r3, [pc, #148]	@ (8000e28 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d142      	bne.n	8000e20 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000d9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d9e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4618      	mov	r0, r3
 8000dac:	f002 f946 	bl	800303c <HAL_RCCEx_PeriphCLKConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000db6:	f7ff ffab 	bl	8000d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000dba:	4b1c      	ldr	r3, [pc, #112]	@ (8000e2c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8000e2c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dc0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000dc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dc6:	4b19      	ldr	r3, [pc, #100]	@ (8000e2c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd2:	4b16      	ldr	r3, [pc, #88]	@ (8000e2c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd6:	4a15      	ldr	r2, [pc, #84]	@ (8000e2c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dd8:	f043 0310 	orr.w	r3, r3, #16
 8000ddc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dde:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de2:	f003 0310 	and.w	r3, r3, #16
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000dea:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000dee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e04:	2306      	movs	r3, #6
 8000e06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e0a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4807      	ldr	r0, [pc, #28]	@ (8000e30 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000e12:	f000 fd79 	bl	8001908 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000e16:	4b04      	ldr	r3, [pc, #16]	@ (8000e28 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	4a02      	ldr	r2, [pc, #8]	@ (8000e28 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e1e:	6013      	str	r3, [r2, #0]
  }

}
 8000e20:	bf00      	nop
 8000e22:	37b0      	adds	r7, #176	@ 0xb0
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000768 	.word	0x20000768
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	48001000 	.word	0x48001000

08000e34 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b0ac      	sub	sp, #176	@ 0xb0
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2288      	movs	r2, #136	@ 0x88
 8000e52:	2100      	movs	r1, #0
 8000e54:	4618      	mov	r0, r3
 8000e56:	f007 f8b7 	bl	8007fc8 <memset>
  if(hi2c->Instance==I2C2)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a21      	ldr	r2, [pc, #132]	@ (8000ee4 <HAL_I2C_MspInit+0xb0>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d13b      	bne.n	8000edc <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e64:	2380      	movs	r3, #128	@ 0x80
 8000e66:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4618      	mov	r0, r3
 8000e72:	f002 f8e3 	bl	800303c <HAL_RCCEx_PeriphCLKConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e7c:	f7ff ff48 	bl	8000d10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e80:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <HAL_I2C_MspInit+0xb4>)
 8000e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e84:	4a18      	ldr	r2, [pc, #96]	@ (8000ee8 <HAL_I2C_MspInit+0xb4>)
 8000e86:	f043 0302 	orr.w	r3, r3, #2
 8000e8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ee8 <HAL_I2C_MspInit+0xb4>)
 8000e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000e98:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea0:	2312      	movs	r3, #18
 8000ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480b      	ldr	r0, [pc, #44]	@ (8000eec <HAL_I2C_MspInit+0xb8>)
 8000ec0:	f000 fd22 	bl	8001908 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <HAL_I2C_MspInit+0xb4>)
 8000ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec8:	4a07      	ldr	r2, [pc, #28]	@ (8000ee8 <HAL_I2C_MspInit+0xb4>)
 8000eca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ece:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ed0:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <HAL_I2C_MspInit+0xb4>)
 8000ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000edc:	bf00      	nop
 8000ede:	37b0      	adds	r7, #176	@ 0xb0
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40005800 	.word	0x40005800
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	48000400 	.word	0x48000400

08000ef0 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	@ 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a17      	ldr	r2, [pc, #92]	@ (8000f6c <HAL_QSPI_MspInit+0x7c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d128      	bne.n	8000f64 <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f12:	4b17      	ldr	r3, [pc, #92]	@ (8000f70 <HAL_QSPI_MspInit+0x80>)
 8000f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f16:	4a16      	ldr	r2, [pc, #88]	@ (8000f70 <HAL_QSPI_MspInit+0x80>)
 8000f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f1c:	6513      	str	r3, [r2, #80]	@ 0x50
 8000f1e:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <HAL_QSPI_MspInit+0x80>)
 8000f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f2a:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <HAL_QSPI_MspInit+0x80>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2e:	4a10      	ldr	r2, [pc, #64]	@ (8000f70 <HAL_QSPI_MspInit+0x80>)
 8000f30:	f043 0310 	orr.w	r3, r3, #16
 8000f34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f36:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <HAL_QSPI_MspInit+0x80>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3a:	f003 0310 	and.w	r3, r3, #16
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000f42:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000f46:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f54:	230a      	movs	r3, #10
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <HAL_QSPI_MspInit+0x84>)
 8000f60:	f000 fcd2 	bl	8001908 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8000f64:	bf00      	nop
 8000f66:	3728      	adds	r7, #40	@ 0x28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	a0001000 	.word	0xa0001000
 8000f70:	40021000 	.word	0x40021000
 8000f74:	48001000 	.word	0x48001000

08000f78 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	@ 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a17      	ldr	r2, [pc, #92]	@ (8000ff4 <HAL_SPI_MspInit+0x7c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d128      	bne.n	8000fec <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <HAL_SPI_MspInit+0x80>)
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f9e:	4a16      	ldr	r2, [pc, #88]	@ (8000ff8 <HAL_SPI_MspInit+0x80>)
 8000fa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fa6:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <HAL_SPI_MspInit+0x80>)
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000faa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <HAL_SPI_MspInit+0x80>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb6:	4a10      	ldr	r2, [pc, #64]	@ (8000ff8 <HAL_SPI_MspInit+0x80>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <HAL_SPI_MspInit+0x80>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000fca:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fdc:	2306      	movs	r3, #6
 8000fde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <HAL_SPI_MspInit+0x84>)
 8000fe8:	f000 fc8e 	bl	8001908 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000fec:	bf00      	nop
 8000fee:	3728      	adds	r7, #40	@ 0x28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40003c00 	.word	0x40003c00
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	48000800 	.word	0x48000800

08001000 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b0ae      	sub	sp, #184	@ 0xb8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	2288      	movs	r2, #136	@ 0x88
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f006 ffd1 	bl	8007fc8 <memset>
  if(huart->Instance==USART1)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a42      	ldr	r2, [pc, #264]	@ (8001134 <HAL_UART_MspInit+0x134>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d13b      	bne.n	80010a8 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001030:	2301      	movs	r3, #1
 8001032:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001034:	2300      	movs	r3, #0
 8001036:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	4618      	mov	r0, r3
 800103e:	f001 fffd 	bl	800303c <HAL_RCCEx_PeriphCLKConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001048:	f7ff fe62 	bl	8000d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800104c:	4b3a      	ldr	r3, [pc, #232]	@ (8001138 <HAL_UART_MspInit+0x138>)
 800104e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001050:	4a39      	ldr	r2, [pc, #228]	@ (8001138 <HAL_UART_MspInit+0x138>)
 8001052:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001056:	6613      	str	r3, [r2, #96]	@ 0x60
 8001058:	4b37      	ldr	r3, [pc, #220]	@ (8001138 <HAL_UART_MspInit+0x138>)
 800105a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800105c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001060:	61bb      	str	r3, [r7, #24]
 8001062:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001064:	4b34      	ldr	r3, [pc, #208]	@ (8001138 <HAL_UART_MspInit+0x138>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001068:	4a33      	ldr	r2, [pc, #204]	@ (8001138 <HAL_UART_MspInit+0x138>)
 800106a:	f043 0302 	orr.w	r3, r3, #2
 800106e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001070:	4b31      	ldr	r3, [pc, #196]	@ (8001138 <HAL_UART_MspInit+0x138>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800107c:	23c0      	movs	r3, #192	@ 0xc0
 800107e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108e:	2303      	movs	r3, #3
 8001090:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001094:	2307      	movs	r3, #7
 8001096:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800109e:	4619      	mov	r1, r3
 80010a0:	4826      	ldr	r0, [pc, #152]	@ (800113c <HAL_UART_MspInit+0x13c>)
 80010a2:	f000 fc31 	bl	8001908 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80010a6:	e040      	b.n	800112a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a24      	ldr	r2, [pc, #144]	@ (8001140 <HAL_UART_MspInit+0x140>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d13b      	bne.n	800112a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010b2:	2304      	movs	r3, #4
 80010b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 ffbc 	bl	800303c <HAL_RCCEx_PeriphCLKConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_UART_MspInit+0xce>
      Error_Handler();
 80010ca:	f7ff fe21 	bl	8000d10 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001138 <HAL_UART_MspInit+0x138>)
 80010d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d2:	4a19      	ldr	r2, [pc, #100]	@ (8001138 <HAL_UART_MspInit+0x138>)
 80010d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010da:	4b17      	ldr	r3, [pc, #92]	@ (8001138 <HAL_UART_MspInit+0x138>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e6:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <HAL_UART_MspInit+0x138>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ea:	4a13      	ldr	r2, [pc, #76]	@ (8001138 <HAL_UART_MspInit+0x138>)
 80010ec:	f043 0308 	orr.w	r3, r3, #8
 80010f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f2:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <HAL_UART_MspInit+0x138>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f6:	f003 0308 	and.w	r3, r3, #8
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80010fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001102:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001118:	2307      	movs	r3, #7
 800111a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800111e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001122:	4619      	mov	r1, r3
 8001124:	4807      	ldr	r0, [pc, #28]	@ (8001144 <HAL_UART_MspInit+0x144>)
 8001126:	f000 fbef 	bl	8001908 <HAL_GPIO_Init>
}
 800112a:	bf00      	nop
 800112c:	37b8      	adds	r7, #184	@ 0xb8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40013800 	.word	0x40013800
 8001138:	40021000 	.word	0x40021000
 800113c:	48000400 	.word	0x48000400
 8001140:	40004800 	.word	0x40004800
 8001144:	48000c00 	.word	0x48000c00

08001148 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b0ac      	sub	sp, #176	@ 0xb0
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2288      	movs	r2, #136	@ 0x88
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f006 ff2d 	bl	8007fc8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001176:	d17c      	bne.n	8001272 <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001178:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800117c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800117e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001182:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001186:	2301      	movs	r3, #1
 8001188:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800118a:	2301      	movs	r3, #1
 800118c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800118e:	2318      	movs	r3, #24
 8001190:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001192:	2307      	movs	r3, #7
 8001194:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001196:	2302      	movs	r3, #2
 8001198:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800119a:	2302      	movs	r3, #2
 800119c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800119e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80011a2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 ff47 	bl	800303c <HAL_RCCEx_PeriphCLKConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80011b4:	f7ff fdac 	bl	8000d10 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	4b30      	ldr	r3, [pc, #192]	@ (800127c <HAL_PCD_MspInit+0x134>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011bc:	4a2f      	ldr	r2, [pc, #188]	@ (800127c <HAL_PCD_MspInit+0x134>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c4:	4b2d      	ldr	r3, [pc, #180]	@ (800127c <HAL_PCD_MspInit+0x134>)
 80011c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80011d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d8:	2300      	movs	r3, #0
 80011da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ee:	f000 fb8b 	bl	8001908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80011f2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80011f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800120c:	230a      	movs	r3, #10
 800120e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001216:	4619      	mov	r1, r3
 8001218:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800121c:	f000 fb74 	bl	8001908 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001220:	4b16      	ldr	r3, [pc, #88]	@ (800127c <HAL_PCD_MspInit+0x134>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001224:	4a15      	ldr	r2, [pc, #84]	@ (800127c <HAL_PCD_MspInit+0x134>)
 8001226:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800122a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122c:	4b13      	ldr	r3, [pc, #76]	@ (800127c <HAL_PCD_MspInit+0x134>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001230:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001238:	4b10      	ldr	r3, [pc, #64]	@ (800127c <HAL_PCD_MspInit+0x134>)
 800123a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d114      	bne.n	800126e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001244:	4b0d      	ldr	r3, [pc, #52]	@ (800127c <HAL_PCD_MspInit+0x134>)
 8001246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001248:	4a0c      	ldr	r2, [pc, #48]	@ (800127c <HAL_PCD_MspInit+0x134>)
 800124a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001250:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <HAL_PCD_MspInit+0x134>)
 8001252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800125c:	f001 f822 	bl	80022a4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_PCD_MspInit+0x134>)
 8001262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001264:	4a05      	ldr	r2, [pc, #20]	@ (800127c <HAL_PCD_MspInit+0x134>)
 8001266:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800126a:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800126c:	e001      	b.n	8001272 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800126e:	f001 f819 	bl	80022a4 <HAL_PWREx_EnableVddUSB>
}
 8001272:	bf00      	nop
 8001274:	37b0      	adds	r7, #176	@ 0xb0
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000

08001280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <NMI_Handler+0x4>

08001288 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <HardFault_Handler+0x4>

08001290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <MemManage_Handler+0x4>

08001298 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <BusFault_Handler+0x4>

080012a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <UsageFault_Handler+0x4>

080012a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ba:	f000 f8c3 	bl	8001444 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80012be:	f005 fd07 	bl	8006cd0 <xTaskGetSchedulerState>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d001      	beq.n	80012cc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80012c8:	f006 fbfe 	bl	8007ac8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80012d4:	2020      	movs	r0, #32
 80012d6:	f000 fcf3 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80012da:	2040      	movs	r0, #64	@ 0x40
 80012dc:	f000 fcf0 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80012e0:	2080      	movs	r0, #128	@ 0x80
 80012e2:	f000 fced 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80012e6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80012ea:	f000 fce9 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80012f6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80012fa:	f000 fce1 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80012fe:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001302:	f000 fcdd 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001306:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800130a:	f000 fcd9 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800130e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001312:	f000 fcd5 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001316:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800131a:	f000 fcd1 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <SystemInit+0x20>)
 800132a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800132e:	4a05      	ldr	r2, [pc, #20]	@ (8001344 <SystemInit+0x20>)
 8001330:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001334:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001348:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001380 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800134c:	f7ff ffea 	bl	8001324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001350:	480c      	ldr	r0, [pc, #48]	@ (8001384 <LoopForever+0x6>)
  ldr r1, =_edata
 8001352:	490d      	ldr	r1, [pc, #52]	@ (8001388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001354:	4a0d      	ldr	r2, [pc, #52]	@ (800138c <LoopForever+0xe>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001358:	e002      	b.n	8001360 <LoopCopyDataInit>

0800135a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800135c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135e:	3304      	adds	r3, #4

08001360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001364:	d3f9      	bcc.n	800135a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001366:	4a0a      	ldr	r2, [pc, #40]	@ (8001390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001368:	4c0a      	ldr	r4, [pc, #40]	@ (8001394 <LoopForever+0x16>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800136c:	e001      	b.n	8001372 <LoopFillZerobss>

0800136e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001370:	3204      	adds	r2, #4

08001372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001374:	d3fb      	bcc.n	800136e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001376:	f006 fe2f 	bl	8007fd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800137a:	f7ff f8bf 	bl	80004fc <main>

0800137e <LoopForever>:

LoopForever:
    b LoopForever
 800137e:	e7fe      	b.n	800137e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001380:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001388:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800138c:	08008124 	.word	0x08008124
  ldr r2, =_sbss
 8001390:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001394:	2000209c 	.word	0x2000209c

08001398 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001398:	e7fe      	b.n	8001398 <ADC1_2_IRQHandler>

0800139a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a4:	2003      	movs	r0, #3
 80013a6:	f000 f961 	bl	800166c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013aa:	200f      	movs	r0, #15
 80013ac:	f000 f80e 	bl	80013cc <HAL_InitTick>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d002      	beq.n	80013bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	71fb      	strb	r3, [r7, #7]
 80013ba:	e001      	b.n	80013c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013bc:	f7ff fcae 	bl	8000d1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013c0:	79fb      	ldrb	r3, [r7, #7]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013d8:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <HAL_InitTick+0x6c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d023      	beq.n	8001428 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013e0:	4b16      	ldr	r3, [pc, #88]	@ (800143c <HAL_InitTick+0x70>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b14      	ldr	r3, [pc, #80]	@ (8001438 <HAL_InitTick+0x6c>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f96d 	bl	80016d6 <HAL_SYSTICK_Config>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10f      	bne.n	8001422 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b0f      	cmp	r3, #15
 8001406:	d809      	bhi.n	800141c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001408:	2200      	movs	r2, #0
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
 8001410:	f000 f937 	bl	8001682 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001414:	4a0a      	ldr	r2, [pc, #40]	@ (8001440 <HAL_InitTick+0x74>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e007      	b.n	800142c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	e004      	b.n	800142c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	e001      	b.n	800142c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800142c:	7bfb      	ldrb	r3, [r7, #15]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000008 	.word	0x20000008
 800143c:	20000000 	.word	0x20000000
 8001440:	20000004 	.word	0x20000004

08001444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <HAL_IncTick+0x20>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <HAL_IncTick+0x24>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4413      	add	r3, r2
 8001454:	4a04      	ldr	r2, [pc, #16]	@ (8001468 <HAL_IncTick+0x24>)
 8001456:	6013      	str	r3, [r2, #0]
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000008 	.word	0x20000008
 8001468:	2000076c 	.word	0x2000076c

0800146c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return uwTick;
 8001470:	4b03      	ldr	r3, [pc, #12]	@ (8001480 <HAL_GetTick+0x14>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	2000076c 	.word	0x2000076c

08001484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800148c:	f7ff ffee 	bl	800146c <HAL_GetTick>
 8001490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149c:	d005      	beq.n	80014aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800149e:	4b0a      	ldr	r3, [pc, #40]	@ (80014c8 <HAL_Delay+0x44>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4413      	add	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014aa:	bf00      	nop
 80014ac:	f7ff ffde 	bl	800146c <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d8f7      	bhi.n	80014ac <HAL_Delay+0x28>
  {
  }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000008 	.word	0x20000008

080014cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <__NVIC_SetPriorityGrouping+0x44>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014e8:	4013      	ands	r3, r2
 80014ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fe:	4a04      	ldr	r2, [pc, #16]	@ (8001510 <__NVIC_SetPriorityGrouping+0x44>)
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	60d3      	str	r3, [r2, #12]
}
 8001504:	bf00      	nop
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001518:	4b04      	ldr	r3, [pc, #16]	@ (800152c <__NVIC_GetPriorityGrouping+0x18>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	0a1b      	lsrs	r3, r3, #8
 800151e:	f003 0307 	and.w	r3, r3, #7
}
 8001522:	4618      	mov	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	2b00      	cmp	r3, #0
 8001540:	db0b      	blt.n	800155a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	f003 021f 	and.w	r2, r3, #31
 8001548:	4907      	ldr	r1, [pc, #28]	@ (8001568 <__NVIC_EnableIRQ+0x38>)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	095b      	lsrs	r3, r3, #5
 8001550:	2001      	movs	r0, #1
 8001552:	fa00 f202 	lsl.w	r2, r0, r2
 8001556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000e100 	.word	0xe000e100

0800156c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	2b00      	cmp	r3, #0
 800157e:	db0a      	blt.n	8001596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	490c      	ldr	r1, [pc, #48]	@ (80015b8 <__NVIC_SetPriority+0x4c>)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	0112      	lsls	r2, r2, #4
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	440b      	add	r3, r1
 8001590:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001594:	e00a      	b.n	80015ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4908      	ldr	r1, [pc, #32]	@ (80015bc <__NVIC_SetPriority+0x50>)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	3b04      	subs	r3, #4
 80015a4:	0112      	lsls	r2, r2, #4
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	761a      	strb	r2, [r3, #24]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000e100 	.word	0xe000e100
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	@ 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f1c3 0307 	rsb	r3, r3, #7
 80015da:	2b04      	cmp	r3, #4
 80015dc:	bf28      	it	cs
 80015de:	2304      	movcs	r3, #4
 80015e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3304      	adds	r3, #4
 80015e6:	2b06      	cmp	r3, #6
 80015e8:	d902      	bls.n	80015f0 <NVIC_EncodePriority+0x30>
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3b03      	subs	r3, #3
 80015ee:	e000      	b.n	80015f2 <NVIC_EncodePriority+0x32>
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	f04f 32ff 	mov.w	r2, #4294967295
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	401a      	ands	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001608:	f04f 31ff 	mov.w	r1, #4294967295
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	43d9      	mvns	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	4313      	orrs	r3, r2
         );
}
 800161a:	4618      	mov	r0, r3
 800161c:	3724      	adds	r7, #36	@ 0x24
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001638:	d301      	bcc.n	800163e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163a:	2301      	movs	r3, #1
 800163c:	e00f      	b.n	800165e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163e:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <SysTick_Config+0x40>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001646:	210f      	movs	r1, #15
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	f7ff ff8e 	bl	800156c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001650:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <SysTick_Config+0x40>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001656:	4b04      	ldr	r3, [pc, #16]	@ (8001668 <SysTick_Config+0x40>)
 8001658:	2207      	movs	r2, #7
 800165a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	e000e010 	.word	0xe000e010

0800166c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ff29 	bl	80014cc <__NVIC_SetPriorityGrouping>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
 800168e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001694:	f7ff ff3e 	bl	8001514 <__NVIC_GetPriorityGrouping>
 8001698:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	6978      	ldr	r0, [r7, #20]
 80016a0:	f7ff ff8e 	bl	80015c0 <NVIC_EncodePriority>
 80016a4:	4602      	mov	r2, r0
 80016a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff5d 	bl	800156c <__NVIC_SetPriority>
}
 80016b2:	bf00      	nop
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff31 	bl	8001530 <__NVIC_EnableIRQ>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ffa2 	bl	8001628 <SysTick_Config>
 80016e4:	4603      	mov	r3, r0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e0ac      	b.n	800185c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f8b2 	bl	8001870 <DFSDM_GetChannelFromInstance>
 800170c:	4603      	mov	r3, r0
 800170e:	4a55      	ldr	r2, [pc, #340]	@ (8001864 <HAL_DFSDM_ChannelInit+0x174>)
 8001710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e09f      	b.n	800185c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff fb25 	bl	8000d6c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001722:	4b51      	ldr	r3, [pc, #324]	@ (8001868 <HAL_DFSDM_ChannelInit+0x178>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	4a4f      	ldr	r2, [pc, #316]	@ (8001868 <HAL_DFSDM_ChannelInit+0x178>)
 800172a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800172c:	4b4e      	ldr	r3, [pc, #312]	@ (8001868 <HAL_DFSDM_ChannelInit+0x178>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d125      	bne.n	8001780 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001734:	4b4d      	ldr	r3, [pc, #308]	@ (800186c <HAL_DFSDM_ChannelInit+0x17c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a4c      	ldr	r2, [pc, #304]	@ (800186c <HAL_DFSDM_ChannelInit+0x17c>)
 800173a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800173e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001740:	4b4a      	ldr	r3, [pc, #296]	@ (800186c <HAL_DFSDM_ChannelInit+0x17c>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	4948      	ldr	r1, [pc, #288]	@ (800186c <HAL_DFSDM_ChannelInit+0x17c>)
 800174a:	4313      	orrs	r3, r2
 800174c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800174e:	4b47      	ldr	r3, [pc, #284]	@ (800186c <HAL_DFSDM_ChannelInit+0x17c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a46      	ldr	r2, [pc, #280]	@ (800186c <HAL_DFSDM_ChannelInit+0x17c>)
 8001754:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001758:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	791b      	ldrb	r3, [r3, #4]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d108      	bne.n	8001774 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001762:	4b42      	ldr	r3, [pc, #264]	@ (800186c <HAL_DFSDM_ChannelInit+0x17c>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	3b01      	subs	r3, #1
 800176c:	041b      	lsls	r3, r3, #16
 800176e:	493f      	ldr	r1, [pc, #252]	@ (800186c <HAL_DFSDM_ChannelInit+0x17c>)
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001774:	4b3d      	ldr	r3, [pc, #244]	@ (800186c <HAL_DFSDM_ChannelInit+0x17c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a3c      	ldr	r2, [pc, #240]	@ (800186c <HAL_DFSDM_ChannelInit+0x17c>)
 800177a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800177e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 800178e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6819      	ldr	r1, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800179e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80017a4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 020f 	bic.w	r2, r2, #15
 80017bc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6819      	ldr	r1, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80017e4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6899      	ldr	r1, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f4:	3b01      	subs	r3, #1
 80017f6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f002 0207 	and.w	r2, r2, #7
 8001810:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6859      	ldr	r1, [r3, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800181c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	430a      	orrs	r2, r1
 800182c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800183c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f810 	bl	8001870 <DFSDM_GetChannelFromInstance>
 8001850:	4602      	mov	r2, r0
 8001852:	4904      	ldr	r1, [pc, #16]	@ (8001864 <HAL_DFSDM_ChannelInit+0x174>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000774 	.word	0x20000774
 8001868:	20000770 	.word	0x20000770
 800186c:	40016000 	.word	0x40016000

08001870 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a1c      	ldr	r2, [pc, #112]	@ (80018ec <DFSDM_GetChannelFromInstance+0x7c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d102      	bne.n	8001886 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	e02b      	b.n	80018de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a19      	ldr	r2, [pc, #100]	@ (80018f0 <DFSDM_GetChannelFromInstance+0x80>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d102      	bne.n	8001894 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800188e:	2301      	movs	r3, #1
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	e024      	b.n	80018de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a17      	ldr	r2, [pc, #92]	@ (80018f4 <DFSDM_GetChannelFromInstance+0x84>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d102      	bne.n	80018a2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800189c:	2302      	movs	r3, #2
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	e01d      	b.n	80018de <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a14      	ldr	r2, [pc, #80]	@ (80018f8 <DFSDM_GetChannelFromInstance+0x88>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d102      	bne.n	80018b0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80018aa:	2304      	movs	r3, #4
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	e016      	b.n	80018de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a12      	ldr	r2, [pc, #72]	@ (80018fc <DFSDM_GetChannelFromInstance+0x8c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d102      	bne.n	80018be <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80018b8:	2305      	movs	r3, #5
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	e00f      	b.n	80018de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001900 <DFSDM_GetChannelFromInstance+0x90>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d102      	bne.n	80018cc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80018c6:	2306      	movs	r3, #6
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	e008      	b.n	80018de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001904 <DFSDM_GetChannelFromInstance+0x94>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d102      	bne.n	80018da <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80018d4:	2307      	movs	r3, #7
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	e001      	b.n	80018de <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80018da:	2303      	movs	r3, #3
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	40016000 	.word	0x40016000
 80018f0:	40016020 	.word	0x40016020
 80018f4:	40016040 	.word	0x40016040
 80018f8:	40016080 	.word	0x40016080
 80018fc:	400160a0 	.word	0x400160a0
 8001900:	400160c0 	.word	0x400160c0
 8001904:	400160e0 	.word	0x400160e0

08001908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001916:	e17f      	b.n	8001c18 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	2101      	movs	r1, #1
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	4013      	ands	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 8171 	beq.w	8001c12 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	2b01      	cmp	r3, #1
 800193a:	d005      	beq.n	8001948 <HAL_GPIO_Init+0x40>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d130      	bne.n	80019aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	2203      	movs	r2, #3
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800197e:	2201      	movs	r2, #1
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	091b      	lsrs	r3, r3, #4
 8001994:	f003 0201 	and.w	r2, r3, #1
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	d118      	bne.n	80019e8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019bc:	2201      	movs	r2, #1
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	08db      	lsrs	r3, r3, #3
 80019d2:	f003 0201 	and.w	r2, r3, #1
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d017      	beq.n	8001a24 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d123      	bne.n	8001a78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	08da      	lsrs	r2, r3, #3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3208      	adds	r2, #8
 8001a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	220f      	movs	r2, #15
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	691a      	ldr	r2, [r3, #16]
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	08da      	lsrs	r2, r3, #3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3208      	adds	r2, #8
 8001a72:	6939      	ldr	r1, [r7, #16]
 8001a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0203 	and.w	r2, r3, #3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80ac 	beq.w	8001c12 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	4b5f      	ldr	r3, [pc, #380]	@ (8001c38 <HAL_GPIO_Init+0x330>)
 8001abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001abe:	4a5e      	ldr	r2, [pc, #376]	@ (8001c38 <HAL_GPIO_Init+0x330>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ac6:	4b5c      	ldr	r3, [pc, #368]	@ (8001c38 <HAL_GPIO_Init+0x330>)
 8001ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ad2:	4a5a      	ldr	r2, [pc, #360]	@ (8001c3c <HAL_GPIO_Init+0x334>)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	089b      	lsrs	r3, r3, #2
 8001ad8:	3302      	adds	r3, #2
 8001ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	220f      	movs	r2, #15
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001afc:	d025      	beq.n	8001b4a <HAL_GPIO_Init+0x242>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a4f      	ldr	r2, [pc, #316]	@ (8001c40 <HAL_GPIO_Init+0x338>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d01f      	beq.n	8001b46 <HAL_GPIO_Init+0x23e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a4e      	ldr	r2, [pc, #312]	@ (8001c44 <HAL_GPIO_Init+0x33c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d019      	beq.n	8001b42 <HAL_GPIO_Init+0x23a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4d      	ldr	r2, [pc, #308]	@ (8001c48 <HAL_GPIO_Init+0x340>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d013      	beq.n	8001b3e <HAL_GPIO_Init+0x236>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4c      	ldr	r2, [pc, #304]	@ (8001c4c <HAL_GPIO_Init+0x344>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00d      	beq.n	8001b3a <HAL_GPIO_Init+0x232>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4b      	ldr	r2, [pc, #300]	@ (8001c50 <HAL_GPIO_Init+0x348>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d007      	beq.n	8001b36 <HAL_GPIO_Init+0x22e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4a      	ldr	r2, [pc, #296]	@ (8001c54 <HAL_GPIO_Init+0x34c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d101      	bne.n	8001b32 <HAL_GPIO_Init+0x22a>
 8001b2e:	2306      	movs	r3, #6
 8001b30:	e00c      	b.n	8001b4c <HAL_GPIO_Init+0x244>
 8001b32:	2307      	movs	r3, #7
 8001b34:	e00a      	b.n	8001b4c <HAL_GPIO_Init+0x244>
 8001b36:	2305      	movs	r3, #5
 8001b38:	e008      	b.n	8001b4c <HAL_GPIO_Init+0x244>
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	e006      	b.n	8001b4c <HAL_GPIO_Init+0x244>
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e004      	b.n	8001b4c <HAL_GPIO_Init+0x244>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e002      	b.n	8001b4c <HAL_GPIO_Init+0x244>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <HAL_GPIO_Init+0x244>
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	f002 0203 	and.w	r2, r2, #3
 8001b52:	0092      	lsls	r2, r2, #2
 8001b54:	4093      	lsls	r3, r2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b5c:	4937      	ldr	r1, [pc, #220]	@ (8001c3c <HAL_GPIO_Init+0x334>)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	089b      	lsrs	r3, r3, #2
 8001b62:	3302      	adds	r3, #2
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c58 <HAL_GPIO_Init+0x350>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b8e:	4a32      	ldr	r2, [pc, #200]	@ (8001c58 <HAL_GPIO_Init+0x350>)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b94:	4b30      	ldr	r3, [pc, #192]	@ (8001c58 <HAL_GPIO_Init+0x350>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bb8:	4a27      	ldr	r2, [pc, #156]	@ (8001c58 <HAL_GPIO_Init+0x350>)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bbe:	4b26      	ldr	r3, [pc, #152]	@ (8001c58 <HAL_GPIO_Init+0x350>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001be2:	4a1d      	ldr	r2, [pc, #116]	@ (8001c58 <HAL_GPIO_Init+0x350>)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001be8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c58 <HAL_GPIO_Init+0x350>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c0c:	4a12      	ldr	r2, [pc, #72]	@ (8001c58 <HAL_GPIO_Init+0x350>)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	3301      	adds	r3, #1
 8001c16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f47f ae78 	bne.w	8001918 <HAL_GPIO_Init+0x10>
  }
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	371c      	adds	r7, #28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	48000400 	.word	0x48000400
 8001c44:	48000800 	.word	0x48000800
 8001c48:	48000c00 	.word	0x48000c00
 8001c4c:	48001000 	.word	0x48001000
 8001c50:	48001400 	.word	0x48001400
 8001c54:	48001800 	.word	0x48001800
 8001c58:	40010400 	.word	0x40010400

08001c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c6c:	787b      	ldrb	r3, [r7, #1]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c78:	e002      	b.n	8001c80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c7a:	887a      	ldrh	r2, [r7, #2]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	041a      	lsls	r2, r3, #16
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	43d9      	mvns	r1, r3
 8001caa:	887b      	ldrh	r3, [r7, #2]
 8001cac:	400b      	ands	r3, r1
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	619a      	str	r2, [r3, #24]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cca:	4b08      	ldr	r3, [pc, #32]	@ (8001cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d006      	beq.n	8001ce4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cd6:	4a05      	ldr	r2, [pc, #20]	@ (8001cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe ffb0 	bl	8000c44 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40010400 	.word	0x40010400

08001cf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e08d      	b.n	8001e1e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d106      	bne.n	8001d1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff f88c 	bl	8000e34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2224      	movs	r2, #36	@ 0x24
 8001d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0201 	bic.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d107      	bne.n	8001d6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	e006      	b.n	8001d78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001d76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d108      	bne.n	8001d92 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	e007      	b.n	8001da2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001da0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001db0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001db4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691a      	ldr	r2, [r3, #16]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69d9      	ldr	r1, [r3, #28]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1a      	ldr	r2, [r3, #32]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2220      	movs	r2, #32
 8001e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b20      	cmp	r3, #32
 8001e3a:	d138      	bne.n	8001eae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e032      	b.n	8001eb0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2224      	movs	r2, #36	@ 0x24
 8001e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0201 	bic.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e78:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6819      	ldr	r1, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0201 	orr.w	r2, r2, #1
 8001e98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	e000      	b.n	8001eb0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001eae:	2302      	movs	r3, #2
  }
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b20      	cmp	r3, #32
 8001ed0:	d139      	bne.n	8001f46 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e033      	b.n	8001f48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2224      	movs	r2, #36	@ 0x24
 8001eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0201 	bic.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f0e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	021b      	lsls	r3, r3, #8
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 0201 	orr.w	r2, r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2220      	movs	r2, #32
 8001f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e000      	b.n	8001f48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f46:	2302      	movs	r3, #2
  }
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af02      	add	r7, sp, #8
 8001f5a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e101      	b.n	800216a <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff f8e4 	bl	8001148 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2203      	movs	r2, #3
 8001f84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f002 fb10 	bl	80045b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7c1a      	ldrb	r2, [r3, #16]
 8001fa0:	f88d 2000 	strb.w	r2, [sp]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa8:	f002 fad9 	bl	800455e <USB_CoreInit>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d005      	beq.n	8001fbe <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e0d5      	b.n	800216a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f002 fb08 	bl	80045da <USB_SetCurrentMode>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0c6      	b.n	800216a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fdc:	2300      	movs	r3, #0
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	e04a      	b.n	8002078 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4413      	add	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	3315      	adds	r3, #21
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	3314      	adds	r3, #20
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	b298      	uxth	r0, r3
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	332e      	adds	r3, #46	@ 0x2e
 800201e:	4602      	mov	r2, r0
 8002020:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	3318      	adds	r3, #24
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002036:	7bfa      	ldrb	r2, [r7, #15]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4413      	add	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	331c      	adds	r3, #28
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800204a:	7bfa      	ldrb	r2, [r7, #15]
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	3320      	adds	r3, #32
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800205e:	7bfa      	ldrb	r2, [r7, #15]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	3324      	adds	r3, #36	@ 0x24
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	3301      	adds	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	791b      	ldrb	r3, [r3, #4]
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	429a      	cmp	r2, r3
 8002080:	d3af      	bcc.n	8001fe2 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]
 8002086:	e044      	b.n	8002112 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002088:	7bfa      	ldrb	r2, [r7, #15]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80020b0:	7bfa      	ldrb	r2, [r7, #15]
 80020b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4413      	add	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	3301      	adds	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	791b      	ldrb	r3, [r3, #4]
 8002116:	7bfa      	ldrb	r2, [r7, #15]
 8002118:	429a      	cmp	r2, r3
 800211a:	d3b5      	bcc.n	8002088 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	7c1a      	ldrb	r2, [r3, #16]
 8002124:	f88d 2000 	strb.w	r2, [sp]
 8002128:	3304      	adds	r3, #4
 800212a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800212c:	f002 faa2 	bl	8004674 <USB_DevInit>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d005      	beq.n	8002142 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2202      	movs	r2, #2
 800213a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e013      	b.n	800216a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	7b1b      	ldrb	r3, [r3, #12]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d102      	bne.n	800215e <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f80a 	bl	8002172 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f002 fc47 	bl	80049f6 <USB_DevDisconnect>

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002172:	b480      	push	{r7}
 8002174:	b085      	sub	sp, #20
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021a4:	f043 0303 	orr.w	r3, r3, #3
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021c0:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a04      	ldr	r2, [pc, #16]	@ (80021d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ca:	6013      	str	r3, [r2, #0]
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40007000 	.word	0x40007000

080021dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021e0:	4b04      	ldr	r3, [pc, #16]	@ (80021f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40007000 	.word	0x40007000

080021f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002206:	d130      	bne.n	800226a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002208:	4b23      	ldr	r3, [pc, #140]	@ (8002298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002210:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002214:	d038      	beq.n	8002288 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002216:	4b20      	ldr	r3, [pc, #128]	@ (8002298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800221e:	4a1e      	ldr	r2, [pc, #120]	@ (8002298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002220:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002224:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002226:	4b1d      	ldr	r3, [pc, #116]	@ (800229c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2232      	movs	r2, #50	@ 0x32
 800222c:	fb02 f303 	mul.w	r3, r2, r3
 8002230:	4a1b      	ldr	r2, [pc, #108]	@ (80022a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002232:	fba2 2303 	umull	r2, r3, r2, r3
 8002236:	0c9b      	lsrs	r3, r3, #18
 8002238:	3301      	adds	r3, #1
 800223a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800223c:	e002      	b.n	8002244 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3b01      	subs	r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002244:	4b14      	ldr	r3, [pc, #80]	@ (8002298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800224c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002250:	d102      	bne.n	8002258 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1f2      	bne.n	800223e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002258:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002264:	d110      	bne.n	8002288 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e00f      	b.n	800228a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800226a:	4b0b      	ldr	r3, [pc, #44]	@ (8002298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002276:	d007      	beq.n	8002288 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002278:	4b07      	ldr	r3, [pc, #28]	@ (8002298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002280:	4a05      	ldr	r2, [pc, #20]	@ (8002298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002282:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002286:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40007000 	.word	0x40007000
 800229c:	20000000 	.word	0x20000000
 80022a0:	431bde83 	.word	0x431bde83

080022a4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80022a8:	4b05      	ldr	r3, [pc, #20]	@ (80022c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4a04      	ldr	r2, [pc, #16]	@ (80022c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80022ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022b2:	6053      	str	r3, [r2, #4]
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40007000 	.word	0x40007000

080022c4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80022cc:	f7ff f8ce 	bl	800146c <HAL_GetTick>
 80022d0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e063      	b.n	80023a4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10b      	bne.n	8002300 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7fe fdfd 	bl	8000ef0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80022f6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f858 	bl	80023b0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	3b01      	subs	r3, #1
 8002310:	021a      	lsls	r2, r3, #8
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	2120      	movs	r1, #32
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f850 	bl	80023cc <QSPI_WaitFlagStateUntilTimeout>
 800232c:	4603      	mov	r3, r0
 800232e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002330:	7afb      	ldrb	r3, [r7, #11]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d131      	bne.n	800239a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002340:	f023 0310 	bic.w	r3, r3, #16
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6852      	ldr	r2, [r2, #4]
 8002348:	0611      	lsls	r1, r2, #24
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68d2      	ldr	r2, [r2, #12]
 800234e:	4311      	orrs	r1, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	430b      	orrs	r3, r1
 8002356:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <HAL_QSPI_Init+0xe8>)
 8002360:	4013      	ands	r3, r2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6912      	ldr	r2, [r2, #16]
 8002366:	0411      	lsls	r1, r2, #16
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6952      	ldr	r2, [r2, #20]
 800236c:	4311      	orrs	r1, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6992      	ldr	r2, [r2, #24]
 8002372:	4311      	orrs	r1, r2
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	430b      	orrs	r3, r1
 800237a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80023a2:	7afb      	ldrb	r3, [r7, #11]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	ffe0f8fe 	.word	0xffe0f8fe

080023b0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	4613      	mov	r3, r2
 80023da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80023dc:	e01a      	b.n	8002414 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e4:	d016      	beq.n	8002414 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e6:	f7ff f841 	bl	800146c <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d302      	bcc.n	80023fc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10b      	bne.n	8002414 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2204      	movs	r2, #4
 8002400:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002408:	f043 0201 	orr.w	r2, r3, #1
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e00e      	b.n	8002432 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	4013      	ands	r3, r2
 800241e:	2b00      	cmp	r3, #0
 8002420:	bf14      	ite	ne
 8002422:	2301      	movne	r3, #1
 8002424:	2300      	moveq	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	429a      	cmp	r2, r3
 800242e:	d1d6      	bne.n	80023de <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e3ca      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800244e:	4b97      	ldr	r3, [pc, #604]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002458:	4b94      	ldr	r3, [pc, #592]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0310 	and.w	r3, r3, #16
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 80e4 	beq.w	8002638 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <HAL_RCC_OscConfig+0x4a>
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	2b0c      	cmp	r3, #12
 800247a:	f040 808b 	bne.w	8002594 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2b01      	cmp	r3, #1
 8002482:	f040 8087 	bne.w	8002594 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002486:	4b89      	ldr	r3, [pc, #548]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <HAL_RCC_OscConfig+0x62>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e3a2      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1a      	ldr	r2, [r3, #32]
 80024a2:	4b82      	ldr	r3, [pc, #520]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d004      	beq.n	80024b8 <HAL_RCC_OscConfig+0x7c>
 80024ae:	4b7f      	ldr	r3, [pc, #508]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024b6:	e005      	b.n	80024c4 <HAL_RCC_OscConfig+0x88>
 80024b8:	4b7c      	ldr	r3, [pc, #496]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 80024ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024be:	091b      	lsrs	r3, r3, #4
 80024c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d223      	bcs.n	8002510 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 fd55 	bl	8002f7c <RCC_SetFlashLatencyFromMSIRange>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e383      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024dc:	4b73      	ldr	r3, [pc, #460]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a72      	ldr	r2, [pc, #456]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 80024e2:	f043 0308 	orr.w	r3, r3, #8
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	4b70      	ldr	r3, [pc, #448]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	496d      	ldr	r1, [pc, #436]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024fa:	4b6c      	ldr	r3, [pc, #432]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	021b      	lsls	r3, r3, #8
 8002508:	4968      	ldr	r1, [pc, #416]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 800250a:	4313      	orrs	r3, r2
 800250c:	604b      	str	r3, [r1, #4]
 800250e:	e025      	b.n	800255c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002510:	4b66      	ldr	r3, [pc, #408]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a65      	ldr	r2, [pc, #404]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 8002516:	f043 0308 	orr.w	r3, r3, #8
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b63      	ldr	r3, [pc, #396]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	4960      	ldr	r1, [pc, #384]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800252e:	4b5f      	ldr	r3, [pc, #380]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	021b      	lsls	r3, r3, #8
 800253c:	495b      	ldr	r1, [pc, #364]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 800253e:	4313      	orrs	r3, r2
 8002540:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d109      	bne.n	800255c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fd15 	bl	8002f7c <RCC_SetFlashLatencyFromMSIRange>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e343      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800255c:	f000 fc4a 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8002560:	4602      	mov	r2, r0
 8002562:	4b52      	ldr	r3, [pc, #328]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	4950      	ldr	r1, [pc, #320]	@ (80026b0 <HAL_RCC_OscConfig+0x274>)
 800256e:	5ccb      	ldrb	r3, [r1, r3]
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
 8002578:	4a4e      	ldr	r2, [pc, #312]	@ (80026b4 <HAL_RCC_OscConfig+0x278>)
 800257a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800257c:	4b4e      	ldr	r3, [pc, #312]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe ff23 	bl	80013cc <HAL_InitTick>
 8002586:	4603      	mov	r3, r0
 8002588:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d052      	beq.n	8002636 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002590:	7bfb      	ldrb	r3, [r7, #15]
 8002592:	e327      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d032      	beq.n	8002602 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800259c:	4b43      	ldr	r3, [pc, #268]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a42      	ldr	r2, [pc, #264]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025a8:	f7fe ff60 	bl	800146c <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025b0:	f7fe ff5c 	bl	800146c <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e310      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025c2:	4b3a      	ldr	r3, [pc, #232]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025ce:	4b37      	ldr	r3, [pc, #220]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a36      	ldr	r2, [pc, #216]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 80025d4:	f043 0308 	orr.w	r3, r3, #8
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	4b34      	ldr	r3, [pc, #208]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	4931      	ldr	r1, [pc, #196]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ec:	4b2f      	ldr	r3, [pc, #188]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	492c      	ldr	r1, [pc, #176]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
 8002600:	e01a      	b.n	8002638 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002602:	4b2a      	ldr	r3, [pc, #168]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a29      	ldr	r2, [pc, #164]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 8002608:	f023 0301 	bic.w	r3, r3, #1
 800260c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800260e:	f7fe ff2d 	bl	800146c <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002616:	f7fe ff29 	bl	800146c <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e2dd      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002628:	4b20      	ldr	r3, [pc, #128]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f0      	bne.n	8002616 <HAL_RCC_OscConfig+0x1da>
 8002634:	e000      	b.n	8002638 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002636:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d074      	beq.n	800272e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	2b08      	cmp	r3, #8
 8002648:	d005      	beq.n	8002656 <HAL_RCC_OscConfig+0x21a>
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	2b0c      	cmp	r3, #12
 800264e:	d10e      	bne.n	800266e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2b03      	cmp	r3, #3
 8002654:	d10b      	bne.n	800266e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002656:	4b15      	ldr	r3, [pc, #84]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d064      	beq.n	800272c <HAL_RCC_OscConfig+0x2f0>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d160      	bne.n	800272c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e2ba      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002676:	d106      	bne.n	8002686 <HAL_RCC_OscConfig+0x24a>
 8002678:	4b0c      	ldr	r3, [pc, #48]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a0b      	ldr	r2, [pc, #44]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 800267e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	e026      	b.n	80026d4 <HAL_RCC_OscConfig+0x298>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800268e:	d115      	bne.n	80026bc <HAL_RCC_OscConfig+0x280>
 8002690:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a05      	ldr	r2, [pc, #20]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 8002696:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b03      	ldr	r3, [pc, #12]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a02      	ldr	r2, [pc, #8]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 80026a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	e014      	b.n	80026d4 <HAL_RCC_OscConfig+0x298>
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000
 80026b0:	080080cc 	.word	0x080080cc
 80026b4:	20000000 	.word	0x20000000
 80026b8:	20000004 	.word	0x20000004
 80026bc:	4ba0      	ldr	r3, [pc, #640]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a9f      	ldr	r2, [pc, #636]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 80026c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	4b9d      	ldr	r3, [pc, #628]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a9c      	ldr	r2, [pc, #624]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 80026ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d013      	beq.n	8002704 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7fe fec6 	bl	800146c <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e4:	f7fe fec2 	bl	800146c <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	@ 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e276      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f6:	4b92      	ldr	r3, [pc, #584]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCC_OscConfig+0x2a8>
 8002702:	e014      	b.n	800272e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7fe feb2 	bl	800146c <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800270c:	f7fe feae 	bl	800146c <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	@ 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e262      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800271e:	4b88      	ldr	r3, [pc, #544]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x2d0>
 800272a:	e000      	b.n	800272e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d060      	beq.n	80027fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2b04      	cmp	r3, #4
 800273e:	d005      	beq.n	800274c <HAL_RCC_OscConfig+0x310>
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2b0c      	cmp	r3, #12
 8002744:	d119      	bne.n	800277a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d116      	bne.n	800277a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800274c:	4b7c      	ldr	r3, [pc, #496]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_RCC_OscConfig+0x328>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e23f      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002764:	4b76      	ldr	r3, [pc, #472]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	061b      	lsls	r3, r3, #24
 8002772:	4973      	ldr	r1, [pc, #460]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002778:	e040      	b.n	80027fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d023      	beq.n	80027ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002782:	4b6f      	ldr	r3, [pc, #444]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a6e      	ldr	r2, [pc, #440]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 8002788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800278c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7fe fe6d 	bl	800146c <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002796:	f7fe fe69 	bl	800146c <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e21d      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027a8:	4b65      	ldr	r3, [pc, #404]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	4b62      	ldr	r3, [pc, #392]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	061b      	lsls	r3, r3, #24
 80027c2:	495f      	ldr	r1, [pc, #380]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
 80027c8:	e018      	b.n	80027fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a5c      	ldr	r2, [pc, #368]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 80027d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe fe49 	bl	800146c <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027de:	f7fe fe45 	bl	800146c <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e1f9      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027f0:	4b53      	ldr	r3, [pc, #332]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f0      	bne.n	80027de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d03c      	beq.n	8002882 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01c      	beq.n	800284a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002810:	4b4b      	ldr	r3, [pc, #300]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 8002812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002816:	4a4a      	ldr	r2, [pc, #296]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002820:	f7fe fe24 	bl	800146c <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002828:	f7fe fe20 	bl	800146c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e1d4      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800283a:	4b41      	ldr	r3, [pc, #260]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 800283c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0ef      	beq.n	8002828 <HAL_RCC_OscConfig+0x3ec>
 8002848:	e01b      	b.n	8002882 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800284a:	4b3d      	ldr	r3, [pc, #244]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 800284c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002850:	4a3b      	ldr	r2, [pc, #236]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 8002852:	f023 0301 	bic.w	r3, r3, #1
 8002856:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285a:	f7fe fe07 	bl	800146c <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002862:	f7fe fe03 	bl	800146c <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e1b7      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002874:	4b32      	ldr	r3, [pc, #200]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 8002876:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1ef      	bne.n	8002862 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 80a6 	beq.w	80029dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002890:	2300      	movs	r3, #0
 8002892:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002894:	4b2a      	ldr	r3, [pc, #168]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 8002896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10d      	bne.n	80028bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a0:	4b27      	ldr	r3, [pc, #156]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 80028a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a4:	4a26      	ldr	r2, [pc, #152]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 80028a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80028ac:	4b24      	ldr	r3, [pc, #144]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 80028ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b8:	2301      	movs	r3, #1
 80028ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028bc:	4b21      	ldr	r3, [pc, #132]	@ (8002944 <HAL_RCC_OscConfig+0x508>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d118      	bne.n	80028fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002944 <HAL_RCC_OscConfig+0x508>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002944 <HAL_RCC_OscConfig+0x508>)
 80028ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d4:	f7fe fdca 	bl	800146c <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028dc:	f7fe fdc6 	bl	800146c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e17a      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ee:	4b15      	ldr	r3, [pc, #84]	@ (8002944 <HAL_RCC_OscConfig+0x508>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d108      	bne.n	8002914 <HAL_RCC_OscConfig+0x4d8>
 8002902:	4b0f      	ldr	r3, [pc, #60]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 8002904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002908:	4a0d      	ldr	r2, [pc, #52]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002912:	e029      	b.n	8002968 <HAL_RCC_OscConfig+0x52c>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b05      	cmp	r3, #5
 800291a:	d115      	bne.n	8002948 <HAL_RCC_OscConfig+0x50c>
 800291c:	4b08      	ldr	r3, [pc, #32]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 800291e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002922:	4a07      	ldr	r2, [pc, #28]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 8002924:	f043 0304 	orr.w	r3, r3, #4
 8002928:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800292c:	4b04      	ldr	r3, [pc, #16]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002932:	4a03      	ldr	r2, [pc, #12]	@ (8002940 <HAL_RCC_OscConfig+0x504>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800293c:	e014      	b.n	8002968 <HAL_RCC_OscConfig+0x52c>
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
 8002944:	40007000 	.word	0x40007000
 8002948:	4b9c      	ldr	r3, [pc, #624]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800294e:	4a9b      	ldr	r2, [pc, #620]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002958:	4b98      	ldr	r3, [pc, #608]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295e:	4a97      	ldr	r2, [pc, #604]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 8002960:	f023 0304 	bic.w	r3, r3, #4
 8002964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d016      	beq.n	800299e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002970:	f7fe fd7c 	bl	800146c <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002976:	e00a      	b.n	800298e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002978:	f7fe fd78 	bl	800146c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e12a      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800298e:	4b8b      	ldr	r3, [pc, #556]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 8002990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0ed      	beq.n	8002978 <HAL_RCC_OscConfig+0x53c>
 800299c:	e015      	b.n	80029ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299e:	f7fe fd65 	bl	800146c <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029a4:	e00a      	b.n	80029bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a6:	f7fe fd61 	bl	800146c <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e113      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029bc:	4b7f      	ldr	r3, [pc, #508]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1ed      	bne.n	80029a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ca:	7ffb      	ldrb	r3, [r7, #31]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d105      	bne.n	80029dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d0:	4b7a      	ldr	r3, [pc, #488]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 80029d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d4:	4a79      	ldr	r2, [pc, #484]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 80029d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029da:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80fe 	beq.w	8002be2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	f040 80d0 	bne.w	8002b90 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029f0:	4b72      	ldr	r3, [pc, #456]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f003 0203 	and.w	r2, r3, #3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d130      	bne.n	8002a66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d127      	bne.n	8002a66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a20:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d11f      	bne.n	8002a66 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a30:	2a07      	cmp	r2, #7
 8002a32:	bf14      	ite	ne
 8002a34:	2201      	movne	r2, #1
 8002a36:	2200      	moveq	r2, #0
 8002a38:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d113      	bne.n	8002a66 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a48:	085b      	lsrs	r3, r3, #1
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d109      	bne.n	8002a66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5c:	085b      	lsrs	r3, r3, #1
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d06e      	beq.n	8002b44 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	2b0c      	cmp	r3, #12
 8002a6a:	d069      	beq.n	8002b40 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a6c:	4b53      	ldr	r3, [pc, #332]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d105      	bne.n	8002a84 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a78:	4b50      	ldr	r3, [pc, #320]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0ad      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a88:	4b4c      	ldr	r3, [pc, #304]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a4b      	ldr	r2, [pc, #300]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 8002a8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a92:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a94:	f7fe fcea 	bl	800146c <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7fe fce6 	bl	800146c <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e09a      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aae:	4b43      	ldr	r3, [pc, #268]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aba:	4b40      	ldr	r3, [pc, #256]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	4b40      	ldr	r3, [pc, #256]	@ (8002bc0 <HAL_RCC_OscConfig+0x784>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002aca:	3a01      	subs	r2, #1
 8002acc:	0112      	lsls	r2, r2, #4
 8002ace:	4311      	orrs	r1, r2
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ad4:	0212      	lsls	r2, r2, #8
 8002ad6:	4311      	orrs	r1, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002adc:	0852      	lsrs	r2, r2, #1
 8002ade:	3a01      	subs	r2, #1
 8002ae0:	0552      	lsls	r2, r2, #21
 8002ae2:	4311      	orrs	r1, r2
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ae8:	0852      	lsrs	r2, r2, #1
 8002aea:	3a01      	subs	r2, #1
 8002aec:	0652      	lsls	r2, r2, #25
 8002aee:	4311      	orrs	r1, r2
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002af4:	0912      	lsrs	r2, r2, #4
 8002af6:	0452      	lsls	r2, r2, #17
 8002af8:	430a      	orrs	r2, r1
 8002afa:	4930      	ldr	r1, [pc, #192]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b00:	4b2e      	ldr	r3, [pc, #184]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a2d      	ldr	r2, [pc, #180]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 8002b06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4a2a      	ldr	r2, [pc, #168]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 8002b12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b18:	f7fe fca8 	bl	800146c <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b20:	f7fe fca4 	bl	800146c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e058      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b32:	4b22      	ldr	r3, [pc, #136]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b3e:	e050      	b.n	8002be2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e04f      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b44:	4b1d      	ldr	r3, [pc, #116]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d148      	bne.n	8002be2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b50:	4b1a      	ldr	r3, [pc, #104]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a19      	ldr	r2, [pc, #100]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 8002b56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b5c:	4b17      	ldr	r3, [pc, #92]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4a16      	ldr	r2, [pc, #88]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 8002b62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b68:	f7fe fc80 	bl	800146c <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b70:	f7fe fc7c 	bl	800146c <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e030      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b82:	4b0e      	ldr	r3, [pc, #56]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x734>
 8002b8e:	e028      	b.n	8002be2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	2b0c      	cmp	r3, #12
 8002b94:	d023      	beq.n	8002bde <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b96:	4b09      	ldr	r3, [pc, #36]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a08      	ldr	r2, [pc, #32]	@ (8002bbc <HAL_RCC_OscConfig+0x780>)
 8002b9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba2:	f7fe fc63 	bl	800146c <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba8:	e00c      	b.n	8002bc4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002baa:	f7fe fc5f 	bl	800146c <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d905      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e013      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc4:	4b09      	ldr	r3, [pc, #36]	@ (8002bec <HAL_RCC_OscConfig+0x7b0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1ec      	bne.n	8002baa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002bd0:	4b06      	ldr	r3, [pc, #24]	@ (8002bec <HAL_RCC_OscConfig+0x7b0>)
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	4905      	ldr	r1, [pc, #20]	@ (8002bec <HAL_RCC_OscConfig+0x7b0>)
 8002bd6:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <HAL_RCC_OscConfig+0x7b4>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60cb      	str	r3, [r1, #12]
 8002bdc:	e001      	b.n	8002be2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3720      	adds	r7, #32
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	feeefffc 	.word	0xfeeefffc

08002bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0e7      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c08:	4b75      	ldr	r3, [pc, #468]	@ (8002de0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d910      	bls.n	8002c38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b72      	ldr	r3, [pc, #456]	@ (8002de0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 0207 	bic.w	r2, r3, #7
 8002c1e:	4970      	ldr	r1, [pc, #448]	@ (8002de0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c26:	4b6e      	ldr	r3, [pc, #440]	@ (8002de0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0cf      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d010      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	4b66      	ldr	r3, [pc, #408]	@ (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d908      	bls.n	8002c66 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c54:	4b63      	ldr	r3, [pc, #396]	@ (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	4960      	ldr	r1, [pc, #384]	@ (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d04c      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d107      	bne.n	8002c8a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c7a:	4b5a      	ldr	r3, [pc, #360]	@ (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d121      	bne.n	8002cca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e0a6      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c92:	4b54      	ldr	r3, [pc, #336]	@ (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d115      	bne.n	8002cca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e09a      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d107      	bne.n	8002cba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002caa:	4b4e      	ldr	r3, [pc, #312]	@ (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d109      	bne.n	8002cca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e08e      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cba:	4b4a      	ldr	r3, [pc, #296]	@ (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e086      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cca:	4b46      	ldr	r3, [pc, #280]	@ (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f023 0203 	bic.w	r2, r3, #3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	4943      	ldr	r1, [pc, #268]	@ (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cdc:	f7fe fbc6 	bl	800146c <HAL_GetTick>
 8002ce0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce2:	e00a      	b.n	8002cfa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce4:	f7fe fbc2 	bl	800146c <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e06e      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfa:	4b3a      	ldr	r3, [pc, #232]	@ (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 020c 	and.w	r2, r3, #12
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d1eb      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d010      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	4b31      	ldr	r3, [pc, #196]	@ (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d208      	bcs.n	8002d3a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d28:	4b2e      	ldr	r3, [pc, #184]	@ (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	492b      	ldr	r1, [pc, #172]	@ (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d3a:	4b29      	ldr	r3, [pc, #164]	@ (8002de0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d210      	bcs.n	8002d6a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d48:	4b25      	ldr	r3, [pc, #148]	@ (8002de0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 0207 	bic.w	r2, r3, #7
 8002d50:	4923      	ldr	r1, [pc, #140]	@ (8002de0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d58:	4b21      	ldr	r3, [pc, #132]	@ (8002de0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d001      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e036      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d008      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d76:	4b1b      	ldr	r3, [pc, #108]	@ (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	4918      	ldr	r1, [pc, #96]	@ (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d009      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d94:	4b13      	ldr	r3, [pc, #76]	@ (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4910      	ldr	r1, [pc, #64]	@ (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002da8:	f000 f824 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4b0d      	ldr	r3, [pc, #52]	@ (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	091b      	lsrs	r3, r3, #4
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	490b      	ldr	r1, [pc, #44]	@ (8002de8 <HAL_RCC_ClockConfig+0x1f4>)
 8002dba:	5ccb      	ldrb	r3, [r1, r3]
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc4:	4a09      	ldr	r2, [pc, #36]	@ (8002dec <HAL_RCC_ClockConfig+0x1f8>)
 8002dc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dc8:	4b09      	ldr	r3, [pc, #36]	@ (8002df0 <HAL_RCC_ClockConfig+0x1fc>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe fafd 	bl	80013cc <HAL_InitTick>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dd6:	7afb      	ldrb	r3, [r7, #11]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40022000 	.word	0x40022000
 8002de4:	40021000 	.word	0x40021000
 8002de8:	080080cc 	.word	0x080080cc
 8002dec:	20000000 	.word	0x20000000
 8002df0:	20000004 	.word	0x20000004

08002df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b089      	sub	sp, #36	@ 0x24
 8002df8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e02:	4b3e      	ldr	r3, [pc, #248]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e0c:	4b3b      	ldr	r3, [pc, #236]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x34>
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	2b0c      	cmp	r3, #12
 8002e20:	d121      	bne.n	8002e66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d11e      	bne.n	8002e66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e28:	4b34      	ldr	r3, [pc, #208]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d107      	bne.n	8002e44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e34:	4b31      	ldr	r3, [pc, #196]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e3a:	0a1b      	lsrs	r3, r3, #8
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	e005      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e44:	4b2d      	ldr	r3, [pc, #180]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	091b      	lsrs	r3, r3, #4
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e50:	4a2b      	ldr	r2, [pc, #172]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10d      	bne.n	8002e7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e64:	e00a      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d102      	bne.n	8002e72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e6c:	4b25      	ldr	r3, [pc, #148]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e6e:	61bb      	str	r3, [r7, #24]
 8002e70:	e004      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e78:	4b23      	ldr	r3, [pc, #140]	@ (8002f08 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	2b0c      	cmp	r3, #12
 8002e80:	d134      	bne.n	8002eec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e82:	4b1e      	ldr	r3, [pc, #120]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d003      	beq.n	8002e9a <HAL_RCC_GetSysClockFreq+0xa6>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d003      	beq.n	8002ea0 <HAL_RCC_GetSysClockFreq+0xac>
 8002e98:	e005      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e9c:	617b      	str	r3, [r7, #20]
      break;
 8002e9e:	e005      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ea0:	4b19      	ldr	r3, [pc, #100]	@ (8002f08 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ea2:	617b      	str	r3, [r7, #20]
      break;
 8002ea4:	e002      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	617b      	str	r3, [r7, #20]
      break;
 8002eaa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002eac:	4b13      	ldr	r3, [pc, #76]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002eba:	4b10      	ldr	r3, [pc, #64]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	0a1b      	lsrs	r3, r3, #8
 8002ec0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	fb03 f202 	mul.w	r2, r3, r2
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	0e5b      	lsrs	r3, r3, #25
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	3301      	adds	r3, #1
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002eec:	69bb      	ldr	r3, [r7, #24]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3724      	adds	r7, #36	@ 0x24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	080080e4 	.word	0x080080e4
 8002f04:	00f42400 	.word	0x00f42400
 8002f08:	007a1200 	.word	0x007a1200

08002f0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f10:	4b03      	ldr	r3, [pc, #12]	@ (8002f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f12:	681b      	ldr	r3, [r3, #0]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20000000 	.word	0x20000000

08002f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f28:	f7ff fff0 	bl	8002f0c <HAL_RCC_GetHCLKFreq>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	0a1b      	lsrs	r3, r3, #8
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	4904      	ldr	r1, [pc, #16]	@ (8002f4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f3a:	5ccb      	ldrb	r3, [r1, r3]
 8002f3c:	f003 031f 	and.w	r3, r3, #31
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	080080dc 	.word	0x080080dc

08002f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f54:	f7ff ffda 	bl	8002f0c <HAL_RCC_GetHCLKFreq>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	4b06      	ldr	r3, [pc, #24]	@ (8002f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	0adb      	lsrs	r3, r3, #11
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	4904      	ldr	r1, [pc, #16]	@ (8002f78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f66:	5ccb      	ldrb	r3, [r1, r3]
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40021000 	.word	0x40021000
 8002f78:	080080dc 	.word	0x080080dc

08002f7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f84:	2300      	movs	r3, #0
 8002f86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f88:	4b2a      	ldr	r3, [pc, #168]	@ (8003034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f94:	f7ff f922 	bl	80021dc <HAL_PWREx_GetVoltageRange>
 8002f98:	6178      	str	r0, [r7, #20]
 8002f9a:	e014      	b.n	8002fc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f9c:	4b25      	ldr	r3, [pc, #148]	@ (8003034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa0:	4a24      	ldr	r2, [pc, #144]	@ (8003034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fa6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fa8:	4b22      	ldr	r3, [pc, #136]	@ (8003034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fb4:	f7ff f912 	bl	80021dc <HAL_PWREx_GetVoltageRange>
 8002fb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fba:	4b1e      	ldr	r3, [pc, #120]	@ (8003034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fbe:	4a1d      	ldr	r2, [pc, #116]	@ (8003034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fc4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fcc:	d10b      	bne.n	8002fe6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b80      	cmp	r3, #128	@ 0x80
 8002fd2:	d919      	bls.n	8003008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2ba0      	cmp	r3, #160	@ 0xa0
 8002fd8:	d902      	bls.n	8002fe0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fda:	2302      	movs	r3, #2
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	e013      	b.n	8003008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	e010      	b.n	8003008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b80      	cmp	r3, #128	@ 0x80
 8002fea:	d902      	bls.n	8002ff2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fec:	2303      	movs	r3, #3
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	e00a      	b.n	8003008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b80      	cmp	r3, #128	@ 0x80
 8002ff6:	d102      	bne.n	8002ffe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	e004      	b.n	8003008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b70      	cmp	r3, #112	@ 0x70
 8003002:	d101      	bne.n	8003008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003004:	2301      	movs	r3, #1
 8003006:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003008:	4b0b      	ldr	r3, [pc, #44]	@ (8003038 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f023 0207 	bic.w	r2, r3, #7
 8003010:	4909      	ldr	r1, [pc, #36]	@ (8003038 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003018:	4b07      	ldr	r3, [pc, #28]	@ (8003038 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	429a      	cmp	r2, r3
 8003024:	d001      	beq.n	800302a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40021000 	.word	0x40021000
 8003038:	40022000 	.word	0x40022000

0800303c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003044:	2300      	movs	r3, #0
 8003046:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003048:	2300      	movs	r3, #0
 800304a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003054:	2b00      	cmp	r3, #0
 8003056:	d041      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800305c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003060:	d02a      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003062:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003066:	d824      	bhi.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003068:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800306c:	d008      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800306e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003072:	d81e      	bhi.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003078:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800307c:	d010      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800307e:	e018      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003080:	4b86      	ldr	r3, [pc, #536]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4a85      	ldr	r2, [pc, #532]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003086:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800308a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800308c:	e015      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3304      	adds	r3, #4
 8003092:	2100      	movs	r1, #0
 8003094:	4618      	mov	r0, r3
 8003096:	f000 facb 	bl	8003630 <RCCEx_PLLSAI1_Config>
 800309a:	4603      	mov	r3, r0
 800309c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800309e:	e00c      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3320      	adds	r3, #32
 80030a4:	2100      	movs	r1, #0
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fbb6 	bl	8003818 <RCCEx_PLLSAI2_Config>
 80030ac:	4603      	mov	r3, r0
 80030ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030b0:	e003      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	74fb      	strb	r3, [r7, #19]
      break;
 80030b6:	e000      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80030b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ba:	7cfb      	ldrb	r3, [r7, #19]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10b      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030c0:	4b76      	ldr	r3, [pc, #472]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030ce:	4973      	ldr	r1, [pc, #460]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80030d6:	e001      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d8:	7cfb      	ldrb	r3, [r7, #19]
 80030da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d041      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030f0:	d02a      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80030f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030f6:	d824      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030fc:	d008      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003102:	d81e      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00a      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003108:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800310c:	d010      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800310e:	e018      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003110:	4b62      	ldr	r3, [pc, #392]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	4a61      	ldr	r2, [pc, #388]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003116:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800311a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800311c:	e015      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3304      	adds	r3, #4
 8003122:	2100      	movs	r1, #0
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fa83 	bl	8003630 <RCCEx_PLLSAI1_Config>
 800312a:	4603      	mov	r3, r0
 800312c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800312e:	e00c      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3320      	adds	r3, #32
 8003134:	2100      	movs	r1, #0
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fb6e 	bl	8003818 <RCCEx_PLLSAI2_Config>
 800313c:	4603      	mov	r3, r0
 800313e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003140:	e003      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	74fb      	strb	r3, [r7, #19]
      break;
 8003146:	e000      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800314a:	7cfb      	ldrb	r3, [r7, #19]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10b      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003150:	4b52      	ldr	r3, [pc, #328]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003156:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800315e:	494f      	ldr	r1, [pc, #316]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003166:	e001      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 80a0 	beq.w	80032ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800317a:	2300      	movs	r3, #0
 800317c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800317e:	4b47      	ldr	r3, [pc, #284]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800318e:	2300      	movs	r3, #0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00d      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003194:	4b41      	ldr	r3, [pc, #260]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003198:	4a40      	ldr	r2, [pc, #256]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800319a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800319e:	6593      	str	r3, [r2, #88]	@ 0x58
 80031a0:	4b3e      	ldr	r3, [pc, #248]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ac:	2301      	movs	r3, #1
 80031ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031b0:	4b3b      	ldr	r3, [pc, #236]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a3a      	ldr	r2, [pc, #232]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031bc:	f7fe f956 	bl	800146c <HAL_GetTick>
 80031c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031c2:	e009      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c4:	f7fe f952 	bl	800146c <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d902      	bls.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	74fb      	strb	r3, [r7, #19]
        break;
 80031d6:	e005      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031d8:	4b31      	ldr	r3, [pc, #196]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0ef      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80031e4:	7cfb      	ldrb	r3, [r7, #19]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d15c      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031ea:	4b2c      	ldr	r3, [pc, #176]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d01f      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	429a      	cmp	r2, r3
 8003206:	d019      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003208:	4b24      	ldr	r3, [pc, #144]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003212:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003214:	4b21      	ldr	r3, [pc, #132]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800321a:	4a20      	ldr	r2, [pc, #128]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003220:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003224:	4b1d      	ldr	r3, [pc, #116]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800322a:	4a1c      	ldr	r2, [pc, #112]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003230:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003234:	4a19      	ldr	r2, [pc, #100]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d016      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003246:	f7fe f911 	bl	800146c <HAL_GetTick>
 800324a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800324c:	e00b      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324e:	f7fe f90d 	bl	800146c <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800325c:	4293      	cmp	r3, r2
 800325e:	d902      	bls.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	74fb      	strb	r3, [r7, #19]
            break;
 8003264:	e006      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003266:	4b0d      	ldr	r3, [pc, #52]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0ec      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003274:	7cfb      	ldrb	r3, [r7, #19]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10c      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800327a:	4b08      	ldr	r3, [pc, #32]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003280:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800328a:	4904      	ldr	r1, [pc, #16]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003292:	e009      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003294:	7cfb      	ldrb	r3, [r7, #19]
 8003296:	74bb      	strb	r3, [r7, #18]
 8003298:	e006      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800329a:	bf00      	nop
 800329c:	40021000 	.word	0x40021000
 80032a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a4:	7cfb      	ldrb	r3, [r7, #19]
 80032a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032a8:	7c7b      	ldrb	r3, [r7, #17]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d105      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ae:	4b9e      	ldr	r3, [pc, #632]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b2:	4a9d      	ldr	r2, [pc, #628]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032c6:	4b98      	ldr	r3, [pc, #608]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032cc:	f023 0203 	bic.w	r2, r3, #3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d4:	4994      	ldr	r1, [pc, #592]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032e8:	4b8f      	ldr	r3, [pc, #572]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ee:	f023 020c 	bic.w	r2, r3, #12
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f6:	498c      	ldr	r1, [pc, #560]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800330a:	4b87      	ldr	r3, [pc, #540]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003310:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	4983      	ldr	r1, [pc, #524]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800332c:	4b7e      	ldr	r3, [pc, #504]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003332:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333a:	497b      	ldr	r1, [pc, #492]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800334e:	4b76      	ldr	r3, [pc, #472]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003354:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800335c:	4972      	ldr	r1, [pc, #456]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0320 	and.w	r3, r3, #32
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003370:	4b6d      	ldr	r3, [pc, #436]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003376:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800337e:	496a      	ldr	r1, [pc, #424]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003392:	4b65      	ldr	r3, [pc, #404]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003398:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a0:	4961      	ldr	r1, [pc, #388]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033b4:	4b5c      	ldr	r3, [pc, #368]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033c2:	4959      	ldr	r1, [pc, #356]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033d6:	4b54      	ldr	r3, [pc, #336]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033e4:	4950      	ldr	r1, [pc, #320]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00a      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033f8:	4b4b      	ldr	r3, [pc, #300]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003406:	4948      	ldr	r1, [pc, #288]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800341a:	4b43      	ldr	r3, [pc, #268]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003420:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003428:	493f      	ldr	r1, [pc, #252]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d028      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800343c:	4b3a      	ldr	r3, [pc, #232]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003442:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800344a:	4937      	ldr	r1, [pc, #220]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003456:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800345a:	d106      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800345c:	4b32      	ldr	r3, [pc, #200]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	4a31      	ldr	r2, [pc, #196]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003462:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003466:	60d3      	str	r3, [r2, #12]
 8003468:	e011      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800346e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003472:	d10c      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3304      	adds	r3, #4
 8003478:	2101      	movs	r1, #1
 800347a:	4618      	mov	r0, r3
 800347c:	f000 f8d8 	bl	8003630 <RCCEx_PLLSAI1_Config>
 8003480:	4603      	mov	r3, r0
 8003482:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003484:	7cfb      	ldrb	r3, [r7, #19]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800348a:	7cfb      	ldrb	r3, [r7, #19]
 800348c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d028      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800349a:	4b23      	ldr	r3, [pc, #140]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a8:	491f      	ldr	r1, [pc, #124]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034b8:	d106      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	4a1a      	ldr	r2, [pc, #104]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034c4:	60d3      	str	r3, [r2, #12]
 80034c6:	e011      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034d0:	d10c      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3304      	adds	r3, #4
 80034d6:	2101      	movs	r1, #1
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 f8a9 	bl	8003630 <RCCEx_PLLSAI1_Config>
 80034de:	4603      	mov	r3, r0
 80034e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034e2:	7cfb      	ldrb	r3, [r7, #19]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80034e8:	7cfb      	ldrb	r3, [r7, #19]
 80034ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d02b      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003506:	4908      	ldr	r1, [pc, #32]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003512:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003516:	d109      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003518:	4b03      	ldr	r3, [pc, #12]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4a02      	ldr	r2, [pc, #8]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003522:	60d3      	str	r3, [r2, #12]
 8003524:	e014      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003526:	bf00      	nop
 8003528:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003530:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003534:	d10c      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3304      	adds	r3, #4
 800353a:	2101      	movs	r1, #1
 800353c:	4618      	mov	r0, r3
 800353e:	f000 f877 	bl	8003630 <RCCEx_PLLSAI1_Config>
 8003542:	4603      	mov	r3, r0
 8003544:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003546:	7cfb      	ldrb	r3, [r7, #19]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d02f      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800355c:	4b2b      	ldr	r3, [pc, #172]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003562:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800356a:	4928      	ldr	r1, [pc, #160]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003576:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800357a:	d10d      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3304      	adds	r3, #4
 8003580:	2102      	movs	r1, #2
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f854 	bl	8003630 <RCCEx_PLLSAI1_Config>
 8003588:	4603      	mov	r3, r0
 800358a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800358c:	7cfb      	ldrb	r3, [r7, #19]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d014      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003592:	7cfb      	ldrb	r3, [r7, #19]
 8003594:	74bb      	strb	r3, [r7, #18]
 8003596:	e011      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800359c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035a0:	d10c      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3320      	adds	r3, #32
 80035a6:	2102      	movs	r1, #2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 f935 	bl	8003818 <RCCEx_PLLSAI2_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035b2:	7cfb      	ldrb	r3, [r7, #19]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035b8:	7cfb      	ldrb	r3, [r7, #19]
 80035ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035c8:	4b10      	ldr	r3, [pc, #64]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ce:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035d6:	490d      	ldr	r1, [pc, #52]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00b      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035ea:	4b08      	ldr	r3, [pc, #32]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035fa:	4904      	ldr	r1, [pc, #16]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003602:	7cbb      	ldrb	r3, [r7, #18]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40021000 	.word	0x40021000

08003610 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003614:	4b05      	ldr	r3, [pc, #20]	@ (800362c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a04      	ldr	r2, [pc, #16]	@ (800362c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800361a:	f043 0304 	orr.w	r3, r3, #4
 800361e:	6013      	str	r3, [r2, #0]
}
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40021000 	.word	0x40021000

08003630 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800363e:	4b75      	ldr	r3, [pc, #468]	@ (8003814 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d018      	beq.n	800367c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800364a:	4b72      	ldr	r3, [pc, #456]	@ (8003814 <RCCEx_PLLSAI1_Config+0x1e4>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f003 0203 	and.w	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d10d      	bne.n	8003676 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
       ||
 800365e:	2b00      	cmp	r3, #0
 8003660:	d009      	beq.n	8003676 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003662:	4b6c      	ldr	r3, [pc, #432]	@ (8003814 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	091b      	lsrs	r3, r3, #4
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
       ||
 8003672:	429a      	cmp	r2, r3
 8003674:	d047      	beq.n	8003706 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
 800367a:	e044      	b.n	8003706 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b03      	cmp	r3, #3
 8003682:	d018      	beq.n	80036b6 <RCCEx_PLLSAI1_Config+0x86>
 8003684:	2b03      	cmp	r3, #3
 8003686:	d825      	bhi.n	80036d4 <RCCEx_PLLSAI1_Config+0xa4>
 8003688:	2b01      	cmp	r3, #1
 800368a:	d002      	beq.n	8003692 <RCCEx_PLLSAI1_Config+0x62>
 800368c:	2b02      	cmp	r3, #2
 800368e:	d009      	beq.n	80036a4 <RCCEx_PLLSAI1_Config+0x74>
 8003690:	e020      	b.n	80036d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003692:	4b60      	ldr	r3, [pc, #384]	@ (8003814 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d11d      	bne.n	80036da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a2:	e01a      	b.n	80036da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036a4:	4b5b      	ldr	r3, [pc, #364]	@ (8003814 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d116      	bne.n	80036de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b4:	e013      	b.n	80036de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036b6:	4b57      	ldr	r3, [pc, #348]	@ (8003814 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10f      	bne.n	80036e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036c2:	4b54      	ldr	r3, [pc, #336]	@ (8003814 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d109      	bne.n	80036e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036d2:	e006      	b.n	80036e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
      break;
 80036d8:	e004      	b.n	80036e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036da:	bf00      	nop
 80036dc:	e002      	b.n	80036e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036de:	bf00      	nop
 80036e0:	e000      	b.n	80036e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10d      	bne.n	8003706 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003814 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6819      	ldr	r1, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	430b      	orrs	r3, r1
 8003700:	4944      	ldr	r1, [pc, #272]	@ (8003814 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003702:	4313      	orrs	r3, r2
 8003704:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d17d      	bne.n	8003808 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800370c:	4b41      	ldr	r3, [pc, #260]	@ (8003814 <RCCEx_PLLSAI1_Config+0x1e4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a40      	ldr	r2, [pc, #256]	@ (8003814 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003712:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003716:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003718:	f7fd fea8 	bl	800146c <HAL_GetTick>
 800371c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800371e:	e009      	b.n	8003734 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003720:	f7fd fea4 	bl	800146c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d902      	bls.n	8003734 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	73fb      	strb	r3, [r7, #15]
        break;
 8003732:	e005      	b.n	8003740 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003734:	4b37      	ldr	r3, [pc, #220]	@ (8003814 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1ef      	bne.n	8003720 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d160      	bne.n	8003808 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d111      	bne.n	8003770 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800374c:	4b31      	ldr	r3, [pc, #196]	@ (8003814 <RCCEx_PLLSAI1_Config+0x1e4>)
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003754:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6892      	ldr	r2, [r2, #8]
 800375c:	0211      	lsls	r1, r2, #8
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68d2      	ldr	r2, [r2, #12]
 8003762:	0912      	lsrs	r2, r2, #4
 8003764:	0452      	lsls	r2, r2, #17
 8003766:	430a      	orrs	r2, r1
 8003768:	492a      	ldr	r1, [pc, #168]	@ (8003814 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376a:	4313      	orrs	r3, r2
 800376c:	610b      	str	r3, [r1, #16]
 800376e:	e027      	b.n	80037c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d112      	bne.n	800379c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003776:	4b27      	ldr	r3, [pc, #156]	@ (8003814 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800377e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6892      	ldr	r2, [r2, #8]
 8003786:	0211      	lsls	r1, r2, #8
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6912      	ldr	r2, [r2, #16]
 800378c:	0852      	lsrs	r2, r2, #1
 800378e:	3a01      	subs	r2, #1
 8003790:	0552      	lsls	r2, r2, #21
 8003792:	430a      	orrs	r2, r1
 8003794:	491f      	ldr	r1, [pc, #124]	@ (8003814 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003796:	4313      	orrs	r3, r2
 8003798:	610b      	str	r3, [r1, #16]
 800379a:	e011      	b.n	80037c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800379c:	4b1d      	ldr	r3, [pc, #116]	@ (8003814 <RCCEx_PLLSAI1_Config+0x1e4>)
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80037a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6892      	ldr	r2, [r2, #8]
 80037ac:	0211      	lsls	r1, r2, #8
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6952      	ldr	r2, [r2, #20]
 80037b2:	0852      	lsrs	r2, r2, #1
 80037b4:	3a01      	subs	r2, #1
 80037b6:	0652      	lsls	r2, r2, #25
 80037b8:	430a      	orrs	r2, r1
 80037ba:	4916      	ldr	r1, [pc, #88]	@ (8003814 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80037c0:	4b14      	ldr	r3, [pc, #80]	@ (8003814 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a13      	ldr	r2, [pc, #76]	@ (8003814 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037cc:	f7fd fe4e 	bl	800146c <HAL_GetTick>
 80037d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037d2:	e009      	b.n	80037e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037d4:	f7fd fe4a 	bl	800146c <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d902      	bls.n	80037e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	73fb      	strb	r3, [r7, #15]
          break;
 80037e6:	e005      	b.n	80037f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003814 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0ef      	beq.n	80037d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037fa:	4b06      	ldr	r3, [pc, #24]	@ (8003814 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	4904      	ldr	r1, [pc, #16]	@ (8003814 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003804:	4313      	orrs	r3, r2
 8003806:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003808:	7bfb      	ldrb	r3, [r7, #15]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40021000 	.word	0x40021000

08003818 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003826:	4b6a      	ldr	r3, [pc, #424]	@ (80039d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d018      	beq.n	8003864 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003832:	4b67      	ldr	r3, [pc, #412]	@ (80039d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f003 0203 	and.w	r2, r3, #3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d10d      	bne.n	800385e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
       ||
 8003846:	2b00      	cmp	r3, #0
 8003848:	d009      	beq.n	800385e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800384a:	4b61      	ldr	r3, [pc, #388]	@ (80039d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	091b      	lsrs	r3, r3, #4
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
       ||
 800385a:	429a      	cmp	r2, r3
 800385c:	d047      	beq.n	80038ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	73fb      	strb	r3, [r7, #15]
 8003862:	e044      	b.n	80038ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b03      	cmp	r3, #3
 800386a:	d018      	beq.n	800389e <RCCEx_PLLSAI2_Config+0x86>
 800386c:	2b03      	cmp	r3, #3
 800386e:	d825      	bhi.n	80038bc <RCCEx_PLLSAI2_Config+0xa4>
 8003870:	2b01      	cmp	r3, #1
 8003872:	d002      	beq.n	800387a <RCCEx_PLLSAI2_Config+0x62>
 8003874:	2b02      	cmp	r3, #2
 8003876:	d009      	beq.n	800388c <RCCEx_PLLSAI2_Config+0x74>
 8003878:	e020      	b.n	80038bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800387a:	4b55      	ldr	r3, [pc, #340]	@ (80039d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d11d      	bne.n	80038c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800388a:	e01a      	b.n	80038c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800388c:	4b50      	ldr	r3, [pc, #320]	@ (80039d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003894:	2b00      	cmp	r3, #0
 8003896:	d116      	bne.n	80038c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800389c:	e013      	b.n	80038c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800389e:	4b4c      	ldr	r3, [pc, #304]	@ (80039d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10f      	bne.n	80038ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038aa:	4b49      	ldr	r3, [pc, #292]	@ (80039d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038ba:	e006      	b.n	80038ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
      break;
 80038c0:	e004      	b.n	80038cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038c2:	bf00      	nop
 80038c4:	e002      	b.n	80038cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038c6:	bf00      	nop
 80038c8:	e000      	b.n	80038cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10d      	bne.n	80038ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038d2:	4b3f      	ldr	r3, [pc, #252]	@ (80039d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6819      	ldr	r1, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	430b      	orrs	r3, r1
 80038e8:	4939      	ldr	r1, [pc, #228]	@ (80039d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d167      	bne.n	80039c4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038f4:	4b36      	ldr	r3, [pc, #216]	@ (80039d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a35      	ldr	r2, [pc, #212]	@ (80039d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003900:	f7fd fdb4 	bl	800146c <HAL_GetTick>
 8003904:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003906:	e009      	b.n	800391c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003908:	f7fd fdb0 	bl	800146c <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d902      	bls.n	800391c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	73fb      	strb	r3, [r7, #15]
        break;
 800391a:	e005      	b.n	8003928 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800391c:	4b2c      	ldr	r3, [pc, #176]	@ (80039d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1ef      	bne.n	8003908 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d14a      	bne.n	80039c4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d111      	bne.n	8003958 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003934:	4b26      	ldr	r3, [pc, #152]	@ (80039d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800393c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6892      	ldr	r2, [r2, #8]
 8003944:	0211      	lsls	r1, r2, #8
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	68d2      	ldr	r2, [r2, #12]
 800394a:	0912      	lsrs	r2, r2, #4
 800394c:	0452      	lsls	r2, r2, #17
 800394e:	430a      	orrs	r2, r1
 8003950:	491f      	ldr	r1, [pc, #124]	@ (80039d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003952:	4313      	orrs	r3, r2
 8003954:	614b      	str	r3, [r1, #20]
 8003956:	e011      	b.n	800397c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003958:	4b1d      	ldr	r3, [pc, #116]	@ (80039d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003960:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6892      	ldr	r2, [r2, #8]
 8003968:	0211      	lsls	r1, r2, #8
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6912      	ldr	r2, [r2, #16]
 800396e:	0852      	lsrs	r2, r2, #1
 8003970:	3a01      	subs	r2, #1
 8003972:	0652      	lsls	r2, r2, #25
 8003974:	430a      	orrs	r2, r1
 8003976:	4916      	ldr	r1, [pc, #88]	@ (80039d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003978:	4313      	orrs	r3, r2
 800397a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800397c:	4b14      	ldr	r3, [pc, #80]	@ (80039d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a13      	ldr	r2, [pc, #76]	@ (80039d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003986:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003988:	f7fd fd70 	bl	800146c <HAL_GetTick>
 800398c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800398e:	e009      	b.n	80039a4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003990:	f7fd fd6c 	bl	800146c <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d902      	bls.n	80039a4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	73fb      	strb	r3, [r7, #15]
          break;
 80039a2:	e005      	b.n	80039b0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039a4:	4b0a      	ldr	r3, [pc, #40]	@ (80039d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0ef      	beq.n	8003990 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039b6:	4b06      	ldr	r3, [pc, #24]	@ (80039d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	4904      	ldr	r1, [pc, #16]	@ (80039d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40021000 	.word	0x40021000

080039d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e095      	b.n	8003b12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d108      	bne.n	8003a00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039f6:	d009      	beq.n	8003a0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	61da      	str	r2, [r3, #28]
 80039fe:	e005      	b.n	8003a0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fd faa6 	bl	8000f78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a4c:	d902      	bls.n	8003a54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	e002      	b.n	8003a5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003a62:	d007      	beq.n	8003a74 <HAL_SPI_Init+0xa0>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a6c:	d002      	beq.n	8003a74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ab6:	ea42 0103 	orr.w	r1, r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003abe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	0c1b      	lsrs	r3, r3, #16
 8003ad0:	f003 0204 	and.w	r2, r3, #4
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	f003 0310 	and.w	r3, r3, #16
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003af0:	ea42 0103 	orr.w	r1, r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e040      	b.n	8003bae <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d106      	bne.n	8003b42 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7fd fa5f 	bl	8001000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2224      	movs	r2, #36	@ 0x24
 8003b46:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0201 	bic.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fae1 	bl	8004128 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f826 	bl	8003bb8 <UART_SetConfig>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e01b      	b.n	8003bae <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b94:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0201 	orr.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fb60 	bl	800426c <UART_CheckIdleState>
 8003bac:	4603      	mov	r3, r0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bbc:	b08a      	sub	sp, #40	@ 0x28
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	4ba4      	ldr	r3, [pc, #656]	@ (8003e78 <UART_SetConfig+0x2c0>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	6812      	ldr	r2, [r2, #0]
 8003bee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a99      	ldr	r2, [pc, #612]	@ (8003e7c <UART_SetConfig+0x2c4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d004      	beq.n	8003c24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c20:	4313      	orrs	r3, r2
 8003c22:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c34:	430a      	orrs	r2, r1
 8003c36:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a90      	ldr	r2, [pc, #576]	@ (8003e80 <UART_SetConfig+0x2c8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d126      	bne.n	8003c90 <UART_SetConfig+0xd8>
 8003c42:	4b90      	ldr	r3, [pc, #576]	@ (8003e84 <UART_SetConfig+0x2cc>)
 8003c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c48:	f003 0303 	and.w	r3, r3, #3
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d81b      	bhi.n	8003c88 <UART_SetConfig+0xd0>
 8003c50:	a201      	add	r2, pc, #4	@ (adr r2, 8003c58 <UART_SetConfig+0xa0>)
 8003c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c56:	bf00      	nop
 8003c58:	08003c69 	.word	0x08003c69
 8003c5c:	08003c79 	.word	0x08003c79
 8003c60:	08003c71 	.word	0x08003c71
 8003c64:	08003c81 	.word	0x08003c81
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c6e:	e116      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003c70:	2302      	movs	r3, #2
 8003c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c76:	e112      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003c78:	2304      	movs	r3, #4
 8003c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c7e:	e10e      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003c80:	2308      	movs	r3, #8
 8003c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c86:	e10a      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003c88:	2310      	movs	r3, #16
 8003c8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c8e:	e106      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a7c      	ldr	r2, [pc, #496]	@ (8003e88 <UART_SetConfig+0x2d0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d138      	bne.n	8003d0c <UART_SetConfig+0x154>
 8003c9a:	4b7a      	ldr	r3, [pc, #488]	@ (8003e84 <UART_SetConfig+0x2cc>)
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca0:	f003 030c 	and.w	r3, r3, #12
 8003ca4:	2b0c      	cmp	r3, #12
 8003ca6:	d82d      	bhi.n	8003d04 <UART_SetConfig+0x14c>
 8003ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb0 <UART_SetConfig+0xf8>)
 8003caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003ce5 	.word	0x08003ce5
 8003cb4:	08003d05 	.word	0x08003d05
 8003cb8:	08003d05 	.word	0x08003d05
 8003cbc:	08003d05 	.word	0x08003d05
 8003cc0:	08003cf5 	.word	0x08003cf5
 8003cc4:	08003d05 	.word	0x08003d05
 8003cc8:	08003d05 	.word	0x08003d05
 8003ccc:	08003d05 	.word	0x08003d05
 8003cd0:	08003ced 	.word	0x08003ced
 8003cd4:	08003d05 	.word	0x08003d05
 8003cd8:	08003d05 	.word	0x08003d05
 8003cdc:	08003d05 	.word	0x08003d05
 8003ce0:	08003cfd 	.word	0x08003cfd
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cea:	e0d8      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003cec:	2302      	movs	r3, #2
 8003cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cf2:	e0d4      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cfa:	e0d0      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003cfc:	2308      	movs	r3, #8
 8003cfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d02:	e0cc      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003d04:	2310      	movs	r3, #16
 8003d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d0a:	e0c8      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a5e      	ldr	r2, [pc, #376]	@ (8003e8c <UART_SetConfig+0x2d4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d125      	bne.n	8003d62 <UART_SetConfig+0x1aa>
 8003d16:	4b5b      	ldr	r3, [pc, #364]	@ (8003e84 <UART_SetConfig+0x2cc>)
 8003d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d20:	2b30      	cmp	r3, #48	@ 0x30
 8003d22:	d016      	beq.n	8003d52 <UART_SetConfig+0x19a>
 8003d24:	2b30      	cmp	r3, #48	@ 0x30
 8003d26:	d818      	bhi.n	8003d5a <UART_SetConfig+0x1a2>
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d00a      	beq.n	8003d42 <UART_SetConfig+0x18a>
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d814      	bhi.n	8003d5a <UART_SetConfig+0x1a2>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <UART_SetConfig+0x182>
 8003d34:	2b10      	cmp	r3, #16
 8003d36:	d008      	beq.n	8003d4a <UART_SetConfig+0x192>
 8003d38:	e00f      	b.n	8003d5a <UART_SetConfig+0x1a2>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d40:	e0ad      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003d42:	2302      	movs	r3, #2
 8003d44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d48:	e0a9      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003d4a:	2304      	movs	r3, #4
 8003d4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d50:	e0a5      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003d52:	2308      	movs	r3, #8
 8003d54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d58:	e0a1      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003d5a:	2310      	movs	r3, #16
 8003d5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d60:	e09d      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a4a      	ldr	r2, [pc, #296]	@ (8003e90 <UART_SetConfig+0x2d8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d125      	bne.n	8003db8 <UART_SetConfig+0x200>
 8003d6c:	4b45      	ldr	r3, [pc, #276]	@ (8003e84 <UART_SetConfig+0x2cc>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d72:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003d76:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d78:	d016      	beq.n	8003da8 <UART_SetConfig+0x1f0>
 8003d7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d7c:	d818      	bhi.n	8003db0 <UART_SetConfig+0x1f8>
 8003d7e:	2b80      	cmp	r3, #128	@ 0x80
 8003d80:	d00a      	beq.n	8003d98 <UART_SetConfig+0x1e0>
 8003d82:	2b80      	cmp	r3, #128	@ 0x80
 8003d84:	d814      	bhi.n	8003db0 <UART_SetConfig+0x1f8>
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <UART_SetConfig+0x1d8>
 8003d8a:	2b40      	cmp	r3, #64	@ 0x40
 8003d8c:	d008      	beq.n	8003da0 <UART_SetConfig+0x1e8>
 8003d8e:	e00f      	b.n	8003db0 <UART_SetConfig+0x1f8>
 8003d90:	2300      	movs	r3, #0
 8003d92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d96:	e082      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d9e:	e07e      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003da0:	2304      	movs	r3, #4
 8003da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003da6:	e07a      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003da8:	2308      	movs	r3, #8
 8003daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dae:	e076      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003db0:	2310      	movs	r3, #16
 8003db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db6:	e072      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a35      	ldr	r2, [pc, #212]	@ (8003e94 <UART_SetConfig+0x2dc>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d12a      	bne.n	8003e18 <UART_SetConfig+0x260>
 8003dc2:	4b30      	ldr	r3, [pc, #192]	@ (8003e84 <UART_SetConfig+0x2cc>)
 8003dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dd0:	d01a      	beq.n	8003e08 <UART_SetConfig+0x250>
 8003dd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dd6:	d81b      	bhi.n	8003e10 <UART_SetConfig+0x258>
 8003dd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ddc:	d00c      	beq.n	8003df8 <UART_SetConfig+0x240>
 8003dde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003de2:	d815      	bhi.n	8003e10 <UART_SetConfig+0x258>
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <UART_SetConfig+0x238>
 8003de8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dec:	d008      	beq.n	8003e00 <UART_SetConfig+0x248>
 8003dee:	e00f      	b.n	8003e10 <UART_SetConfig+0x258>
 8003df0:	2300      	movs	r3, #0
 8003df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003df6:	e052      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dfe:	e04e      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003e00:	2304      	movs	r3, #4
 8003e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e06:	e04a      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003e08:	2308      	movs	r3, #8
 8003e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e0e:	e046      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003e10:	2310      	movs	r3, #16
 8003e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e16:	e042      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a17      	ldr	r2, [pc, #92]	@ (8003e7c <UART_SetConfig+0x2c4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d13a      	bne.n	8003e98 <UART_SetConfig+0x2e0>
 8003e22:	4b18      	ldr	r3, [pc, #96]	@ (8003e84 <UART_SetConfig+0x2cc>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e30:	d01a      	beq.n	8003e68 <UART_SetConfig+0x2b0>
 8003e32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e36:	d81b      	bhi.n	8003e70 <UART_SetConfig+0x2b8>
 8003e38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e3c:	d00c      	beq.n	8003e58 <UART_SetConfig+0x2a0>
 8003e3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e42:	d815      	bhi.n	8003e70 <UART_SetConfig+0x2b8>
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <UART_SetConfig+0x298>
 8003e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e4c:	d008      	beq.n	8003e60 <UART_SetConfig+0x2a8>
 8003e4e:	e00f      	b.n	8003e70 <UART_SetConfig+0x2b8>
 8003e50:	2300      	movs	r3, #0
 8003e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e56:	e022      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e5e:	e01e      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003e60:	2304      	movs	r3, #4
 8003e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e66:	e01a      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003e68:	2308      	movs	r3, #8
 8003e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e6e:	e016      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003e70:	2310      	movs	r3, #16
 8003e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e76:	e012      	b.n	8003e9e <UART_SetConfig+0x2e6>
 8003e78:	efff69f3 	.word	0xefff69f3
 8003e7c:	40008000 	.word	0x40008000
 8003e80:	40013800 	.word	0x40013800
 8003e84:	40021000 	.word	0x40021000
 8003e88:	40004400 	.word	0x40004400
 8003e8c:	40004800 	.word	0x40004800
 8003e90:	40004c00 	.word	0x40004c00
 8003e94:	40005000 	.word	0x40005000
 8003e98:	2310      	movs	r3, #16
 8003e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a9f      	ldr	r2, [pc, #636]	@ (8004120 <UART_SetConfig+0x568>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d17a      	bne.n	8003f9e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ea8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d824      	bhi.n	8003efa <UART_SetConfig+0x342>
 8003eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb8 <UART_SetConfig+0x300>)
 8003eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb6:	bf00      	nop
 8003eb8:	08003edd 	.word	0x08003edd
 8003ebc:	08003efb 	.word	0x08003efb
 8003ec0:	08003ee5 	.word	0x08003ee5
 8003ec4:	08003efb 	.word	0x08003efb
 8003ec8:	08003eeb 	.word	0x08003eeb
 8003ecc:	08003efb 	.word	0x08003efb
 8003ed0:	08003efb 	.word	0x08003efb
 8003ed4:	08003efb 	.word	0x08003efb
 8003ed8:	08003ef3 	.word	0x08003ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003edc:	f7ff f822 	bl	8002f24 <HAL_RCC_GetPCLK1Freq>
 8003ee0:	61f8      	str	r0, [r7, #28]
        break;
 8003ee2:	e010      	b.n	8003f06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ee4:	4b8f      	ldr	r3, [pc, #572]	@ (8004124 <UART_SetConfig+0x56c>)
 8003ee6:	61fb      	str	r3, [r7, #28]
        break;
 8003ee8:	e00d      	b.n	8003f06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eea:	f7fe ff83 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8003eee:	61f8      	str	r0, [r7, #28]
        break;
 8003ef0:	e009      	b.n	8003f06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ef2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ef6:	61fb      	str	r3, [r7, #28]
        break;
 8003ef8:	e005      	b.n	8003f06 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 80fb 	beq.w	8004104 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	4413      	add	r3, r2
 8003f18:	69fa      	ldr	r2, [r7, #28]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d305      	bcc.n	8003f2a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f24:	69fa      	ldr	r2, [r7, #28]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d903      	bls.n	8003f32 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f30:	e0e8      	b.n	8004104 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	2200      	movs	r2, #0
 8003f36:	461c      	mov	r4, r3
 8003f38:	4615      	mov	r5, r2
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	022b      	lsls	r3, r5, #8
 8003f44:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f48:	0222      	lsls	r2, r4, #8
 8003f4a:	68f9      	ldr	r1, [r7, #12]
 8003f4c:	6849      	ldr	r1, [r1, #4]
 8003f4e:	0849      	lsrs	r1, r1, #1
 8003f50:	2000      	movs	r0, #0
 8003f52:	4688      	mov	r8, r1
 8003f54:	4681      	mov	r9, r0
 8003f56:	eb12 0a08 	adds.w	sl, r2, r8
 8003f5a:	eb43 0b09 	adc.w	fp, r3, r9
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f6c:	4650      	mov	r0, sl
 8003f6e:	4659      	mov	r1, fp
 8003f70:	f7fc f92e 	bl	80001d0 <__aeabi_uldivmod>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4613      	mov	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f82:	d308      	bcc.n	8003f96 <UART_SetConfig+0x3de>
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f8a:	d204      	bcs.n	8003f96 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	60da      	str	r2, [r3, #12]
 8003f94:	e0b6      	b.n	8004104 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f9c:	e0b2      	b.n	8004104 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fa6:	d15e      	bne.n	8004066 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003fa8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d828      	bhi.n	8004002 <UART_SetConfig+0x44a>
 8003fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb8 <UART_SetConfig+0x400>)
 8003fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb6:	bf00      	nop
 8003fb8:	08003fdd 	.word	0x08003fdd
 8003fbc:	08003fe5 	.word	0x08003fe5
 8003fc0:	08003fed 	.word	0x08003fed
 8003fc4:	08004003 	.word	0x08004003
 8003fc8:	08003ff3 	.word	0x08003ff3
 8003fcc:	08004003 	.word	0x08004003
 8003fd0:	08004003 	.word	0x08004003
 8003fd4:	08004003 	.word	0x08004003
 8003fd8:	08003ffb 	.word	0x08003ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fdc:	f7fe ffa2 	bl	8002f24 <HAL_RCC_GetPCLK1Freq>
 8003fe0:	61f8      	str	r0, [r7, #28]
        break;
 8003fe2:	e014      	b.n	800400e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fe4:	f7fe ffb4 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 8003fe8:	61f8      	str	r0, [r7, #28]
        break;
 8003fea:	e010      	b.n	800400e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fec:	4b4d      	ldr	r3, [pc, #308]	@ (8004124 <UART_SetConfig+0x56c>)
 8003fee:	61fb      	str	r3, [r7, #28]
        break;
 8003ff0:	e00d      	b.n	800400e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ff2:	f7fe feff 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8003ff6:	61f8      	str	r0, [r7, #28]
        break;
 8003ff8:	e009      	b.n	800400e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ffe:	61fb      	str	r3, [r7, #28]
        break;
 8004000:	e005      	b.n	800400e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800400c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d077      	beq.n	8004104 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	005a      	lsls	r2, r3, #1
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	085b      	lsrs	r3, r3, #1
 800401e:	441a      	add	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	fbb2 f3f3 	udiv	r3, r2, r3
 8004028:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	2b0f      	cmp	r3, #15
 800402e:	d916      	bls.n	800405e <UART_SetConfig+0x4a6>
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004036:	d212      	bcs.n	800405e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	b29b      	uxth	r3, r3
 800403c:	f023 030f 	bic.w	r3, r3, #15
 8004040:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	085b      	lsrs	r3, r3, #1
 8004046:	b29b      	uxth	r3, r3
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	b29a      	uxth	r2, r3
 800404e:	8afb      	ldrh	r3, [r7, #22]
 8004050:	4313      	orrs	r3, r2
 8004052:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	8afa      	ldrh	r2, [r7, #22]
 800405a:	60da      	str	r2, [r3, #12]
 800405c:	e052      	b.n	8004104 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004064:	e04e      	b.n	8004104 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004066:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800406a:	2b08      	cmp	r3, #8
 800406c:	d827      	bhi.n	80040be <UART_SetConfig+0x506>
 800406e:	a201      	add	r2, pc, #4	@ (adr r2, 8004074 <UART_SetConfig+0x4bc>)
 8004070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004074:	08004099 	.word	0x08004099
 8004078:	080040a1 	.word	0x080040a1
 800407c:	080040a9 	.word	0x080040a9
 8004080:	080040bf 	.word	0x080040bf
 8004084:	080040af 	.word	0x080040af
 8004088:	080040bf 	.word	0x080040bf
 800408c:	080040bf 	.word	0x080040bf
 8004090:	080040bf 	.word	0x080040bf
 8004094:	080040b7 	.word	0x080040b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004098:	f7fe ff44 	bl	8002f24 <HAL_RCC_GetPCLK1Freq>
 800409c:	61f8      	str	r0, [r7, #28]
        break;
 800409e:	e014      	b.n	80040ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040a0:	f7fe ff56 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 80040a4:	61f8      	str	r0, [r7, #28]
        break;
 80040a6:	e010      	b.n	80040ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004124 <UART_SetConfig+0x56c>)
 80040aa:	61fb      	str	r3, [r7, #28]
        break;
 80040ac:	e00d      	b.n	80040ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ae:	f7fe fea1 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 80040b2:	61f8      	str	r0, [r7, #28]
        break;
 80040b4:	e009      	b.n	80040ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040ba:	61fb      	str	r3, [r7, #28]
        break;
 80040bc:	e005      	b.n	80040ca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80040c8:	bf00      	nop
    }

    if (pclk != 0U)
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d019      	beq.n	8004104 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	085a      	lsrs	r2, r3, #1
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	441a      	add	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	2b0f      	cmp	r3, #15
 80040e8:	d909      	bls.n	80040fe <UART_SetConfig+0x546>
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040f0:	d205      	bcs.n	80040fe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60da      	str	r2, [r3, #12]
 80040fc:	e002      	b.n	8004104 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004110:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004114:	4618      	mov	r0, r3
 8004116:	3728      	adds	r7, #40	@ 0x28
 8004118:	46bd      	mov	sp, r7
 800411a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800411e:	bf00      	nop
 8004120:	40008000 	.word	0x40008000
 8004124:	00f42400 	.word	0x00f42400

08004128 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01a      	beq.n	800423e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004222:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004226:	d10a      	bne.n	800423e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	605a      	str	r2, [r3, #4]
  }
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b098      	sub	sp, #96	@ 0x60
 8004270:	af02      	add	r7, sp, #8
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800427c:	f7fd f8f6 	bl	800146c <HAL_GetTick>
 8004280:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b08      	cmp	r3, #8
 800428e:	d12e      	bne.n	80042ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004290:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004298:	2200      	movs	r2, #0
 800429a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f88c 	bl	80043bc <UART_WaitOnFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d021      	beq.n	80042ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b2:	e853 3f00 	ldrex	r3, [r3]
 80042b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042be:	653b      	str	r3, [r7, #80]	@ 0x50
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	461a      	mov	r2, r3
 80042c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80042ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042d0:	e841 2300 	strex	r3, r2, [r1]
 80042d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1e6      	bne.n	80042aa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e062      	b.n	80043b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d149      	bne.n	8004390 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004304:	2200      	movs	r2, #0
 8004306:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f856 	bl	80043bc <UART_WaitOnFlagUntilTimeout>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d03c      	beq.n	8004390 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431e:	e853 3f00 	ldrex	r3, [r3]
 8004322:	623b      	str	r3, [r7, #32]
   return(result);
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800432a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004334:	633b      	str	r3, [r7, #48]	@ 0x30
 8004336:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800433a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800433c:	e841 2300 	strex	r3, r2, [r1]
 8004340:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e6      	bne.n	8004316 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3308      	adds	r3, #8
 800434e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	e853 3f00 	ldrex	r3, [r3]
 8004356:	60fb      	str	r3, [r7, #12]
   return(result);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0301 	bic.w	r3, r3, #1
 800435e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3308      	adds	r3, #8
 8004366:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004368:	61fa      	str	r2, [r7, #28]
 800436a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436c:	69b9      	ldr	r1, [r7, #24]
 800436e:	69fa      	ldr	r2, [r7, #28]
 8004370:	e841 2300 	strex	r3, r2, [r1]
 8004374:	617b      	str	r3, [r7, #20]
   return(result);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e5      	bne.n	8004348 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e011      	b.n	80043b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2220      	movs	r2, #32
 8004394:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2220      	movs	r2, #32
 800439a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3758      	adds	r7, #88	@ 0x58
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	4613      	mov	r3, r2
 80043ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043cc:	e04f      	b.n	800446e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d4:	d04b      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d6:	f7fd f849 	bl	800146c <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d302      	bcc.n	80043ec <UART_WaitOnFlagUntilTimeout+0x30>
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e04e      	b.n	800448e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d037      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0xb2>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b80      	cmp	r3, #128	@ 0x80
 8004402:	d034      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2b40      	cmp	r3, #64	@ 0x40
 8004408:	d031      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b08      	cmp	r3, #8
 8004416:	d110      	bne.n	800443a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2208      	movs	r2, #8
 800441e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 f838 	bl	8004496 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2208      	movs	r2, #8
 800442a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e029      	b.n	800448e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004444:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004448:	d111      	bne.n	800446e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004452:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 f81e 	bl	8004496 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2220      	movs	r2, #32
 800445e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e00f      	b.n	800448e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69da      	ldr	r2, [r3, #28]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4013      	ands	r3, r2
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	429a      	cmp	r2, r3
 800447c:	bf0c      	ite	eq
 800447e:	2301      	moveq	r3, #1
 8004480:	2300      	movne	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	461a      	mov	r2, r3
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	429a      	cmp	r2, r3
 800448a:	d0a0      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004496:	b480      	push	{r7}
 8004498:	b095      	sub	sp, #84	@ 0x54
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a6:	e853 3f00 	ldrex	r3, [r3]
 80044aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80044be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044c4:	e841 2300 	strex	r3, r2, [r1]
 80044c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e6      	bne.n	800449e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3308      	adds	r3, #8
 80044d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	61fb      	str	r3, [r7, #28]
   return(result);
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f023 0301 	bic.w	r3, r3, #1
 80044e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3308      	adds	r3, #8
 80044ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044f8:	e841 2300 	strex	r3, r2, [r1]
 80044fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e5      	bne.n	80044d0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004508:	2b01      	cmp	r3, #1
 800450a:	d118      	bne.n	800453e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	60bb      	str	r3, [r7, #8]
   return(result);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f023 0310 	bic.w	r3, r3, #16
 8004520:	647b      	str	r3, [r7, #68]	@ 0x44
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800452a:	61bb      	str	r3, [r7, #24]
 800452c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452e:	6979      	ldr	r1, [r7, #20]
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	e841 2300 	strex	r3, r2, [r1]
 8004536:	613b      	str	r3, [r7, #16]
   return(result);
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1e6      	bne.n	800450c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004552:	bf00      	nop
 8004554:	3754      	adds	r7, #84	@ 0x54
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800455e:	b084      	sub	sp, #16
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	f107 001c 	add.w	r0, r7, #28
 800456c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fa69 	bl	8004a54 <USB_CoreReset>
 8004582:	4603      	mov	r3, r0
 8004584:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004586:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004592:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	639a      	str	r2, [r3, #56]	@ 0x38
 800459a:	e005      	b.n	80045a8 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045b4:	b004      	add	sp, #16
 80045b6:	4770      	bx	lr

080045b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f023 0201 	bic.w	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b084      	sub	sp, #16
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	460b      	mov	r3, r1
 80045e4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045f6:	78fb      	ldrb	r3, [r7, #3]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d115      	bne.n	8004628 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004608:	200a      	movs	r0, #10
 800460a:	f7fc ff3b 	bl	8001484 <HAL_Delay>
      ms += 10U;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	330a      	adds	r3, #10
 8004612:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fa0f 	bl	8004a38 <USB_GetMode>
 800461a:	4603      	mov	r3, r0
 800461c:	2b01      	cmp	r3, #1
 800461e:	d01e      	beq.n	800465e <USB_SetCurrentMode+0x84>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2bc7      	cmp	r3, #199	@ 0xc7
 8004624:	d9f0      	bls.n	8004608 <USB_SetCurrentMode+0x2e>
 8004626:	e01a      	b.n	800465e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d115      	bne.n	800465a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800463a:	200a      	movs	r0, #10
 800463c:	f7fc ff22 	bl	8001484 <HAL_Delay>
      ms += 10U;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	330a      	adds	r3, #10
 8004644:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f9f6 	bl	8004a38 <USB_GetMode>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <USB_SetCurrentMode+0x84>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2bc7      	cmp	r3, #199	@ 0xc7
 8004656:	d9f0      	bls.n	800463a <USB_SetCurrentMode+0x60>
 8004658:	e001      	b.n	800465e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e005      	b.n	800466a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2bc8      	cmp	r3, #200	@ 0xc8
 8004662:	d101      	bne.n	8004668 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e000      	b.n	800466a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004674:	b084      	sub	sp, #16
 8004676:	b580      	push	{r7, lr}
 8004678:	b086      	sub	sp, #24
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800468e:	2300      	movs	r3, #0
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	e009      	b.n	80046a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	3340      	adds	r3, #64	@ 0x40
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	2200      	movs	r2, #0
 80046a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	3301      	adds	r3, #1
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	2b0e      	cmp	r3, #14
 80046ac:	d9f2      	bls.n	8004694 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d11c      	bne.n	80046f0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046c4:	f043 0302 	orr.w	r3, r3, #2
 80046c8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ce:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	e005      	b.n	80046fc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004702:	461a      	mov	r2, r3
 8004704:	2300      	movs	r3, #0
 8004706:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004708:	2103      	movs	r1, #3
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f95a 	bl	80049c4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004710:	2110      	movs	r1, #16
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f8f6 	bl	8004904 <USB_FlushTxFifo>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f920 	bl	8004968 <USB_FlushRxFifo>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004738:	461a      	mov	r2, r3
 800473a:	2300      	movs	r3, #0
 800473c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004744:	461a      	mov	r2, r3
 8004746:	2300      	movs	r3, #0
 8004748:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004750:	461a      	mov	r2, r3
 8004752:	2300      	movs	r3, #0
 8004754:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004756:	2300      	movs	r3, #0
 8004758:	613b      	str	r3, [r7, #16]
 800475a:	e043      	b.n	80047e4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800476e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004772:	d118      	bne.n	80047a6 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10a      	bne.n	8004790 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4413      	add	r3, r2
 8004782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004786:	461a      	mov	r2, r3
 8004788:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	e013      	b.n	80047b8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800479c:	461a      	mov	r2, r3
 800479e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	e008      	b.n	80047b8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047b2:	461a      	mov	r2, r3
 80047b4:	2300      	movs	r3, #0
 80047b6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047c4:	461a      	mov	r2, r3
 80047c6:	2300      	movs	r3, #0
 80047c8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047d6:	461a      	mov	r2, r3
 80047d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	3301      	adds	r3, #1
 80047e2:	613b      	str	r3, [r7, #16]
 80047e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047e8:	461a      	mov	r2, r3
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d3b5      	bcc.n	800475c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047f0:	2300      	movs	r3, #0
 80047f2:	613b      	str	r3, [r7, #16]
 80047f4:	e043      	b.n	800487e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004808:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800480c:	d118      	bne.n	8004840 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10a      	bne.n	800482a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004820:	461a      	mov	r2, r3
 8004822:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	e013      	b.n	8004852 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004836:	461a      	mov	r2, r3
 8004838:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	e008      	b.n	8004852 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800484c:	461a      	mov	r2, r3
 800484e:	2300      	movs	r3, #0
 8004850:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800485e:	461a      	mov	r2, r3
 8004860:	2300      	movs	r3, #0
 8004862:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004870:	461a      	mov	r2, r3
 8004872:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004876:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	3301      	adds	r3, #1
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004882:	461a      	mov	r2, r3
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	4293      	cmp	r3, r2
 8004888:	d3b5      	bcc.n	80047f6 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004898:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800489c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80048aa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	f043 0210 	orr.w	r2, r3, #16
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	699a      	ldr	r2, [r3, #24]
 80048bc:	4b10      	ldr	r3, [pc, #64]	@ (8004900 <USB_DevInit+0x28c>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d005      	beq.n	80048d8 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	f043 0208 	orr.w	r2, r3, #8
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d107      	bne.n	80048f0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048e8:	f043 0304 	orr.w	r3, r3, #4
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048fc:	b004      	add	sp, #16
 80048fe:	4770      	bx	lr
 8004900:	803c3800 	.word	0x803c3800

08004904 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3301      	adds	r3, #1
 8004916:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800491e:	d901      	bls.n	8004924 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e01b      	b.n	800495c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	daf2      	bge.n	8004912 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	019b      	lsls	r3, r3, #6
 8004934:	f043 0220 	orr.w	r2, r3, #32
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	3301      	adds	r3, #1
 8004940:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004948:	d901      	bls.n	800494e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e006      	b.n	800495c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b20      	cmp	r3, #32
 8004958:	d0f0      	beq.n	800493c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	3301      	adds	r3, #1
 8004978:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004980:	d901      	bls.n	8004986 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e018      	b.n	80049b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	daf2      	bge.n	8004974 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2210      	movs	r2, #16
 8004996:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	3301      	adds	r3, #1
 800499c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049a4:	d901      	bls.n	80049aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e006      	b.n	80049b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	2b10      	cmp	r3, #16
 80049b4:	d0f0      	beq.n	8004998 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	68f9      	ldr	r1, [r7, #12]
 80049e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049e4:	4313      	orrs	r3, r2
 80049e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b085      	sub	sp, #20
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004a10:	f023 0303 	bic.w	r3, r3, #3
 8004a14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a24:	f043 0302 	orr.w	r3, r3, #2
 8004a28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	f003 0301 	and.w	r3, r3, #1
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	3301      	adds	r3, #1
 8004a64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a6c:	d901      	bls.n	8004a72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e01b      	b.n	8004aaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	daf2      	bge.n	8004a60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f043 0201 	orr.w	r2, r3, #1
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a96:	d901      	bls.n	8004a9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e006      	b.n	8004aaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d0f0      	beq.n	8004a8a <USB_CoreReset+0x36>

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
	...

08004ab8 <__NVIC_SetPriority>:
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	6039      	str	r1, [r7, #0]
 8004ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	db0a      	blt.n	8004ae2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	490c      	ldr	r1, [pc, #48]	@ (8004b04 <__NVIC_SetPriority+0x4c>)
 8004ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad6:	0112      	lsls	r2, r2, #4
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	440b      	add	r3, r1
 8004adc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004ae0:	e00a      	b.n	8004af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	4908      	ldr	r1, [pc, #32]	@ (8004b08 <__NVIC_SetPriority+0x50>)
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	3b04      	subs	r3, #4
 8004af0:	0112      	lsls	r2, r2, #4
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	440b      	add	r3, r1
 8004af6:	761a      	strb	r2, [r3, #24]
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	e000e100 	.word	0xe000e100
 8004b08:	e000ed00 	.word	0xe000ed00

08004b0c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004b10:	2100      	movs	r1, #0
 8004b12:	f06f 0004 	mvn.w	r0, #4
 8004b16:	f7ff ffcf 	bl	8004ab8 <__NVIC_SetPriority>
#endif
}
 8004b1a:	bf00      	nop
 8004b1c:	bd80      	pop	{r7, pc}
	...

08004b20 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b26:	f3ef 8305 	mrs	r3, IPSR
 8004b2a:	603b      	str	r3, [r7, #0]
  return(result);
 8004b2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004b32:	f06f 0305 	mvn.w	r3, #5
 8004b36:	607b      	str	r3, [r7, #4]
 8004b38:	e00c      	b.n	8004b54 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b64 <osKernelInitialize+0x44>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d105      	bne.n	8004b4e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004b42:	4b08      	ldr	r3, [pc, #32]	@ (8004b64 <osKernelInitialize+0x44>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	607b      	str	r3, [r7, #4]
 8004b4c:	e002      	b.n	8004b54 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b54:	687b      	ldr	r3, [r7, #4]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	20000794 	.word	0x20000794

08004b68 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b6e:	f3ef 8305 	mrs	r3, IPSR
 8004b72:	603b      	str	r3, [r7, #0]
  return(result);
 8004b74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004b7a:	f06f 0305 	mvn.w	r3, #5
 8004b7e:	607b      	str	r3, [r7, #4]
 8004b80:	e010      	b.n	8004ba4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b82:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb0 <osKernelStart+0x48>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d109      	bne.n	8004b9e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004b8a:	f7ff ffbf 	bl	8004b0c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004b8e:	4b08      	ldr	r3, [pc, #32]	@ (8004bb0 <osKernelStart+0x48>)
 8004b90:	2202      	movs	r2, #2
 8004b92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004b94:	f001 fc3e 	bl	8006414 <vTaskStartScheduler>
      stat = osOK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	607b      	str	r3, [r7, #4]
 8004b9c:	e002      	b.n	8004ba4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ba4:	687b      	ldr	r3, [r7, #4]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	20000794 	.word	0x20000794

08004bb4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08e      	sub	sp, #56	@ 0x38
 8004bb8:	af04      	add	r7, sp, #16
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bc4:	f3ef 8305 	mrs	r3, IPSR
 8004bc8:	617b      	str	r3, [r7, #20]
  return(result);
 8004bca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d17e      	bne.n	8004cce <osThreadNew+0x11a>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d07b      	beq.n	8004cce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004bd6:	2380      	movs	r3, #128	@ 0x80
 8004bd8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004bda:	2318      	movs	r3, #24
 8004bdc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004be2:	f04f 33ff 	mov.w	r3, #4294967295
 8004be6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d045      	beq.n	8004c7a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <osThreadNew+0x48>
        name = attr->name;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <osThreadNew+0x6e>
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	2b38      	cmp	r3, #56	@ 0x38
 8004c14:	d805      	bhi.n	8004c22 <osThreadNew+0x6e>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <osThreadNew+0x72>
        return (NULL);
 8004c22:	2300      	movs	r3, #0
 8004c24:	e054      	b.n	8004cd0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	089b      	lsrs	r3, r3, #2
 8004c34:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00e      	beq.n	8004c5c <osThreadNew+0xa8>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	2b5b      	cmp	r3, #91	@ 0x5b
 8004c44:	d90a      	bls.n	8004c5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d006      	beq.n	8004c5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <osThreadNew+0xa8>
        mem = 1;
 8004c56:	2301      	movs	r3, #1
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	e010      	b.n	8004c7e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10c      	bne.n	8004c7e <osThreadNew+0xca>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d108      	bne.n	8004c7e <osThreadNew+0xca>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d104      	bne.n	8004c7e <osThreadNew+0xca>
          mem = 0;
 8004c74:	2300      	movs	r3, #0
 8004c76:	61bb      	str	r3, [r7, #24]
 8004c78:	e001      	b.n	8004c7e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d110      	bne.n	8004ca6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c8c:	9202      	str	r2, [sp, #8]
 8004c8e:	9301      	str	r3, [sp, #4]
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	6a3a      	ldr	r2, [r7, #32]
 8004c98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f001 f9de 	bl	800605c <xTaskCreateStatic>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	613b      	str	r3, [r7, #16]
 8004ca4:	e013      	b.n	8004cce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d110      	bne.n	8004cce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	f107 0310 	add.w	r3, r7, #16
 8004cb4:	9301      	str	r3, [sp, #4]
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f001 fa2c 	bl	800611c <xTaskCreate>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d001      	beq.n	8004cce <osThreadNew+0x11a>
            hTask = NULL;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004cce:	693b      	ldr	r3, [r7, #16]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3728      	adds	r7, #40	@ 0x28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ce0:	f3ef 8305 	mrs	r3, IPSR
 8004ce4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ce6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <osDelay+0x1c>
    stat = osErrorISR;
 8004cec:	f06f 0305 	mvn.w	r3, #5
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	e007      	b.n	8004d04 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f001 fb52 	bl	80063a8 <vTaskDelay>
    }
  }

  return (stat);
 8004d04:	68fb      	ldr	r3, [r7, #12]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <osMutexAcquire>:
  }

  return ((osMutexId_t)hMutex);
}

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b086      	sub	sp, #24
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f023 0301 	bic.w	r3, r3, #1
 8004d1e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d2c:	f3ef 8305 	mrs	r3, IPSR
 8004d30:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d32:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004d38:	f06f 0305 	mvn.w	r3, #5
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	e02c      	b.n	8004d9a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d103      	bne.n	8004d4e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004d46:	f06f 0303 	mvn.w	r3, #3
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	e025      	b.n	8004d9a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d011      	beq.n	8004d78 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004d54:	6839      	ldr	r1, [r7, #0]
 8004d56:	6938      	ldr	r0, [r7, #16]
 8004d58:	f000 fb1f 	bl	800539a <xQueueTakeMutexRecursive>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d01b      	beq.n	8004d9a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004d68:	f06f 0301 	mvn.w	r3, #1
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	e014      	b.n	8004d9a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004d70:	f06f 0302 	mvn.w	r3, #2
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	e010      	b.n	8004d9a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004d78:	6839      	ldr	r1, [r7, #0]
 8004d7a:	6938      	ldr	r0, [r7, #16]
 8004d7c:	f000 fe56 	bl	8005a2c <xQueueSemaphoreTake>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d009      	beq.n	8004d9a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004d8c:	f06f 0301 	mvn.w	r3, #1
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	e002      	b.n	8004d9a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004d94:	f06f 0302 	mvn.w	r3, #2
 8004d98:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004d9a:	697b      	ldr	r3, [r7, #20]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f023 0301 	bic.w	r3, r3, #1
 8004db2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dc0:	f3ef 8305 	mrs	r3, IPSR
 8004dc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dc6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <osMutexRelease+0x30>
    stat = osErrorISR;
 8004dcc:	f06f 0305 	mvn.w	r3, #5
 8004dd0:	617b      	str	r3, [r7, #20]
 8004dd2:	e01f      	b.n	8004e14 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d103      	bne.n	8004de2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004dda:	f06f 0303 	mvn.w	r3, #3
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	e018      	b.n	8004e14 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d009      	beq.n	8004dfc <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004de8:	6938      	ldr	r0, [r7, #16]
 8004dea:	f000 faa1 	bl	8005330 <xQueueGiveMutexRecursive>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d00f      	beq.n	8004e14 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004df4:	f06f 0302 	mvn.w	r3, #2
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	e00b      	b.n	8004e14 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2100      	movs	r1, #0
 8004e02:	6938      	ldr	r0, [r7, #16]
 8004e04:	f000 fb00 	bl	8005408 <xQueueGenericSend>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d002      	beq.n	8004e14 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004e0e:	f06f 0302 	mvn.w	r3, #2
 8004e12:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004e14:	697b      	ldr	r3, [r7, #20]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
	...

08004e20 <osSemaphoreAcquire>:
  }

  return ((osSemaphoreId_t)hSemaphore);
}

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d103      	bne.n	8004e40 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004e38:	f06f 0303 	mvn.w	r3, #3
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	e039      	b.n	8004eb4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e40:	f3ef 8305 	mrs	r3, IPSR
 8004e44:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e46:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d022      	beq.n	8004e92 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004e52:	f06f 0303 	mvn.w	r3, #3
 8004e56:	617b      	str	r3, [r7, #20]
 8004e58:	e02c      	b.n	8004eb4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004e5e:	f107 0308 	add.w	r3, r7, #8
 8004e62:	461a      	mov	r2, r3
 8004e64:	2100      	movs	r1, #0
 8004e66:	6938      	ldr	r0, [r7, #16]
 8004e68:	f000 fef0 	bl	8005c4c <xQueueReceiveFromISR>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d003      	beq.n	8004e7a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004e72:	f06f 0302 	mvn.w	r3, #2
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	e01c      	b.n	8004eb4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d019      	beq.n	8004eb4 <osSemaphoreAcquire+0x94>
 8004e80:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec0 <osSemaphoreAcquire+0xa0>)
 8004e82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	e010      	b.n	8004eb4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004e92:	6839      	ldr	r1, [r7, #0]
 8004e94:	6938      	ldr	r0, [r7, #16]
 8004e96:	f000 fdc9 	bl	8005a2c <xQueueSemaphoreTake>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d009      	beq.n	8004eb4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004ea6:	f06f 0301 	mvn.w	r3, #1
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	e002      	b.n	8004eb4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004eae:	f06f 0302 	mvn.w	r3, #2
 8004eb2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004eb4:	697b      	ldr	r3, [r7, #20]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	e000ed04 	.word	0xe000ed04

08004ec4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d103      	bne.n	8004ee2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004eda:	f06f 0303 	mvn.w	r3, #3
 8004ede:	617b      	str	r3, [r7, #20]
 8004ee0:	e02c      	b.n	8004f3c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ee2:	f3ef 8305 	mrs	r3, IPSR
 8004ee6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d01a      	beq.n	8004f24 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004ef2:	f107 0308 	add.w	r3, r7, #8
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	6938      	ldr	r0, [r7, #16]
 8004efa:	f000 fc25 	bl	8005748 <xQueueGiveFromISR>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d003      	beq.n	8004f0c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004f04:	f06f 0302 	mvn.w	r3, #2
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	e017      	b.n	8004f3c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d014      	beq.n	8004f3c <osSemaphoreRelease+0x78>
 8004f12:	4b0d      	ldr	r3, [pc, #52]	@ (8004f48 <osSemaphoreRelease+0x84>)
 8004f14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	e00b      	b.n	8004f3c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004f24:	2300      	movs	r3, #0
 8004f26:	2200      	movs	r2, #0
 8004f28:	2100      	movs	r1, #0
 8004f2a:	6938      	ldr	r0, [r7, #16]
 8004f2c:	f000 fa6c 	bl	8005408 <xQueueGenericSend>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d002      	beq.n	8004f3c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004f36:	f06f 0302 	mvn.w	r3, #2
 8004f3a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004f3c:	697b      	ldr	r3, [r7, #20]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	e000ed04 	.word	0xe000ed04

08004f4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4a07      	ldr	r2, [pc, #28]	@ (8004f78 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	4a06      	ldr	r2, [pc, #24]	@ (8004f7c <vApplicationGetIdleTaskMemory+0x30>)
 8004f62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2280      	movs	r2, #128	@ 0x80
 8004f68:	601a      	str	r2, [r3, #0]
}
 8004f6a:	bf00      	nop
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	20000798 	.word	0x20000798
 8004f7c:	200007f4 	.word	0x200007f4

08004f80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4a07      	ldr	r2, [pc, #28]	@ (8004fac <vApplicationGetTimerTaskMemory+0x2c>)
 8004f90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4a06      	ldr	r2, [pc, #24]	@ (8004fb0 <vApplicationGetTimerTaskMemory+0x30>)
 8004f96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f9e:	601a      	str	r2, [r3, #0]
}
 8004fa0:	bf00      	nop
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	200009f4 	.word	0x200009f4
 8004fb0:	20000a50 	.word	0x20000a50

08004fb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f103 0208 	add.w	r2, r3, #8
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fcc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f103 0208 	add.w	r2, r3, #8
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f103 0208 	add.w	r2, r3, #8
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800500e:	b480      	push	{r7}
 8005010:	b085      	sub	sp, #20
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	601a      	str	r2, [r3, #0]
}
 800504a:	bf00      	nop
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005056:	b480      	push	{r7}
 8005058:	b085      	sub	sp, #20
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506c:	d103      	bne.n	8005076 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	e00c      	b.n	8005090 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	3308      	adds	r3, #8
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	e002      	b.n	8005084 <vListInsert+0x2e>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	429a      	cmp	r2, r3
 800508e:	d2f6      	bcs.n	800507e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	601a      	str	r2, [r3, #0]
}
 80050bc:	bf00      	nop
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6892      	ldr	r2, [r2, #8]
 80050de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6852      	ldr	r2, [r2, #4]
 80050e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d103      	bne.n	80050fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	1e5a      	subs	r2, r3, #1
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10b      	bne.n	8005148 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005142:	bf00      	nop
 8005144:	bf00      	nop
 8005146:	e7fd      	b.n	8005144 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005148:	f002 fc2e 	bl	80079a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005154:	68f9      	ldr	r1, [r7, #12]
 8005156:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005158:	fb01 f303 	mul.w	r3, r1, r3
 800515c:	441a      	add	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005178:	3b01      	subs	r3, #1
 800517a:	68f9      	ldr	r1, [r7, #12]
 800517c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800517e:	fb01 f303 	mul.w	r3, r1, r3
 8005182:	441a      	add	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	22ff      	movs	r2, #255	@ 0xff
 800518c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	22ff      	movs	r2, #255	@ 0xff
 8005194:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d114      	bne.n	80051c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d01a      	beq.n	80051dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	3310      	adds	r3, #16
 80051aa:	4618      	mov	r0, r3
 80051ac:	f001 fbc0 	bl	8006930 <xTaskRemoveFromEventList>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d012      	beq.n	80051dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051b6:	4b0d      	ldr	r3, [pc, #52]	@ (80051ec <xQueueGenericReset+0xd0>)
 80051b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	e009      	b.n	80051dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	3310      	adds	r3, #16
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff fef1 	bl	8004fb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3324      	adds	r3, #36	@ 0x24
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff feec 	bl	8004fb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051dc:	f002 fc16 	bl	8007a0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051e0:	2301      	movs	r3, #1
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	e000ed04 	.word	0xe000ed04

080051f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08e      	sub	sp, #56	@ 0x38
 80051f4:	af02      	add	r7, sp, #8
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10b      	bne.n	800521c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005216:	bf00      	nop
 8005218:	bf00      	nop
 800521a:	e7fd      	b.n	8005218 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10b      	bne.n	800523a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop
 8005238:	e7fd      	b.n	8005236 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <xQueueGenericCreateStatic+0x56>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <xQueueGenericCreateStatic+0x5a>
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <xQueueGenericCreateStatic+0x5c>
 800524a:	2300      	movs	r3, #0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10b      	bne.n	8005268 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	623b      	str	r3, [r7, #32]
}
 8005262:	bf00      	nop
 8005264:	bf00      	nop
 8005266:	e7fd      	b.n	8005264 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d102      	bne.n	8005274 <xQueueGenericCreateStatic+0x84>
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <xQueueGenericCreateStatic+0x88>
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <xQueueGenericCreateStatic+0x8a>
 8005278:	2300      	movs	r3, #0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10b      	bne.n	8005296 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	61fb      	str	r3, [r7, #28]
}
 8005290:	bf00      	nop
 8005292:	bf00      	nop
 8005294:	e7fd      	b.n	8005292 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005296:	2350      	movs	r3, #80	@ 0x50
 8005298:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2b50      	cmp	r3, #80	@ 0x50
 800529e:	d00b      	beq.n	80052b8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	61bb      	str	r3, [r7, #24]
}
 80052b2:	bf00      	nop
 80052b4:	bf00      	nop
 80052b6:	e7fd      	b.n	80052b4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80052be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00d      	beq.n	80052e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80052d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	4613      	mov	r3, r2
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	68b9      	ldr	r1, [r7, #8]
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 f805 	bl	80052ea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3730      	adds	r7, #48	@ 0x30
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b084      	sub	sp, #16
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	60f8      	str	r0, [r7, #12]
 80052f2:	60b9      	str	r1, [r7, #8]
 80052f4:	607a      	str	r2, [r7, #4]
 80052f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d103      	bne.n	8005306 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	e002      	b.n	800530c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005318:	2101      	movs	r1, #1
 800531a:	69b8      	ldr	r0, [r7, #24]
 800531c:	f7ff fefe 	bl	800511c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	78fa      	ldrb	r2, [r7, #3]
 8005324:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005328:	bf00      	nop
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005330:	b590      	push	{r4, r7, lr}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10b      	bne.n	800535a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	60fb      	str	r3, [r7, #12]
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop
 8005358:	e7fd      	b.n	8005356 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	689c      	ldr	r4, [r3, #8]
 800535e:	f001 fca7 	bl	8006cb0 <xTaskGetCurrentTaskHandle>
 8005362:	4603      	mov	r3, r0
 8005364:	429c      	cmp	r4, r3
 8005366:	d111      	bne.n	800538c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	1e5a      	subs	r2, r3, #1
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d105      	bne.n	8005386 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800537a:	2300      	movs	r3, #0
 800537c:	2200      	movs	r2, #0
 800537e:	2100      	movs	r1, #0
 8005380:	6938      	ldr	r0, [r7, #16]
 8005382:	f000 f841 	bl	8005408 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005386:	2301      	movs	r3, #1
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	e001      	b.n	8005390 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005390:	697b      	ldr	r3, [r7, #20]
	}
 8005392:	4618      	mov	r0, r3
 8005394:	371c      	adds	r7, #28
 8005396:	46bd      	mov	sp, r7
 8005398:	bd90      	pop	{r4, r7, pc}

0800539a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800539a:	b590      	push	{r4, r7, lr}
 800539c:	b087      	sub	sp, #28
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10b      	bne.n	80053c6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	60fb      	str	r3, [r7, #12]
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	e7fd      	b.n	80053c2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	689c      	ldr	r4, [r3, #8]
 80053ca:	f001 fc71 	bl	8006cb0 <xTaskGetCurrentTaskHandle>
 80053ce:	4603      	mov	r3, r0
 80053d0:	429c      	cmp	r4, r3
 80053d2:	d107      	bne.n	80053e4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80053de:	2301      	movs	r3, #1
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	e00c      	b.n	80053fe <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80053e4:	6839      	ldr	r1, [r7, #0]
 80053e6:	6938      	ldr	r0, [r7, #16]
 80053e8:	f000 fb20 	bl	8005a2c <xQueueSemaphoreTake>
 80053ec:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d004      	beq.n	80053fe <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80053fe:	697b      	ldr	r3, [r7, #20]
	}
 8005400:	4618      	mov	r0, r3
 8005402:	371c      	adds	r7, #28
 8005404:	46bd      	mov	sp, r7
 8005406:	bd90      	pop	{r4, r7, pc}

08005408 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08e      	sub	sp, #56	@ 0x38
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005416:	2300      	movs	r3, #0
 8005418:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800541e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10b      	bne.n	800543c <xQueueGenericSend+0x34>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005436:	bf00      	nop
 8005438:	bf00      	nop
 800543a:	e7fd      	b.n	8005438 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d103      	bne.n	800544a <xQueueGenericSend+0x42>
 8005442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <xQueueGenericSend+0x46>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <xQueueGenericSend+0x48>
 800544e:	2300      	movs	r3, #0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10b      	bne.n	800546c <xQueueGenericSend+0x64>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005466:	bf00      	nop
 8005468:	bf00      	nop
 800546a:	e7fd      	b.n	8005468 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	2b02      	cmp	r3, #2
 8005470:	d103      	bne.n	800547a <xQueueGenericSend+0x72>
 8005472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005476:	2b01      	cmp	r3, #1
 8005478:	d101      	bne.n	800547e <xQueueGenericSend+0x76>
 800547a:	2301      	movs	r3, #1
 800547c:	e000      	b.n	8005480 <xQueueGenericSend+0x78>
 800547e:	2300      	movs	r3, #0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10b      	bne.n	800549c <xQueueGenericSend+0x94>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	623b      	str	r3, [r7, #32]
}
 8005496:	bf00      	nop
 8005498:	bf00      	nop
 800549a:	e7fd      	b.n	8005498 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800549c:	f001 fc18 	bl	8006cd0 <xTaskGetSchedulerState>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d102      	bne.n	80054ac <xQueueGenericSend+0xa4>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <xQueueGenericSend+0xa8>
 80054ac:	2301      	movs	r3, #1
 80054ae:	e000      	b.n	80054b2 <xQueueGenericSend+0xaa>
 80054b0:	2300      	movs	r3, #0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10b      	bne.n	80054ce <xQueueGenericSend+0xc6>
	__asm volatile
 80054b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	61fb      	str	r3, [r7, #28]
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	e7fd      	b.n	80054ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054ce:	f002 fa6b 	bl	80079a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054da:	429a      	cmp	r2, r3
 80054dc:	d302      	bcc.n	80054e4 <xQueueGenericSend+0xdc>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d129      	bne.n	8005538 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054ea:	f000 fc49 	bl	8005d80 <prvCopyDataToQueue>
 80054ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d010      	beq.n	800551a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fa:	3324      	adds	r3, #36	@ 0x24
 80054fc:	4618      	mov	r0, r3
 80054fe:	f001 fa17 	bl	8006930 <xTaskRemoveFromEventList>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d013      	beq.n	8005530 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005508:	4b3f      	ldr	r3, [pc, #252]	@ (8005608 <xQueueGenericSend+0x200>)
 800550a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	e00a      	b.n	8005530 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800551a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551c:	2b00      	cmp	r3, #0
 800551e:	d007      	beq.n	8005530 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005520:	4b39      	ldr	r3, [pc, #228]	@ (8005608 <xQueueGenericSend+0x200>)
 8005522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005530:	f002 fa6c 	bl	8007a0c <vPortExitCritical>
				return pdPASS;
 8005534:	2301      	movs	r3, #1
 8005536:	e063      	b.n	8005600 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d103      	bne.n	8005546 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800553e:	f002 fa65 	bl	8007a0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005542:	2300      	movs	r3, #0
 8005544:	e05c      	b.n	8005600 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005548:	2b00      	cmp	r3, #0
 800554a:	d106      	bne.n	800555a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800554c:	f107 0314 	add.w	r3, r7, #20
 8005550:	4618      	mov	r0, r3
 8005552:	f001 fa51 	bl	80069f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005556:	2301      	movs	r3, #1
 8005558:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800555a:	f002 fa57 	bl	8007a0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800555e:	f000 ffc1 	bl	80064e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005562:	f002 fa21 	bl	80079a8 <vPortEnterCritical>
 8005566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005568:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800556c:	b25b      	sxtb	r3, r3
 800556e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005572:	d103      	bne.n	800557c <xQueueGenericSend+0x174>
 8005574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800557c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005582:	b25b      	sxtb	r3, r3
 8005584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005588:	d103      	bne.n	8005592 <xQueueGenericSend+0x18a>
 800558a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005592:	f002 fa3b 	bl	8007a0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005596:	1d3a      	adds	r2, r7, #4
 8005598:	f107 0314 	add.w	r3, r7, #20
 800559c:	4611      	mov	r1, r2
 800559e:	4618      	mov	r0, r3
 80055a0:	f001 fa40 	bl	8006a24 <xTaskCheckForTimeOut>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d124      	bne.n	80055f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80055aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055ac:	f000 fce0 	bl	8005f70 <prvIsQueueFull>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d018      	beq.n	80055e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80055b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b8:	3310      	adds	r3, #16
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	4611      	mov	r1, r2
 80055be:	4618      	mov	r0, r3
 80055c0:	f001 f964 	bl	800688c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055c6:	f000 fc6b 	bl	8005ea0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80055ca:	f000 ff99 	bl	8006500 <xTaskResumeAll>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f47f af7c 	bne.w	80054ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80055d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005608 <xQueueGenericSend+0x200>)
 80055d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	e772      	b.n	80054ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80055e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055ea:	f000 fc59 	bl	8005ea0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055ee:	f000 ff87 	bl	8006500 <xTaskResumeAll>
 80055f2:	e76c      	b.n	80054ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80055f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055f6:	f000 fc53 	bl	8005ea0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055fa:	f000 ff81 	bl	8006500 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80055fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005600:	4618      	mov	r0, r3
 8005602:	3738      	adds	r7, #56	@ 0x38
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	e000ed04 	.word	0xe000ed04

0800560c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b090      	sub	sp, #64	@ 0x40
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800561e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10b      	bne.n	800563c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005636:	bf00      	nop
 8005638:	bf00      	nop
 800563a:	e7fd      	b.n	8005638 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d103      	bne.n	800564a <xQueueGenericSendFromISR+0x3e>
 8005642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <xQueueGenericSendFromISR+0x42>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <xQueueGenericSendFromISR+0x44>
 800564e:	2300      	movs	r3, #0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10b      	bne.n	800566c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005666:	bf00      	nop
 8005668:	bf00      	nop
 800566a:	e7fd      	b.n	8005668 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b02      	cmp	r3, #2
 8005670:	d103      	bne.n	800567a <xQueueGenericSendFromISR+0x6e>
 8005672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005676:	2b01      	cmp	r3, #1
 8005678:	d101      	bne.n	800567e <xQueueGenericSendFromISR+0x72>
 800567a:	2301      	movs	r3, #1
 800567c:	e000      	b.n	8005680 <xQueueGenericSendFromISR+0x74>
 800567e:	2300      	movs	r3, #0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10b      	bne.n	800569c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	623b      	str	r3, [r7, #32]
}
 8005696:	bf00      	nop
 8005698:	bf00      	nop
 800569a:	e7fd      	b.n	8005698 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800569c:	f002 fa64 	bl	8007b68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80056a0:	f3ef 8211 	mrs	r2, BASEPRI
 80056a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	61fa      	str	r2, [r7, #28]
 80056b6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80056b8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056ba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d302      	bcc.n	80056ce <xQueueGenericSendFromISR+0xc2>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d12f      	bne.n	800572e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	68b9      	ldr	r1, [r7, #8]
 80056e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80056e4:	f000 fb4c 	bl	8005d80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80056ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f0:	d112      	bne.n	8005718 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d016      	beq.n	8005728 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fc:	3324      	adds	r3, #36	@ 0x24
 80056fe:	4618      	mov	r0, r3
 8005700:	f001 f916 	bl	8006930 <xTaskRemoveFromEventList>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00e      	beq.n	8005728 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00b      	beq.n	8005728 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	e007      	b.n	8005728 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005718:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800571c:	3301      	adds	r3, #1
 800571e:	b2db      	uxtb	r3, r3
 8005720:	b25a      	sxtb	r2, r3
 8005722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005728:	2301      	movs	r3, #1
 800572a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800572c:	e001      	b.n	8005732 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800572e:	2300      	movs	r3, #0
 8005730:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005734:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800573c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800573e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005740:	4618      	mov	r0, r3
 8005742:	3740      	adds	r7, #64	@ 0x40
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b08e      	sub	sp, #56	@ 0x38
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10b      	bne.n	8005774 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	623b      	str	r3, [r7, #32]
}
 800576e:	bf00      	nop
 8005770:	bf00      	nop
 8005772:	e7fd      	b.n	8005770 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00b      	beq.n	8005794 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	61fb      	str	r3, [r7, #28]
}
 800578e:	bf00      	nop
 8005790:	bf00      	nop
 8005792:	e7fd      	b.n	8005790 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d103      	bne.n	80057a4 <xQueueGiveFromISR+0x5c>
 800579c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <xQueueGiveFromISR+0x60>
 80057a4:	2301      	movs	r3, #1
 80057a6:	e000      	b.n	80057aa <xQueueGiveFromISR+0x62>
 80057a8:	2300      	movs	r3, #0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10b      	bne.n	80057c6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80057ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	61bb      	str	r3, [r7, #24]
}
 80057c0:	bf00      	nop
 80057c2:	bf00      	nop
 80057c4:	e7fd      	b.n	80057c2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057c6:	f002 f9cf 	bl	8007b68 <vPortValidateInterruptPriority>
	__asm volatile
 80057ca:	f3ef 8211 	mrs	r2, BASEPRI
 80057ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	617a      	str	r2, [r7, #20]
 80057e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80057e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80057ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d22b      	bcs.n	800584e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005806:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005808:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800580c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005810:	d112      	bne.n	8005838 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005816:	2b00      	cmp	r3, #0
 8005818:	d016      	beq.n	8005848 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800581a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581c:	3324      	adds	r3, #36	@ 0x24
 800581e:	4618      	mov	r0, r3
 8005820:	f001 f886 	bl	8006930 <xTaskRemoveFromEventList>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00e      	beq.n	8005848 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00b      	beq.n	8005848 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2201      	movs	r2, #1
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	e007      	b.n	8005848 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005838:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800583c:	3301      	adds	r3, #1
 800583e:	b2db      	uxtb	r3, r3
 8005840:	b25a      	sxtb	r2, r3
 8005842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005848:	2301      	movs	r3, #1
 800584a:	637b      	str	r3, [r7, #52]	@ 0x34
 800584c:	e001      	b.n	8005852 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800584e:	2300      	movs	r3, #0
 8005850:	637b      	str	r3, [r7, #52]	@ 0x34
 8005852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005854:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f383 8811 	msr	BASEPRI, r3
}
 800585c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800585e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005860:	4618      	mov	r0, r3
 8005862:	3738      	adds	r7, #56	@ 0x38
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b08c      	sub	sp, #48	@ 0x30
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005874:	2300      	movs	r3, #0
 8005876:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800587c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10b      	bne.n	800589a <xQueueReceive+0x32>
	__asm volatile
 8005882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	623b      	str	r3, [r7, #32]
}
 8005894:	bf00      	nop
 8005896:	bf00      	nop
 8005898:	e7fd      	b.n	8005896 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d103      	bne.n	80058a8 <xQueueReceive+0x40>
 80058a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <xQueueReceive+0x44>
 80058a8:	2301      	movs	r3, #1
 80058aa:	e000      	b.n	80058ae <xQueueReceive+0x46>
 80058ac:	2300      	movs	r3, #0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10b      	bne.n	80058ca <xQueueReceive+0x62>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	61fb      	str	r3, [r7, #28]
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop
 80058c8:	e7fd      	b.n	80058c6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058ca:	f001 fa01 	bl	8006cd0 <xTaskGetSchedulerState>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d102      	bne.n	80058da <xQueueReceive+0x72>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <xQueueReceive+0x76>
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <xQueueReceive+0x78>
 80058de:	2300      	movs	r3, #0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10b      	bne.n	80058fc <xQueueReceive+0x94>
	__asm volatile
 80058e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	61bb      	str	r3, [r7, #24]
}
 80058f6:	bf00      	nop
 80058f8:	bf00      	nop
 80058fa:	e7fd      	b.n	80058f8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058fc:	f002 f854 	bl	80079a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005904:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005908:	2b00      	cmp	r3, #0
 800590a:	d01f      	beq.n	800594c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800590c:	68b9      	ldr	r1, [r7, #8]
 800590e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005910:	f000 faa0 	bl	8005e54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005916:	1e5a      	subs	r2, r3, #1
 8005918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800591c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00f      	beq.n	8005944 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005926:	3310      	adds	r3, #16
 8005928:	4618      	mov	r0, r3
 800592a:	f001 f801 	bl	8006930 <xTaskRemoveFromEventList>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d007      	beq.n	8005944 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005934:	4b3c      	ldr	r3, [pc, #240]	@ (8005a28 <xQueueReceive+0x1c0>)
 8005936:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005944:	f002 f862 	bl	8007a0c <vPortExitCritical>
				return pdPASS;
 8005948:	2301      	movs	r3, #1
 800594a:	e069      	b.n	8005a20 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d103      	bne.n	800595a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005952:	f002 f85b 	bl	8007a0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005956:	2300      	movs	r3, #0
 8005958:	e062      	b.n	8005a20 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800595a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800595c:	2b00      	cmp	r3, #0
 800595e:	d106      	bne.n	800596e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005960:	f107 0310 	add.w	r3, r7, #16
 8005964:	4618      	mov	r0, r3
 8005966:	f001 f847 	bl	80069f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800596a:	2301      	movs	r3, #1
 800596c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800596e:	f002 f84d 	bl	8007a0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005972:	f000 fdb7 	bl	80064e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005976:	f002 f817 	bl	80079a8 <vPortEnterCritical>
 800597a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005980:	b25b      	sxtb	r3, r3
 8005982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005986:	d103      	bne.n	8005990 <xQueueReceive+0x128>
 8005988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005992:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005996:	b25b      	sxtb	r3, r3
 8005998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599c:	d103      	bne.n	80059a6 <xQueueReceive+0x13e>
 800599e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059a6:	f002 f831 	bl	8007a0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059aa:	1d3a      	adds	r2, r7, #4
 80059ac:	f107 0310 	add.w	r3, r7, #16
 80059b0:	4611      	mov	r1, r2
 80059b2:	4618      	mov	r0, r3
 80059b4:	f001 f836 	bl	8006a24 <xTaskCheckForTimeOut>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d123      	bne.n	8005a06 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059c0:	f000 fac0 	bl	8005f44 <prvIsQueueEmpty>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d017      	beq.n	80059fa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059cc:	3324      	adds	r3, #36	@ 0x24
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	4611      	mov	r1, r2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 ff5a 	bl	800688c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059da:	f000 fa61 	bl	8005ea0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059de:	f000 fd8f 	bl	8006500 <xTaskResumeAll>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d189      	bne.n	80058fc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80059e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005a28 <xQueueReceive+0x1c0>)
 80059ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	e780      	b.n	80058fc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80059fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059fc:	f000 fa50 	bl	8005ea0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a00:	f000 fd7e 	bl	8006500 <xTaskResumeAll>
 8005a04:	e77a      	b.n	80058fc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a08:	f000 fa4a 	bl	8005ea0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a0c:	f000 fd78 	bl	8006500 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a12:	f000 fa97 	bl	8005f44 <prvIsQueueEmpty>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f43f af6f 	beq.w	80058fc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a1e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3730      	adds	r7, #48	@ 0x30
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	e000ed04 	.word	0xe000ed04

08005a2c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b08e      	sub	sp, #56	@ 0x38
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a36:	2300      	movs	r3, #0
 8005a38:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10b      	bne.n	8005a60 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	623b      	str	r3, [r7, #32]
}
 8005a5a:	bf00      	nop
 8005a5c:	bf00      	nop
 8005a5e:	e7fd      	b.n	8005a5c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00b      	beq.n	8005a80 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	61fb      	str	r3, [r7, #28]
}
 8005a7a:	bf00      	nop
 8005a7c:	bf00      	nop
 8005a7e:	e7fd      	b.n	8005a7c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a80:	f001 f926 	bl	8006cd0 <xTaskGetSchedulerState>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d102      	bne.n	8005a90 <xQueueSemaphoreTake+0x64>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <xQueueSemaphoreTake+0x68>
 8005a90:	2301      	movs	r3, #1
 8005a92:	e000      	b.n	8005a96 <xQueueSemaphoreTake+0x6a>
 8005a94:	2300      	movs	r3, #0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10b      	bne.n	8005ab2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	61bb      	str	r3, [r7, #24]
}
 8005aac:	bf00      	nop
 8005aae:	bf00      	nop
 8005ab0:	e7fd      	b.n	8005aae <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ab2:	f001 ff79 	bl	80079a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aba:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d024      	beq.n	8005b0c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac4:	1e5a      	subs	r2, r3, #1
 8005ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d104      	bne.n	8005adc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005ad2:	f001 fa77 	bl	8006fc4 <pvTaskIncrementMutexHeldCount>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ada:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00f      	beq.n	8005b04 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae6:	3310      	adds	r3, #16
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 ff21 	bl	8006930 <xTaskRemoveFromEventList>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d007      	beq.n	8005b04 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005af4:	4b54      	ldr	r3, [pc, #336]	@ (8005c48 <xQueueSemaphoreTake+0x21c>)
 8005af6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b04:	f001 ff82 	bl	8007a0c <vPortExitCritical>
				return pdPASS;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e098      	b.n	8005c3e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d112      	bne.n	8005b38 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00b      	beq.n	8005b30 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	617b      	str	r3, [r7, #20]
}
 8005b2a:	bf00      	nop
 8005b2c:	bf00      	nop
 8005b2e:	e7fd      	b.n	8005b2c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b30:	f001 ff6c 	bl	8007a0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b34:	2300      	movs	r3, #0
 8005b36:	e082      	b.n	8005c3e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d106      	bne.n	8005b4c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b3e:	f107 030c 	add.w	r3, r7, #12
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 ff58 	bl	80069f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b4c:	f001 ff5e 	bl	8007a0c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b50:	f000 fcc8 	bl	80064e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b54:	f001 ff28 	bl	80079a8 <vPortEnterCritical>
 8005b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b5e:	b25b      	sxtb	r3, r3
 8005b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b64:	d103      	bne.n	8005b6e <xQueueSemaphoreTake+0x142>
 8005b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b74:	b25b      	sxtb	r3, r3
 8005b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7a:	d103      	bne.n	8005b84 <xQueueSemaphoreTake+0x158>
 8005b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b84:	f001 ff42 	bl	8007a0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b88:	463a      	mov	r2, r7
 8005b8a:	f107 030c 	add.w	r3, r7, #12
 8005b8e:	4611      	mov	r1, r2
 8005b90:	4618      	mov	r0, r3
 8005b92:	f000 ff47 	bl	8006a24 <xTaskCheckForTimeOut>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d132      	bne.n	8005c02 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b9e:	f000 f9d1 	bl	8005f44 <prvIsQueueEmpty>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d026      	beq.n	8005bf6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d109      	bne.n	8005bc4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005bb0:	f001 fefa 	bl	80079a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f001 f8a7 	bl	8006d0c <xTaskPriorityInherit>
 8005bbe:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005bc0:	f001 ff24 	bl	8007a0c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc6:	3324      	adds	r3, #36	@ 0x24
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	4611      	mov	r1, r2
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 fe5d 	bl	800688c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005bd2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bd4:	f000 f964 	bl	8005ea0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bd8:	f000 fc92 	bl	8006500 <xTaskResumeAll>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f47f af67 	bne.w	8005ab2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005be4:	4b18      	ldr	r3, [pc, #96]	@ (8005c48 <xQueueSemaphoreTake+0x21c>)
 8005be6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	e75d      	b.n	8005ab2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005bf6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bf8:	f000 f952 	bl	8005ea0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bfc:	f000 fc80 	bl	8006500 <xTaskResumeAll>
 8005c00:	e757      	b.n	8005ab2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005c02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c04:	f000 f94c 	bl	8005ea0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c08:	f000 fc7a 	bl	8006500 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c0e:	f000 f999 	bl	8005f44 <prvIsQueueEmpty>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f43f af4c 	beq.w	8005ab2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00d      	beq.n	8005c3c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005c20:	f001 fec2 	bl	80079a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005c24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c26:	f000 f893 	bl	8005d50 <prvGetDisinheritPriorityAfterTimeout>
 8005c2a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c32:	4618      	mov	r0, r3
 8005c34:	f001 f942 	bl	8006ebc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c38:	f001 fee8 	bl	8007a0c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3738      	adds	r7, #56	@ 0x38
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	e000ed04 	.word	0xe000ed04

08005c4c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08e      	sub	sp, #56	@ 0x38
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10b      	bne.n	8005c7a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	623b      	str	r3, [r7, #32]
}
 8005c74:	bf00      	nop
 8005c76:	bf00      	nop
 8005c78:	e7fd      	b.n	8005c76 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d103      	bne.n	8005c88 <xQueueReceiveFromISR+0x3c>
 8005c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <xQueueReceiveFromISR+0x40>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e000      	b.n	8005c8e <xQueueReceiveFromISR+0x42>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10b      	bne.n	8005caa <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	61fb      	str	r3, [r7, #28]
}
 8005ca4:	bf00      	nop
 8005ca6:	bf00      	nop
 8005ca8:	e7fd      	b.n	8005ca6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005caa:	f001 ff5d 	bl	8007b68 <vPortValidateInterruptPriority>
	__asm volatile
 8005cae:	f3ef 8211 	mrs	r2, BASEPRI
 8005cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	61ba      	str	r2, [r7, #24]
 8005cc4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005cc6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cce:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d02f      	beq.n	8005d36 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ce0:	68b9      	ldr	r1, [r7, #8]
 8005ce2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ce4:	f000 f8b6 	bl	8005e54 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cea:	1e5a      	subs	r2, r3, #1
 8005cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cee:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005cf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf8:	d112      	bne.n	8005d20 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d016      	beq.n	8005d30 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d04:	3310      	adds	r3, #16
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 fe12 	bl	8006930 <xTaskRemoveFromEventList>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00e      	beq.n	8005d30 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00b      	beq.n	8005d30 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	e007      	b.n	8005d30 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005d20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d24:	3301      	adds	r3, #1
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	b25a      	sxtb	r2, r3
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005d30:	2301      	movs	r3, #1
 8005d32:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d34:	e001      	b.n	8005d3a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d3c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f383 8811 	msr	BASEPRI, r3
}
 8005d44:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3738      	adds	r7, #56	@ 0x38
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d006      	beq.n	8005d6e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	e001      	b.n	8005d72 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005d72:	68fb      	ldr	r3, [r7, #12]
	}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10d      	bne.n	8005dba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d14d      	bne.n	8005e42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f001 f816 	bl	8006ddc <xTaskPriorityDisinherit>
 8005db0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	609a      	str	r2, [r3, #8]
 8005db8:	e043      	b.n	8005e42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d119      	bne.n	8005df4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6858      	ldr	r0, [r3, #4]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc8:	461a      	mov	r2, r3
 8005dca:	68b9      	ldr	r1, [r7, #8]
 8005dcc:	f002 f928 	bl	8008020 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd8:	441a      	add	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d32b      	bcc.n	8005e42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	605a      	str	r2, [r3, #4]
 8005df2:	e026      	b.n	8005e42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	68d8      	ldr	r0, [r3, #12]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	68b9      	ldr	r1, [r7, #8]
 8005e00:	f002 f90e 	bl	8008020 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	68da      	ldr	r2, [r3, #12]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0c:	425b      	negs	r3, r3
 8005e0e:	441a      	add	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	68da      	ldr	r2, [r3, #12]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d207      	bcs.n	8005e30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e28:	425b      	negs	r3, r3
 8005e2a:	441a      	add	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d105      	bne.n	8005e42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005e4a:	697b      	ldr	r3, [r7, #20]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d018      	beq.n	8005e98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6e:	441a      	add	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d303      	bcc.n	8005e88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68d9      	ldr	r1, [r3, #12]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e90:	461a      	mov	r2, r3
 8005e92:	6838      	ldr	r0, [r7, #0]
 8005e94:	f002 f8c4 	bl	8008020 <memcpy>
	}
}
 8005e98:	bf00      	nop
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ea8:	f001 fd7e 	bl	80079a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005eb2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005eb4:	e011      	b.n	8005eda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d012      	beq.n	8005ee4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	3324      	adds	r3, #36	@ 0x24
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 fd34 	bl	8006930 <xTaskRemoveFromEventList>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ece:	f000 fe0d 	bl	8006aec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	dce9      	bgt.n	8005eb6 <prvUnlockQueue+0x16>
 8005ee2:	e000      	b.n	8005ee6 <prvUnlockQueue+0x46>
					break;
 8005ee4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	22ff      	movs	r2, #255	@ 0xff
 8005eea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005eee:	f001 fd8d 	bl	8007a0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ef2:	f001 fd59 	bl	80079a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005efc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005efe:	e011      	b.n	8005f24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d012      	beq.n	8005f2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	3310      	adds	r3, #16
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 fd0f 	bl	8006930 <xTaskRemoveFromEventList>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d001      	beq.n	8005f1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f18:	f000 fde8 	bl	8006aec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f1c:	7bbb      	ldrb	r3, [r7, #14]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	dce9      	bgt.n	8005f00 <prvUnlockQueue+0x60>
 8005f2c:	e000      	b.n	8005f30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	22ff      	movs	r2, #255	@ 0xff
 8005f34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005f38:	f001 fd68 	bl	8007a0c <vPortExitCritical>
}
 8005f3c:	bf00      	nop
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f4c:	f001 fd2c 	bl	80079a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d102      	bne.n	8005f5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	e001      	b.n	8005f62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f62:	f001 fd53 	bl	8007a0c <vPortExitCritical>

	return xReturn;
 8005f66:	68fb      	ldr	r3, [r7, #12]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f78:	f001 fd16 	bl	80079a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d102      	bne.n	8005f8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	e001      	b.n	8005f92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f92:	f001 fd3b 	bl	8007a0c <vPortExitCritical>

	return xReturn;
 8005f96:	68fb      	ldr	r3, [r7, #12]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005faa:	2300      	movs	r3, #0
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	e014      	b.n	8005fda <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005fb0:	4a0f      	ldr	r2, [pc, #60]	@ (8005ff0 <vQueueAddToRegistry+0x50>)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10b      	bne.n	8005fd4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005fbc:	490c      	ldr	r1, [pc, #48]	@ (8005ff0 <vQueueAddToRegistry+0x50>)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8005ff0 <vQueueAddToRegistry+0x50>)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	4413      	add	r3, r2
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005fd2:	e006      	b.n	8005fe2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2b07      	cmp	r3, #7
 8005fde:	d9e7      	bls.n	8005fb0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005fe0:	bf00      	nop
 8005fe2:	bf00      	nop
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	20000e50 	.word	0x20000e50

08005ff4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006004:	f001 fcd0 	bl	80079a8 <vPortEnterCritical>
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800600e:	b25b      	sxtb	r3, r3
 8006010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006014:	d103      	bne.n	800601e <vQueueWaitForMessageRestricted+0x2a>
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006024:	b25b      	sxtb	r3, r3
 8006026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602a:	d103      	bne.n	8006034 <vQueueWaitForMessageRestricted+0x40>
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006034:	f001 fcea 	bl	8007a0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603c:	2b00      	cmp	r3, #0
 800603e:	d106      	bne.n	800604e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	3324      	adds	r3, #36	@ 0x24
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	68b9      	ldr	r1, [r7, #8]
 8006048:	4618      	mov	r0, r3
 800604a:	f000 fc45 	bl	80068d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800604e:	6978      	ldr	r0, [r7, #20]
 8006050:	f7ff ff26 	bl	8005ea0 <prvUnlockQueue>
	}
 8006054:	bf00      	nop
 8006056:	3718      	adds	r7, #24
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08e      	sub	sp, #56	@ 0x38
 8006060:	af04      	add	r7, sp, #16
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800606a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10b      	bne.n	8006088 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	623b      	str	r3, [r7, #32]
}
 8006082:	bf00      	nop
 8006084:	bf00      	nop
 8006086:	e7fd      	b.n	8006084 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10b      	bne.n	80060a6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	61fb      	str	r3, [r7, #28]
}
 80060a0:	bf00      	nop
 80060a2:	bf00      	nop
 80060a4:	e7fd      	b.n	80060a2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060a6:	235c      	movs	r3, #92	@ 0x5c
 80060a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	2b5c      	cmp	r3, #92	@ 0x5c
 80060ae:	d00b      	beq.n	80060c8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	61bb      	str	r3, [r7, #24]
}
 80060c2:	bf00      	nop
 80060c4:	bf00      	nop
 80060c6:	e7fd      	b.n	80060c4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01e      	beq.n	800610e <xTaskCreateStatic+0xb2>
 80060d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d01b      	beq.n	800610e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060de:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060e8:	2300      	movs	r3, #0
 80060ea:	9303      	str	r3, [sp, #12]
 80060ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ee:	9302      	str	r3, [sp, #8]
 80060f0:	f107 0314 	add.w	r3, r7, #20
 80060f4:	9301      	str	r3, [sp, #4]
 80060f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	68b9      	ldr	r1, [r7, #8]
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 f850 	bl	80061a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006106:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006108:	f000 f8de 	bl	80062c8 <prvAddNewTaskToReadyList>
 800610c:	e001      	b.n	8006112 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800610e:	2300      	movs	r3, #0
 8006110:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006112:	697b      	ldr	r3, [r7, #20]
	}
 8006114:	4618      	mov	r0, r3
 8006116:	3728      	adds	r7, #40	@ 0x28
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08c      	sub	sp, #48	@ 0x30
 8006120:	af04      	add	r7, sp, #16
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	603b      	str	r3, [r7, #0]
 8006128:	4613      	mov	r3, r2
 800612a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800612c:	88fb      	ldrh	r3, [r7, #6]
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4618      	mov	r0, r3
 8006132:	f001 fd5b 	bl	8007bec <pvPortMalloc>
 8006136:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00e      	beq.n	800615c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800613e:	205c      	movs	r0, #92	@ 0x5c
 8006140:	f001 fd54 	bl	8007bec <pvPortMalloc>
 8006144:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	631a      	str	r2, [r3, #48]	@ 0x30
 8006152:	e005      	b.n	8006160 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006154:	6978      	ldr	r0, [r7, #20]
 8006156:	f001 fe17 	bl	8007d88 <vPortFree>
 800615a:	e001      	b.n	8006160 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800615c:	2300      	movs	r3, #0
 800615e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d017      	beq.n	8006196 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800616e:	88fa      	ldrh	r2, [r7, #6]
 8006170:	2300      	movs	r3, #0
 8006172:	9303      	str	r3, [sp, #12]
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	9302      	str	r3, [sp, #8]
 8006178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800617a:	9301      	str	r3, [sp, #4]
 800617c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	68b9      	ldr	r1, [r7, #8]
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f000 f80e 	bl	80061a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800618a:	69f8      	ldr	r0, [r7, #28]
 800618c:	f000 f89c 	bl	80062c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006190:	2301      	movs	r3, #1
 8006192:	61bb      	str	r3, [r7, #24]
 8006194:	e002      	b.n	800619c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006196:	f04f 33ff 	mov.w	r3, #4294967295
 800619a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800619c:	69bb      	ldr	r3, [r7, #24]
	}
 800619e:	4618      	mov	r0, r3
 80061a0:	3720      	adds	r7, #32
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b088      	sub	sp, #32
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	60f8      	str	r0, [r7, #12]
 80061ae:	60b9      	str	r1, [r7, #8]
 80061b0:	607a      	str	r2, [r7, #4]
 80061b2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	461a      	mov	r2, r3
 80061be:	21a5      	movs	r1, #165	@ 0xa5
 80061c0:	f001 ff02 	bl	8007fc8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061ce:	3b01      	subs	r3, #1
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	f023 0307 	bic.w	r3, r3, #7
 80061dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	f003 0307 	and.w	r3, r3, #7
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00b      	beq.n	8006200 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	617b      	str	r3, [r7, #20]
}
 80061fa:	bf00      	nop
 80061fc:	bf00      	nop
 80061fe:	e7fd      	b.n	80061fc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d01f      	beq.n	8006246 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006206:	2300      	movs	r3, #0
 8006208:	61fb      	str	r3, [r7, #28]
 800620a:	e012      	b.n	8006232 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	7819      	ldrb	r1, [r3, #0]
 8006214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	4413      	add	r3, r2
 800621a:	3334      	adds	r3, #52	@ 0x34
 800621c:	460a      	mov	r2, r1
 800621e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	4413      	add	r3, r2
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d006      	beq.n	800623a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	3301      	adds	r3, #1
 8006230:	61fb      	str	r3, [r7, #28]
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	2b0f      	cmp	r3, #15
 8006236:	d9e9      	bls.n	800620c <prvInitialiseNewTask+0x66>
 8006238:	e000      	b.n	800623c <prvInitialiseNewTask+0x96>
			{
				break;
 800623a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800623c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006244:	e003      	b.n	800624e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800624e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006250:	2b37      	cmp	r3, #55	@ 0x37
 8006252:	d901      	bls.n	8006258 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006254:	2337      	movs	r3, #55	@ 0x37
 8006256:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800625c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800625e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006260:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006262:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006266:	2200      	movs	r2, #0
 8006268:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800626a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626c:	3304      	adds	r3, #4
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe fec0 	bl	8004ff4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006276:	3318      	adds	r3, #24
 8006278:	4618      	mov	r0, r3
 800627a:	f7fe febb 	bl	8004ff4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800627e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006282:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006286:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800628a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800628e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006292:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006296:	2200      	movs	r2, #0
 8006298:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	68f9      	ldr	r1, [r7, #12]
 80062a6:	69b8      	ldr	r0, [r7, #24]
 80062a8:	f001 fa4e 	bl	8007748 <pxPortInitialiseStack>
 80062ac:	4602      	mov	r2, r0
 80062ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062be:	bf00      	nop
 80062c0:	3720      	adds	r7, #32
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062d0:	f001 fb6a 	bl	80079a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062d4:	4b2d      	ldr	r3, [pc, #180]	@ (800638c <prvAddNewTaskToReadyList+0xc4>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3301      	adds	r3, #1
 80062da:	4a2c      	ldr	r2, [pc, #176]	@ (800638c <prvAddNewTaskToReadyList+0xc4>)
 80062dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062de:	4b2c      	ldr	r3, [pc, #176]	@ (8006390 <prvAddNewTaskToReadyList+0xc8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d109      	bne.n	80062fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062e6:	4a2a      	ldr	r2, [pc, #168]	@ (8006390 <prvAddNewTaskToReadyList+0xc8>)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062ec:	4b27      	ldr	r3, [pc, #156]	@ (800638c <prvAddNewTaskToReadyList+0xc4>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d110      	bne.n	8006316 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80062f4:	f000 fc1e 	bl	8006b34 <prvInitialiseTaskLists>
 80062f8:	e00d      	b.n	8006316 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80062fa:	4b26      	ldr	r3, [pc, #152]	@ (8006394 <prvAddNewTaskToReadyList+0xcc>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d109      	bne.n	8006316 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006302:	4b23      	ldr	r3, [pc, #140]	@ (8006390 <prvAddNewTaskToReadyList+0xc8>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800630c:	429a      	cmp	r2, r3
 800630e:	d802      	bhi.n	8006316 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006310:	4a1f      	ldr	r2, [pc, #124]	@ (8006390 <prvAddNewTaskToReadyList+0xc8>)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006316:	4b20      	ldr	r3, [pc, #128]	@ (8006398 <prvAddNewTaskToReadyList+0xd0>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3301      	adds	r3, #1
 800631c:	4a1e      	ldr	r2, [pc, #120]	@ (8006398 <prvAddNewTaskToReadyList+0xd0>)
 800631e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006320:	4b1d      	ldr	r3, [pc, #116]	@ (8006398 <prvAddNewTaskToReadyList+0xd0>)
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800632c:	4b1b      	ldr	r3, [pc, #108]	@ (800639c <prvAddNewTaskToReadyList+0xd4>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d903      	bls.n	800633c <prvAddNewTaskToReadyList+0x74>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006338:	4a18      	ldr	r2, [pc, #96]	@ (800639c <prvAddNewTaskToReadyList+0xd4>)
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006340:	4613      	mov	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4a15      	ldr	r2, [pc, #84]	@ (80063a0 <prvAddNewTaskToReadyList+0xd8>)
 800634a:	441a      	add	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3304      	adds	r3, #4
 8006350:	4619      	mov	r1, r3
 8006352:	4610      	mov	r0, r2
 8006354:	f7fe fe5b 	bl	800500e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006358:	f001 fb58 	bl	8007a0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800635c:	4b0d      	ldr	r3, [pc, #52]	@ (8006394 <prvAddNewTaskToReadyList+0xcc>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00e      	beq.n	8006382 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006364:	4b0a      	ldr	r3, [pc, #40]	@ (8006390 <prvAddNewTaskToReadyList+0xc8>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636e:	429a      	cmp	r2, r3
 8006370:	d207      	bcs.n	8006382 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006372:	4b0c      	ldr	r3, [pc, #48]	@ (80063a4 <prvAddNewTaskToReadyList+0xdc>)
 8006374:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006382:	bf00      	nop
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	20001364 	.word	0x20001364
 8006390:	20000e90 	.word	0x20000e90
 8006394:	20001370 	.word	0x20001370
 8006398:	20001380 	.word	0x20001380
 800639c:	2000136c 	.word	0x2000136c
 80063a0:	20000e94 	.word	0x20000e94
 80063a4:	e000ed04 	.word	0xe000ed04

080063a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063b0:	2300      	movs	r3, #0
 80063b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d018      	beq.n	80063ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063ba:	4b14      	ldr	r3, [pc, #80]	@ (800640c <vTaskDelay+0x64>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00b      	beq.n	80063da <vTaskDelay+0x32>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	60bb      	str	r3, [r7, #8]
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop
 80063d8:	e7fd      	b.n	80063d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80063da:	f000 f883 	bl	80064e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063de:	2100      	movs	r1, #0
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fe03 	bl	8006fec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80063e6:	f000 f88b 	bl	8006500 <xTaskResumeAll>
 80063ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d107      	bne.n	8006402 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80063f2:	4b07      	ldr	r3, [pc, #28]	@ (8006410 <vTaskDelay+0x68>)
 80063f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006402:	bf00      	nop
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	2000138c 	.word	0x2000138c
 8006410:	e000ed04 	.word	0xe000ed04

08006414 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b08a      	sub	sp, #40	@ 0x28
 8006418:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800641a:	2300      	movs	r3, #0
 800641c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800641e:	2300      	movs	r3, #0
 8006420:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006422:	463a      	mov	r2, r7
 8006424:	1d39      	adds	r1, r7, #4
 8006426:	f107 0308 	add.w	r3, r7, #8
 800642a:	4618      	mov	r0, r3
 800642c:	f7fe fd8e 	bl	8004f4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006430:	6839      	ldr	r1, [r7, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	9202      	str	r2, [sp, #8]
 8006438:	9301      	str	r3, [sp, #4]
 800643a:	2300      	movs	r3, #0
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	2300      	movs	r3, #0
 8006440:	460a      	mov	r2, r1
 8006442:	4922      	ldr	r1, [pc, #136]	@ (80064cc <vTaskStartScheduler+0xb8>)
 8006444:	4822      	ldr	r0, [pc, #136]	@ (80064d0 <vTaskStartScheduler+0xbc>)
 8006446:	f7ff fe09 	bl	800605c <xTaskCreateStatic>
 800644a:	4603      	mov	r3, r0
 800644c:	4a21      	ldr	r2, [pc, #132]	@ (80064d4 <vTaskStartScheduler+0xc0>)
 800644e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006450:	4b20      	ldr	r3, [pc, #128]	@ (80064d4 <vTaskStartScheduler+0xc0>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006458:	2301      	movs	r3, #1
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	e001      	b.n	8006462 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800645e:	2300      	movs	r3, #0
 8006460:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d102      	bne.n	800646e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006468:	f000 fe14 	bl	8007094 <xTimerCreateTimerTask>
 800646c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d116      	bne.n	80064a2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	613b      	str	r3, [r7, #16]
}
 8006486:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006488:	4b13      	ldr	r3, [pc, #76]	@ (80064d8 <vTaskStartScheduler+0xc4>)
 800648a:	f04f 32ff 	mov.w	r2, #4294967295
 800648e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006490:	4b12      	ldr	r3, [pc, #72]	@ (80064dc <vTaskStartScheduler+0xc8>)
 8006492:	2201      	movs	r2, #1
 8006494:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006496:	4b12      	ldr	r3, [pc, #72]	@ (80064e0 <vTaskStartScheduler+0xcc>)
 8006498:	2200      	movs	r2, #0
 800649a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800649c:	f001 f9e0 	bl	8007860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064a0:	e00f      	b.n	80064c2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a8:	d10b      	bne.n	80064c2 <vTaskStartScheduler+0xae>
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	60fb      	str	r3, [r7, #12]
}
 80064bc:	bf00      	nop
 80064be:	bf00      	nop
 80064c0:	e7fd      	b.n	80064be <vTaskStartScheduler+0xaa>
}
 80064c2:	bf00      	nop
 80064c4:	3718      	adds	r7, #24
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	0800806c 	.word	0x0800806c
 80064d0:	08006b05 	.word	0x08006b05
 80064d4:	20001388 	.word	0x20001388
 80064d8:	20001384 	.word	0x20001384
 80064dc:	20001370 	.word	0x20001370
 80064e0:	20001368 	.word	0x20001368

080064e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064e4:	b480      	push	{r7}
 80064e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80064e8:	4b04      	ldr	r3, [pc, #16]	@ (80064fc <vTaskSuspendAll+0x18>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3301      	adds	r3, #1
 80064ee:	4a03      	ldr	r2, [pc, #12]	@ (80064fc <vTaskSuspendAll+0x18>)
 80064f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80064f2:	bf00      	nop
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	2000138c 	.word	0x2000138c

08006500 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006506:	2300      	movs	r3, #0
 8006508:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800650a:	2300      	movs	r3, #0
 800650c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800650e:	4b42      	ldr	r3, [pc, #264]	@ (8006618 <xTaskResumeAll+0x118>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10b      	bne.n	800652e <xTaskResumeAll+0x2e>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	603b      	str	r3, [r7, #0]
}
 8006528:	bf00      	nop
 800652a:	bf00      	nop
 800652c:	e7fd      	b.n	800652a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800652e:	f001 fa3b 	bl	80079a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006532:	4b39      	ldr	r3, [pc, #228]	@ (8006618 <xTaskResumeAll+0x118>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3b01      	subs	r3, #1
 8006538:	4a37      	ldr	r2, [pc, #220]	@ (8006618 <xTaskResumeAll+0x118>)
 800653a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800653c:	4b36      	ldr	r3, [pc, #216]	@ (8006618 <xTaskResumeAll+0x118>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d162      	bne.n	800660a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006544:	4b35      	ldr	r3, [pc, #212]	@ (800661c <xTaskResumeAll+0x11c>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d05e      	beq.n	800660a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800654c:	e02f      	b.n	80065ae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800654e:	4b34      	ldr	r3, [pc, #208]	@ (8006620 <xTaskResumeAll+0x120>)
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	3318      	adds	r3, #24
 800655a:	4618      	mov	r0, r3
 800655c:	f7fe fdb4 	bl	80050c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3304      	adds	r3, #4
 8006564:	4618      	mov	r0, r3
 8006566:	f7fe fdaf 	bl	80050c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800656e:	4b2d      	ldr	r3, [pc, #180]	@ (8006624 <xTaskResumeAll+0x124>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	429a      	cmp	r2, r3
 8006574:	d903      	bls.n	800657e <xTaskResumeAll+0x7e>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657a:	4a2a      	ldr	r2, [pc, #168]	@ (8006624 <xTaskResumeAll+0x124>)
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006582:	4613      	mov	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4a27      	ldr	r2, [pc, #156]	@ (8006628 <xTaskResumeAll+0x128>)
 800658c:	441a      	add	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3304      	adds	r3, #4
 8006592:	4619      	mov	r1, r3
 8006594:	4610      	mov	r0, r2
 8006596:	f7fe fd3a 	bl	800500e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800659e:	4b23      	ldr	r3, [pc, #140]	@ (800662c <xTaskResumeAll+0x12c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d302      	bcc.n	80065ae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80065a8:	4b21      	ldr	r3, [pc, #132]	@ (8006630 <xTaskResumeAll+0x130>)
 80065aa:	2201      	movs	r2, #1
 80065ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065ae:	4b1c      	ldr	r3, [pc, #112]	@ (8006620 <xTaskResumeAll+0x120>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1cb      	bne.n	800654e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065bc:	f000 fb58 	bl	8006c70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80065c0:	4b1c      	ldr	r3, [pc, #112]	@ (8006634 <xTaskResumeAll+0x134>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d010      	beq.n	80065ee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065cc:	f000 f846 	bl	800665c <xTaskIncrementTick>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80065d6:	4b16      	ldr	r3, [pc, #88]	@ (8006630 <xTaskResumeAll+0x130>)
 80065d8:	2201      	movs	r2, #1
 80065da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	3b01      	subs	r3, #1
 80065e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1f1      	bne.n	80065cc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80065e8:	4b12      	ldr	r3, [pc, #72]	@ (8006634 <xTaskResumeAll+0x134>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80065ee:	4b10      	ldr	r3, [pc, #64]	@ (8006630 <xTaskResumeAll+0x130>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d009      	beq.n	800660a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80065f6:	2301      	movs	r3, #1
 80065f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80065fa:	4b0f      	ldr	r3, [pc, #60]	@ (8006638 <xTaskResumeAll+0x138>)
 80065fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800660a:	f001 f9ff 	bl	8007a0c <vPortExitCritical>

	return xAlreadyYielded;
 800660e:	68bb      	ldr	r3, [r7, #8]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	2000138c 	.word	0x2000138c
 800661c:	20001364 	.word	0x20001364
 8006620:	20001324 	.word	0x20001324
 8006624:	2000136c 	.word	0x2000136c
 8006628:	20000e94 	.word	0x20000e94
 800662c:	20000e90 	.word	0x20000e90
 8006630:	20001378 	.word	0x20001378
 8006634:	20001374 	.word	0x20001374
 8006638:	e000ed04 	.word	0xe000ed04

0800663c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006642:	4b05      	ldr	r3, [pc, #20]	@ (8006658 <xTaskGetTickCount+0x1c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006648:	687b      	ldr	r3, [r7, #4]
}
 800664a:	4618      	mov	r0, r3
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	20001368 	.word	0x20001368

0800665c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006662:	2300      	movs	r3, #0
 8006664:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006666:	4b4f      	ldr	r3, [pc, #316]	@ (80067a4 <xTaskIncrementTick+0x148>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	f040 8090 	bne.w	8006790 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006670:	4b4d      	ldr	r3, [pc, #308]	@ (80067a8 <xTaskIncrementTick+0x14c>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3301      	adds	r3, #1
 8006676:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006678:	4a4b      	ldr	r2, [pc, #300]	@ (80067a8 <xTaskIncrementTick+0x14c>)
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d121      	bne.n	80066c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006684:	4b49      	ldr	r3, [pc, #292]	@ (80067ac <xTaskIncrementTick+0x150>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00b      	beq.n	80066a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	603b      	str	r3, [r7, #0]
}
 80066a0:	bf00      	nop
 80066a2:	bf00      	nop
 80066a4:	e7fd      	b.n	80066a2 <xTaskIncrementTick+0x46>
 80066a6:	4b41      	ldr	r3, [pc, #260]	@ (80067ac <xTaskIncrementTick+0x150>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	4b40      	ldr	r3, [pc, #256]	@ (80067b0 <xTaskIncrementTick+0x154>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a3e      	ldr	r2, [pc, #248]	@ (80067ac <xTaskIncrementTick+0x150>)
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	4a3e      	ldr	r2, [pc, #248]	@ (80067b0 <xTaskIncrementTick+0x154>)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6013      	str	r3, [r2, #0]
 80066ba:	4b3e      	ldr	r3, [pc, #248]	@ (80067b4 <xTaskIncrementTick+0x158>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3301      	adds	r3, #1
 80066c0:	4a3c      	ldr	r2, [pc, #240]	@ (80067b4 <xTaskIncrementTick+0x158>)
 80066c2:	6013      	str	r3, [r2, #0]
 80066c4:	f000 fad4 	bl	8006c70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80066c8:	4b3b      	ldr	r3, [pc, #236]	@ (80067b8 <xTaskIncrementTick+0x15c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d349      	bcc.n	8006766 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066d2:	4b36      	ldr	r3, [pc, #216]	@ (80067ac <xTaskIncrementTick+0x150>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d104      	bne.n	80066e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066dc:	4b36      	ldr	r3, [pc, #216]	@ (80067b8 <xTaskIncrementTick+0x15c>)
 80066de:	f04f 32ff 	mov.w	r2, #4294967295
 80066e2:	601a      	str	r2, [r3, #0]
					break;
 80066e4:	e03f      	b.n	8006766 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066e6:	4b31      	ldr	r3, [pc, #196]	@ (80067ac <xTaskIncrementTick+0x150>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d203      	bcs.n	8006706 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80066fe:	4a2e      	ldr	r2, [pc, #184]	@ (80067b8 <xTaskIncrementTick+0x15c>)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006704:	e02f      	b.n	8006766 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	3304      	adds	r3, #4
 800670a:	4618      	mov	r0, r3
 800670c:	f7fe fcdc 	bl	80050c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006714:	2b00      	cmp	r3, #0
 8006716:	d004      	beq.n	8006722 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	3318      	adds	r3, #24
 800671c:	4618      	mov	r0, r3
 800671e:	f7fe fcd3 	bl	80050c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006726:	4b25      	ldr	r3, [pc, #148]	@ (80067bc <xTaskIncrementTick+0x160>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	429a      	cmp	r2, r3
 800672c:	d903      	bls.n	8006736 <xTaskIncrementTick+0xda>
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006732:	4a22      	ldr	r2, [pc, #136]	@ (80067bc <xTaskIncrementTick+0x160>)
 8006734:	6013      	str	r3, [r2, #0]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800673a:	4613      	mov	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4a1f      	ldr	r2, [pc, #124]	@ (80067c0 <xTaskIncrementTick+0x164>)
 8006744:	441a      	add	r2, r3
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	3304      	adds	r3, #4
 800674a:	4619      	mov	r1, r3
 800674c:	4610      	mov	r0, r2
 800674e:	f7fe fc5e 	bl	800500e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006756:	4b1b      	ldr	r3, [pc, #108]	@ (80067c4 <xTaskIncrementTick+0x168>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800675c:	429a      	cmp	r2, r3
 800675e:	d3b8      	bcc.n	80066d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006760:	2301      	movs	r3, #1
 8006762:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006764:	e7b5      	b.n	80066d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006766:	4b17      	ldr	r3, [pc, #92]	@ (80067c4 <xTaskIncrementTick+0x168>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800676c:	4914      	ldr	r1, [pc, #80]	@ (80067c0 <xTaskIncrementTick+0x164>)
 800676e:	4613      	mov	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	440b      	add	r3, r1
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d901      	bls.n	8006782 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800677e:	2301      	movs	r3, #1
 8006780:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006782:	4b11      	ldr	r3, [pc, #68]	@ (80067c8 <xTaskIncrementTick+0x16c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d007      	beq.n	800679a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800678a:	2301      	movs	r3, #1
 800678c:	617b      	str	r3, [r7, #20]
 800678e:	e004      	b.n	800679a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006790:	4b0e      	ldr	r3, [pc, #56]	@ (80067cc <xTaskIncrementTick+0x170>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3301      	adds	r3, #1
 8006796:	4a0d      	ldr	r2, [pc, #52]	@ (80067cc <xTaskIncrementTick+0x170>)
 8006798:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800679a:	697b      	ldr	r3, [r7, #20]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3718      	adds	r7, #24
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	2000138c 	.word	0x2000138c
 80067a8:	20001368 	.word	0x20001368
 80067ac:	2000131c 	.word	0x2000131c
 80067b0:	20001320 	.word	0x20001320
 80067b4:	2000137c 	.word	0x2000137c
 80067b8:	20001384 	.word	0x20001384
 80067bc:	2000136c 	.word	0x2000136c
 80067c0:	20000e94 	.word	0x20000e94
 80067c4:	20000e90 	.word	0x20000e90
 80067c8:	20001378 	.word	0x20001378
 80067cc:	20001374 	.word	0x20001374

080067d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067d6:	4b28      	ldr	r3, [pc, #160]	@ (8006878 <vTaskSwitchContext+0xa8>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067de:	4b27      	ldr	r3, [pc, #156]	@ (800687c <vTaskSwitchContext+0xac>)
 80067e0:	2201      	movs	r2, #1
 80067e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067e4:	e042      	b.n	800686c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80067e6:	4b25      	ldr	r3, [pc, #148]	@ (800687c <vTaskSwitchContext+0xac>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067ec:	4b24      	ldr	r3, [pc, #144]	@ (8006880 <vTaskSwitchContext+0xb0>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	e011      	b.n	8006818 <vTaskSwitchContext+0x48>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10b      	bne.n	8006812 <vTaskSwitchContext+0x42>
	__asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	607b      	str	r3, [r7, #4]
}
 800680c:	bf00      	nop
 800680e:	bf00      	nop
 8006810:	e7fd      	b.n	800680e <vTaskSwitchContext+0x3e>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	3b01      	subs	r3, #1
 8006816:	60fb      	str	r3, [r7, #12]
 8006818:	491a      	ldr	r1, [pc, #104]	@ (8006884 <vTaskSwitchContext+0xb4>)
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	4613      	mov	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	440b      	add	r3, r1
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d0e3      	beq.n	80067f4 <vTaskSwitchContext+0x24>
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4613      	mov	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4a13      	ldr	r2, [pc, #76]	@ (8006884 <vTaskSwitchContext+0xb4>)
 8006838:	4413      	add	r3, r2
 800683a:	60bb      	str	r3, [r7, #8]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	605a      	str	r2, [r3, #4]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	685a      	ldr	r2, [r3, #4]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	3308      	adds	r3, #8
 800684e:	429a      	cmp	r2, r3
 8006850:	d104      	bne.n	800685c <vTaskSwitchContext+0x8c>
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	685a      	ldr	r2, [r3, #4]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	605a      	str	r2, [r3, #4]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	4a09      	ldr	r2, [pc, #36]	@ (8006888 <vTaskSwitchContext+0xb8>)
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	4a06      	ldr	r2, [pc, #24]	@ (8006880 <vTaskSwitchContext+0xb0>)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6013      	str	r3, [r2, #0]
}
 800686c:	bf00      	nop
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	2000138c 	.word	0x2000138c
 800687c:	20001378 	.word	0x20001378
 8006880:	2000136c 	.word	0x2000136c
 8006884:	20000e94 	.word	0x20000e94
 8006888:	20000e90 	.word	0x20000e90

0800688c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10b      	bne.n	80068b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	60fb      	str	r3, [r7, #12]
}
 80068ae:	bf00      	nop
 80068b0:	bf00      	nop
 80068b2:	e7fd      	b.n	80068b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068b4:	4b07      	ldr	r3, [pc, #28]	@ (80068d4 <vTaskPlaceOnEventList+0x48>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	3318      	adds	r3, #24
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7fe fbca 	bl	8005056 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068c2:	2101      	movs	r1, #1
 80068c4:	6838      	ldr	r0, [r7, #0]
 80068c6:	f000 fb91 	bl	8006fec <prvAddCurrentTaskToDelayedList>
}
 80068ca:	bf00      	nop
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20000e90 	.word	0x20000e90

080068d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10b      	bne.n	8006902 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80068ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	617b      	str	r3, [r7, #20]
}
 80068fc:	bf00      	nop
 80068fe:	bf00      	nop
 8006900:	e7fd      	b.n	80068fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006902:	4b0a      	ldr	r3, [pc, #40]	@ (800692c <vTaskPlaceOnEventListRestricted+0x54>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3318      	adds	r3, #24
 8006908:	4619      	mov	r1, r3
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f7fe fb7f 	bl	800500e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006916:	f04f 33ff 	mov.w	r3, #4294967295
 800691a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800691c:	6879      	ldr	r1, [r7, #4]
 800691e:	68b8      	ldr	r0, [r7, #8]
 8006920:	f000 fb64 	bl	8006fec <prvAddCurrentTaskToDelayedList>
	}
 8006924:	bf00      	nop
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	20000e90 	.word	0x20000e90

08006930 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10b      	bne.n	800695e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	60fb      	str	r3, [r7, #12]
}
 8006958:	bf00      	nop
 800695a:	bf00      	nop
 800695c:	e7fd      	b.n	800695a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	3318      	adds	r3, #24
 8006962:	4618      	mov	r0, r3
 8006964:	f7fe fbb0 	bl	80050c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006968:	4b1d      	ldr	r3, [pc, #116]	@ (80069e0 <xTaskRemoveFromEventList+0xb0>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d11d      	bne.n	80069ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	3304      	adds	r3, #4
 8006974:	4618      	mov	r0, r3
 8006976:	f7fe fba7 	bl	80050c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800697e:	4b19      	ldr	r3, [pc, #100]	@ (80069e4 <xTaskRemoveFromEventList+0xb4>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	429a      	cmp	r2, r3
 8006984:	d903      	bls.n	800698e <xTaskRemoveFromEventList+0x5e>
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800698a:	4a16      	ldr	r2, [pc, #88]	@ (80069e4 <xTaskRemoveFromEventList+0xb4>)
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006992:	4613      	mov	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4a13      	ldr	r2, [pc, #76]	@ (80069e8 <xTaskRemoveFromEventList+0xb8>)
 800699c:	441a      	add	r2, r3
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	3304      	adds	r3, #4
 80069a2:	4619      	mov	r1, r3
 80069a4:	4610      	mov	r0, r2
 80069a6:	f7fe fb32 	bl	800500e <vListInsertEnd>
 80069aa:	e005      	b.n	80069b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	3318      	adds	r3, #24
 80069b0:	4619      	mov	r1, r3
 80069b2:	480e      	ldr	r0, [pc, #56]	@ (80069ec <xTaskRemoveFromEventList+0xbc>)
 80069b4:	f7fe fb2b 	bl	800500e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069bc:	4b0c      	ldr	r3, [pc, #48]	@ (80069f0 <xTaskRemoveFromEventList+0xc0>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d905      	bls.n	80069d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80069c6:	2301      	movs	r3, #1
 80069c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80069ca:	4b0a      	ldr	r3, [pc, #40]	@ (80069f4 <xTaskRemoveFromEventList+0xc4>)
 80069cc:	2201      	movs	r2, #1
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	e001      	b.n	80069d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80069d2:	2300      	movs	r3, #0
 80069d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80069d6:	697b      	ldr	r3, [r7, #20]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	2000138c 	.word	0x2000138c
 80069e4:	2000136c 	.word	0x2000136c
 80069e8:	20000e94 	.word	0x20000e94
 80069ec:	20001324 	.word	0x20001324
 80069f0:	20000e90 	.word	0x20000e90
 80069f4:	20001378 	.word	0x20001378

080069f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a00:	4b06      	ldr	r3, [pc, #24]	@ (8006a1c <vTaskInternalSetTimeOutState+0x24>)
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a08:	4b05      	ldr	r3, [pc, #20]	@ (8006a20 <vTaskInternalSetTimeOutState+0x28>)
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	605a      	str	r2, [r3, #4]
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	2000137c 	.word	0x2000137c
 8006a20:	20001368 	.word	0x20001368

08006a24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b088      	sub	sp, #32
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10b      	bne.n	8006a4c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	613b      	str	r3, [r7, #16]
}
 8006a46:	bf00      	nop
 8006a48:	bf00      	nop
 8006a4a:	e7fd      	b.n	8006a48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10b      	bne.n	8006a6a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	60fb      	str	r3, [r7, #12]
}
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop
 8006a68:	e7fd      	b.n	8006a66 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006a6a:	f000 ff9d 	bl	80079a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ae4 <xTaskCheckForTimeOut+0xc0>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a86:	d102      	bne.n	8006a8e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	61fb      	str	r3, [r7, #28]
 8006a8c:	e023      	b.n	8006ad6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	4b15      	ldr	r3, [pc, #84]	@ (8006ae8 <xTaskCheckForTimeOut+0xc4>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d007      	beq.n	8006aaa <xTaskCheckForTimeOut+0x86>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d302      	bcc.n	8006aaa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	61fb      	str	r3, [r7, #28]
 8006aa8:	e015      	b.n	8006ad6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d20b      	bcs.n	8006acc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	1ad2      	subs	r2, r2, r3
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7ff ff99 	bl	80069f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61fb      	str	r3, [r7, #28]
 8006aca:	e004      	b.n	8006ad6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ad6:	f000 ff99 	bl	8007a0c <vPortExitCritical>

	return xReturn;
 8006ada:	69fb      	ldr	r3, [r7, #28]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3720      	adds	r7, #32
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	20001368 	.word	0x20001368
 8006ae8:	2000137c 	.word	0x2000137c

08006aec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006aec:	b480      	push	{r7}
 8006aee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006af0:	4b03      	ldr	r3, [pc, #12]	@ (8006b00 <vTaskMissedYield+0x14>)
 8006af2:	2201      	movs	r2, #1
 8006af4:	601a      	str	r2, [r3, #0]
}
 8006af6:	bf00      	nop
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	20001378 	.word	0x20001378

08006b04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b0c:	f000 f852 	bl	8006bb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b10:	4b06      	ldr	r3, [pc, #24]	@ (8006b2c <prvIdleTask+0x28>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d9f9      	bls.n	8006b0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b18:	4b05      	ldr	r3, [pc, #20]	@ (8006b30 <prvIdleTask+0x2c>)
 8006b1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b28:	e7f0      	b.n	8006b0c <prvIdleTask+0x8>
 8006b2a:	bf00      	nop
 8006b2c:	20000e94 	.word	0x20000e94
 8006b30:	e000ed04 	.word	0xe000ed04

08006b34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	607b      	str	r3, [r7, #4]
 8006b3e:	e00c      	b.n	8006b5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4a12      	ldr	r2, [pc, #72]	@ (8006b94 <prvInitialiseTaskLists+0x60>)
 8006b4c:	4413      	add	r3, r2
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fe fa30 	bl	8004fb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	3301      	adds	r3, #1
 8006b58:	607b      	str	r3, [r7, #4]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b37      	cmp	r3, #55	@ 0x37
 8006b5e:	d9ef      	bls.n	8006b40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b60:	480d      	ldr	r0, [pc, #52]	@ (8006b98 <prvInitialiseTaskLists+0x64>)
 8006b62:	f7fe fa27 	bl	8004fb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b66:	480d      	ldr	r0, [pc, #52]	@ (8006b9c <prvInitialiseTaskLists+0x68>)
 8006b68:	f7fe fa24 	bl	8004fb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b6c:	480c      	ldr	r0, [pc, #48]	@ (8006ba0 <prvInitialiseTaskLists+0x6c>)
 8006b6e:	f7fe fa21 	bl	8004fb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b72:	480c      	ldr	r0, [pc, #48]	@ (8006ba4 <prvInitialiseTaskLists+0x70>)
 8006b74:	f7fe fa1e 	bl	8004fb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b78:	480b      	ldr	r0, [pc, #44]	@ (8006ba8 <prvInitialiseTaskLists+0x74>)
 8006b7a:	f7fe fa1b 	bl	8004fb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006bac <prvInitialiseTaskLists+0x78>)
 8006b80:	4a05      	ldr	r2, [pc, #20]	@ (8006b98 <prvInitialiseTaskLists+0x64>)
 8006b82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b84:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb0 <prvInitialiseTaskLists+0x7c>)
 8006b86:	4a05      	ldr	r2, [pc, #20]	@ (8006b9c <prvInitialiseTaskLists+0x68>)
 8006b88:	601a      	str	r2, [r3, #0]
}
 8006b8a:	bf00      	nop
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20000e94 	.word	0x20000e94
 8006b98:	200012f4 	.word	0x200012f4
 8006b9c:	20001308 	.word	0x20001308
 8006ba0:	20001324 	.word	0x20001324
 8006ba4:	20001338 	.word	0x20001338
 8006ba8:	20001350 	.word	0x20001350
 8006bac:	2000131c 	.word	0x2000131c
 8006bb0:	20001320 	.word	0x20001320

08006bb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bba:	e019      	b.n	8006bf0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006bbc:	f000 fef4 	bl	80079a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bc0:	4b10      	ldr	r3, [pc, #64]	@ (8006c04 <prvCheckTasksWaitingTermination+0x50>)
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	3304      	adds	r3, #4
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fe fa7b 	bl	80050c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c08 <prvCheckTasksWaitingTermination+0x54>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	4a0b      	ldr	r2, [pc, #44]	@ (8006c08 <prvCheckTasksWaitingTermination+0x54>)
 8006bda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8006c0c <prvCheckTasksWaitingTermination+0x58>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	4a0a      	ldr	r2, [pc, #40]	@ (8006c0c <prvCheckTasksWaitingTermination+0x58>)
 8006be4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006be6:	f000 ff11 	bl	8007a0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f810 	bl	8006c10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bf0:	4b06      	ldr	r3, [pc, #24]	@ (8006c0c <prvCheckTasksWaitingTermination+0x58>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e1      	bne.n	8006bbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006bf8:	bf00      	nop
 8006bfa:	bf00      	nop
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20001338 	.word	0x20001338
 8006c08:	20001364 	.word	0x20001364
 8006c0c:	2000134c 	.word	0x2000134c

08006c10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d108      	bne.n	8006c34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c26:	4618      	mov	r0, r3
 8006c28:	f001 f8ae 	bl	8007d88 <vPortFree>
				vPortFree( pxTCB );
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f001 f8ab 	bl	8007d88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c32:	e019      	b.n	8006c68 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d103      	bne.n	8006c46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f001 f8a2 	bl	8007d88 <vPortFree>
	}
 8006c44:	e010      	b.n	8006c68 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d00b      	beq.n	8006c68 <prvDeleteTCB+0x58>
	__asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	60fb      	str	r3, [r7, #12]
}
 8006c62:	bf00      	nop
 8006c64:	bf00      	nop
 8006c66:	e7fd      	b.n	8006c64 <prvDeleteTCB+0x54>
	}
 8006c68:	bf00      	nop
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c76:	4b0c      	ldr	r3, [pc, #48]	@ (8006ca8 <prvResetNextTaskUnblockTime+0x38>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d104      	bne.n	8006c8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c80:	4b0a      	ldr	r3, [pc, #40]	@ (8006cac <prvResetNextTaskUnblockTime+0x3c>)
 8006c82:	f04f 32ff 	mov.w	r2, #4294967295
 8006c86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c88:	e008      	b.n	8006c9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c8a:	4b07      	ldr	r3, [pc, #28]	@ (8006ca8 <prvResetNextTaskUnblockTime+0x38>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	4a04      	ldr	r2, [pc, #16]	@ (8006cac <prvResetNextTaskUnblockTime+0x3c>)
 8006c9a:	6013      	str	r3, [r2, #0]
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	2000131c 	.word	0x2000131c
 8006cac:	20001384 	.word	0x20001384

08006cb0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006cb6:	4b05      	ldr	r3, [pc, #20]	@ (8006ccc <xTaskGetCurrentTaskHandle+0x1c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006cbc:	687b      	ldr	r3, [r7, #4]
	}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	20000e90 	.word	0x20000e90

08006cd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8006d04 <xTaskGetSchedulerState+0x34>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d102      	bne.n	8006ce4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	607b      	str	r3, [r7, #4]
 8006ce2:	e008      	b.n	8006cf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ce4:	4b08      	ldr	r3, [pc, #32]	@ (8006d08 <xTaskGetSchedulerState+0x38>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d102      	bne.n	8006cf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006cec:	2302      	movs	r3, #2
 8006cee:	607b      	str	r3, [r7, #4]
 8006cf0:	e001      	b.n	8006cf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006cf6:	687b      	ldr	r3, [r7, #4]
	}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	20001370 	.word	0x20001370
 8006d08:	2000138c 	.word	0x2000138c

08006d0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d051      	beq.n	8006dc6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d26:	4b2a      	ldr	r3, [pc, #168]	@ (8006dd0 <xTaskPriorityInherit+0xc4>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d241      	bcs.n	8006db4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	db06      	blt.n	8006d46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d38:	4b25      	ldr	r3, [pc, #148]	@ (8006dd0 <xTaskPriorityInherit+0xc4>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	6959      	ldr	r1, [r3, #20]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d4e:	4613      	mov	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4a1f      	ldr	r2, [pc, #124]	@ (8006dd4 <xTaskPriorityInherit+0xc8>)
 8006d58:	4413      	add	r3, r2
 8006d5a:	4299      	cmp	r1, r3
 8006d5c:	d122      	bne.n	8006da4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	3304      	adds	r3, #4
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fe f9b0 	bl	80050c8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d68:	4b19      	ldr	r3, [pc, #100]	@ (8006dd0 <xTaskPriorityInherit+0xc4>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d76:	4b18      	ldr	r3, [pc, #96]	@ (8006dd8 <xTaskPriorityInherit+0xcc>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d903      	bls.n	8006d86 <xTaskPriorityInherit+0x7a>
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d82:	4a15      	ldr	r2, [pc, #84]	@ (8006dd8 <xTaskPriorityInherit+0xcc>)
 8006d84:	6013      	str	r3, [r2, #0]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4a10      	ldr	r2, [pc, #64]	@ (8006dd4 <xTaskPriorityInherit+0xc8>)
 8006d94:	441a      	add	r2, r3
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	f7fe f936 	bl	800500e <vListInsertEnd>
 8006da2:	e004      	b.n	8006dae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006da4:	4b0a      	ldr	r3, [pc, #40]	@ (8006dd0 <xTaskPriorityInherit+0xc4>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006dae:	2301      	movs	r3, #1
 8006db0:	60fb      	str	r3, [r7, #12]
 8006db2:	e008      	b.n	8006dc6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006db8:	4b05      	ldr	r3, [pc, #20]	@ (8006dd0 <xTaskPriorityInherit+0xc4>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d201      	bcs.n	8006dc6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
	}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	20000e90 	.word	0x20000e90
 8006dd4:	20000e94 	.word	0x20000e94
 8006dd8:	2000136c 	.word	0x2000136c

08006ddc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006de8:	2300      	movs	r3, #0
 8006dea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d058      	beq.n	8006ea4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006df2:	4b2f      	ldr	r3, [pc, #188]	@ (8006eb0 <xTaskPriorityDisinherit+0xd4>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d00b      	beq.n	8006e14 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	60fb      	str	r3, [r7, #12]
}
 8006e0e:	bf00      	nop
 8006e10:	bf00      	nop
 8006e12:	e7fd      	b.n	8006e10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10b      	bne.n	8006e34 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	60bb      	str	r3, [r7, #8]
}
 8006e2e:	bf00      	nop
 8006e30:	bf00      	nop
 8006e32:	e7fd      	b.n	8006e30 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e38:	1e5a      	subs	r2, r3, #1
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d02c      	beq.n	8006ea4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d128      	bne.n	8006ea4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	3304      	adds	r3, #4
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fe f936 	bl	80050c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e68:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e74:	4b0f      	ldr	r3, [pc, #60]	@ (8006eb4 <xTaskPriorityDisinherit+0xd8>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d903      	bls.n	8006e84 <xTaskPriorityDisinherit+0xa8>
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e80:	4a0c      	ldr	r2, [pc, #48]	@ (8006eb4 <xTaskPriorityDisinherit+0xd8>)
 8006e82:	6013      	str	r3, [r2, #0]
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e88:	4613      	mov	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4a09      	ldr	r2, [pc, #36]	@ (8006eb8 <xTaskPriorityDisinherit+0xdc>)
 8006e92:	441a      	add	r2, r3
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	3304      	adds	r3, #4
 8006e98:	4619      	mov	r1, r3
 8006e9a:	4610      	mov	r0, r2
 8006e9c:	f7fe f8b7 	bl	800500e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ea4:	697b      	ldr	r3, [r7, #20]
	}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3718      	adds	r7, #24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	20000e90 	.word	0x20000e90
 8006eb4:	2000136c 	.word	0x2000136c
 8006eb8:	20000e94 	.word	0x20000e94

08006ebc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b088      	sub	sp, #32
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d06c      	beq.n	8006fae <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10b      	bne.n	8006ef4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	60fb      	str	r3, [r7, #12]
}
 8006eee:	bf00      	nop
 8006ef0:	bf00      	nop
 8006ef2:	e7fd      	b.n	8006ef0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d902      	bls.n	8006f04 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	61fb      	str	r3, [r7, #28]
 8006f02:	e002      	b.n	8006f0a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f08:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0e:	69fa      	ldr	r2, [r7, #28]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d04c      	beq.n	8006fae <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d147      	bne.n	8006fae <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006f1e:	4b26      	ldr	r3, [pc, #152]	@ (8006fb8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d10b      	bne.n	8006f40 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	60bb      	str	r3, [r7, #8]
}
 8006f3a:	bf00      	nop
 8006f3c:	bf00      	nop
 8006f3e:	e7fd      	b.n	8006f3c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f44:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	69fa      	ldr	r2, [r7, #28]
 8006f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	db04      	blt.n	8006f5e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	6959      	ldr	r1, [r3, #20]
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	4613      	mov	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4413      	add	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4a13      	ldr	r2, [pc, #76]	@ (8006fbc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006f6e:	4413      	add	r3, r2
 8006f70:	4299      	cmp	r1, r3
 8006f72:	d11c      	bne.n	8006fae <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	3304      	adds	r3, #4
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fe f8a5 	bl	80050c8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f82:	4b0f      	ldr	r3, [pc, #60]	@ (8006fc0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d903      	bls.n	8006f92 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8006fc0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006f90:	6013      	str	r3, [r2, #0]
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f96:	4613      	mov	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4a07      	ldr	r2, [pc, #28]	@ (8006fbc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006fa0:	441a      	add	r2, r3
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	4610      	mov	r0, r2
 8006faa:	f7fe f830 	bl	800500e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fae:	bf00      	nop
 8006fb0:	3720      	adds	r7, #32
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	20000e90 	.word	0x20000e90
 8006fbc:	20000e94 	.word	0x20000e94
 8006fc0:	2000136c 	.word	0x2000136c

08006fc4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006fc4:	b480      	push	{r7}
 8006fc6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006fc8:	4b07      	ldr	r3, [pc, #28]	@ (8006fe8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d004      	beq.n	8006fda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006fd0:	4b05      	ldr	r3, [pc, #20]	@ (8006fe8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006fd6:	3201      	adds	r2, #1
 8006fd8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006fda:	4b03      	ldr	r3, [pc, #12]	@ (8006fe8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
	}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	20000e90 	.word	0x20000e90

08006fec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ff6:	4b21      	ldr	r3, [pc, #132]	@ (800707c <prvAddCurrentTaskToDelayedList+0x90>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ffc:	4b20      	ldr	r3, [pc, #128]	@ (8007080 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3304      	adds	r3, #4
 8007002:	4618      	mov	r0, r3
 8007004:	f7fe f860 	bl	80050c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700e:	d10a      	bne.n	8007026 <prvAddCurrentTaskToDelayedList+0x3a>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d007      	beq.n	8007026 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007016:	4b1a      	ldr	r3, [pc, #104]	@ (8007080 <prvAddCurrentTaskToDelayedList+0x94>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3304      	adds	r3, #4
 800701c:	4619      	mov	r1, r3
 800701e:	4819      	ldr	r0, [pc, #100]	@ (8007084 <prvAddCurrentTaskToDelayedList+0x98>)
 8007020:	f7fd fff5 	bl	800500e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007024:	e026      	b.n	8007074 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4413      	add	r3, r2
 800702c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800702e:	4b14      	ldr	r3, [pc, #80]	@ (8007080 <prvAddCurrentTaskToDelayedList+0x94>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	429a      	cmp	r2, r3
 800703c:	d209      	bcs.n	8007052 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800703e:	4b12      	ldr	r3, [pc, #72]	@ (8007088 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	4b0f      	ldr	r3, [pc, #60]	@ (8007080 <prvAddCurrentTaskToDelayedList+0x94>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3304      	adds	r3, #4
 8007048:	4619      	mov	r1, r3
 800704a:	4610      	mov	r0, r2
 800704c:	f7fe f803 	bl	8005056 <vListInsert>
}
 8007050:	e010      	b.n	8007074 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007052:	4b0e      	ldr	r3, [pc, #56]	@ (800708c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	4b0a      	ldr	r3, [pc, #40]	@ (8007080 <prvAddCurrentTaskToDelayedList+0x94>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3304      	adds	r3, #4
 800705c:	4619      	mov	r1, r3
 800705e:	4610      	mov	r0, r2
 8007060:	f7fd fff9 	bl	8005056 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007064:	4b0a      	ldr	r3, [pc, #40]	@ (8007090 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	429a      	cmp	r2, r3
 800706c:	d202      	bcs.n	8007074 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800706e:	4a08      	ldr	r2, [pc, #32]	@ (8007090 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	6013      	str	r3, [r2, #0]
}
 8007074:	bf00      	nop
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	20001368 	.word	0x20001368
 8007080:	20000e90 	.word	0x20000e90
 8007084:	20001350 	.word	0x20001350
 8007088:	20001320 	.word	0x20001320
 800708c:	2000131c 	.word	0x2000131c
 8007090:	20001384 	.word	0x20001384

08007094 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b08a      	sub	sp, #40	@ 0x28
 8007098:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800709a:	2300      	movs	r3, #0
 800709c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800709e:	f000 fb13 	bl	80076c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80070a2:	4b1d      	ldr	r3, [pc, #116]	@ (8007118 <xTimerCreateTimerTask+0x84>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d021      	beq.n	80070ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80070b2:	1d3a      	adds	r2, r7, #4
 80070b4:	f107 0108 	add.w	r1, r7, #8
 80070b8:	f107 030c 	add.w	r3, r7, #12
 80070bc:	4618      	mov	r0, r3
 80070be:	f7fd ff5f 	bl	8004f80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070c2:	6879      	ldr	r1, [r7, #4]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	9202      	str	r2, [sp, #8]
 80070ca:	9301      	str	r3, [sp, #4]
 80070cc:	2302      	movs	r3, #2
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	2300      	movs	r3, #0
 80070d2:	460a      	mov	r2, r1
 80070d4:	4911      	ldr	r1, [pc, #68]	@ (800711c <xTimerCreateTimerTask+0x88>)
 80070d6:	4812      	ldr	r0, [pc, #72]	@ (8007120 <xTimerCreateTimerTask+0x8c>)
 80070d8:	f7fe ffc0 	bl	800605c <xTaskCreateStatic>
 80070dc:	4603      	mov	r3, r0
 80070de:	4a11      	ldr	r2, [pc, #68]	@ (8007124 <xTimerCreateTimerTask+0x90>)
 80070e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80070e2:	4b10      	ldr	r3, [pc, #64]	@ (8007124 <xTimerCreateTimerTask+0x90>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80070ea:	2301      	movs	r3, #1
 80070ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10b      	bne.n	800710c <xTimerCreateTimerTask+0x78>
	__asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	613b      	str	r3, [r7, #16]
}
 8007106:	bf00      	nop
 8007108:	bf00      	nop
 800710a:	e7fd      	b.n	8007108 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800710c:	697b      	ldr	r3, [r7, #20]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	200013c0 	.word	0x200013c0
 800711c:	08008074 	.word	0x08008074
 8007120:	08007261 	.word	0x08007261
 8007124:	200013c4 	.word	0x200013c4

08007128 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b08a      	sub	sp, #40	@ 0x28
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
 8007134:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007136:	2300      	movs	r3, #0
 8007138:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10b      	bne.n	8007158 <xTimerGenericCommand+0x30>
	__asm volatile
 8007140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	623b      	str	r3, [r7, #32]
}
 8007152:	bf00      	nop
 8007154:	bf00      	nop
 8007156:	e7fd      	b.n	8007154 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007158:	4b19      	ldr	r3, [pc, #100]	@ (80071c0 <xTimerGenericCommand+0x98>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d02a      	beq.n	80071b6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2b05      	cmp	r3, #5
 8007170:	dc18      	bgt.n	80071a4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007172:	f7ff fdad 	bl	8006cd0 <xTaskGetSchedulerState>
 8007176:	4603      	mov	r3, r0
 8007178:	2b02      	cmp	r3, #2
 800717a:	d109      	bne.n	8007190 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800717c:	4b10      	ldr	r3, [pc, #64]	@ (80071c0 <xTimerGenericCommand+0x98>)
 800717e:	6818      	ldr	r0, [r3, #0]
 8007180:	f107 0110 	add.w	r1, r7, #16
 8007184:	2300      	movs	r3, #0
 8007186:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007188:	f7fe f93e 	bl	8005408 <xQueueGenericSend>
 800718c:	6278      	str	r0, [r7, #36]	@ 0x24
 800718e:	e012      	b.n	80071b6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007190:	4b0b      	ldr	r3, [pc, #44]	@ (80071c0 <xTimerGenericCommand+0x98>)
 8007192:	6818      	ldr	r0, [r3, #0]
 8007194:	f107 0110 	add.w	r1, r7, #16
 8007198:	2300      	movs	r3, #0
 800719a:	2200      	movs	r2, #0
 800719c:	f7fe f934 	bl	8005408 <xQueueGenericSend>
 80071a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80071a2:	e008      	b.n	80071b6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80071a4:	4b06      	ldr	r3, [pc, #24]	@ (80071c0 <xTimerGenericCommand+0x98>)
 80071a6:	6818      	ldr	r0, [r3, #0]
 80071a8:	f107 0110 	add.w	r1, r7, #16
 80071ac:	2300      	movs	r3, #0
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	f7fe fa2c 	bl	800560c <xQueueGenericSendFromISR>
 80071b4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80071b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3728      	adds	r7, #40	@ 0x28
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	200013c0 	.word	0x200013c0

080071c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b088      	sub	sp, #32
 80071c8:	af02      	add	r7, sp, #8
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ce:	4b23      	ldr	r3, [pc, #140]	@ (800725c <prvProcessExpiredTimer+0x98>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	3304      	adds	r3, #4
 80071dc:	4618      	mov	r0, r3
 80071de:	f7fd ff73 	bl	80050c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071e8:	f003 0304 	and.w	r3, r3, #4
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d023      	beq.n	8007238 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	699a      	ldr	r2, [r3, #24]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	18d1      	adds	r1, r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	6978      	ldr	r0, [r7, #20]
 80071fe:	f000 f8d5 	bl	80073ac <prvInsertTimerInActiveList>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d020      	beq.n	800724a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007208:	2300      	movs	r3, #0
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	2300      	movs	r3, #0
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	2100      	movs	r1, #0
 8007212:	6978      	ldr	r0, [r7, #20]
 8007214:	f7ff ff88 	bl	8007128 <xTimerGenericCommand>
 8007218:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d114      	bne.n	800724a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007224:	f383 8811 	msr	BASEPRI, r3
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	60fb      	str	r3, [r7, #12]
}
 8007232:	bf00      	nop
 8007234:	bf00      	nop
 8007236:	e7fd      	b.n	8007234 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800723e:	f023 0301 	bic.w	r3, r3, #1
 8007242:	b2da      	uxtb	r2, r3
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	6978      	ldr	r0, [r7, #20]
 8007250:	4798      	blx	r3
}
 8007252:	bf00      	nop
 8007254:	3718      	adds	r7, #24
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	200013b8 	.word	0x200013b8

08007260 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007268:	f107 0308 	add.w	r3, r7, #8
 800726c:	4618      	mov	r0, r3
 800726e:	f000 f859 	bl	8007324 <prvGetNextExpireTime>
 8007272:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	4619      	mov	r1, r3
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f000 f805 	bl	8007288 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800727e:	f000 f8d7 	bl	8007430 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007282:	bf00      	nop
 8007284:	e7f0      	b.n	8007268 <prvTimerTask+0x8>
	...

08007288 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007292:	f7ff f927 	bl	80064e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007296:	f107 0308 	add.w	r3, r7, #8
 800729a:	4618      	mov	r0, r3
 800729c:	f000 f866 	bl	800736c <prvSampleTimeNow>
 80072a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d130      	bne.n	800730a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10a      	bne.n	80072c4 <prvProcessTimerOrBlockTask+0x3c>
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d806      	bhi.n	80072c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80072b6:	f7ff f923 	bl	8006500 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80072ba:	68f9      	ldr	r1, [r7, #12]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7ff ff81 	bl	80071c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80072c2:	e024      	b.n	800730e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d008      	beq.n	80072dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80072ca:	4b13      	ldr	r3, [pc, #76]	@ (8007318 <prvProcessTimerOrBlockTask+0x90>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d101      	bne.n	80072d8 <prvProcessTimerOrBlockTask+0x50>
 80072d4:	2301      	movs	r3, #1
 80072d6:	e000      	b.n	80072da <prvProcessTimerOrBlockTask+0x52>
 80072d8:	2300      	movs	r3, #0
 80072da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80072dc:	4b0f      	ldr	r3, [pc, #60]	@ (800731c <prvProcessTimerOrBlockTask+0x94>)
 80072de:	6818      	ldr	r0, [r3, #0]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	683a      	ldr	r2, [r7, #0]
 80072e8:	4619      	mov	r1, r3
 80072ea:	f7fe fe83 	bl	8005ff4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80072ee:	f7ff f907 	bl	8006500 <xTaskResumeAll>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10a      	bne.n	800730e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80072f8:	4b09      	ldr	r3, [pc, #36]	@ (8007320 <prvProcessTimerOrBlockTask+0x98>)
 80072fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	f3bf 8f6f 	isb	sy
}
 8007308:	e001      	b.n	800730e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800730a:	f7ff f8f9 	bl	8006500 <xTaskResumeAll>
}
 800730e:	bf00      	nop
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	200013bc 	.word	0x200013bc
 800731c:	200013c0 	.word	0x200013c0
 8007320:	e000ed04 	.word	0xe000ed04

08007324 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800732c:	4b0e      	ldr	r3, [pc, #56]	@ (8007368 <prvGetNextExpireTime+0x44>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <prvGetNextExpireTime+0x16>
 8007336:	2201      	movs	r2, #1
 8007338:	e000      	b.n	800733c <prvGetNextExpireTime+0x18>
 800733a:	2200      	movs	r2, #0
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d105      	bne.n	8007354 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007348:	4b07      	ldr	r3, [pc, #28]	@ (8007368 <prvGetNextExpireTime+0x44>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	60fb      	str	r3, [r7, #12]
 8007352:	e001      	b.n	8007358 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007358:	68fb      	ldr	r3, [r7, #12]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	200013b8 	.word	0x200013b8

0800736c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007374:	f7ff f962 	bl	800663c <xTaskGetTickCount>
 8007378:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800737a:	4b0b      	ldr	r3, [pc, #44]	@ (80073a8 <prvSampleTimeNow+0x3c>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	429a      	cmp	r2, r3
 8007382:	d205      	bcs.n	8007390 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007384:	f000 f93a 	bl	80075fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	e002      	b.n	8007396 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007396:	4a04      	ldr	r2, [pc, #16]	@ (80073a8 <prvSampleTimeNow+0x3c>)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800739c:	68fb      	ldr	r3, [r7, #12]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	200013c8 	.word	0x200013c8

080073ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80073ba:	2300      	movs	r3, #0
 80073bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d812      	bhi.n	80073f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	1ad2      	subs	r2, r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d302      	bcc.n	80073e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80073e0:	2301      	movs	r3, #1
 80073e2:	617b      	str	r3, [r7, #20]
 80073e4:	e01b      	b.n	800741e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80073e6:	4b10      	ldr	r3, [pc, #64]	@ (8007428 <prvInsertTimerInActiveList+0x7c>)
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3304      	adds	r3, #4
 80073ee:	4619      	mov	r1, r3
 80073f0:	4610      	mov	r0, r2
 80073f2:	f7fd fe30 	bl	8005056 <vListInsert>
 80073f6:	e012      	b.n	800741e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d206      	bcs.n	800740e <prvInsertTimerInActiveList+0x62>
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	429a      	cmp	r2, r3
 8007406:	d302      	bcc.n	800740e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007408:	2301      	movs	r3, #1
 800740a:	617b      	str	r3, [r7, #20]
 800740c:	e007      	b.n	800741e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800740e:	4b07      	ldr	r3, [pc, #28]	@ (800742c <prvInsertTimerInActiveList+0x80>)
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3304      	adds	r3, #4
 8007416:	4619      	mov	r1, r3
 8007418:	4610      	mov	r0, r2
 800741a:	f7fd fe1c 	bl	8005056 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800741e:	697b      	ldr	r3, [r7, #20]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	200013bc 	.word	0x200013bc
 800742c:	200013b8 	.word	0x200013b8

08007430 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b08e      	sub	sp, #56	@ 0x38
 8007434:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007436:	e0ce      	b.n	80075d6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	da19      	bge.n	8007472 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800743e:	1d3b      	adds	r3, r7, #4
 8007440:	3304      	adds	r3, #4
 8007442:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10b      	bne.n	8007462 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	61fb      	str	r3, [r7, #28]
}
 800745c:	bf00      	nop
 800745e:	bf00      	nop
 8007460:	e7fd      	b.n	800745e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007468:	6850      	ldr	r0, [r2, #4]
 800746a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800746c:	6892      	ldr	r2, [r2, #8]
 800746e:	4611      	mov	r1, r2
 8007470:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	f2c0 80ae 	blt.w	80075d6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800747e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d004      	beq.n	8007490 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007488:	3304      	adds	r3, #4
 800748a:	4618      	mov	r0, r3
 800748c:	f7fd fe1c 	bl	80050c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007490:	463b      	mov	r3, r7
 8007492:	4618      	mov	r0, r3
 8007494:	f7ff ff6a 	bl	800736c <prvSampleTimeNow>
 8007498:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b09      	cmp	r3, #9
 800749e:	f200 8097 	bhi.w	80075d0 <prvProcessReceivedCommands+0x1a0>
 80074a2:	a201      	add	r2, pc, #4	@ (adr r2, 80074a8 <prvProcessReceivedCommands+0x78>)
 80074a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a8:	080074d1 	.word	0x080074d1
 80074ac:	080074d1 	.word	0x080074d1
 80074b0:	080074d1 	.word	0x080074d1
 80074b4:	08007547 	.word	0x08007547
 80074b8:	0800755b 	.word	0x0800755b
 80074bc:	080075a7 	.word	0x080075a7
 80074c0:	080074d1 	.word	0x080074d1
 80074c4:	080074d1 	.word	0x080074d1
 80074c8:	08007547 	.word	0x08007547
 80074cc:	0800755b 	.word	0x0800755b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074d6:	f043 0301 	orr.w	r3, r3, #1
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	18d1      	adds	r1, r2, r3
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074f0:	f7ff ff5c 	bl	80073ac <prvInsertTimerInActiveList>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d06c      	beq.n	80075d4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007500:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007504:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007508:	f003 0304 	and.w	r3, r3, #4
 800750c:	2b00      	cmp	r3, #0
 800750e:	d061      	beq.n	80075d4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	441a      	add	r2, r3
 8007518:	2300      	movs	r3, #0
 800751a:	9300      	str	r3, [sp, #0]
 800751c:	2300      	movs	r3, #0
 800751e:	2100      	movs	r1, #0
 8007520:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007522:	f7ff fe01 	bl	8007128 <xTimerGenericCommand>
 8007526:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007528:	6a3b      	ldr	r3, [r7, #32]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d152      	bne.n	80075d4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	61bb      	str	r3, [r7, #24]
}
 8007540:	bf00      	nop
 8007542:	bf00      	nop
 8007544:	e7fd      	b.n	8007542 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007548:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800754c:	f023 0301 	bic.w	r3, r3, #1
 8007550:	b2da      	uxtb	r2, r3
 8007552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007554:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007558:	e03d      	b.n	80075d6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800755a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007560:	f043 0301 	orr.w	r3, r3, #1
 8007564:	b2da      	uxtb	r2, r3
 8007566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007568:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007570:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10b      	bne.n	8007592 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	617b      	str	r3, [r7, #20]
}
 800758c:	bf00      	nop
 800758e:	bf00      	nop
 8007590:	e7fd      	b.n	800758e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007594:	699a      	ldr	r2, [r3, #24]
 8007596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007598:	18d1      	adds	r1, r2, r3
 800759a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800759e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075a0:	f7ff ff04 	bl	80073ac <prvInsertTimerInActiveList>
					break;
 80075a4:	e017      	b.n	80075d6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80075a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075ac:	f003 0302 	and.w	r3, r3, #2
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d103      	bne.n	80075bc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80075b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075b6:	f000 fbe7 	bl	8007d88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80075ba:	e00c      	b.n	80075d6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075c2:	f023 0301 	bic.w	r3, r3, #1
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80075ce:	e002      	b.n	80075d6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80075d0:	bf00      	nop
 80075d2:	e000      	b.n	80075d6 <prvProcessReceivedCommands+0x1a6>
					break;
 80075d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075d6:	4b08      	ldr	r3, [pc, #32]	@ (80075f8 <prvProcessReceivedCommands+0x1c8>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	1d39      	adds	r1, r7, #4
 80075dc:	2200      	movs	r2, #0
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fe f942 	bl	8005868 <xQueueReceive>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f47f af26 	bne.w	8007438 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80075ec:	bf00      	nop
 80075ee:	bf00      	nop
 80075f0:	3730      	adds	r7, #48	@ 0x30
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	200013c0 	.word	0x200013c0

080075fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b088      	sub	sp, #32
 8007600:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007602:	e049      	b.n	8007698 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007604:	4b2e      	ldr	r3, [pc, #184]	@ (80076c0 <prvSwitchTimerLists+0xc4>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800760e:	4b2c      	ldr	r3, [pc, #176]	@ (80076c0 <prvSwitchTimerLists+0xc4>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3304      	adds	r3, #4
 800761c:	4618      	mov	r0, r3
 800761e:	f7fd fd53 	bl	80050c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007630:	f003 0304 	and.w	r3, r3, #4
 8007634:	2b00      	cmp	r3, #0
 8007636:	d02f      	beq.n	8007698 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	4413      	add	r3, r2
 8007640:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	429a      	cmp	r2, r3
 8007648:	d90e      	bls.n	8007668 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007656:	4b1a      	ldr	r3, [pc, #104]	@ (80076c0 <prvSwitchTimerLists+0xc4>)
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3304      	adds	r3, #4
 800765e:	4619      	mov	r1, r3
 8007660:	4610      	mov	r0, r2
 8007662:	f7fd fcf8 	bl	8005056 <vListInsert>
 8007666:	e017      	b.n	8007698 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007668:	2300      	movs	r3, #0
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	2300      	movs	r3, #0
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	2100      	movs	r1, #0
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f7ff fd58 	bl	8007128 <xTimerGenericCommand>
 8007678:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10b      	bne.n	8007698 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007684:	f383 8811 	msr	BASEPRI, r3
 8007688:	f3bf 8f6f 	isb	sy
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	603b      	str	r3, [r7, #0]
}
 8007692:	bf00      	nop
 8007694:	bf00      	nop
 8007696:	e7fd      	b.n	8007694 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007698:	4b09      	ldr	r3, [pc, #36]	@ (80076c0 <prvSwitchTimerLists+0xc4>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1b0      	bne.n	8007604 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80076a2:	4b07      	ldr	r3, [pc, #28]	@ (80076c0 <prvSwitchTimerLists+0xc4>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80076a8:	4b06      	ldr	r3, [pc, #24]	@ (80076c4 <prvSwitchTimerLists+0xc8>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a04      	ldr	r2, [pc, #16]	@ (80076c0 <prvSwitchTimerLists+0xc4>)
 80076ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80076b0:	4a04      	ldr	r2, [pc, #16]	@ (80076c4 <prvSwitchTimerLists+0xc8>)
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	6013      	str	r3, [r2, #0]
}
 80076b6:	bf00      	nop
 80076b8:	3718      	adds	r7, #24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	200013b8 	.word	0x200013b8
 80076c4:	200013bc 	.word	0x200013bc

080076c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80076ce:	f000 f96b 	bl	80079a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80076d2:	4b15      	ldr	r3, [pc, #84]	@ (8007728 <prvCheckForValidListAndQueue+0x60>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d120      	bne.n	800771c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80076da:	4814      	ldr	r0, [pc, #80]	@ (800772c <prvCheckForValidListAndQueue+0x64>)
 80076dc:	f7fd fc6a 	bl	8004fb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80076e0:	4813      	ldr	r0, [pc, #76]	@ (8007730 <prvCheckForValidListAndQueue+0x68>)
 80076e2:	f7fd fc67 	bl	8004fb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80076e6:	4b13      	ldr	r3, [pc, #76]	@ (8007734 <prvCheckForValidListAndQueue+0x6c>)
 80076e8:	4a10      	ldr	r2, [pc, #64]	@ (800772c <prvCheckForValidListAndQueue+0x64>)
 80076ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80076ec:	4b12      	ldr	r3, [pc, #72]	@ (8007738 <prvCheckForValidListAndQueue+0x70>)
 80076ee:	4a10      	ldr	r2, [pc, #64]	@ (8007730 <prvCheckForValidListAndQueue+0x68>)
 80076f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80076f2:	2300      	movs	r3, #0
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	4b11      	ldr	r3, [pc, #68]	@ (800773c <prvCheckForValidListAndQueue+0x74>)
 80076f8:	4a11      	ldr	r2, [pc, #68]	@ (8007740 <prvCheckForValidListAndQueue+0x78>)
 80076fa:	2110      	movs	r1, #16
 80076fc:	200a      	movs	r0, #10
 80076fe:	f7fd fd77 	bl	80051f0 <xQueueGenericCreateStatic>
 8007702:	4603      	mov	r3, r0
 8007704:	4a08      	ldr	r2, [pc, #32]	@ (8007728 <prvCheckForValidListAndQueue+0x60>)
 8007706:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007708:	4b07      	ldr	r3, [pc, #28]	@ (8007728 <prvCheckForValidListAndQueue+0x60>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d005      	beq.n	800771c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007710:	4b05      	ldr	r3, [pc, #20]	@ (8007728 <prvCheckForValidListAndQueue+0x60>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	490b      	ldr	r1, [pc, #44]	@ (8007744 <prvCheckForValidListAndQueue+0x7c>)
 8007716:	4618      	mov	r0, r3
 8007718:	f7fe fc42 	bl	8005fa0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800771c:	f000 f976 	bl	8007a0c <vPortExitCritical>
}
 8007720:	bf00      	nop
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	200013c0 	.word	0x200013c0
 800772c:	20001390 	.word	0x20001390
 8007730:	200013a4 	.word	0x200013a4
 8007734:	200013b8 	.word	0x200013b8
 8007738:	200013bc 	.word	0x200013bc
 800773c:	2000146c 	.word	0x2000146c
 8007740:	200013cc 	.word	0x200013cc
 8007744:	0800807c 	.word	0x0800807c

08007748 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	3b04      	subs	r3, #4
 8007758:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007760:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3b04      	subs	r3, #4
 8007766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	f023 0201 	bic.w	r2, r3, #1
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3b04      	subs	r3, #4
 8007776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007778:	4a0c      	ldr	r2, [pc, #48]	@ (80077ac <pxPortInitialiseStack+0x64>)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	3b14      	subs	r3, #20
 8007782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3b04      	subs	r3, #4
 800778e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f06f 0202 	mvn.w	r2, #2
 8007796:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	3b20      	subs	r3, #32
 800779c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800779e:	68fb      	ldr	r3, [r7, #12]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	080077b1 	.word	0x080077b1

080077b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80077b6:	2300      	movs	r3, #0
 80077b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077ba:	4b13      	ldr	r3, [pc, #76]	@ (8007808 <prvTaskExitError+0x58>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c2:	d00b      	beq.n	80077dc <prvTaskExitError+0x2c>
	__asm volatile
 80077c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c8:	f383 8811 	msr	BASEPRI, r3
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	60fb      	str	r3, [r7, #12]
}
 80077d6:	bf00      	nop
 80077d8:	bf00      	nop
 80077da:	e7fd      	b.n	80077d8 <prvTaskExitError+0x28>
	__asm volatile
 80077dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	60bb      	str	r3, [r7, #8]
}
 80077ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80077f0:	bf00      	nop
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d0fc      	beq.n	80077f2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80077f8:	bf00      	nop
 80077fa:	bf00      	nop
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	2000000c 	.word	0x2000000c
 800780c:	00000000 	.word	0x00000000

08007810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007810:	4b07      	ldr	r3, [pc, #28]	@ (8007830 <pxCurrentTCBConst2>)
 8007812:	6819      	ldr	r1, [r3, #0]
 8007814:	6808      	ldr	r0, [r1, #0]
 8007816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781a:	f380 8809 	msr	PSP, r0
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f04f 0000 	mov.w	r0, #0
 8007826:	f380 8811 	msr	BASEPRI, r0
 800782a:	4770      	bx	lr
 800782c:	f3af 8000 	nop.w

08007830 <pxCurrentTCBConst2>:
 8007830:	20000e90 	.word	0x20000e90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007834:	bf00      	nop
 8007836:	bf00      	nop

08007838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007838:	4808      	ldr	r0, [pc, #32]	@ (800785c <prvPortStartFirstTask+0x24>)
 800783a:	6800      	ldr	r0, [r0, #0]
 800783c:	6800      	ldr	r0, [r0, #0]
 800783e:	f380 8808 	msr	MSP, r0
 8007842:	f04f 0000 	mov.w	r0, #0
 8007846:	f380 8814 	msr	CONTROL, r0
 800784a:	b662      	cpsie	i
 800784c:	b661      	cpsie	f
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	df00      	svc	0
 8007858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800785a:	bf00      	nop
 800785c:	e000ed08 	.word	0xe000ed08

08007860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007866:	4b47      	ldr	r3, [pc, #284]	@ (8007984 <xPortStartScheduler+0x124>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a47      	ldr	r2, [pc, #284]	@ (8007988 <xPortStartScheduler+0x128>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d10b      	bne.n	8007888 <xPortStartScheduler+0x28>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	60fb      	str	r3, [r7, #12]
}
 8007882:	bf00      	nop
 8007884:	bf00      	nop
 8007886:	e7fd      	b.n	8007884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007888:	4b3e      	ldr	r3, [pc, #248]	@ (8007984 <xPortStartScheduler+0x124>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a3f      	ldr	r2, [pc, #252]	@ (800798c <xPortStartScheduler+0x12c>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d10b      	bne.n	80078aa <xPortStartScheduler+0x4a>
	__asm volatile
 8007892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	613b      	str	r3, [r7, #16]
}
 80078a4:	bf00      	nop
 80078a6:	bf00      	nop
 80078a8:	e7fd      	b.n	80078a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078aa:	4b39      	ldr	r3, [pc, #228]	@ (8007990 <xPortStartScheduler+0x130>)
 80078ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	22ff      	movs	r2, #255	@ 0xff
 80078ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078c4:	78fb      	ldrb	r3, [r7, #3]
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	4b31      	ldr	r3, [pc, #196]	@ (8007994 <xPortStartScheduler+0x134>)
 80078d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078d2:	4b31      	ldr	r3, [pc, #196]	@ (8007998 <xPortStartScheduler+0x138>)
 80078d4:	2207      	movs	r2, #7
 80078d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078d8:	e009      	b.n	80078ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80078da:	4b2f      	ldr	r3, [pc, #188]	@ (8007998 <xPortStartScheduler+0x138>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3b01      	subs	r3, #1
 80078e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007998 <xPortStartScheduler+0x138>)
 80078e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078e4:	78fb      	ldrb	r3, [r7, #3]
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	005b      	lsls	r3, r3, #1
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078ee:	78fb      	ldrb	r3, [r7, #3]
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078f6:	2b80      	cmp	r3, #128	@ 0x80
 80078f8:	d0ef      	beq.n	80078da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80078fa:	4b27      	ldr	r3, [pc, #156]	@ (8007998 <xPortStartScheduler+0x138>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f1c3 0307 	rsb	r3, r3, #7
 8007902:	2b04      	cmp	r3, #4
 8007904:	d00b      	beq.n	800791e <xPortStartScheduler+0xbe>
	__asm volatile
 8007906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790a:	f383 8811 	msr	BASEPRI, r3
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	60bb      	str	r3, [r7, #8]
}
 8007918:	bf00      	nop
 800791a:	bf00      	nop
 800791c:	e7fd      	b.n	800791a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800791e:	4b1e      	ldr	r3, [pc, #120]	@ (8007998 <xPortStartScheduler+0x138>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	021b      	lsls	r3, r3, #8
 8007924:	4a1c      	ldr	r2, [pc, #112]	@ (8007998 <xPortStartScheduler+0x138>)
 8007926:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007928:	4b1b      	ldr	r3, [pc, #108]	@ (8007998 <xPortStartScheduler+0x138>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007930:	4a19      	ldr	r2, [pc, #100]	@ (8007998 <xPortStartScheduler+0x138>)
 8007932:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	b2da      	uxtb	r2, r3
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800793c:	4b17      	ldr	r3, [pc, #92]	@ (800799c <xPortStartScheduler+0x13c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a16      	ldr	r2, [pc, #88]	@ (800799c <xPortStartScheduler+0x13c>)
 8007942:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007946:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007948:	4b14      	ldr	r3, [pc, #80]	@ (800799c <xPortStartScheduler+0x13c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a13      	ldr	r2, [pc, #76]	@ (800799c <xPortStartScheduler+0x13c>)
 800794e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007952:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007954:	f000 f8da 	bl	8007b0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007958:	4b11      	ldr	r3, [pc, #68]	@ (80079a0 <xPortStartScheduler+0x140>)
 800795a:	2200      	movs	r2, #0
 800795c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800795e:	f000 f8f9 	bl	8007b54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007962:	4b10      	ldr	r3, [pc, #64]	@ (80079a4 <xPortStartScheduler+0x144>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a0f      	ldr	r2, [pc, #60]	@ (80079a4 <xPortStartScheduler+0x144>)
 8007968:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800796c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800796e:	f7ff ff63 	bl	8007838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007972:	f7fe ff2d 	bl	80067d0 <vTaskSwitchContext>
	prvTaskExitError();
 8007976:	f7ff ff1b 	bl	80077b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3718      	adds	r7, #24
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	e000ed00 	.word	0xe000ed00
 8007988:	410fc271 	.word	0x410fc271
 800798c:	410fc270 	.word	0x410fc270
 8007990:	e000e400 	.word	0xe000e400
 8007994:	200014bc 	.word	0x200014bc
 8007998:	200014c0 	.word	0x200014c0
 800799c:	e000ed20 	.word	0xe000ed20
 80079a0:	2000000c 	.word	0x2000000c
 80079a4:	e000ef34 	.word	0xe000ef34

080079a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
	__asm volatile
 80079ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	607b      	str	r3, [r7, #4]
}
 80079c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079c2:	4b10      	ldr	r3, [pc, #64]	@ (8007a04 <vPortEnterCritical+0x5c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3301      	adds	r3, #1
 80079c8:	4a0e      	ldr	r2, [pc, #56]	@ (8007a04 <vPortEnterCritical+0x5c>)
 80079ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80079cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007a04 <vPortEnterCritical+0x5c>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d110      	bne.n	80079f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007a08 <vPortEnterCritical+0x60>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00b      	beq.n	80079f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	603b      	str	r3, [r7, #0]
}
 80079f0:	bf00      	nop
 80079f2:	bf00      	nop
 80079f4:	e7fd      	b.n	80079f2 <vPortEnterCritical+0x4a>
	}
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	2000000c 	.word	0x2000000c
 8007a08:	e000ed04 	.word	0xe000ed04

08007a0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a12:	4b12      	ldr	r3, [pc, #72]	@ (8007a5c <vPortExitCritical+0x50>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10b      	bne.n	8007a32 <vPortExitCritical+0x26>
	__asm volatile
 8007a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	607b      	str	r3, [r7, #4]
}
 8007a2c:	bf00      	nop
 8007a2e:	bf00      	nop
 8007a30:	e7fd      	b.n	8007a2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a32:	4b0a      	ldr	r3, [pc, #40]	@ (8007a5c <vPortExitCritical+0x50>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3b01      	subs	r3, #1
 8007a38:	4a08      	ldr	r2, [pc, #32]	@ (8007a5c <vPortExitCritical+0x50>)
 8007a3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a3c:	4b07      	ldr	r3, [pc, #28]	@ (8007a5c <vPortExitCritical+0x50>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d105      	bne.n	8007a50 <vPortExitCritical+0x44>
 8007a44:	2300      	movs	r3, #0
 8007a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	f383 8811 	msr	BASEPRI, r3
}
 8007a4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	2000000c 	.word	0x2000000c

08007a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a60:	f3ef 8009 	mrs	r0, PSP
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	4b15      	ldr	r3, [pc, #84]	@ (8007ac0 <pxCurrentTCBConst>)
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	f01e 0f10 	tst.w	lr, #16
 8007a70:	bf08      	it	eq
 8007a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7a:	6010      	str	r0, [r2, #0]
 8007a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007a84:	f380 8811 	msr	BASEPRI, r0
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f7fe fe9e 	bl	80067d0 <vTaskSwitchContext>
 8007a94:	f04f 0000 	mov.w	r0, #0
 8007a98:	f380 8811 	msr	BASEPRI, r0
 8007a9c:	bc09      	pop	{r0, r3}
 8007a9e:	6819      	ldr	r1, [r3, #0]
 8007aa0:	6808      	ldr	r0, [r1, #0]
 8007aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa6:	f01e 0f10 	tst.w	lr, #16
 8007aaa:	bf08      	it	eq
 8007aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ab0:	f380 8809 	msr	PSP, r0
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	f3af 8000 	nop.w

08007ac0 <pxCurrentTCBConst>:
 8007ac0:	20000e90 	.word	0x20000e90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ac4:	bf00      	nop
 8007ac6:	bf00      	nop

08007ac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	607b      	str	r3, [r7, #4]
}
 8007ae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ae2:	f7fe fdbb 	bl	800665c <xTaskIncrementTick>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007aec:	4b06      	ldr	r3, [pc, #24]	@ (8007b08 <xPortSysTickHandler+0x40>)
 8007aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	2300      	movs	r3, #0
 8007af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	f383 8811 	msr	BASEPRI, r3
}
 8007afe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b00:	bf00      	nop
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	e000ed04 	.word	0xe000ed04

08007b0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b10:	4b0b      	ldr	r3, [pc, #44]	@ (8007b40 <vPortSetupTimerInterrupt+0x34>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b16:	4b0b      	ldr	r3, [pc, #44]	@ (8007b44 <vPortSetupTimerInterrupt+0x38>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b48 <vPortSetupTimerInterrupt+0x3c>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a0a      	ldr	r2, [pc, #40]	@ (8007b4c <vPortSetupTimerInterrupt+0x40>)
 8007b22:	fba2 2303 	umull	r2, r3, r2, r3
 8007b26:	099b      	lsrs	r3, r3, #6
 8007b28:	4a09      	ldr	r2, [pc, #36]	@ (8007b50 <vPortSetupTimerInterrupt+0x44>)
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b2e:	4b04      	ldr	r3, [pc, #16]	@ (8007b40 <vPortSetupTimerInterrupt+0x34>)
 8007b30:	2207      	movs	r2, #7
 8007b32:	601a      	str	r2, [r3, #0]
}
 8007b34:	bf00      	nop
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	e000e010 	.word	0xe000e010
 8007b44:	e000e018 	.word	0xe000e018
 8007b48:	20000000 	.word	0x20000000
 8007b4c:	10624dd3 	.word	0x10624dd3
 8007b50:	e000e014 	.word	0xe000e014

08007b54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007b64 <vPortEnableVFP+0x10>
 8007b58:	6801      	ldr	r1, [r0, #0]
 8007b5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007b5e:	6001      	str	r1, [r0, #0]
 8007b60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b62:	bf00      	nop
 8007b64:	e000ed88 	.word	0xe000ed88

08007b68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b6e:	f3ef 8305 	mrs	r3, IPSR
 8007b72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b0f      	cmp	r3, #15
 8007b78:	d915      	bls.n	8007ba6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b7a:	4a18      	ldr	r2, [pc, #96]	@ (8007bdc <vPortValidateInterruptPriority+0x74>)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4413      	add	r3, r2
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b84:	4b16      	ldr	r3, [pc, #88]	@ (8007be0 <vPortValidateInterruptPriority+0x78>)
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	7afa      	ldrb	r2, [r7, #11]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d20b      	bcs.n	8007ba6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	607b      	str	r3, [r7, #4]
}
 8007ba0:	bf00      	nop
 8007ba2:	bf00      	nop
 8007ba4:	e7fd      	b.n	8007ba2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8007be4 <vPortValidateInterruptPriority+0x7c>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007bae:	4b0e      	ldr	r3, [pc, #56]	@ (8007be8 <vPortValidateInterruptPriority+0x80>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d90b      	bls.n	8007bce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	603b      	str	r3, [r7, #0]
}
 8007bc8:	bf00      	nop
 8007bca:	bf00      	nop
 8007bcc:	e7fd      	b.n	8007bca <vPortValidateInterruptPriority+0x62>
	}
 8007bce:	bf00      	nop
 8007bd0:	3714      	adds	r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	e000e3f0 	.word	0xe000e3f0
 8007be0:	200014bc 	.word	0x200014bc
 8007be4:	e000ed0c 	.word	0xe000ed0c
 8007be8:	200014c0 	.word	0x200014c0

08007bec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b08a      	sub	sp, #40	@ 0x28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007bf8:	f7fe fc74 	bl	80064e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007bfc:	4b5c      	ldr	r3, [pc, #368]	@ (8007d70 <pvPortMalloc+0x184>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d101      	bne.n	8007c08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c04:	f000 f924 	bl	8007e50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c08:	4b5a      	ldr	r3, [pc, #360]	@ (8007d74 <pvPortMalloc+0x188>)
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4013      	ands	r3, r2
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f040 8095 	bne.w	8007d40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d01e      	beq.n	8007c5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007c1c:	2208      	movs	r2, #8
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4413      	add	r3, r2
 8007c22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f003 0307 	and.w	r3, r3, #7
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d015      	beq.n	8007c5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f023 0307 	bic.w	r3, r3, #7
 8007c34:	3308      	adds	r3, #8
 8007c36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f003 0307 	and.w	r3, r3, #7
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00b      	beq.n	8007c5a <pvPortMalloc+0x6e>
	__asm volatile
 8007c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	617b      	str	r3, [r7, #20]
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop
 8007c58:	e7fd      	b.n	8007c56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d06f      	beq.n	8007d40 <pvPortMalloc+0x154>
 8007c60:	4b45      	ldr	r3, [pc, #276]	@ (8007d78 <pvPortMalloc+0x18c>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d86a      	bhi.n	8007d40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c6a:	4b44      	ldr	r3, [pc, #272]	@ (8007d7c <pvPortMalloc+0x190>)
 8007c6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c6e:	4b43      	ldr	r3, [pc, #268]	@ (8007d7c <pvPortMalloc+0x190>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c74:	e004      	b.n	8007c80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d903      	bls.n	8007c92 <pvPortMalloc+0xa6>
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1f1      	bne.n	8007c76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c92:	4b37      	ldr	r3, [pc, #220]	@ (8007d70 <pvPortMalloc+0x184>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d051      	beq.n	8007d40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2208      	movs	r2, #8
 8007ca2:	4413      	add	r3, r2
 8007ca4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	6a3b      	ldr	r3, [r7, #32]
 8007cac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb0:	685a      	ldr	r2, [r3, #4]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	1ad2      	subs	r2, r2, r3
 8007cb6:	2308      	movs	r3, #8
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d920      	bls.n	8007d00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	f003 0307 	and.w	r3, r3, #7
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00b      	beq.n	8007ce8 <pvPortMalloc+0xfc>
	__asm volatile
 8007cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	613b      	str	r3, [r7, #16]
}
 8007ce2:	bf00      	nop
 8007ce4:	bf00      	nop
 8007ce6:	e7fd      	b.n	8007ce4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	1ad2      	subs	r2, r2, r3
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007cfa:	69b8      	ldr	r0, [r7, #24]
 8007cfc:	f000 f90a 	bl	8007f14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d00:	4b1d      	ldr	r3, [pc, #116]	@ (8007d78 <pvPortMalloc+0x18c>)
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	4a1b      	ldr	r2, [pc, #108]	@ (8007d78 <pvPortMalloc+0x18c>)
 8007d0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8007d78 <pvPortMalloc+0x18c>)
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	4b1b      	ldr	r3, [pc, #108]	@ (8007d80 <pvPortMalloc+0x194>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d203      	bcs.n	8007d22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d1a:	4b17      	ldr	r3, [pc, #92]	@ (8007d78 <pvPortMalloc+0x18c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a18      	ldr	r2, [pc, #96]	@ (8007d80 <pvPortMalloc+0x194>)
 8007d20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	4b13      	ldr	r3, [pc, #76]	@ (8007d74 <pvPortMalloc+0x188>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	431a      	orrs	r2, r3
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d32:	2200      	movs	r2, #0
 8007d34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d36:	4b13      	ldr	r3, [pc, #76]	@ (8007d84 <pvPortMalloc+0x198>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	4a11      	ldr	r2, [pc, #68]	@ (8007d84 <pvPortMalloc+0x198>)
 8007d3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d40:	f7fe fbde 	bl	8006500 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	f003 0307 	and.w	r3, r3, #7
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00b      	beq.n	8007d66 <pvPortMalloc+0x17a>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	60fb      	str	r3, [r7, #12]
}
 8007d60:	bf00      	nop
 8007d62:	bf00      	nop
 8007d64:	e7fd      	b.n	8007d62 <pvPortMalloc+0x176>
	return pvReturn;
 8007d66:	69fb      	ldr	r3, [r7, #28]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3728      	adds	r7, #40	@ 0x28
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	20002084 	.word	0x20002084
 8007d74:	20002098 	.word	0x20002098
 8007d78:	20002088 	.word	0x20002088
 8007d7c:	2000207c 	.word	0x2000207c
 8007d80:	2000208c 	.word	0x2000208c
 8007d84:	20002090 	.word	0x20002090

08007d88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d04f      	beq.n	8007e3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d9a:	2308      	movs	r3, #8
 8007d9c:	425b      	negs	r3, r3
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	4413      	add	r3, r2
 8007da2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	4b25      	ldr	r3, [pc, #148]	@ (8007e44 <vPortFree+0xbc>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4013      	ands	r3, r2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10b      	bne.n	8007dce <vPortFree+0x46>
	__asm volatile
 8007db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dba:	f383 8811 	msr	BASEPRI, r3
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	60fb      	str	r3, [r7, #12]
}
 8007dc8:	bf00      	nop
 8007dca:	bf00      	nop
 8007dcc:	e7fd      	b.n	8007dca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00b      	beq.n	8007dee <vPortFree+0x66>
	__asm volatile
 8007dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	60bb      	str	r3, [r7, #8]
}
 8007de8:	bf00      	nop
 8007dea:	bf00      	nop
 8007dec:	e7fd      	b.n	8007dea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	4b14      	ldr	r3, [pc, #80]	@ (8007e44 <vPortFree+0xbc>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4013      	ands	r3, r2
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d01e      	beq.n	8007e3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d11a      	bne.n	8007e3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	4b0e      	ldr	r3, [pc, #56]	@ (8007e44 <vPortFree+0xbc>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	43db      	mvns	r3, r3
 8007e0e:	401a      	ands	r2, r3
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e14:	f7fe fb66 	bl	80064e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e48 <vPortFree+0xc0>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4413      	add	r3, r2
 8007e22:	4a09      	ldr	r2, [pc, #36]	@ (8007e48 <vPortFree+0xc0>)
 8007e24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e26:	6938      	ldr	r0, [r7, #16]
 8007e28:	f000 f874 	bl	8007f14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e2c:	4b07      	ldr	r3, [pc, #28]	@ (8007e4c <vPortFree+0xc4>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3301      	adds	r3, #1
 8007e32:	4a06      	ldr	r2, [pc, #24]	@ (8007e4c <vPortFree+0xc4>)
 8007e34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e36:	f7fe fb63 	bl	8006500 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e3a:	bf00      	nop
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	20002098 	.word	0x20002098
 8007e48:	20002088 	.word	0x20002088
 8007e4c:	20002094 	.word	0x20002094

08007e50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e56:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007e5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e5c:	4b27      	ldr	r3, [pc, #156]	@ (8007efc <prvHeapInit+0xac>)
 8007e5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f003 0307 	and.w	r3, r3, #7
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00c      	beq.n	8007e84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	3307      	adds	r3, #7
 8007e6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f023 0307 	bic.w	r3, r3, #7
 8007e76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8007efc <prvHeapInit+0xac>)
 8007e80:	4413      	add	r3, r2
 8007e82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e88:	4a1d      	ldr	r2, [pc, #116]	@ (8007f00 <prvHeapInit+0xb0>)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8007f00 <prvHeapInit+0xb0>)
 8007e90:	2200      	movs	r2, #0
 8007e92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	4413      	add	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e9c:	2208      	movs	r2, #8
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	1a9b      	subs	r3, r3, r2
 8007ea2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f023 0307 	bic.w	r3, r3, #7
 8007eaa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4a15      	ldr	r2, [pc, #84]	@ (8007f04 <prvHeapInit+0xb4>)
 8007eb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007eb2:	4b14      	ldr	r3, [pc, #80]	@ (8007f04 <prvHeapInit+0xb4>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007eba:	4b12      	ldr	r3, [pc, #72]	@ (8007f04 <prvHeapInit+0xb4>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	1ad2      	subs	r2, r2, r3
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8007f04 <prvHeapInit+0xb4>)
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	4a0a      	ldr	r2, [pc, #40]	@ (8007f08 <prvHeapInit+0xb8>)
 8007ede:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	4a09      	ldr	r2, [pc, #36]	@ (8007f0c <prvHeapInit+0xbc>)
 8007ee6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ee8:	4b09      	ldr	r3, [pc, #36]	@ (8007f10 <prvHeapInit+0xc0>)
 8007eea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007eee:	601a      	str	r2, [r3, #0]
}
 8007ef0:	bf00      	nop
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	200014c4 	.word	0x200014c4
 8007f00:	2000207c 	.word	0x2000207c
 8007f04:	20002084 	.word	0x20002084
 8007f08:	2000208c 	.word	0x2000208c
 8007f0c:	20002088 	.word	0x20002088
 8007f10:	20002098 	.word	0x20002098

08007f14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f1c:	4b28      	ldr	r3, [pc, #160]	@ (8007fc0 <prvInsertBlockIntoFreeList+0xac>)
 8007f1e:	60fb      	str	r3, [r7, #12]
 8007f20:	e002      	b.n	8007f28 <prvInsertBlockIntoFreeList+0x14>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	60fb      	str	r3, [r7, #12]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d8f7      	bhi.n	8007f22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d108      	bne.n	8007f56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	441a      	add	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	441a      	add	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d118      	bne.n	8007f9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	4b15      	ldr	r3, [pc, #84]	@ (8007fc4 <prvInsertBlockIntoFreeList+0xb0>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d00d      	beq.n	8007f92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	441a      	add	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	601a      	str	r2, [r3, #0]
 8007f90:	e008      	b.n	8007fa4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f92:	4b0c      	ldr	r3, [pc, #48]	@ (8007fc4 <prvInsertBlockIntoFreeList+0xb0>)
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	e003      	b.n	8007fa4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d002      	beq.n	8007fb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fb2:	bf00      	nop
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	2000207c 	.word	0x2000207c
 8007fc4:	20002084 	.word	0x20002084

08007fc8 <memset>:
 8007fc8:	4402      	add	r2, r0
 8007fca:	4603      	mov	r3, r0
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d100      	bne.n	8007fd2 <memset+0xa>
 8007fd0:	4770      	bx	lr
 8007fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8007fd6:	e7f9      	b.n	8007fcc <memset+0x4>

08007fd8 <__libc_init_array>:
 8007fd8:	b570      	push	{r4, r5, r6, lr}
 8007fda:	4d0d      	ldr	r5, [pc, #52]	@ (8008010 <__libc_init_array+0x38>)
 8007fdc:	4c0d      	ldr	r4, [pc, #52]	@ (8008014 <__libc_init_array+0x3c>)
 8007fde:	1b64      	subs	r4, r4, r5
 8007fe0:	10a4      	asrs	r4, r4, #2
 8007fe2:	2600      	movs	r6, #0
 8007fe4:	42a6      	cmp	r6, r4
 8007fe6:	d109      	bne.n	8007ffc <__libc_init_array+0x24>
 8007fe8:	4d0b      	ldr	r5, [pc, #44]	@ (8008018 <__libc_init_array+0x40>)
 8007fea:	4c0c      	ldr	r4, [pc, #48]	@ (800801c <__libc_init_array+0x44>)
 8007fec:	f000 f826 	bl	800803c <_init>
 8007ff0:	1b64      	subs	r4, r4, r5
 8007ff2:	10a4      	asrs	r4, r4, #2
 8007ff4:	2600      	movs	r6, #0
 8007ff6:	42a6      	cmp	r6, r4
 8007ff8:	d105      	bne.n	8008006 <__libc_init_array+0x2e>
 8007ffa:	bd70      	pop	{r4, r5, r6, pc}
 8007ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008000:	4798      	blx	r3
 8008002:	3601      	adds	r6, #1
 8008004:	e7ee      	b.n	8007fe4 <__libc_init_array+0xc>
 8008006:	f855 3b04 	ldr.w	r3, [r5], #4
 800800a:	4798      	blx	r3
 800800c:	3601      	adds	r6, #1
 800800e:	e7f2      	b.n	8007ff6 <__libc_init_array+0x1e>
 8008010:	0800811c 	.word	0x0800811c
 8008014:	0800811c 	.word	0x0800811c
 8008018:	0800811c 	.word	0x0800811c
 800801c:	08008120 	.word	0x08008120

08008020 <memcpy>:
 8008020:	440a      	add	r2, r1
 8008022:	4291      	cmp	r1, r2
 8008024:	f100 33ff 	add.w	r3, r0, #4294967295
 8008028:	d100      	bne.n	800802c <memcpy+0xc>
 800802a:	4770      	bx	lr
 800802c:	b510      	push	{r4, lr}
 800802e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008032:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008036:	4291      	cmp	r1, r2
 8008038:	d1f9      	bne.n	800802e <memcpy+0xe>
 800803a:	bd10      	pop	{r4, pc}

0800803c <_init>:
 800803c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803e:	bf00      	nop
 8008040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008042:	bc08      	pop	{r3}
 8008044:	469e      	mov	lr, r3
 8008046:	4770      	bx	lr

08008048 <_fini>:
 8008048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804a:	bf00      	nop
 800804c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800804e:	bc08      	pop	{r3}
 8008050:	469e      	mov	lr, r3
 8008052:	4770      	bx	lr
