
final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007384  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08007544  08007544  00008544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007684  08007684  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007684  08007684  00008684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800768c  0800768c  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800768c  0800768c  0000868c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007690  08007690  00008690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007694  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b10  20000060  080076f4  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b70  080076f4  00009b70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b4b  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036d3  00000000  00000000  00021bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  000252b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e79  00000000  00000000  00026590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000040f5  00000000  00000000  00027409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016487  00000000  00000000  0002b4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a302  00000000  00000000  00041985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014bc87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005248  00000000  00000000  0014bccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00150f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000060 	.word	0x20000060
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800752c 	.word	0x0800752c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000064 	.word	0x20000064
 80001fc:	0800752c 	.word	0x0800752c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <PrintfDebug>:
    }
}

/* 自己實作 printf 送到 UART1 */
void PrintfDebug(const char *fmt, ...)
{
 80005cc:	b40f      	push	{r0, r1, r2, r3}
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b0a2      	sub	sp, #136	@ 0x88
 80005d2:	af00      	add	r7, sp, #0
    char Uart_buf[128];
    va_list args;
    va_start(args, fmt);
 80005d4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80005d8:	603b      	str	r3, [r7, #0]
    int length = vsnprintf(Uart_buf, sizeof(Uart_buf) - 1, fmt, args);
 80005da:	1d38      	adds	r0, r7, #4
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80005e2:	217f      	movs	r1, #127	@ 0x7f
 80005e4:	f006 fb16 	bl	8006c14 <vsniprintf>
 80005e8:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    va_end(args);
    HAL_UART_Transmit(&huart1, (uint8_t *)Uart_buf, length, HAL_MAX_DELAY);
 80005ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	1d39      	adds	r1, r7, #4
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	4804      	ldr	r0, [pc, #16]	@ (800060c <PrintfDebug+0x40>)
 80005fa:	f002 fbbb 	bl	8002d74 <HAL_UART_Transmit>
}
 80005fe:	bf00      	nop
 8000600:	3788      	adds	r7, #136	@ 0x88
 8000602:	46bd      	mov	sp, r7
 8000604:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000608:	b004      	add	sp, #16
 800060a:	4770      	bx	lr
 800060c:	20000088 	.word	0x20000088

08000610 <main>:
void StartDefaultTask(void *argument);
void StartTask_PIR(void *argument);

/* Main Function */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  HAL_Init();
 8000614:	f000 faa7 	bl	8000b66 <HAL_Init>
  SystemClock_Config();
 8000618:	f000 f832 	bl	8000680 <SystemClock_Config>
  MX_GPIO_Init();
 800061c:	f000 f876 	bl	800070c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000620:	f000 fa3e 	bl	8000aa0 <MX_USART1_UART_Init>

  HAL_UART_Transmit(&huart1, (uint8_t*)"Hello\n", 6, HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	2206      	movs	r2, #6
 800062a:	490d      	ldr	r1, [pc, #52]	@ (8000660 <main+0x50>)
 800062c:	480d      	ldr	r0, [pc, #52]	@ (8000664 <main+0x54>)
 800062e:	f002 fba1 	bl	8002d74 <HAL_UART_Transmit>

  osKernelInitialize();
 8000632:	f003 fd3d 	bl	80040b0 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000636:	4a0c      	ldr	r2, [pc, #48]	@ (8000668 <main+0x58>)
 8000638:	2100      	movs	r1, #0
 800063a:	480c      	ldr	r0, [pc, #48]	@ (800066c <main+0x5c>)
 800063c:	f003 fd82 	bl	8004144 <osThreadNew>
 8000640:	4603      	mov	r3, r0
 8000642:	4a0b      	ldr	r2, [pc, #44]	@ (8000670 <main+0x60>)
 8000644:	6013      	str	r3, [r2, #0]
  Task_PIRHandle = osThreadNew(StartTask_PIR, NULL, &Task_PIR_attributes);
 8000646:	4a0b      	ldr	r2, [pc, #44]	@ (8000674 <main+0x64>)
 8000648:	2100      	movs	r1, #0
 800064a:	480b      	ldr	r0, [pc, #44]	@ (8000678 <main+0x68>)
 800064c:	f003 fd7a 	bl	8004144 <osThreadNew>
 8000650:	4603      	mov	r3, r0
 8000652:	4a0a      	ldr	r2, [pc, #40]	@ (800067c <main+0x6c>)
 8000654:	6013      	str	r3, [r2, #0]

  osKernelStart();
 8000656:	f003 fd4f 	bl	80040f8 <osKernelStart>

  while (1) {}
 800065a:	bf00      	nop
 800065c:	e7fd      	b.n	800065a <main+0x4a>
 800065e:	bf00      	nop
 8000660:	0800755c 	.word	0x0800755c
 8000664:	20000088 	.word	0x20000088
 8000668:	080075a8 	.word	0x080075a8
 800066c:	080007bd 	.word	0x080007bd
 8000670:	2000007c 	.word	0x2000007c
 8000674:	080075cc 	.word	0x080075cc
 8000678:	080007e9 	.word	0x080007e9
 800067c:	20000080 	.word	0x20000080

08000680 <SystemClock_Config>:
}

/* System Clock Configuration */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b096      	sub	sp, #88	@ 0x58
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	2244      	movs	r2, #68	@ 0x44
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f006 face 	bl	8006c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	463b      	mov	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006a6:	f000 fe81 	bl	80013ac <HAL_PWREx_ControlVoltageScaling>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x34>
    Error_Handler();
 80006b0:	f000 f8e8 	bl	8000884 <Error_Handler>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006b4:	2310      	movs	r3, #16
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006c0:	2360      	movs	r3, #96	@ 0x60
 80006c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 ff11 	bl	80014f4 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x5c>
    Error_Handler();
 80006d8:	f000 f8d4 	bl	8000884 <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	613b      	str	r3, [r7, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f0:	463b      	mov	r3, r7
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 fb17 	bl	8001d28 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x84>
    Error_Handler();
 8000700:	f000 f8c0 	bl	8000884 <Error_Handler>
}
 8000704:	bf00      	nop
 8000706:	3758      	adds	r7, #88	@ 0x58
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <MX_GPIO_Init>:


/* GPIO Initialization Function */
void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <MX_GPIO_Init+0xa8>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	4a23      	ldr	r2, [pc, #140]	@ (80007b4 <MX_GPIO_Init+0xa8>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072e:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <MX_GPIO_Init+0xa8>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b1e      	ldr	r3, [pc, #120]	@ (80007b4 <MX_GPIO_Init+0xa8>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	4a1d      	ldr	r2, [pc, #116]	@ (80007b4 <MX_GPIO_Init+0xa8>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000746:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <MX_GPIO_Init+0xa8>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /* Configure PA0 as input (SR505) */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000752:	2301      	movs	r3, #1
 8000754:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	4619      	mov	r1, r3
 8000764:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000768:	f000 fc3e 	bl	8000fe8 <HAL_GPIO_Init>

  /* Configure PB0 as output (LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800076c:	2301      	movs	r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	4619      	mov	r1, r3
 8000782:	480d      	ldr	r0, [pc, #52]	@ (80007b8 <MX_GPIO_Init+0xac>)
 8000784:	f000 fc30 	bl	8000fe8 <HAL_GPIO_Init>

  /* Configure PA9 and PA10 as USART1_TX/RX */
  GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8000788:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800078c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	2302      	movs	r3, #2
 8000790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000796:	2303      	movs	r3, #3
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800079a:	2307      	movs	r3, #7
 800079c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	4619      	mov	r1, r3
 80007a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a8:	f000 fc1e 	bl	8000fe8 <HAL_GPIO_Init>
}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40021000 	.word	0x40021000
 80007b8:	48000400 	.word	0x48000400

080007bc <StartDefaultTask>:


/* Default Task */
void StartDefaultTask(void *argument)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	  for(;;)
	  {
	    HAL_UART_Transmit(&huart1, (uint8_t*)"Hello from STM32\n", 17, HAL_MAX_DELAY);
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	2211      	movs	r2, #17
 80007ca:	4905      	ldr	r1, [pc, #20]	@ (80007e0 <StartDefaultTask+0x24>)
 80007cc:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <StartDefaultTask+0x28>)
 80007ce:	f002 fad1 	bl	8002d74 <HAL_UART_Transmit>
	    osDelay(1000);
 80007d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d6:	f003 fd47 	bl	8004268 <osDelay>
	    HAL_UART_Transmit(&huart1, (uint8_t*)"Hello from STM32\n", 17, HAL_MAX_DELAY);
 80007da:	bf00      	nop
 80007dc:	e7f2      	b.n	80007c4 <StartDefaultTask+0x8>
 80007de:	bf00      	nop
 80007e0:	08007564 	.word	0x08007564
 80007e4:	20000088 	.word	0x20000088

080007e8 <StartTask_PIR>:
	  }
}

/* PIR Task */
void StartTask_PIR(void *argument)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  uint32_t pir_counter = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  const uint32_t threshold_ms = 3000;
 80007f4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80007f8:	613b      	str	r3, [r7, #16]

  for(;;)
  {
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 80007fa:	2101      	movs	r1, #1
 80007fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000800:	f000 fd84 	bl	800130c <HAL_GPIO_ReadPin>
 8000804:	4603      	mov	r3, r0
 8000806:	2b01      	cmp	r3, #1
 8000808:	d124      	bne.n	8000854 <StartTask_PIR+0x6c>
    {
      PrintfDebug("有人\n");
 800080a:	4819      	ldr	r0, [pc, #100]	@ (8000870 <StartTask_PIR+0x88>)
 800080c:	f7ff fede 	bl	80005cc <PrintfDebug>
      pir_counter += 100;
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	3364      	adds	r3, #100	@ 0x64
 8000814:	617b      	str	r3, [r7, #20]
      if (pir_counter >= threshold_ms)
 8000816:	697a      	ldr	r2, [r7, #20]
 8000818:	693b      	ldr	r3, [r7, #16]
 800081a:	429a      	cmp	r2, r3
 800081c:	d314      	bcc.n	8000848 <StartTask_PIR+0x60>
      {
        const char msg[] = "start\n";
 800081e:	4a15      	ldr	r2, [pc, #84]	@ (8000874 <StartTask_PIR+0x8c>)
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000828:	6018      	str	r0, [r3, #0]
 800082a:	3304      	adds	r3, #4
 800082c:	8019      	strh	r1, [r3, #0]
 800082e:	3302      	adds	r3, #2
 8000830:	0c0a      	lsrs	r2, r1, #16
 8000832:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, sizeof(msg)-1, HAL_MAX_DELAY);
 8000834:	f107 0108 	add.w	r1, r7, #8
 8000838:	f04f 33ff 	mov.w	r3, #4294967295
 800083c:	2206      	movs	r2, #6
 800083e:	480e      	ldr	r0, [pc, #56]	@ (8000878 <StartTask_PIR+0x90>)
 8000840:	f002 fa98 	bl	8002d74 <HAL_UART_Transmit>
        pir_counter = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
      }
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // LED ON
 8000848:	2201      	movs	r2, #1
 800084a:	2101      	movs	r1, #1
 800084c:	480b      	ldr	r0, [pc, #44]	@ (800087c <StartTask_PIR+0x94>)
 800084e:	f000 fd75 	bl	800133c <HAL_GPIO_WritePin>
 8000852:	e009      	b.n	8000868 <StartTask_PIR+0x80>
    }
    else
    {
      PrintfDebug("沒人\n");
 8000854:	480a      	ldr	r0, [pc, #40]	@ (8000880 <StartTask_PIR+0x98>)
 8000856:	f7ff feb9 	bl	80005cc <PrintfDebug>
      pir_counter = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // LED OFF
 800085e:	2200      	movs	r2, #0
 8000860:	2101      	movs	r1, #1
 8000862:	4806      	ldr	r0, [pc, #24]	@ (800087c <StartTask_PIR+0x94>)
 8000864:	f000 fd6a 	bl	800133c <HAL_GPIO_WritePin>
    }

    osDelay(100);
 8000868:	2064      	movs	r0, #100	@ 0x64
 800086a:	f003 fcfd 	bl	8004268 <osDelay>
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 800086e:	e7c4      	b.n	80007fa <StartTask_PIR+0x12>
 8000870:	08007578 	.word	0x08007578
 8000874:	08007588 	.word	0x08007588
 8000878:	20000088 	.word	0x20000088
 800087c:	48000400 	.word	0x48000400
 8000880:	08007580 	.word	0x08007580

08000884 <Error_Handler>:
}


/* Error Handler */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  __disable_irq();
  while (1) {}
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <Error_Handler+0x8>

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <HAL_MspInit+0x4c>)
 8000898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800089a:	4a10      	ldr	r2, [pc, #64]	@ (80008dc <HAL_MspInit+0x4c>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <HAL_MspInit+0x4c>)
 80008a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <HAL_MspInit+0x4c>)
 80008b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b2:	4a0a      	ldr	r2, [pc, #40]	@ (80008dc <HAL_MspInit+0x4c>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <HAL_MspInit+0x4c>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	210f      	movs	r1, #15
 80008ca:	f06f 0001 	mvn.w	r0, #1
 80008ce:	f000 fa9a 	bl	8000e06 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000

080008e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b0ae      	sub	sp, #184	@ 0xb8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	2294      	movs	r2, #148	@ 0x94
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f006 f995 	bl	8006c30 <memset>
  if(huart->Instance==USART1)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a26      	ldr	r2, [pc, #152]	@ (80009a4 <HAL_UART_MspInit+0xc4>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d144      	bne.n	800099a <HAL_UART_MspInit+0xba>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000910:	2301      	movs	r3, #1
 8000912:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000914:	2300      	movs	r3, #0
 8000916:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	4618      	mov	r0, r3
 800091e:	f001 fcc1 	bl	80022a4 <HAL_RCCEx_PeriphCLKConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000928:	f7ff ffac 	bl	8000884 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800092c:	4b1e      	ldr	r3, [pc, #120]	@ (80009a8 <HAL_UART_MspInit+0xc8>)
 800092e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000930:	4a1d      	ldr	r2, [pc, #116]	@ (80009a8 <HAL_UART_MspInit+0xc8>)
 8000932:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000936:	6613      	str	r3, [r2, #96]	@ 0x60
 8000938:	4b1b      	ldr	r3, [pc, #108]	@ (80009a8 <HAL_UART_MspInit+0xc8>)
 800093a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800093c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	4b18      	ldr	r3, [pc, #96]	@ (80009a8 <HAL_UART_MspInit+0xc8>)
 8000946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000948:	4a17      	ldr	r2, [pc, #92]	@ (80009a8 <HAL_UART_MspInit+0xc8>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000950:	4b15      	ldr	r3, [pc, #84]	@ (80009a8 <HAL_UART_MspInit+0xc8>)
 8000952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800095c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000960:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000970:	2303      	movs	r3, #3
 8000972:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000976:	2307      	movs	r3, #7
 8000978:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000980:	4619      	mov	r1, r3
 8000982:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000986:	f000 fb2f 	bl	8000fe8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2105      	movs	r1, #5
 800098e:	2025      	movs	r0, #37	@ 0x25
 8000990:	f000 fa39 	bl	8000e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000994:	2025      	movs	r0, #37	@ 0x25
 8000996:	f000 fa52 	bl	8000e3e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800099a:	bf00      	nop
 800099c:	37b8      	adds	r7, #184	@ 0xb8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40013800 	.word	0x40013800
 80009a8:	40021000 	.word	0x40021000

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <NMI_Handler+0x4>

080009b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <MemManage_Handler+0x4>

080009c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e6:	f000 f913 	bl	8000c10 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009ea:	f005 f865 	bl	8005ab8 <xTaskGetSchedulerState>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d001      	beq.n	80009f8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009f4:	f005 fe60 	bl	80066b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}

080009fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a00:	4802      	ldr	r0, [pc, #8]	@ (8000a0c <USART1_IRQHandler+0x10>)
 8000a02:	f002 fa45 	bl	8002e90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000088 	.word	0x20000088

08000a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a18:	4a14      	ldr	r2, [pc, #80]	@ (8000a6c <_sbrk+0x5c>)
 8000a1a:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <_sbrk+0x60>)
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a24:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <_sbrk+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d102      	bne.n	8000a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <_sbrk+0x64>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	@ (8000a78 <_sbrk+0x68>)
 8000a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d207      	bcs.n	8000a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a40:	f006 f8fe 	bl	8006c40 <__errno>
 8000a44:	4603      	mov	r3, r0
 8000a46:	220c      	movs	r2, #12
 8000a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4e:	e009      	b.n	8000a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a50:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <_sbrk+0x64>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a56:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <_sbrk+0x64>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	4a05      	ldr	r2, [pc, #20]	@ (8000a74 <_sbrk+0x64>)
 8000a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a62:	68fb      	ldr	r3, [r7, #12]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200a0000 	.word	0x200a0000
 8000a70:	00000400 	.word	0x00000400
 8000a74:	20000084 	.word	0x20000084
 8000a78:	20001b70 	.word	0x20001b70

08000a7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <SystemInit+0x20>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a86:	4a05      	ldr	r2, [pc, #20]	@ (8000a9c <SystemInit+0x20>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <MX_USART1_UART_Init>:
#include "stm32l4xx_hal.h"  // HAL_UART_Init 等

UART_HandleTypeDef huart1;

void MX_USART1_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aa6:	4b18      	ldr	r3, [pc, #96]	@ (8000b08 <MX_USART1_UART_Init+0x68>)
 8000aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aaa:	4a17      	ldr	r2, [pc, #92]	@ (8000b08 <MX_USART1_UART_Init+0x68>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <MX_USART1_UART_Init+0x68>)
 8000ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

    huart1.Instance = USART1;
 8000abe:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <MX_USART1_UART_Init+0x6c>)
 8000ac0:	4a13      	ldr	r2, [pc, #76]	@ (8000b10 <MX_USART1_UART_Init+0x70>)
 8000ac2:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <MX_USART1_UART_Init+0x6c>)
 8000ac6:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aca:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <MX_USART1_UART_Init+0x6c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <MX_USART1_UART_Init+0x6c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <MX_USART1_UART_Init+0x6c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <MX_USART1_UART_Init+0x6c>)
 8000ae0:	220c      	movs	r2, #12
 8000ae2:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <MX_USART1_UART_Init+0x6c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aea:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <MX_USART1_UART_Init+0x6c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000af0:	4806      	ldr	r0, [pc, #24]	@ (8000b0c <MX_USART1_UART_Init+0x6c>)
 8000af2:	f002 f8ef 	bl	8002cd4 <HAL_UART_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USART1_UART_Init+0x60>
    {
      Error_Handler();
 8000afc:	f7ff fec2 	bl	8000884 <Error_Handler>
    }
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	20000088 	.word	0x20000088
 8000b10:	40013800 	.word	0x40013800

08000b14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b18:	f7ff ffb0 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b1c:	480c      	ldr	r0, [pc, #48]	@ (8000b50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b1e:	490d      	ldr	r1, [pc, #52]	@ (8000b54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b20:	4a0d      	ldr	r2, [pc, #52]	@ (8000b58 <LoopForever+0xe>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b34:	4c0a      	ldr	r4, [pc, #40]	@ (8000b60 <LoopForever+0x16>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b42:	f006 f883 	bl	8006c4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b46:	f7ff fd63 	bl	8000610 <main>

08000b4a <LoopForever>:

LoopForever:
    b LoopForever
 8000b4a:	e7fe      	b.n	8000b4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b4c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b58:	08007694 	.word	0x08007694
  ldr r2, =_sbss
 8000b5c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b60:	20001b70 	.word	0x20001b70

08000b64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC1_IRQHandler>

08000b66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 f93d 	bl	8000df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b76:	200f      	movs	r0, #15
 8000b78:	f000 f80e 	bl	8000b98 <HAL_InitTick>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d002      	beq.n	8000b88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	71fb      	strb	r3, [r7, #7]
 8000b86:	e001      	b.n	8000b8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b88:	f7ff fe82 	bl	8000890 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ba4:	4b17      	ldr	r3, [pc, #92]	@ (8000c04 <HAL_InitTick+0x6c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d023      	beq.n	8000bf4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bac:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <HAL_InitTick+0x70>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b14      	ldr	r3, [pc, #80]	@ (8000c04 <HAL_InitTick+0x6c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f949 	bl	8000e5a <HAL_SYSTICK_Config>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10f      	bne.n	8000bee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b0f      	cmp	r3, #15
 8000bd2:	d809      	bhi.n	8000be8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f000 f913 	bl	8000e06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be0:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <HAL_InitTick+0x74>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	e007      	b.n	8000bf8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e004      	b.n	8000bf8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	73fb      	strb	r3, [r7, #15]
 8000bf2:	e001      	b.n	8000bf8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000004 	.word	0x20000004

08000c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_IncTick+0x20>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <HAL_IncTick+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a04      	ldr	r2, [pc, #16]	@ (8000c34 <HAL_IncTick+0x24>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	2000011c 	.word	0x2000011c

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	@ (8000c4c <HAL_GetTick+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	2000011c 	.word	0x2000011c

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c82:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	@ (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	db0b      	blt.n	8000cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	f003 021f 	and.w	r2, r3, #31
 8000ccc:	4907      	ldr	r1, [pc, #28]	@ (8000cec <__NVIC_EnableIRQ+0x38>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000e100 	.word	0xe000e100

08000cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db0a      	blt.n	8000d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	490c      	ldr	r1, [pc, #48]	@ (8000d3c <__NVIC_SetPriority+0x4c>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d18:	e00a      	b.n	8000d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4908      	ldr	r1, [pc, #32]	@ (8000d40 <__NVIC_SetPriority+0x50>)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	3b04      	subs	r3, #4
 8000d28:	0112      	lsls	r2, r2, #4
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	761a      	strb	r2, [r3, #24]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	@ 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f1c3 0307 	rsb	r3, r3, #7
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	bf28      	it	cs
 8000d62:	2304      	movcs	r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2b06      	cmp	r3, #6
 8000d6c:	d902      	bls.n	8000d74 <NVIC_EncodePriority+0x30>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3b03      	subs	r3, #3
 8000d72:	e000      	b.n	8000d76 <NVIC_EncodePriority+0x32>
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43d9      	mvns	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	4313      	orrs	r3, r2
         );
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3724      	adds	r7, #36	@ 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dbc:	d301      	bcc.n	8000dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00f      	b.n	8000de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <SysTick_Config+0x40>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dca:	210f      	movs	r1, #15
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f7ff ff8e 	bl	8000cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd4:	4b05      	ldr	r3, [pc, #20]	@ (8000dec <SysTick_Config+0x40>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dda:	4b04      	ldr	r3, [pc, #16]	@ (8000dec <SysTick_Config+0x40>)
 8000ddc:	2207      	movs	r2, #7
 8000dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	e000e010 	.word	0xe000e010

08000df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ff29 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
 8000e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e18:	f7ff ff3e 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000e1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	f7ff ff8e 	bl	8000d44 <NVIC_EncodePriority>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff5d 	bl	8000cf0 <__NVIC_SetPriority>
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff31 	bl	8000cb4 <__NVIC_EnableIRQ>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ffa2 	bl	8000dac <SysTick_Config>
 8000e68:	4603      	mov	r3, r0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b085      	sub	sp, #20
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d008      	beq.n	8000e9c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2204      	movs	r2, #4
 8000e8e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e040      	b.n	8000f1e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 020e 	bic.w	r2, r2, #14
 8000eaa:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eb6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000eba:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 0201 	bic.w	r2, r2, #1
 8000eca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed0:	f003 021c 	and.w	r2, r3, #28
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed8:	2101      	movs	r1, #1
 8000eda:	fa01 f202 	lsl.w	r2, r1, r2
 8000ede:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000ee8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d00c      	beq.n	8000f0c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000efc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f00:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000f0a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b084      	sub	sp, #16
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d005      	beq.n	8000f4e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2204      	movs	r2, #4
 8000f46:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	e047      	b.n	8000fde <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 020e 	bic.w	r2, r2, #14
 8000f5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 0201 	bic.w	r2, r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f82:	f003 021c 	and.w	r2, r3, #28
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f90:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000f9a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00c      	beq.n	8000fbe <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fb2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000fbc:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	4798      	blx	r3
    }
  }
  return status;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b087      	sub	sp, #28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff6:	e166      	b.n	80012c6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	fa01 f303 	lsl.w	r3, r1, r3
 8001004:	4013      	ands	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 8158 	beq.w	80012c0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b01      	cmp	r3, #1
 800101a:	d005      	beq.n	8001028 <HAL_GPIO_Init+0x40>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d130      	bne.n	800108a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	68da      	ldr	r2, [r3, #12]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800105e:	2201      	movs	r2, #1
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	091b      	lsrs	r3, r3, #4
 8001074:	f003 0201 	and.w	r2, r3, #1
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	2b03      	cmp	r3, #3
 8001094:	d017      	beq.n	80010c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d123      	bne.n	800111a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	08da      	lsrs	r2, r3, #3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3208      	adds	r2, #8
 80010da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	220f      	movs	r2, #15
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	691a      	ldr	r2, [r3, #16]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f003 0307 	and.w	r3, r3, #7
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	08da      	lsrs	r2, r3, #3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3208      	adds	r2, #8
 8001114:	6939      	ldr	r1, [r7, #16]
 8001116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	2203      	movs	r2, #3
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0203 	and.w	r2, r3, #3
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001156:	2b00      	cmp	r3, #0
 8001158:	f000 80b2 	beq.w	80012c0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115c:	4b61      	ldr	r3, [pc, #388]	@ (80012e4 <HAL_GPIO_Init+0x2fc>)
 800115e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001160:	4a60      	ldr	r2, [pc, #384]	@ (80012e4 <HAL_GPIO_Init+0x2fc>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6613      	str	r3, [r2, #96]	@ 0x60
 8001168:	4b5e      	ldr	r3, [pc, #376]	@ (80012e4 <HAL_GPIO_Init+0x2fc>)
 800116a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001174:	4a5c      	ldr	r2, [pc, #368]	@ (80012e8 <HAL_GPIO_Init+0x300>)
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	089b      	lsrs	r3, r3, #2
 800117a:	3302      	adds	r3, #2
 800117c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	220f      	movs	r2, #15
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800119e:	d02b      	beq.n	80011f8 <HAL_GPIO_Init+0x210>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a52      	ldr	r2, [pc, #328]	@ (80012ec <HAL_GPIO_Init+0x304>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d025      	beq.n	80011f4 <HAL_GPIO_Init+0x20c>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a51      	ldr	r2, [pc, #324]	@ (80012f0 <HAL_GPIO_Init+0x308>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d01f      	beq.n	80011f0 <HAL_GPIO_Init+0x208>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a50      	ldr	r2, [pc, #320]	@ (80012f4 <HAL_GPIO_Init+0x30c>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d019      	beq.n	80011ec <HAL_GPIO_Init+0x204>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a4f      	ldr	r2, [pc, #316]	@ (80012f8 <HAL_GPIO_Init+0x310>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d013      	beq.n	80011e8 <HAL_GPIO_Init+0x200>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a4e      	ldr	r2, [pc, #312]	@ (80012fc <HAL_GPIO_Init+0x314>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d00d      	beq.n	80011e4 <HAL_GPIO_Init+0x1fc>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a4d      	ldr	r2, [pc, #308]	@ (8001300 <HAL_GPIO_Init+0x318>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d007      	beq.n	80011e0 <HAL_GPIO_Init+0x1f8>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a4c      	ldr	r2, [pc, #304]	@ (8001304 <HAL_GPIO_Init+0x31c>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d101      	bne.n	80011dc <HAL_GPIO_Init+0x1f4>
 80011d8:	2307      	movs	r3, #7
 80011da:	e00e      	b.n	80011fa <HAL_GPIO_Init+0x212>
 80011dc:	2308      	movs	r3, #8
 80011de:	e00c      	b.n	80011fa <HAL_GPIO_Init+0x212>
 80011e0:	2306      	movs	r3, #6
 80011e2:	e00a      	b.n	80011fa <HAL_GPIO_Init+0x212>
 80011e4:	2305      	movs	r3, #5
 80011e6:	e008      	b.n	80011fa <HAL_GPIO_Init+0x212>
 80011e8:	2304      	movs	r3, #4
 80011ea:	e006      	b.n	80011fa <HAL_GPIO_Init+0x212>
 80011ec:	2303      	movs	r3, #3
 80011ee:	e004      	b.n	80011fa <HAL_GPIO_Init+0x212>
 80011f0:	2302      	movs	r3, #2
 80011f2:	e002      	b.n	80011fa <HAL_GPIO_Init+0x212>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <HAL_GPIO_Init+0x212>
 80011f8:	2300      	movs	r3, #0
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	f002 0203 	and.w	r2, r2, #3
 8001200:	0092      	lsls	r2, r2, #2
 8001202:	4093      	lsls	r3, r2
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800120a:	4937      	ldr	r1, [pc, #220]	@ (80012e8 <HAL_GPIO_Init+0x300>)
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3302      	adds	r3, #2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001218:	4b3b      	ldr	r3, [pc, #236]	@ (8001308 <HAL_GPIO_Init+0x320>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800123c:	4a32      	ldr	r2, [pc, #200]	@ (8001308 <HAL_GPIO_Init+0x320>)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001242:	4b31      	ldr	r3, [pc, #196]	@ (8001308 <HAL_GPIO_Init+0x320>)
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001266:	4a28      	ldr	r2, [pc, #160]	@ (8001308 <HAL_GPIO_Init+0x320>)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800126c:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <HAL_GPIO_Init+0x320>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	43db      	mvns	r3, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001290:	4a1d      	ldr	r2, [pc, #116]	@ (8001308 <HAL_GPIO_Init+0x320>)
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001296:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <HAL_GPIO_Init+0x320>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	43db      	mvns	r3, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ba:	4a13      	ldr	r2, [pc, #76]	@ (8001308 <HAL_GPIO_Init+0x320>)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3301      	adds	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	fa22 f303 	lsr.w	r3, r2, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f47f ae91 	bne.w	8000ff8 <HAL_GPIO_Init+0x10>
  }
}
 80012d6:	bf00      	nop
 80012d8:	bf00      	nop
 80012da:	371c      	adds	r7, #28
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010000 	.word	0x40010000
 80012ec:	48000400 	.word	0x48000400
 80012f0:	48000800 	.word	0x48000800
 80012f4:	48000c00 	.word	0x48000c00
 80012f8:	48001000 	.word	0x48001000
 80012fc:	48001400 	.word	0x48001400
 8001300:	48001800 	.word	0x48001800
 8001304:	48001c00 	.word	0x48001c00
 8001308:	40010400 	.word	0x40010400

0800130c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	887b      	ldrh	r3, [r7, #2]
 800131e:	4013      	ands	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001324:	2301      	movs	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	e001      	b.n	800132e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800132e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
 8001348:	4613      	mov	r3, r2
 800134a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800134c:	787b      	ldrb	r3, [r7, #1]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001358:	e002      	b.n	8001360 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001370:	4b0d      	ldr	r3, [pc, #52]	@ (80013a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800137c:	d102      	bne.n	8001384 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800137e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001382:	e00b      	b.n	800139c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001384:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800138a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800138e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001392:	d102      	bne.n	800139a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001394:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001398:	e000      	b.n	800139c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800139a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40007000 	.word	0x40007000

080013ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d141      	bne.n	800143e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013ba:	4b4b      	ldr	r3, [pc, #300]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013c6:	d131      	bne.n	800142c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013c8:	4b47      	ldr	r3, [pc, #284]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013ce:	4a46      	ldr	r2, [pc, #280]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d8:	4b43      	ldr	r3, [pc, #268]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013e0:	4a41      	ldr	r2, [pc, #260]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80013e8:	4b40      	ldr	r3, [pc, #256]	@ (80014ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2232      	movs	r2, #50	@ 0x32
 80013ee:	fb02 f303 	mul.w	r3, r2, r3
 80013f2:	4a3f      	ldr	r2, [pc, #252]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013f4:	fba2 2303 	umull	r2, r3, r2, r3
 80013f8:	0c9b      	lsrs	r3, r3, #18
 80013fa:	3301      	adds	r3, #1
 80013fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013fe:	e002      	b.n	8001406 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	3b01      	subs	r3, #1
 8001404:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001406:	4b38      	ldr	r3, [pc, #224]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800140e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001412:	d102      	bne.n	800141a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f2      	bne.n	8001400 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800141a:	4b33      	ldr	r3, [pc, #204]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001426:	d158      	bne.n	80014da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e057      	b.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800142c:	4b2e      	ldr	r3, [pc, #184]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001432:	4a2d      	ldr	r2, [pc, #180]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001438:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800143c:	e04d      	b.n	80014da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001444:	d141      	bne.n	80014ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001446:	4b28      	ldr	r3, [pc, #160]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800144e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001452:	d131      	bne.n	80014b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001454:	4b24      	ldr	r3, [pc, #144]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800145a:	4a23      	ldr	r2, [pc, #140]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001460:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001464:	4b20      	ldr	r3, [pc, #128]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800146c:	4a1e      	ldr	r2, [pc, #120]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001472:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001474:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2232      	movs	r2, #50	@ 0x32
 800147a:	fb02 f303 	mul.w	r3, r2, r3
 800147e:	4a1c      	ldr	r2, [pc, #112]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	0c9b      	lsrs	r3, r3, #18
 8001486:	3301      	adds	r3, #1
 8001488:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800148a:	e002      	b.n	8001492 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	3b01      	subs	r3, #1
 8001490:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001492:	4b15      	ldr	r3, [pc, #84]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800149a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800149e:	d102      	bne.n	80014a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f2      	bne.n	800148c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014a6:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014b2:	d112      	bne.n	80014da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e011      	b.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014b8:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014be:	4a0a      	ldr	r2, [pc, #40]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80014c8:	e007      	b.n	80014da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014ca:	4b07      	ldr	r3, [pc, #28]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014d2:	4a05      	ldr	r2, [pc, #20]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014d8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	40007000 	.word	0x40007000
 80014ec:	20000000 	.word	0x20000000
 80014f0:	431bde83 	.word	0x431bde83

080014f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d102      	bne.n	8001508 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	f000 bc08 	b.w	8001d18 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001508:	4b96      	ldr	r3, [pc, #600]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 030c 	and.w	r3, r3, #12
 8001510:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001512:	4b94      	ldr	r3, [pc, #592]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0310 	and.w	r3, r3, #16
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 80e4 	beq.w	80016f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d007      	beq.n	8001540 <HAL_RCC_OscConfig+0x4c>
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	2b0c      	cmp	r3, #12
 8001534:	f040 808b 	bne.w	800164e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2b01      	cmp	r3, #1
 800153c:	f040 8087 	bne.w	800164e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001540:	4b88      	ldr	r3, [pc, #544]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_RCC_OscConfig+0x64>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e3df      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a1a      	ldr	r2, [r3, #32]
 800155c:	4b81      	ldr	r3, [pc, #516]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	2b00      	cmp	r3, #0
 8001566:	d004      	beq.n	8001572 <HAL_RCC_OscConfig+0x7e>
 8001568:	4b7e      	ldr	r3, [pc, #504]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001570:	e005      	b.n	800157e <HAL_RCC_OscConfig+0x8a>
 8001572:	4b7c      	ldr	r3, [pc, #496]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001574:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001578:	091b      	lsrs	r3, r3, #4
 800157a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800157e:	4293      	cmp	r3, r2
 8001580:	d223      	bcs.n	80015ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	4618      	mov	r0, r3
 8001588:	f000 fdcc 	bl	8002124 <RCC_SetFlashLatencyFromMSIRange>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e3c0      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001596:	4b73      	ldr	r3, [pc, #460]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a72      	ldr	r2, [pc, #456]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 800159c:	f043 0308 	orr.w	r3, r3, #8
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	4b70      	ldr	r3, [pc, #448]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	496d      	ldr	r1, [pc, #436]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b4:	4b6b      	ldr	r3, [pc, #428]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	4968      	ldr	r1, [pc, #416]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	604b      	str	r3, [r1, #4]
 80015c8:	e025      	b.n	8001616 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ca:	4b66      	ldr	r3, [pc, #408]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a65      	ldr	r2, [pc, #404]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80015d0:	f043 0308 	orr.w	r3, r3, #8
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	4b63      	ldr	r3, [pc, #396]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	4960      	ldr	r1, [pc, #384]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e8:	4b5e      	ldr	r3, [pc, #376]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	495b      	ldr	r1, [pc, #364]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d109      	bne.n	8001616 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	4618      	mov	r0, r3
 8001608:	f000 fd8c 	bl	8002124 <RCC_SetFlashLatencyFromMSIRange>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e380      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001616:	f000 fcc1 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 800161a:	4602      	mov	r2, r0
 800161c:	4b51      	ldr	r3, [pc, #324]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	091b      	lsrs	r3, r3, #4
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	4950      	ldr	r1, [pc, #320]	@ (8001768 <HAL_RCC_OscConfig+0x274>)
 8001628:	5ccb      	ldrb	r3, [r1, r3]
 800162a:	f003 031f 	and.w	r3, r3, #31
 800162e:	fa22 f303 	lsr.w	r3, r2, r3
 8001632:	4a4e      	ldr	r2, [pc, #312]	@ (800176c <HAL_RCC_OscConfig+0x278>)
 8001634:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001636:	4b4e      	ldr	r3, [pc, #312]	@ (8001770 <HAL_RCC_OscConfig+0x27c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff faac 	bl	8000b98 <HAL_InitTick>
 8001640:	4603      	mov	r3, r0
 8001642:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d052      	beq.n	80016f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	e364      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d032      	beq.n	80016bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001656:	4b43      	ldr	r3, [pc, #268]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a42      	ldr	r2, [pc, #264]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001662:	f7ff fae9 	bl	8000c38 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800166a:	f7ff fae5 	bl	8000c38 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e34d      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800167c:	4b39      	ldr	r3, [pc, #228]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001688:	4b36      	ldr	r3, [pc, #216]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a35      	ldr	r2, [pc, #212]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 800168e:	f043 0308 	orr.w	r3, r3, #8
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b33      	ldr	r3, [pc, #204]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	4930      	ldr	r1, [pc, #192]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	492b      	ldr	r1, [pc, #172]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	604b      	str	r3, [r1, #4]
 80016ba:	e01a      	b.n	80016f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016bc:	4b29      	ldr	r3, [pc, #164]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a28      	ldr	r2, [pc, #160]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80016c2:	f023 0301 	bic.w	r3, r3, #1
 80016c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016c8:	f7ff fab6 	bl	8000c38 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016d0:	f7ff fab2 	bl	8000c38 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e31a      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016e2:	4b20      	ldr	r3, [pc, #128]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x1dc>
 80016ee:	e000      	b.n	80016f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d073      	beq.n	80017e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	2b08      	cmp	r3, #8
 8001702:	d005      	beq.n	8001710 <HAL_RCC_OscConfig+0x21c>
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	2b0c      	cmp	r3, #12
 8001708:	d10e      	bne.n	8001728 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2b03      	cmp	r3, #3
 800170e:	d10b      	bne.n	8001728 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001710:	4b14      	ldr	r3, [pc, #80]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d063      	beq.n	80017e4 <HAL_RCC_OscConfig+0x2f0>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d15f      	bne.n	80017e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e2f7      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001730:	d106      	bne.n	8001740 <HAL_RCC_OscConfig+0x24c>
 8001732:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a0b      	ldr	r2, [pc, #44]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e025      	b.n	800178c <HAL_RCC_OscConfig+0x298>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001748:	d114      	bne.n	8001774 <HAL_RCC_OscConfig+0x280>
 800174a:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a05      	ldr	r2, [pc, #20]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001750:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b03      	ldr	r3, [pc, #12]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a02      	ldr	r2, [pc, #8]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 800175c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e013      	b.n	800178c <HAL_RCC_OscConfig+0x298>
 8001764:	40021000 	.word	0x40021000
 8001768:	080075f0 	.word	0x080075f0
 800176c:	20000000 	.word	0x20000000
 8001770:	20000004 	.word	0x20000004
 8001774:	4ba0      	ldr	r3, [pc, #640]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a9f      	ldr	r2, [pc, #636]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 800177a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b9d      	ldr	r3, [pc, #628]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a9c      	ldr	r2, [pc, #624]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 8001786:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800178a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d013      	beq.n	80017bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff fa50 	bl	8000c38 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff fa4c 	bl	8000c38 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	@ 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e2b4      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ae:	4b92      	ldr	r3, [pc, #584]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0x2a8>
 80017ba:	e014      	b.n	80017e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017bc:	f7ff fa3c 	bl	8000c38 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff fa38 	bl	8000c38 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	@ 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e2a0      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017d6:	4b88      	ldr	r3, [pc, #544]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x2d0>
 80017e2:	e000      	b.n	80017e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d060      	beq.n	80018b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	2b04      	cmp	r3, #4
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_OscConfig+0x310>
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	2b0c      	cmp	r3, #12
 80017fc:	d119      	bne.n	8001832 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	2b02      	cmp	r3, #2
 8001802:	d116      	bne.n	8001832 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001804:	4b7c      	ldr	r3, [pc, #496]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_OscConfig+0x328>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e27d      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181c:	4b76      	ldr	r3, [pc, #472]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	061b      	lsls	r3, r3, #24
 800182a:	4973      	ldr	r1, [pc, #460]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001830:	e040      	b.n	80018b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d023      	beq.n	8001882 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800183a:	4b6f      	ldr	r3, [pc, #444]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a6e      	ldr	r2, [pc, #440]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 8001840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001846:	f7ff f9f7 	bl	8000c38 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800184e:	f7ff f9f3 	bl	8000c38 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e25b      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001860:	4b65      	ldr	r3, [pc, #404]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186c:	4b62      	ldr	r3, [pc, #392]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	061b      	lsls	r3, r3, #24
 800187a:	495f      	ldr	r1, [pc, #380]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
 8001880:	e018      	b.n	80018b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001882:	4b5d      	ldr	r3, [pc, #372]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a5c      	ldr	r2, [pc, #368]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 8001888:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800188c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188e:	f7ff f9d3 	bl	8000c38 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001896:	f7ff f9cf 	bl	8000c38 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e237      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018a8:	4b53      	ldr	r3, [pc, #332]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1f0      	bne.n	8001896 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0308 	and.w	r3, r3, #8
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d03c      	beq.n	800193a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d01c      	beq.n	8001902 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018c8:	4b4b      	ldr	r3, [pc, #300]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80018ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ce:	4a4a      	ldr	r2, [pc, #296]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d8:	f7ff f9ae 	bl	8000c38 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e0:	f7ff f9aa 	bl	8000c38 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e212      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018f2:	4b41      	ldr	r3, [pc, #260]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80018f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0ef      	beq.n	80018e0 <HAL_RCC_OscConfig+0x3ec>
 8001900:	e01b      	b.n	800193a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001902:	4b3d      	ldr	r3, [pc, #244]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 8001904:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001908:	4a3b      	ldr	r2, [pc, #236]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001912:	f7ff f991 	bl	8000c38 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800191a:	f7ff f98d 	bl	8000c38 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e1f5      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800192c:	4b32      	ldr	r3, [pc, #200]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 800192e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1ef      	bne.n	800191a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80a6 	beq.w	8001a94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001948:	2300      	movs	r3, #0
 800194a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800194c:	4b2a      	ldr	r3, [pc, #168]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 800194e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001950:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10d      	bne.n	8001974 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001958:	4b27      	ldr	r3, [pc, #156]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 800195a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195c:	4a26      	ldr	r2, [pc, #152]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 800195e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001962:	6593      	str	r3, [r2, #88]	@ 0x58
 8001964:	4b24      	ldr	r3, [pc, #144]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 8001966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001970:	2301      	movs	r3, #1
 8001972:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001974:	4b21      	ldr	r3, [pc, #132]	@ (80019fc <HAL_RCC_OscConfig+0x508>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	d118      	bne.n	80019b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001980:	4b1e      	ldr	r3, [pc, #120]	@ (80019fc <HAL_RCC_OscConfig+0x508>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a1d      	ldr	r2, [pc, #116]	@ (80019fc <HAL_RCC_OscConfig+0x508>)
 8001986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800198a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198c:	f7ff f954 	bl	8000c38 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001994:	f7ff f950 	bl	8000c38 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e1b8      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a6:	4b15      	ldr	r3, [pc, #84]	@ (80019fc <HAL_RCC_OscConfig+0x508>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d108      	bne.n	80019cc <HAL_RCC_OscConfig+0x4d8>
 80019ba:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80019bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019c0:	4a0d      	ldr	r2, [pc, #52]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019ca:	e029      	b.n	8001a20 <HAL_RCC_OscConfig+0x52c>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	d115      	bne.n	8001a00 <HAL_RCC_OscConfig+0x50c>
 80019d4:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80019d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019da:	4a07      	ldr	r2, [pc, #28]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019e4:	4b04      	ldr	r3, [pc, #16]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80019e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ea:	4a03      	ldr	r2, [pc, #12]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019f4:	e014      	b.n	8001a20 <HAL_RCC_OscConfig+0x52c>
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40007000 	.word	0x40007000
 8001a00:	4b9d      	ldr	r3, [pc, #628]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a06:	4a9c      	ldr	r2, [pc, #624]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001a08:	f023 0301 	bic.w	r3, r3, #1
 8001a0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a10:	4b99      	ldr	r3, [pc, #612]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a16:	4a98      	ldr	r2, [pc, #608]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001a18:	f023 0304 	bic.w	r3, r3, #4
 8001a1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d016      	beq.n	8001a56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a28:	f7ff f906 	bl	8000c38 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a2e:	e00a      	b.n	8001a46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a30:	f7ff f902 	bl	8000c38 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e168      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a46:	4b8c      	ldr	r3, [pc, #560]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0ed      	beq.n	8001a30 <HAL_RCC_OscConfig+0x53c>
 8001a54:	e015      	b.n	8001a82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a56:	f7ff f8ef 	bl	8000c38 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a5c:	e00a      	b.n	8001a74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5e:	f7ff f8eb 	bl	8000c38 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e151      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a74:	4b80      	ldr	r3, [pc, #512]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1ed      	bne.n	8001a5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a82:	7ffb      	ldrb	r3, [r7, #31]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d105      	bne.n	8001a94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a88:	4b7b      	ldr	r3, [pc, #492]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8c:	4a7a      	ldr	r2, [pc, #488]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001a8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a92:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0320 	and.w	r3, r3, #32
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d03c      	beq.n	8001b1a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d01c      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001aa8:	4b73      	ldr	r3, [pc, #460]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001aaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001aae:	4a72      	ldr	r2, [pc, #456]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab8:	f7ff f8be 	bl	8000c38 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ac0:	f7ff f8ba 	bl	8000c38 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e122      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ad2:	4b69      	ldr	r3, [pc, #420]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001ad4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0ef      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x5cc>
 8001ae0:	e01b      	b.n	8001b1a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ae2:	4b65      	ldr	r3, [pc, #404]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001ae4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ae8:	4a63      	ldr	r2, [pc, #396]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001aea:	f023 0301 	bic.w	r3, r3, #1
 8001aee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af2:	f7ff f8a1 	bl	8000c38 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001afa:	f7ff f89d 	bl	8000c38 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e105      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b0c:	4b5a      	ldr	r3, [pc, #360]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001b0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1ef      	bne.n	8001afa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 80f9 	beq.w	8001d16 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	f040 80cf 	bne.w	8001ccc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b2e:	4b52      	ldr	r3, [pc, #328]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f003 0203 	and.w	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d12c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d123      	bne.n	8001b9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b5e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d11b      	bne.n	8001b9c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b6e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d113      	bne.n	8001b9c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b7e:	085b      	lsrs	r3, r3, #1
 8001b80:	3b01      	subs	r3, #1
 8001b82:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d109      	bne.n	8001b9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	085b      	lsrs	r3, r3, #1
 8001b94:	3b01      	subs	r3, #1
 8001b96:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d071      	beq.n	8001c80 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2b0c      	cmp	r3, #12
 8001ba0:	d068      	beq.n	8001c74 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ba2:	4b35      	ldr	r3, [pc, #212]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d105      	bne.n	8001bba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bae:	4b32      	ldr	r3, [pc, #200]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e0ac      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a2d      	ldr	r2, [pc, #180]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001bc4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bc8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bca:	f7ff f835 	bl	8000c38 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7ff f831 	bl	8000c38 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e099      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be4:	4b24      	ldr	r3, [pc, #144]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f0      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bf0:	4b21      	ldr	r3, [pc, #132]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	4b21      	ldr	r3, [pc, #132]	@ (8001c7c <HAL_RCC_OscConfig+0x788>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c00:	3a01      	subs	r2, #1
 8001c02:	0112      	lsls	r2, r2, #4
 8001c04:	4311      	orrs	r1, r2
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c0a:	0212      	lsls	r2, r2, #8
 8001c0c:	4311      	orrs	r1, r2
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001c12:	0852      	lsrs	r2, r2, #1
 8001c14:	3a01      	subs	r2, #1
 8001c16:	0552      	lsls	r2, r2, #21
 8001c18:	4311      	orrs	r1, r2
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c1e:	0852      	lsrs	r2, r2, #1
 8001c20:	3a01      	subs	r2, #1
 8001c22:	0652      	lsls	r2, r2, #25
 8001c24:	4311      	orrs	r1, r2
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c2a:	06d2      	lsls	r2, r2, #27
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	4912      	ldr	r1, [pc, #72]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c34:	4b10      	ldr	r3, [pc, #64]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0f      	ldr	r2, [pc, #60]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001c3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c40:	4b0d      	ldr	r3, [pc, #52]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	4a0c      	ldr	r2, [pc, #48]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001c46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c4c:	f7fe fff4 	bl	8000c38 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c54:	f7fe fff0 	bl	8000c38 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e058      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c66:	4b04      	ldr	r3, [pc, #16]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c72:	e050      	b.n	8001d16 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e04f      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c80:	4b27      	ldr	r3, [pc, #156]	@ (8001d20 <HAL_RCC_OscConfig+0x82c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d144      	bne.n	8001d16 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c8c:	4b24      	ldr	r3, [pc, #144]	@ (8001d20 <HAL_RCC_OscConfig+0x82c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a23      	ldr	r2, [pc, #140]	@ (8001d20 <HAL_RCC_OscConfig+0x82c>)
 8001c92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c98:	4b21      	ldr	r3, [pc, #132]	@ (8001d20 <HAL_RCC_OscConfig+0x82c>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	4a20      	ldr	r2, [pc, #128]	@ (8001d20 <HAL_RCC_OscConfig+0x82c>)
 8001c9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ca2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ca4:	f7fe ffc8 	bl	8000c38 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cac:	f7fe ffc4 	bl	8000c38 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e02c      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cbe:	4b18      	ldr	r3, [pc, #96]	@ (8001d20 <HAL_RCC_OscConfig+0x82c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x7b8>
 8001cca:	e024      	b.n	8001d16 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	2b0c      	cmp	r3, #12
 8001cd0:	d01f      	beq.n	8001d12 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd2:	4b13      	ldr	r3, [pc, #76]	@ (8001d20 <HAL_RCC_OscConfig+0x82c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a12      	ldr	r2, [pc, #72]	@ (8001d20 <HAL_RCC_OscConfig+0x82c>)
 8001cd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7fe ffab 	bl	8000c38 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce6:	f7fe ffa7 	bl	8000c38 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e00f      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf8:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <HAL_RCC_OscConfig+0x82c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f0      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d04:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <HAL_RCC_OscConfig+0x82c>)
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	4905      	ldr	r1, [pc, #20]	@ (8001d20 <HAL_RCC_OscConfig+0x82c>)
 8001d0a:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <HAL_RCC_OscConfig+0x830>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60cb      	str	r3, [r1, #12]
 8001d10:	e001      	b.n	8001d16 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3720      	adds	r7, #32
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40021000 	.word	0x40021000
 8001d24:	feeefffc 	.word	0xfeeefffc

08001d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e11d      	b.n	8001f7c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d40:	4b90      	ldr	r3, [pc, #576]	@ (8001f84 <HAL_RCC_ClockConfig+0x25c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 030f 	and.w	r3, r3, #15
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d910      	bls.n	8001d70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4e:	4b8d      	ldr	r3, [pc, #564]	@ (8001f84 <HAL_RCC_ClockConfig+0x25c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 020f 	bic.w	r2, r3, #15
 8001d56:	498b      	ldr	r1, [pc, #556]	@ (8001f84 <HAL_RCC_ClockConfig+0x25c>)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5e:	4b89      	ldr	r3, [pc, #548]	@ (8001f84 <HAL_RCC_ClockConfig+0x25c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d001      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e105      	b.n	8001f7c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d010      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	4b81      	ldr	r3, [pc, #516]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d908      	bls.n	8001d9e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d8c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	497b      	ldr	r1, [pc, #492]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d079      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d11e      	bne.n	8001df0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db2:	4b75      	ldr	r3, [pc, #468]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e0dc      	b.n	8001f7c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001dc2:	f000 fa09 	bl	80021d8 <RCC_GetSysClockFreqFromPLLSource>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4a70      	ldr	r2, [pc, #448]	@ (8001f8c <HAL_RCC_ClockConfig+0x264>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d946      	bls.n	8001e5c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001dce:	4b6e      	ldr	r3, [pc, #440]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d140      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dda:	4b6b      	ldr	r3, [pc, #428]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001de2:	4a69      	ldr	r2, [pc, #420]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001de4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001de8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001dea:	2380      	movs	r3, #128	@ 0x80
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	e035      	b.n	8001e5c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d107      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df8:	4b63      	ldr	r3, [pc, #396]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d115      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0b9      	b.n	8001f7c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d107      	bne.n	8001e20 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e10:	4b5d      	ldr	r3, [pc, #372]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d109      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0ad      	b.n	8001f7c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e20:	4b59      	ldr	r3, [pc, #356]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0a5      	b.n	8001f7c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001e30:	f000 f8b4 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8001e34:	4603      	mov	r3, r0
 8001e36:	4a55      	ldr	r2, [pc, #340]	@ (8001f8c <HAL_RCC_ClockConfig+0x264>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d90f      	bls.n	8001e5c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001e3c:	4b52      	ldr	r3, [pc, #328]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d109      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e48:	4b4f      	ldr	r3, [pc, #316]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e50:	4a4d      	ldr	r2, [pc, #308]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e56:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e58:	2380      	movs	r3, #128	@ 0x80
 8001e5a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e5c:	4b4a      	ldr	r3, [pc, #296]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f023 0203 	bic.w	r2, r3, #3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4947      	ldr	r1, [pc, #284]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e6e:	f7fe fee3 	bl	8000c38 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e74:	e00a      	b.n	8001e8c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e76:	f7fe fedf 	bl	8000c38 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e077      	b.n	8001f7c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 020c 	and.w	r2, r3, #12
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d1eb      	bne.n	8001e76 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	2b80      	cmp	r3, #128	@ 0x80
 8001ea2:	d105      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ea4:	4b38      	ldr	r3, [pc, #224]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	4a37      	ldr	r2, [pc, #220]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001eaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001eae:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d010      	beq.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	4b31      	ldr	r3, [pc, #196]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d208      	bcs.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ecc:	4b2e      	ldr	r3, [pc, #184]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	492b      	ldr	r1, [pc, #172]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ede:	4b29      	ldr	r3, [pc, #164]	@ (8001f84 <HAL_RCC_ClockConfig+0x25c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d210      	bcs.n	8001f0e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eec:	4b25      	ldr	r3, [pc, #148]	@ (8001f84 <HAL_RCC_ClockConfig+0x25c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f023 020f 	bic.w	r2, r3, #15
 8001ef4:	4923      	ldr	r1, [pc, #140]	@ (8001f84 <HAL_RCC_ClockConfig+0x25c>)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efc:	4b21      	ldr	r3, [pc, #132]	@ (8001f84 <HAL_RCC_ClockConfig+0x25c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d001      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e036      	b.n	8001f7c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d008      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	4918      	ldr	r1, [pc, #96]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d009      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f38:	4b13      	ldr	r3, [pc, #76]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4910      	ldr	r1, [pc, #64]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f4c:	f000 f826 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b0d      	ldr	r3, [pc, #52]	@ (8001f88 <HAL_RCC_ClockConfig+0x260>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	091b      	lsrs	r3, r3, #4
 8001f58:	f003 030f 	and.w	r3, r3, #15
 8001f5c:	490c      	ldr	r1, [pc, #48]	@ (8001f90 <HAL_RCC_ClockConfig+0x268>)
 8001f5e:	5ccb      	ldrb	r3, [r1, r3]
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
 8001f68:	4a0a      	ldr	r2, [pc, #40]	@ (8001f94 <HAL_RCC_ClockConfig+0x26c>)
 8001f6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <HAL_RCC_ClockConfig+0x270>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe fe11 	bl	8000b98 <HAL_InitTick>
 8001f76:	4603      	mov	r3, r0
 8001f78:	73fb      	strb	r3, [r7, #15]

  return status;
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40022000 	.word	0x40022000
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	04c4b400 	.word	0x04c4b400
 8001f90:	080075f0 	.word	0x080075f0
 8001f94:	20000000 	.word	0x20000000
 8001f98:	20000004 	.word	0x20000004

08001f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	@ 0x24
 8001fa0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001faa:	4b3e      	ldr	r3, [pc, #248]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fb4:	4b3b      	ldr	r3, [pc, #236]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x34>
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	2b0c      	cmp	r3, #12
 8001fc8:	d121      	bne.n	800200e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d11e      	bne.n	800200e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fd0:	4b34      	ldr	r3, [pc, #208]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d107      	bne.n	8001fec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fdc:	4b31      	ldr	r3, [pc, #196]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fe2:	0a1b      	lsrs	r3, r3, #8
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	61fb      	str	r3, [r7, #28]
 8001fea:	e005      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fec:	4b2d      	ldr	r3, [pc, #180]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ff8:	4a2b      	ldr	r2, [pc, #172]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002000:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10d      	bne.n	8002024 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800200c:	e00a      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b04      	cmp	r3, #4
 8002012:	d102      	bne.n	800201a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002014:	4b25      	ldr	r3, [pc, #148]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002016:	61bb      	str	r3, [r7, #24]
 8002018:	e004      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2b08      	cmp	r3, #8
 800201e:	d101      	bne.n	8002024 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002020:	4b23      	ldr	r3, [pc, #140]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002022:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	2b0c      	cmp	r3, #12
 8002028:	d134      	bne.n	8002094 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800202a:	4b1e      	ldr	r3, [pc, #120]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d003      	beq.n	8002042 <HAL_RCC_GetSysClockFreq+0xa6>
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b03      	cmp	r3, #3
 800203e:	d003      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0xac>
 8002040:	e005      	b.n	800204e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002042:	4b1a      	ldr	r3, [pc, #104]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002044:	617b      	str	r3, [r7, #20]
      break;
 8002046:	e005      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002048:	4b19      	ldr	r3, [pc, #100]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800204a:	617b      	str	r3, [r7, #20]
      break;
 800204c:	e002      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	617b      	str	r3, [r7, #20]
      break;
 8002052:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002054:	4b13      	ldr	r3, [pc, #76]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	3301      	adds	r3, #1
 8002060:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002062:	4b10      	ldr	r3, [pc, #64]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	0a1b      	lsrs	r3, r3, #8
 8002068:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	fb03 f202 	mul.w	r2, r3, r2
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	fbb2 f3f3 	udiv	r3, r2, r3
 8002078:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800207a:	4b0a      	ldr	r3, [pc, #40]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	0e5b      	lsrs	r3, r3, #25
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	3301      	adds	r3, #1
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002094:	69bb      	ldr	r3, [r7, #24]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3724      	adds	r7, #36	@ 0x24
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	08007608 	.word	0x08007608
 80020ac:	00f42400 	.word	0x00f42400
 80020b0:	007a1200 	.word	0x007a1200

080020b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020b8:	4b03      	ldr	r3, [pc, #12]	@ (80020c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020ba:	681b      	ldr	r3, [r3, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20000000 	.word	0x20000000

080020cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020d0:	f7ff fff0 	bl	80020b4 <HAL_RCC_GetHCLKFreq>
 80020d4:	4602      	mov	r2, r0
 80020d6:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	0a1b      	lsrs	r3, r3, #8
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	4904      	ldr	r1, [pc, #16]	@ (80020f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020e2:	5ccb      	ldrb	r3, [r1, r3]
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40021000 	.word	0x40021000
 80020f4:	08007600 	.word	0x08007600

080020f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020fc:	f7ff ffda 	bl	80020b4 <HAL_RCC_GetHCLKFreq>
 8002100:	4602      	mov	r2, r0
 8002102:	4b06      	ldr	r3, [pc, #24]	@ (800211c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	0adb      	lsrs	r3, r3, #11
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	4904      	ldr	r1, [pc, #16]	@ (8002120 <HAL_RCC_GetPCLK2Freq+0x28>)
 800210e:	5ccb      	ldrb	r3, [r1, r3]
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002118:	4618      	mov	r0, r3
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	08007600 	.word	0x08007600

08002124 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800212c:	2300      	movs	r3, #0
 800212e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002130:	4b27      	ldr	r3, [pc, #156]	@ (80021d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800213c:	f7ff f916 	bl	800136c <HAL_PWREx_GetVoltageRange>
 8002140:	6178      	str	r0, [r7, #20]
 8002142:	e014      	b.n	800216e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002144:	4b22      	ldr	r3, [pc, #136]	@ (80021d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002148:	4a21      	ldr	r2, [pc, #132]	@ (80021d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800214a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800214e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002150:	4b1f      	ldr	r3, [pc, #124]	@ (80021d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800215c:	f7ff f906 	bl	800136c <HAL_PWREx_GetVoltageRange>
 8002160:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002162:	4b1b      	ldr	r3, [pc, #108]	@ (80021d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002166:	4a1a      	ldr	r2, [pc, #104]	@ (80021d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002168:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800216c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002174:	d10b      	bne.n	800218e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b80      	cmp	r3, #128	@ 0x80
 800217a:	d913      	bls.n	80021a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002180:	d902      	bls.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002182:	2302      	movs	r3, #2
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	e00d      	b.n	80021a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002188:	2301      	movs	r3, #1
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	e00a      	b.n	80021a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b7f      	cmp	r3, #127	@ 0x7f
 8002192:	d902      	bls.n	800219a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002194:	2302      	movs	r3, #2
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	e004      	b.n	80021a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b70      	cmp	r3, #112	@ 0x70
 800219e:	d101      	bne.n	80021a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021a0:	2301      	movs	r3, #1
 80021a2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021a4:	4b0b      	ldr	r3, [pc, #44]	@ (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f023 020f 	bic.w	r2, r3, #15
 80021ac:	4909      	ldr	r1, [pc, #36]	@ (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021b4:	4b07      	ldr	r3, [pc, #28]	@ (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d001      	beq.n	80021c6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40022000 	.word	0x40022000

080021d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021de:	4b2d      	ldr	r3, [pc, #180]	@ (8002294 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d00b      	beq.n	8002206 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d825      	bhi.n	8002240 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d008      	beq.n	800220c <RCC_GetSysClockFreqFromPLLSource+0x34>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d11f      	bne.n	8002240 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002200:	4b25      	ldr	r3, [pc, #148]	@ (8002298 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002202:	613b      	str	r3, [r7, #16]
    break;
 8002204:	e01f      	b.n	8002246 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002206:	4b25      	ldr	r3, [pc, #148]	@ (800229c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002208:	613b      	str	r3, [r7, #16]
    break;
 800220a:	e01c      	b.n	8002246 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800220c:	4b21      	ldr	r3, [pc, #132]	@ (8002294 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d107      	bne.n	8002228 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002218:	4b1e      	ldr	r3, [pc, #120]	@ (8002294 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800221a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800221e:	0a1b      	lsrs	r3, r3, #8
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	e005      	b.n	8002234 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002228:	4b1a      	ldr	r3, [pc, #104]	@ (8002294 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002234:	4a1a      	ldr	r2, [pc, #104]	@ (80022a0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223c:	613b      	str	r3, [r7, #16]
    break;
 800223e:	e002      	b.n	8002246 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
    break;
 8002244:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002246:	4b13      	ldr	r3, [pc, #76]	@ (8002294 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	091b      	lsrs	r3, r3, #4
 800224c:	f003 030f 	and.w	r3, r3, #15
 8002250:	3301      	adds	r3, #1
 8002252:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002254:	4b0f      	ldr	r3, [pc, #60]	@ (8002294 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	fb03 f202 	mul.w	r2, r3, r2
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800226c:	4b09      	ldr	r3, [pc, #36]	@ (8002294 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	0e5b      	lsrs	r3, r3, #25
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	3301      	adds	r3, #1
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	fbb2 f3f3 	udiv	r3, r2, r3
 8002284:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002286:	683b      	ldr	r3, [r7, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	371c      	adds	r7, #28
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	40021000 	.word	0x40021000
 8002298:	00f42400 	.word	0x00f42400
 800229c:	007a1200 	.word	0x007a1200
 80022a0:	08007608 	.word	0x08007608

080022a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022ac:	2300      	movs	r3, #0
 80022ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022b0:	2300      	movs	r3, #0
 80022b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d040      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022c4:	2b80      	cmp	r3, #128	@ 0x80
 80022c6:	d02a      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80022c8:	2b80      	cmp	r3, #128	@ 0x80
 80022ca:	d825      	bhi.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80022cc:	2b60      	cmp	r3, #96	@ 0x60
 80022ce:	d026      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80022d0:	2b60      	cmp	r3, #96	@ 0x60
 80022d2:	d821      	bhi.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80022d4:	2b40      	cmp	r3, #64	@ 0x40
 80022d6:	d006      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80022d8:	2b40      	cmp	r3, #64	@ 0x40
 80022da:	d81d      	bhi.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d009      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80022e0:	2b20      	cmp	r3, #32
 80022e2:	d010      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80022e4:	e018      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022e6:	4b89      	ldr	r3, [pc, #548]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	4a88      	ldr	r2, [pc, #544]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022f2:	e015      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3304      	adds	r3, #4
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 fb02 	bl	8002904 <RCCEx_PLLSAI1_Config>
 8002300:	4603      	mov	r3, r0
 8002302:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002304:	e00c      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3320      	adds	r3, #32
 800230a:	2100      	movs	r1, #0
 800230c:	4618      	mov	r0, r3
 800230e:	f000 fbed 	bl	8002aec <RCCEx_PLLSAI2_Config>
 8002312:	4603      	mov	r3, r0
 8002314:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002316:	e003      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	74fb      	strb	r3, [r7, #19]
      break;
 800231c:	e000      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800231e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10b      	bne.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002326:	4b79      	ldr	r3, [pc, #484]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002328:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800232c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002334:	4975      	ldr	r1, [pc, #468]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800233c:	e001      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800233e:	7cfb      	ldrb	r3, [r7, #19]
 8002340:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d047      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002356:	d030      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800235c:	d82a      	bhi.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800235e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002362:	d02a      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002364:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002368:	d824      	bhi.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800236a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800236e:	d008      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002374:	d81e      	bhi.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00a      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800237a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800237e:	d010      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002380:	e018      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002382:	4b62      	ldr	r3, [pc, #392]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	4a61      	ldr	r2, [pc, #388]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800238c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800238e:	e015      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3304      	adds	r3, #4
 8002394:	2100      	movs	r1, #0
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fab4 	bl	8002904 <RCCEx_PLLSAI1_Config>
 800239c:	4603      	mov	r3, r0
 800239e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023a0:	e00c      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3320      	adds	r3, #32
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fb9f 	bl	8002aec <RCCEx_PLLSAI2_Config>
 80023ae:	4603      	mov	r3, r0
 80023b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023b2:	e003      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	74fb      	strb	r3, [r7, #19]
      break;
 80023b8:	e000      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80023ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023bc:	7cfb      	ldrb	r3, [r7, #19]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10b      	bne.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023c2:	4b52      	ldr	r3, [pc, #328]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80023c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d0:	494e      	ldr	r1, [pc, #312]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80023d8:	e001      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023da:	7cfb      	ldrb	r3, [r7, #19]
 80023dc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 809f 	beq.w	800252a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ec:	2300      	movs	r3, #0
 80023ee:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023f0:	4b46      	ldr	r3, [pc, #280]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002400:	2300      	movs	r3, #0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00d      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002406:	4b41      	ldr	r3, [pc, #260]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240a:	4a40      	ldr	r2, [pc, #256]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800240c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002410:	6593      	str	r3, [r2, #88]	@ 0x58
 8002412:	4b3e      	ldr	r3, [pc, #248]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241e:	2301      	movs	r3, #1
 8002420:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002422:	4b3b      	ldr	r3, [pc, #236]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a3a      	ldr	r2, [pc, #232]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800242c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800242e:	f7fe fc03 	bl	8000c38 <HAL_GetTick>
 8002432:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002434:	e009      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002436:	f7fe fbff 	bl	8000c38 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d902      	bls.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	74fb      	strb	r3, [r7, #19]
        break;
 8002448:	e005      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800244a:	4b31      	ldr	r3, [pc, #196]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0ef      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002456:	7cfb      	ldrb	r3, [r7, #19]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d15b      	bne.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800245c:	4b2b      	ldr	r3, [pc, #172]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800245e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002466:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d01f      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	429a      	cmp	r2, r3
 8002478:	d019      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800247a:	4b24      	ldr	r3, [pc, #144]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002480:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002484:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002486:	4b21      	ldr	r3, [pc, #132]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800248c:	4a1f      	ldr	r2, [pc, #124]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800248e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002492:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002496:	4b1d      	ldr	r3, [pc, #116]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249c:	4a1b      	ldr	r2, [pc, #108]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800249e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024a6:	4a19      	ldr	r2, [pc, #100]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d016      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b8:	f7fe fbbe 	bl	8000c38 <HAL_GetTick>
 80024bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024be:	e00b      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c0:	f7fe fbba 	bl	8000c38 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d902      	bls.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	74fb      	strb	r3, [r7, #19]
            break;
 80024d6:	e006      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d8:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0ec      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80024e6:	7cfb      	ldrb	r3, [r7, #19]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10c      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024ec:	4b07      	ldr	r3, [pc, #28]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024fc:	4903      	ldr	r1, [pc, #12]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002504:	e008      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002506:	7cfb      	ldrb	r3, [r7, #19]
 8002508:	74bb      	strb	r3, [r7, #18]
 800250a:	e005      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800250c:	40021000 	.word	0x40021000
 8002510:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002514:	7cfb      	ldrb	r3, [r7, #19]
 8002516:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002518:	7c7b      	ldrb	r3, [r7, #17]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d105      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251e:	4ba0      	ldr	r3, [pc, #640]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002522:	4a9f      	ldr	r2, [pc, #636]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002524:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002528:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00a      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002536:	4b9a      	ldr	r3, [pc, #616]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253c:	f023 0203 	bic.w	r2, r3, #3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002544:	4996      	ldr	r1, [pc, #600]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002558:	4b91      	ldr	r3, [pc, #580]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800255e:	f023 020c 	bic.w	r2, r3, #12
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	498e      	ldr	r1, [pc, #568]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800257a:	4b89      	ldr	r3, [pc, #548]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800257c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002580:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002588:	4985      	ldr	r1, [pc, #532]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800258a:	4313      	orrs	r3, r2
 800258c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800259c:	4b80      	ldr	r3, [pc, #512]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025aa:	497d      	ldr	r1, [pc, #500]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025be:	4b78      	ldr	r3, [pc, #480]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025cc:	4974      	ldr	r1, [pc, #464]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025e0:	4b6f      	ldr	r3, [pc, #444]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025ee:	496c      	ldr	r1, [pc, #432]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002602:	4b67      	ldr	r3, [pc, #412]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002608:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002610:	4963      	ldr	r1, [pc, #396]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002624:	4b5e      	ldr	r3, [pc, #376]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800262a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002632:	495b      	ldr	r1, [pc, #364]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002646:	4b56      	ldr	r3, [pc, #344]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002654:	4952      	ldr	r1, [pc, #328]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002668:	4b4d      	ldr	r3, [pc, #308]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002676:	494a      	ldr	r1, [pc, #296]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800268a:	4b45      	ldr	r3, [pc, #276]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800268c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002690:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002698:	4941      	ldr	r1, [pc, #260]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00a      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026ac:	4b3c      	ldr	r3, [pc, #240]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026b2:	f023 0203 	bic.w	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ba:	4939      	ldr	r1, [pc, #228]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d028      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026ce:	4b34      	ldr	r3, [pc, #208]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026dc:	4930      	ldr	r1, [pc, #192]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026ec:	d106      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ee:	4b2c      	ldr	r3, [pc, #176]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	4a2b      	ldr	r2, [pc, #172]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026f8:	60d3      	str	r3, [r2, #12]
 80026fa:	e011      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002700:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002704:	d10c      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3304      	adds	r3, #4
 800270a:	2101      	movs	r1, #1
 800270c:	4618      	mov	r0, r3
 800270e:	f000 f8f9 	bl	8002904 <RCCEx_PLLSAI1_Config>
 8002712:	4603      	mov	r3, r0
 8002714:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002716:	7cfb      	ldrb	r3, [r7, #19]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800271c:	7cfb      	ldrb	r3, [r7, #19]
 800271e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d04d      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002730:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002734:	d108      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002736:	4b1a      	ldr	r3, [pc, #104]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002738:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800273c:	4a18      	ldr	r2, [pc, #96]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800273e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002742:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002746:	e012      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002748:	4b15      	ldr	r3, [pc, #84]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800274a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800274e:	4a14      	ldr	r2, [pc, #80]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002750:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002754:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002758:	4b11      	ldr	r3, [pc, #68]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002766:	490e      	ldr	r1, [pc, #56]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002772:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002776:	d106      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002778:	4b09      	ldr	r3, [pc, #36]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4a08      	ldr	r2, [pc, #32]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800277e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002782:	60d3      	str	r3, [r2, #12]
 8002784:	e020      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800278a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800278e:	d109      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002790:	4b03      	ldr	r3, [pc, #12]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4a02      	ldr	r2, [pc, #8]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002796:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800279a:	60d3      	str	r3, [r2, #12]
 800279c:	e014      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027ac:	d10c      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3304      	adds	r3, #4
 80027b2:	2101      	movs	r1, #1
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 f8a5 	bl	8002904 <RCCEx_PLLSAI1_Config>
 80027ba:	4603      	mov	r3, r0
 80027bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027be:	7cfb      	ldrb	r3, [r7, #19]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80027c4:	7cfb      	ldrb	r3, [r7, #19]
 80027c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d028      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027e2:	4947      	ldr	r1, [pc, #284]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027f2:	d106      	bne.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f4:	4b42      	ldr	r3, [pc, #264]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	4a41      	ldr	r2, [pc, #260]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027fe:	60d3      	str	r3, [r2, #12]
 8002800:	e011      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002806:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800280a:	d10c      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3304      	adds	r3, #4
 8002810:	2101      	movs	r1, #1
 8002812:	4618      	mov	r0, r3
 8002814:	f000 f876 	bl	8002904 <RCCEx_PLLSAI1_Config>
 8002818:	4603      	mov	r3, r0
 800281a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800281c:	7cfb      	ldrb	r3, [r7, #19]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002822:	7cfb      	ldrb	r3, [r7, #19]
 8002824:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d01e      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002832:	4b33      	ldr	r3, [pc, #204]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002838:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002842:	492f      	ldr	r1, [pc, #188]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002850:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002854:	d10c      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3304      	adds	r3, #4
 800285a:	2102      	movs	r1, #2
 800285c:	4618      	mov	r0, r3
 800285e:	f000 f851 	bl	8002904 <RCCEx_PLLSAI1_Config>
 8002862:	4603      	mov	r3, r0
 8002864:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002866:	7cfb      	ldrb	r3, [r7, #19]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800286c:	7cfb      	ldrb	r3, [r7, #19]
 800286e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00b      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800287c:	4b20      	ldr	r3, [pc, #128]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800287e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002882:	f023 0204 	bic.w	r2, r3, #4
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800288c:	491c      	ldr	r1, [pc, #112]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00b      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80028a0:	4b17      	ldr	r3, [pc, #92]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028a6:	f023 0218 	bic.w	r2, r3, #24
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b0:	4913      	ldr	r1, [pc, #76]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d017      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80028c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028d4:	490a      	ldr	r1, [pc, #40]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028e6:	d105      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e8:	4b05      	ldr	r3, [pc, #20]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4a04      	ldr	r2, [pc, #16]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000

08002904 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002912:	4b72      	ldr	r3, [pc, #456]	@ (8002adc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00e      	beq.n	800293c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800291e:	4b6f      	ldr	r3, [pc, #444]	@ (8002adc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0203 	and.w	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d103      	bne.n	8002936 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
       ||
 8002932:	2b00      	cmp	r3, #0
 8002934:	d142      	bne.n	80029bc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
 800293a:	e03f      	b.n	80029bc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d018      	beq.n	8002976 <RCCEx_PLLSAI1_Config+0x72>
 8002944:	2b03      	cmp	r3, #3
 8002946:	d825      	bhi.n	8002994 <RCCEx_PLLSAI1_Config+0x90>
 8002948:	2b01      	cmp	r3, #1
 800294a:	d002      	beq.n	8002952 <RCCEx_PLLSAI1_Config+0x4e>
 800294c:	2b02      	cmp	r3, #2
 800294e:	d009      	beq.n	8002964 <RCCEx_PLLSAI1_Config+0x60>
 8002950:	e020      	b.n	8002994 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002952:	4b62      	ldr	r3, [pc, #392]	@ (8002adc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d11d      	bne.n	800299a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002962:	e01a      	b.n	800299a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002964:	4b5d      	ldr	r3, [pc, #372]	@ (8002adc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800296c:	2b00      	cmp	r3, #0
 800296e:	d116      	bne.n	800299e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002974:	e013      	b.n	800299e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002976:	4b59      	ldr	r3, [pc, #356]	@ (8002adc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10f      	bne.n	80029a2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002982:	4b56      	ldr	r3, [pc, #344]	@ (8002adc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002992:	e006      	b.n	80029a2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
      break;
 8002998:	e004      	b.n	80029a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800299a:	bf00      	nop
 800299c:	e002      	b.n	80029a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800299e:	bf00      	nop
 80029a0:	e000      	b.n	80029a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80029a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d108      	bne.n	80029bc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80029aa:	4b4c      	ldr	r3, [pc, #304]	@ (8002adc <RCCEx_PLLSAI1_Config+0x1d8>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f023 0203 	bic.w	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4949      	ldr	r1, [pc, #292]	@ (8002adc <RCCEx_PLLSAI1_Config+0x1d8>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f040 8086 	bne.w	8002ad0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029c4:	4b45      	ldr	r3, [pc, #276]	@ (8002adc <RCCEx_PLLSAI1_Config+0x1d8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a44      	ldr	r2, [pc, #272]	@ (8002adc <RCCEx_PLLSAI1_Config+0x1d8>)
 80029ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80029ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d0:	f7fe f932 	bl	8000c38 <HAL_GetTick>
 80029d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029d6:	e009      	b.n	80029ec <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029d8:	f7fe f92e 	bl	8000c38 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d902      	bls.n	80029ec <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	73fb      	strb	r3, [r7, #15]
        break;
 80029ea:	e005      	b.n	80029f8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029ec:	4b3b      	ldr	r3, [pc, #236]	@ (8002adc <RCCEx_PLLSAI1_Config+0x1d8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1ef      	bne.n	80029d8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d168      	bne.n	8002ad0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d113      	bne.n	8002a2c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a04:	4b35      	ldr	r3, [pc, #212]	@ (8002adc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	4b35      	ldr	r3, [pc, #212]	@ (8002ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6892      	ldr	r2, [r2, #8]
 8002a10:	0211      	lsls	r1, r2, #8
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	68d2      	ldr	r2, [r2, #12]
 8002a16:	06d2      	lsls	r2, r2, #27
 8002a18:	4311      	orrs	r1, r2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6852      	ldr	r2, [r2, #4]
 8002a1e:	3a01      	subs	r2, #1
 8002a20:	0112      	lsls	r2, r2, #4
 8002a22:	430a      	orrs	r2, r1
 8002a24:	492d      	ldr	r1, [pc, #180]	@ (8002adc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	610b      	str	r3, [r1, #16]
 8002a2a:	e02d      	b.n	8002a88 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d115      	bne.n	8002a5e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a32:	4b2a      	ldr	r3, [pc, #168]	@ (8002adc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a34:	691a      	ldr	r2, [r3, #16]
 8002a36:	4b2b      	ldr	r3, [pc, #172]	@ (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6892      	ldr	r2, [r2, #8]
 8002a3e:	0211      	lsls	r1, r2, #8
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6912      	ldr	r2, [r2, #16]
 8002a44:	0852      	lsrs	r2, r2, #1
 8002a46:	3a01      	subs	r2, #1
 8002a48:	0552      	lsls	r2, r2, #21
 8002a4a:	4311      	orrs	r1, r2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6852      	ldr	r2, [r2, #4]
 8002a50:	3a01      	subs	r2, #1
 8002a52:	0112      	lsls	r2, r2, #4
 8002a54:	430a      	orrs	r2, r1
 8002a56:	4921      	ldr	r1, [pc, #132]	@ (8002adc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	610b      	str	r3, [r1, #16]
 8002a5c:	e014      	b.n	8002a88 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002adc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	4b21      	ldr	r3, [pc, #132]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6892      	ldr	r2, [r2, #8]
 8002a6a:	0211      	lsls	r1, r2, #8
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6952      	ldr	r2, [r2, #20]
 8002a70:	0852      	lsrs	r2, r2, #1
 8002a72:	3a01      	subs	r2, #1
 8002a74:	0652      	lsls	r2, r2, #25
 8002a76:	4311      	orrs	r1, r2
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6852      	ldr	r2, [r2, #4]
 8002a7c:	3a01      	subs	r2, #1
 8002a7e:	0112      	lsls	r2, r2, #4
 8002a80:	430a      	orrs	r2, r1
 8002a82:	4916      	ldr	r1, [pc, #88]	@ (8002adc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a88:	4b14      	ldr	r3, [pc, #80]	@ (8002adc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a13      	ldr	r2, [pc, #76]	@ (8002adc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a94:	f7fe f8d0 	bl	8000c38 <HAL_GetTick>
 8002a98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a9a:	e009      	b.n	8002ab0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a9c:	f7fe f8cc 	bl	8000c38 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d902      	bls.n	8002ab0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	73fb      	strb	r3, [r7, #15]
          break;
 8002aae:	e005      	b.n	8002abc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8002adc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0ef      	beq.n	8002a9c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ac2:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ac4:	691a      	ldr	r2, [r3, #16]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	4904      	ldr	r1, [pc, #16]	@ (8002adc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	07ff800f 	.word	0x07ff800f
 8002ae4:	ff9f800f 	.word	0xff9f800f
 8002ae8:	f9ff800f 	.word	0xf9ff800f

08002aec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002afa:	4b72      	ldr	r3, [pc, #456]	@ (8002cc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00e      	beq.n	8002b24 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b06:	4b6f      	ldr	r3, [pc, #444]	@ (8002cc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f003 0203 	and.w	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d103      	bne.n	8002b1e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
       ||
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d142      	bne.n	8002ba4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
 8002b22:	e03f      	b.n	8002ba4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d018      	beq.n	8002b5e <RCCEx_PLLSAI2_Config+0x72>
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d825      	bhi.n	8002b7c <RCCEx_PLLSAI2_Config+0x90>
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d002      	beq.n	8002b3a <RCCEx_PLLSAI2_Config+0x4e>
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d009      	beq.n	8002b4c <RCCEx_PLLSAI2_Config+0x60>
 8002b38:	e020      	b.n	8002b7c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b3a:	4b62      	ldr	r3, [pc, #392]	@ (8002cc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d11d      	bne.n	8002b82 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b4a:	e01a      	b.n	8002b82 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b4c:	4b5d      	ldr	r3, [pc, #372]	@ (8002cc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d116      	bne.n	8002b86 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5c:	e013      	b.n	8002b86 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b5e:	4b59      	ldr	r3, [pc, #356]	@ (8002cc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10f      	bne.n	8002b8a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b6a:	4b56      	ldr	r3, [pc, #344]	@ (8002cc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b7a:	e006      	b.n	8002b8a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b80:	e004      	b.n	8002b8c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b82:	bf00      	nop
 8002b84:	e002      	b.n	8002b8c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b86:	bf00      	nop
 8002b88:	e000      	b.n	8002b8c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d108      	bne.n	8002ba4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002b92:	4b4c      	ldr	r3, [pc, #304]	@ (8002cc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f023 0203 	bic.w	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4949      	ldr	r1, [pc, #292]	@ (8002cc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f040 8086 	bne.w	8002cb8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bac:	4b45      	ldr	r3, [pc, #276]	@ (8002cc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a44      	ldr	r2, [pc, #272]	@ (8002cc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bb8:	f7fe f83e 	bl	8000c38 <HAL_GetTick>
 8002bbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bbe:	e009      	b.n	8002bd4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bc0:	f7fe f83a 	bl	8000c38 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d902      	bls.n	8002bd4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	73fb      	strb	r3, [r7, #15]
        break;
 8002bd2:	e005      	b.n	8002be0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1ef      	bne.n	8002bc0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d168      	bne.n	8002cb8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d113      	bne.n	8002c14 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bec:	4b35      	ldr	r3, [pc, #212]	@ (8002cc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bee:	695a      	ldr	r2, [r3, #20]
 8002bf0:	4b35      	ldr	r3, [pc, #212]	@ (8002cc8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6892      	ldr	r2, [r2, #8]
 8002bf8:	0211      	lsls	r1, r2, #8
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68d2      	ldr	r2, [r2, #12]
 8002bfe:	06d2      	lsls	r2, r2, #27
 8002c00:	4311      	orrs	r1, r2
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6852      	ldr	r2, [r2, #4]
 8002c06:	3a01      	subs	r2, #1
 8002c08:	0112      	lsls	r2, r2, #4
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	492d      	ldr	r1, [pc, #180]	@ (8002cc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	614b      	str	r3, [r1, #20]
 8002c12:	e02d      	b.n	8002c70 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d115      	bne.n	8002c46 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002ccc <RCCEx_PLLSAI2_Config+0x1e0>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6892      	ldr	r2, [r2, #8]
 8002c26:	0211      	lsls	r1, r2, #8
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6912      	ldr	r2, [r2, #16]
 8002c2c:	0852      	lsrs	r2, r2, #1
 8002c2e:	3a01      	subs	r2, #1
 8002c30:	0552      	lsls	r2, r2, #21
 8002c32:	4311      	orrs	r1, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6852      	ldr	r2, [r2, #4]
 8002c38:	3a01      	subs	r2, #1
 8002c3a:	0112      	lsls	r2, r2, #4
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	4921      	ldr	r1, [pc, #132]	@ (8002cc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	614b      	str	r3, [r1, #20]
 8002c44:	e014      	b.n	8002c70 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c46:	4b1f      	ldr	r3, [pc, #124]	@ (8002cc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	4b21      	ldr	r3, [pc, #132]	@ (8002cd0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6892      	ldr	r2, [r2, #8]
 8002c52:	0211      	lsls	r1, r2, #8
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6952      	ldr	r2, [r2, #20]
 8002c58:	0852      	lsrs	r2, r2, #1
 8002c5a:	3a01      	subs	r2, #1
 8002c5c:	0652      	lsls	r2, r2, #25
 8002c5e:	4311      	orrs	r1, r2
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6852      	ldr	r2, [r2, #4]
 8002c64:	3a01      	subs	r2, #1
 8002c66:	0112      	lsls	r2, r2, #4
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	4916      	ldr	r1, [pc, #88]	@ (8002cc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c70:	4b14      	ldr	r3, [pc, #80]	@ (8002cc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a13      	ldr	r2, [pc, #76]	@ (8002cc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7c:	f7fd ffdc 	bl	8000c38 <HAL_GetTick>
 8002c80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c82:	e009      	b.n	8002c98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c84:	f7fd ffd8 	bl	8000c38 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d902      	bls.n	8002c98 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	73fb      	strb	r3, [r7, #15]
          break;
 8002c96:	e005      	b.n	8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c98:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ef      	beq.n	8002c84 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002caa:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	4904      	ldr	r1, [pc, #16]	@ (8002cc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	07ff800f 	.word	0x07ff800f
 8002ccc:	ff9f800f 	.word	0xff9f800f
 8002cd0:	f9ff800f 	.word	0xf9ff800f

08002cd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e042      	b.n	8002d6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d106      	bne.n	8002cfe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7fd fdf1 	bl	80008e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2224      	movs	r2, #36	@ 0x24
 8002d02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0201 	bic.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 ff14 	bl	8003b4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 fc15 	bl	8003554 <UART_SetConfig>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e01b      	b.n	8002d6c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 ff93 	bl	8003c90 <UART_CheckIdleState>
 8002d6a:	4603      	mov	r3, r0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08a      	sub	sp, #40	@ 0x28
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	603b      	str	r3, [r7, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d8a:	2b20      	cmp	r3, #32
 8002d8c:	d17b      	bne.n	8002e86 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <HAL_UART_Transmit+0x26>
 8002d94:	88fb      	ldrh	r3, [r7, #6]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e074      	b.n	8002e88 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2221      	movs	r2, #33	@ 0x21
 8002daa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dae:	f7fd ff43 	bl	8000c38 <HAL_GetTick>
 8002db2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	88fa      	ldrh	r2, [r7, #6]
 8002db8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	88fa      	ldrh	r2, [r7, #6]
 8002dc0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dcc:	d108      	bne.n	8002de0 <HAL_UART_Transmit+0x6c>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d104      	bne.n	8002de0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	61bb      	str	r3, [r7, #24]
 8002dde:	e003      	b.n	8002de8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002de8:	e030      	b.n	8002e4c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2200      	movs	r2, #0
 8002df2:	2180      	movs	r1, #128	@ 0x80
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 fff5 	bl	8003de4 <UART_WaitOnFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e03d      	b.n	8002e88 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10b      	bne.n	8002e2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	881a      	ldrh	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e1e:	b292      	uxth	r2, r2
 8002e20:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	3302      	adds	r3, #2
 8002e26:	61bb      	str	r3, [r7, #24]
 8002e28:	e007      	b.n	8002e3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	781a      	ldrb	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	3301      	adds	r3, #1
 8002e38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1c8      	bne.n	8002dea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2140      	movs	r1, #64	@ 0x40
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 ffbe 	bl	8003de4 <UART_WaitOnFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2220      	movs	r2, #32
 8002e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e006      	b.n	8002e88 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e000      	b.n	8002e88 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002e86:	2302      	movs	r3, #2
  }
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3720      	adds	r7, #32
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b0ba      	sub	sp, #232	@ 0xe8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002eb6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002eba:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002ec4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d11b      	bne.n	8002f04 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d015      	beq.n	8002f04 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002edc:	f003 0320 	and.w	r3, r3, #32
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d105      	bne.n	8002ef0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ee8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d009      	beq.n	8002f04 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 8300 	beq.w	80034fa <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	4798      	blx	r3
      }
      return;
 8002f02:	e2fa      	b.n	80034fa <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8002f04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 8123 	beq.w	8003154 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002f0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002f12:	4b8d      	ldr	r3, [pc, #564]	@ (8003148 <HAL_UART_IRQHandler+0x2b8>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002f1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002f1e:	4b8b      	ldr	r3, [pc, #556]	@ (800314c <HAL_UART_IRQHandler+0x2bc>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 8116 	beq.w	8003154 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d011      	beq.n	8002f58 <HAL_UART_IRQHandler+0xc8>
 8002f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00b      	beq.n	8002f58 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2201      	movs	r2, #1
 8002f46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f4e:	f043 0201 	orr.w	r2, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d011      	beq.n	8002f88 <HAL_UART_IRQHandler+0xf8>
 8002f64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00b      	beq.n	8002f88 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2202      	movs	r2, #2
 8002f76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f7e:	f043 0204 	orr.w	r2, r3, #4
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d011      	beq.n	8002fb8 <HAL_UART_IRQHandler+0x128>
 8002f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00b      	beq.n	8002fb8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fae:	f043 0202 	orr.w	r2, r3, #2
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d017      	beq.n	8002ff4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fc8:	f003 0320 	and.w	r3, r3, #32
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d105      	bne.n	8002fdc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002fd0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002fd4:	4b5c      	ldr	r3, [pc, #368]	@ (8003148 <HAL_UART_IRQHandler+0x2b8>)
 8002fd6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00b      	beq.n	8002ff4 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fea:	f043 0208 	orr.w	r2, r3, #8
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ff8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d012      	beq.n	8003026 <HAL_UART_IRQHandler+0x196>
 8003000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003004:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00c      	beq.n	8003026 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003014:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800301c:	f043 0220 	orr.w	r2, r3, #32
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 8266 	beq.w	80034fe <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	2b00      	cmp	r3, #0
 800303c:	d013      	beq.n	8003066 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800303e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	2b00      	cmp	r3, #0
 8003048:	d105      	bne.n	8003056 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800304a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800304e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d007      	beq.n	8003066 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800307a:	2b40      	cmp	r3, #64	@ 0x40
 800307c:	d005      	beq.n	800308a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800307e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003082:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003086:	2b00      	cmp	r3, #0
 8003088:	d054      	beq.n	8003134 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 ff17 	bl	8003ebe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800309a:	2b40      	cmp	r3, #64	@ 0x40
 800309c:	d146      	bne.n	800312c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3308      	adds	r3, #8
 80030a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030ac:	e853 3f00 	ldrex	r3, [r3]
 80030b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80030b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80030b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3308      	adds	r3, #8
 80030c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80030ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80030ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80030d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80030da:	e841 2300 	strex	r3, r2, [r1]
 80030de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80030e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1d9      	bne.n	800309e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d017      	beq.n	8003124 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030fa:	4a15      	ldr	r2, [pc, #84]	@ (8003150 <HAL_UART_IRQHandler+0x2c0>)
 80030fc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003104:	4618      	mov	r0, r3
 8003106:	f7fd ff10 	bl	8000f2a <HAL_DMA_Abort_IT>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d019      	beq.n	8003144 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800311e:	4610      	mov	r0, r2
 8003120:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003122:	e00f      	b.n	8003144 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f9ff 	bl	8003528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800312a:	e00b      	b.n	8003144 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f9fb 	bl	8003528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003132:	e007      	b.n	8003144 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f9f7 	bl	8003528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003142:	e1dc      	b.n	80034fe <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003144:	bf00      	nop
    return;
 8003146:	e1da      	b.n	80034fe <HAL_UART_IRQHandler+0x66e>
 8003148:	10000001 	.word	0x10000001
 800314c:	04000120 	.word	0x04000120
 8003150:	08003f8b 	.word	0x08003f8b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003158:	2b01      	cmp	r3, #1
 800315a:	f040 8170 	bne.w	800343e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800315e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 8169 	beq.w	800343e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800316c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 8162 	beq.w	800343e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2210      	movs	r2, #16
 8003180:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800318c:	2b40      	cmp	r3, #64	@ 0x40
 800318e:	f040 80d8 	bne.w	8003342 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80af 	beq.w	8003308 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80031b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80031b4:	429a      	cmp	r2, r3
 80031b6:	f080 80a7 	bcs.w	8003308 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80031c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f040 8087 	bne.w	80032e6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031e4:	e853 3f00 	ldrex	r3, [r3]
 80031e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80031ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003202:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003206:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800320e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003212:	e841 2300 	strex	r3, r2, [r1]
 8003216:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800321a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1da      	bne.n	80031d8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3308      	adds	r3, #8
 8003228:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800322c:	e853 3f00 	ldrex	r3, [r3]
 8003230:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003232:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003234:	f023 0301 	bic.w	r3, r3, #1
 8003238:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3308      	adds	r3, #8
 8003242:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003246:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800324a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800324e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003252:	e841 2300 	strex	r3, r2, [r1]
 8003256:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003258:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1e1      	bne.n	8003222 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3308      	adds	r3, #8
 8003264:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003266:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003268:	e853 3f00 	ldrex	r3, [r3]
 800326c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800326e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003270:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003274:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3308      	adds	r3, #8
 800327e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003282:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003284:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003286:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003288:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800328a:	e841 2300 	strex	r3, r2, [r1]
 800328e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003290:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1e3      	bne.n	800325e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032ac:	e853 3f00 	ldrex	r3, [r3]
 80032b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80032b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032b4:	f023 0310 	bic.w	r3, r3, #16
 80032b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80032c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80032cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80032ce:	e841 2300 	strex	r3, r2, [r1]
 80032d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80032d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1e4      	bne.n	80032a4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fd fdc6 	bl	8000e72 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2202      	movs	r2, #2
 80032ea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	4619      	mov	r1, r3
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f91b 	bl	800353c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003306:	e0fc      	b.n	8003502 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800330e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003312:	429a      	cmp	r2, r3
 8003314:	f040 80f5 	bne.w	8003502 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	2b20      	cmp	r3, #32
 8003328:	f040 80eb 	bne.w	8003502 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003338:	4619      	mov	r1, r3
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f8fe 	bl	800353c <HAL_UARTEx_RxEventCallback>
      return;
 8003340:	e0df      	b.n	8003502 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800334e:	b29b      	uxth	r3, r3
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 80d1 	beq.w	8003506 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8003364:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80cc 	beq.w	8003506 <HAL_UART_IRQHandler+0x676>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003376:	e853 3f00 	ldrex	r3, [r3]
 800337a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800337c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800337e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003382:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003390:	647b      	str	r3, [r7, #68]	@ 0x44
 8003392:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003394:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003396:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003398:	e841 2300 	strex	r3, r2, [r1]
 800339c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800339e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1e4      	bne.n	800336e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3308      	adds	r3, #8
 80033aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	e853 3f00 	ldrex	r3, [r3]
 80033b2:	623b      	str	r3, [r7, #32]
   return(result);
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033ba:	f023 0301 	bic.w	r3, r3, #1
 80033be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3308      	adds	r3, #8
 80033c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80033cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80033ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033d4:	e841 2300 	strex	r3, r2, [r1]
 80033d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e1      	bne.n	80033a4 <HAL_UART_IRQHandler+0x514>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	e853 3f00 	ldrex	r3, [r3]
 8003400:	60fb      	str	r3, [r7, #12]
   return(result);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f023 0310 	bic.w	r3, r3, #16
 8003408:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003416:	61fb      	str	r3, [r7, #28]
 8003418:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341a:	69b9      	ldr	r1, [r7, #24]
 800341c:	69fa      	ldr	r2, [r7, #28]
 800341e:	e841 2300 	strex	r3, r2, [r1]
 8003422:	617b      	str	r3, [r7, #20]
   return(result);
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1e4      	bne.n	80033f4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2202      	movs	r2, #2
 800342e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003434:	4619      	mov	r1, r3
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f880 	bl	800353c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800343c:	e063      	b.n	8003506 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800343e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003442:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00e      	beq.n	8003468 <HAL_UART_IRQHandler+0x5d8>
 800344a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800344e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d008      	beq.n	8003468 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800345e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fdd3 	bl	800400c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003466:	e051      	b.n	800350c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800346c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003470:	2b00      	cmp	r3, #0
 8003472:	d014      	beq.n	800349e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800347c:	2b00      	cmp	r3, #0
 800347e:	d105      	bne.n	800348c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003484:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <HAL_UART_IRQHandler+0x60e>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003490:	2b00      	cmp	r3, #0
 8003492:	d03a      	beq.n	800350a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
    }
    return;
 800349c:	e035      	b.n	800350a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800349e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d009      	beq.n	80034be <HAL_UART_IRQHandler+0x62e>
 80034aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fd7d 	bl	8003fb6 <UART_EndTransmit_IT>
    return;
 80034bc:	e026      	b.n	800350c <HAL_UART_IRQHandler+0x67c>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80034be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <HAL_UART_IRQHandler+0x64e>
 80034ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fdac 	bl	8004034 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034dc:	e016      	b.n	800350c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80034de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d010      	beq.n	800350c <HAL_UART_IRQHandler+0x67c>
 80034ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	da0c      	bge.n	800350c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fd94 	bl	8004020 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034f8:	e008      	b.n	800350c <HAL_UART_IRQHandler+0x67c>
      return;
 80034fa:	bf00      	nop
 80034fc:	e006      	b.n	800350c <HAL_UART_IRQHandler+0x67c>
    return;
 80034fe:	bf00      	nop
 8003500:	e004      	b.n	800350c <HAL_UART_IRQHandler+0x67c>
      return;
 8003502:	bf00      	nop
 8003504:	e002      	b.n	800350c <HAL_UART_IRQHandler+0x67c>
      return;
 8003506:	bf00      	nop
 8003508:	e000      	b.n	800350c <HAL_UART_IRQHandler+0x67c>
    return;
 800350a:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800350c:	37e8      	adds	r7, #232	@ 0xe8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop

08003514 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003558:	b08c      	sub	sp, #48	@ 0x30
 800355a:	af00      	add	r7, sp, #0
 800355c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	431a      	orrs	r2, r3
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	431a      	orrs	r2, r3
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	4313      	orrs	r3, r2
 800357a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	4baa      	ldr	r3, [pc, #680]	@ (800382c <UART_SetConfig+0x2d8>)
 8003584:	4013      	ands	r3, r2
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800358c:	430b      	orrs	r3, r1
 800358e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a9f      	ldr	r2, [pc, #636]	@ (8003830 <UART_SetConfig+0x2dc>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d004      	beq.n	80035c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035bc:	4313      	orrs	r3, r2
 80035be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80035ca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	6812      	ldr	r2, [r2, #0]
 80035d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035d4:	430b      	orrs	r3, r1
 80035d6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035de:	f023 010f 	bic.w	r1, r3, #15
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a90      	ldr	r2, [pc, #576]	@ (8003834 <UART_SetConfig+0x2e0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d125      	bne.n	8003644 <UART_SetConfig+0xf0>
 80035f8:	4b8f      	ldr	r3, [pc, #572]	@ (8003838 <UART_SetConfig+0x2e4>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	2b03      	cmp	r3, #3
 8003604:	d81a      	bhi.n	800363c <UART_SetConfig+0xe8>
 8003606:	a201      	add	r2, pc, #4	@ (adr r2, 800360c <UART_SetConfig+0xb8>)
 8003608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360c:	0800361d 	.word	0x0800361d
 8003610:	0800362d 	.word	0x0800362d
 8003614:	08003625 	.word	0x08003625
 8003618:	08003635 	.word	0x08003635
 800361c:	2301      	movs	r3, #1
 800361e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003622:	e116      	b.n	8003852 <UART_SetConfig+0x2fe>
 8003624:	2302      	movs	r3, #2
 8003626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800362a:	e112      	b.n	8003852 <UART_SetConfig+0x2fe>
 800362c:	2304      	movs	r3, #4
 800362e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003632:	e10e      	b.n	8003852 <UART_SetConfig+0x2fe>
 8003634:	2308      	movs	r3, #8
 8003636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800363a:	e10a      	b.n	8003852 <UART_SetConfig+0x2fe>
 800363c:	2310      	movs	r3, #16
 800363e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003642:	e106      	b.n	8003852 <UART_SetConfig+0x2fe>
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a7c      	ldr	r2, [pc, #496]	@ (800383c <UART_SetConfig+0x2e8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d138      	bne.n	80036c0 <UART_SetConfig+0x16c>
 800364e:	4b7a      	ldr	r3, [pc, #488]	@ (8003838 <UART_SetConfig+0x2e4>)
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003654:	f003 030c 	and.w	r3, r3, #12
 8003658:	2b0c      	cmp	r3, #12
 800365a:	d82d      	bhi.n	80036b8 <UART_SetConfig+0x164>
 800365c:	a201      	add	r2, pc, #4	@ (adr r2, 8003664 <UART_SetConfig+0x110>)
 800365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003662:	bf00      	nop
 8003664:	08003699 	.word	0x08003699
 8003668:	080036b9 	.word	0x080036b9
 800366c:	080036b9 	.word	0x080036b9
 8003670:	080036b9 	.word	0x080036b9
 8003674:	080036a9 	.word	0x080036a9
 8003678:	080036b9 	.word	0x080036b9
 800367c:	080036b9 	.word	0x080036b9
 8003680:	080036b9 	.word	0x080036b9
 8003684:	080036a1 	.word	0x080036a1
 8003688:	080036b9 	.word	0x080036b9
 800368c:	080036b9 	.word	0x080036b9
 8003690:	080036b9 	.word	0x080036b9
 8003694:	080036b1 	.word	0x080036b1
 8003698:	2300      	movs	r3, #0
 800369a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800369e:	e0d8      	b.n	8003852 <UART_SetConfig+0x2fe>
 80036a0:	2302      	movs	r3, #2
 80036a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036a6:	e0d4      	b.n	8003852 <UART_SetConfig+0x2fe>
 80036a8:	2304      	movs	r3, #4
 80036aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036ae:	e0d0      	b.n	8003852 <UART_SetConfig+0x2fe>
 80036b0:	2308      	movs	r3, #8
 80036b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036b6:	e0cc      	b.n	8003852 <UART_SetConfig+0x2fe>
 80036b8:	2310      	movs	r3, #16
 80036ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036be:	e0c8      	b.n	8003852 <UART_SetConfig+0x2fe>
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a5e      	ldr	r2, [pc, #376]	@ (8003840 <UART_SetConfig+0x2ec>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d125      	bne.n	8003716 <UART_SetConfig+0x1c2>
 80036ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003838 <UART_SetConfig+0x2e4>)
 80036cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80036d4:	2b30      	cmp	r3, #48	@ 0x30
 80036d6:	d016      	beq.n	8003706 <UART_SetConfig+0x1b2>
 80036d8:	2b30      	cmp	r3, #48	@ 0x30
 80036da:	d818      	bhi.n	800370e <UART_SetConfig+0x1ba>
 80036dc:	2b20      	cmp	r3, #32
 80036de:	d00a      	beq.n	80036f6 <UART_SetConfig+0x1a2>
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d814      	bhi.n	800370e <UART_SetConfig+0x1ba>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <UART_SetConfig+0x19a>
 80036e8:	2b10      	cmp	r3, #16
 80036ea:	d008      	beq.n	80036fe <UART_SetConfig+0x1aa>
 80036ec:	e00f      	b.n	800370e <UART_SetConfig+0x1ba>
 80036ee:	2300      	movs	r3, #0
 80036f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036f4:	e0ad      	b.n	8003852 <UART_SetConfig+0x2fe>
 80036f6:	2302      	movs	r3, #2
 80036f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036fc:	e0a9      	b.n	8003852 <UART_SetConfig+0x2fe>
 80036fe:	2304      	movs	r3, #4
 8003700:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003704:	e0a5      	b.n	8003852 <UART_SetConfig+0x2fe>
 8003706:	2308      	movs	r3, #8
 8003708:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800370c:	e0a1      	b.n	8003852 <UART_SetConfig+0x2fe>
 800370e:	2310      	movs	r3, #16
 8003710:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003714:	e09d      	b.n	8003852 <UART_SetConfig+0x2fe>
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a4a      	ldr	r2, [pc, #296]	@ (8003844 <UART_SetConfig+0x2f0>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d125      	bne.n	800376c <UART_SetConfig+0x218>
 8003720:	4b45      	ldr	r3, [pc, #276]	@ (8003838 <UART_SetConfig+0x2e4>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003726:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800372a:	2bc0      	cmp	r3, #192	@ 0xc0
 800372c:	d016      	beq.n	800375c <UART_SetConfig+0x208>
 800372e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003730:	d818      	bhi.n	8003764 <UART_SetConfig+0x210>
 8003732:	2b80      	cmp	r3, #128	@ 0x80
 8003734:	d00a      	beq.n	800374c <UART_SetConfig+0x1f8>
 8003736:	2b80      	cmp	r3, #128	@ 0x80
 8003738:	d814      	bhi.n	8003764 <UART_SetConfig+0x210>
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <UART_SetConfig+0x1f0>
 800373e:	2b40      	cmp	r3, #64	@ 0x40
 8003740:	d008      	beq.n	8003754 <UART_SetConfig+0x200>
 8003742:	e00f      	b.n	8003764 <UART_SetConfig+0x210>
 8003744:	2300      	movs	r3, #0
 8003746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800374a:	e082      	b.n	8003852 <UART_SetConfig+0x2fe>
 800374c:	2302      	movs	r3, #2
 800374e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003752:	e07e      	b.n	8003852 <UART_SetConfig+0x2fe>
 8003754:	2304      	movs	r3, #4
 8003756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800375a:	e07a      	b.n	8003852 <UART_SetConfig+0x2fe>
 800375c:	2308      	movs	r3, #8
 800375e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003762:	e076      	b.n	8003852 <UART_SetConfig+0x2fe>
 8003764:	2310      	movs	r3, #16
 8003766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800376a:	e072      	b.n	8003852 <UART_SetConfig+0x2fe>
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a35      	ldr	r2, [pc, #212]	@ (8003848 <UART_SetConfig+0x2f4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d12a      	bne.n	80037cc <UART_SetConfig+0x278>
 8003776:	4b30      	ldr	r3, [pc, #192]	@ (8003838 <UART_SetConfig+0x2e4>)
 8003778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003780:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003784:	d01a      	beq.n	80037bc <UART_SetConfig+0x268>
 8003786:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800378a:	d81b      	bhi.n	80037c4 <UART_SetConfig+0x270>
 800378c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003790:	d00c      	beq.n	80037ac <UART_SetConfig+0x258>
 8003792:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003796:	d815      	bhi.n	80037c4 <UART_SetConfig+0x270>
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <UART_SetConfig+0x250>
 800379c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037a0:	d008      	beq.n	80037b4 <UART_SetConfig+0x260>
 80037a2:	e00f      	b.n	80037c4 <UART_SetConfig+0x270>
 80037a4:	2300      	movs	r3, #0
 80037a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037aa:	e052      	b.n	8003852 <UART_SetConfig+0x2fe>
 80037ac:	2302      	movs	r3, #2
 80037ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037b2:	e04e      	b.n	8003852 <UART_SetConfig+0x2fe>
 80037b4:	2304      	movs	r3, #4
 80037b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037ba:	e04a      	b.n	8003852 <UART_SetConfig+0x2fe>
 80037bc:	2308      	movs	r3, #8
 80037be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037c2:	e046      	b.n	8003852 <UART_SetConfig+0x2fe>
 80037c4:	2310      	movs	r3, #16
 80037c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037ca:	e042      	b.n	8003852 <UART_SetConfig+0x2fe>
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a17      	ldr	r2, [pc, #92]	@ (8003830 <UART_SetConfig+0x2dc>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d13a      	bne.n	800384c <UART_SetConfig+0x2f8>
 80037d6:	4b18      	ldr	r3, [pc, #96]	@ (8003838 <UART_SetConfig+0x2e4>)
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80037e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037e4:	d01a      	beq.n	800381c <UART_SetConfig+0x2c8>
 80037e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037ea:	d81b      	bhi.n	8003824 <UART_SetConfig+0x2d0>
 80037ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037f0:	d00c      	beq.n	800380c <UART_SetConfig+0x2b8>
 80037f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037f6:	d815      	bhi.n	8003824 <UART_SetConfig+0x2d0>
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <UART_SetConfig+0x2b0>
 80037fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003800:	d008      	beq.n	8003814 <UART_SetConfig+0x2c0>
 8003802:	e00f      	b.n	8003824 <UART_SetConfig+0x2d0>
 8003804:	2300      	movs	r3, #0
 8003806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800380a:	e022      	b.n	8003852 <UART_SetConfig+0x2fe>
 800380c:	2302      	movs	r3, #2
 800380e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003812:	e01e      	b.n	8003852 <UART_SetConfig+0x2fe>
 8003814:	2304      	movs	r3, #4
 8003816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800381a:	e01a      	b.n	8003852 <UART_SetConfig+0x2fe>
 800381c:	2308      	movs	r3, #8
 800381e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003822:	e016      	b.n	8003852 <UART_SetConfig+0x2fe>
 8003824:	2310      	movs	r3, #16
 8003826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800382a:	e012      	b.n	8003852 <UART_SetConfig+0x2fe>
 800382c:	cfff69f3 	.word	0xcfff69f3
 8003830:	40008000 	.word	0x40008000
 8003834:	40013800 	.word	0x40013800
 8003838:	40021000 	.word	0x40021000
 800383c:	40004400 	.word	0x40004400
 8003840:	40004800 	.word	0x40004800
 8003844:	40004c00 	.word	0x40004c00
 8003848:	40005000 	.word	0x40005000
 800384c:	2310      	movs	r3, #16
 800384e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4aae      	ldr	r2, [pc, #696]	@ (8003b10 <UART_SetConfig+0x5bc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	f040 8097 	bne.w	800398c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800385e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003862:	2b08      	cmp	r3, #8
 8003864:	d823      	bhi.n	80038ae <UART_SetConfig+0x35a>
 8003866:	a201      	add	r2, pc, #4	@ (adr r2, 800386c <UART_SetConfig+0x318>)
 8003868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386c:	08003891 	.word	0x08003891
 8003870:	080038af 	.word	0x080038af
 8003874:	08003899 	.word	0x08003899
 8003878:	080038af 	.word	0x080038af
 800387c:	0800389f 	.word	0x0800389f
 8003880:	080038af 	.word	0x080038af
 8003884:	080038af 	.word	0x080038af
 8003888:	080038af 	.word	0x080038af
 800388c:	080038a7 	.word	0x080038a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003890:	f7fe fc1c 	bl	80020cc <HAL_RCC_GetPCLK1Freq>
 8003894:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003896:	e010      	b.n	80038ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003898:	4b9e      	ldr	r3, [pc, #632]	@ (8003b14 <UART_SetConfig+0x5c0>)
 800389a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800389c:	e00d      	b.n	80038ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800389e:	f7fe fb7d 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 80038a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038a4:	e009      	b.n	80038ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80038ac:	e005      	b.n	80038ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80038b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 8130 	beq.w	8003b22 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c6:	4a94      	ldr	r2, [pc, #592]	@ (8003b18 <UART_SetConfig+0x5c4>)
 80038c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038cc:	461a      	mov	r2, r3
 80038ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	4413      	add	r3, r2
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d305      	bcc.n	80038f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d903      	bls.n	80038fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80038f8:	e113      	b.n	8003b22 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	2200      	movs	r2, #0
 80038fe:	60bb      	str	r3, [r7, #8]
 8003900:	60fa      	str	r2, [r7, #12]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003906:	4a84      	ldr	r2, [pc, #528]	@ (8003b18 <UART_SetConfig+0x5c4>)
 8003908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800390c:	b29b      	uxth	r3, r3
 800390e:	2200      	movs	r2, #0
 8003910:	603b      	str	r3, [r7, #0]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003918:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800391c:	f7fc fcc0 	bl	80002a0 <__aeabi_uldivmod>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4610      	mov	r0, r2
 8003926:	4619      	mov	r1, r3
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	020b      	lsls	r3, r1, #8
 8003932:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003936:	0202      	lsls	r2, r0, #8
 8003938:	6979      	ldr	r1, [r7, #20]
 800393a:	6849      	ldr	r1, [r1, #4]
 800393c:	0849      	lsrs	r1, r1, #1
 800393e:	2000      	movs	r0, #0
 8003940:	460c      	mov	r4, r1
 8003942:	4605      	mov	r5, r0
 8003944:	eb12 0804 	adds.w	r8, r2, r4
 8003948:	eb43 0905 	adc.w	r9, r3, r5
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	469a      	mov	sl, r3
 8003954:	4693      	mov	fp, r2
 8003956:	4652      	mov	r2, sl
 8003958:	465b      	mov	r3, fp
 800395a:	4640      	mov	r0, r8
 800395c:	4649      	mov	r1, r9
 800395e:	f7fc fc9f 	bl	80002a0 <__aeabi_uldivmod>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4613      	mov	r3, r2
 8003968:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003970:	d308      	bcc.n	8003984 <UART_SetConfig+0x430>
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003978:	d204      	bcs.n	8003984 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6a3a      	ldr	r2, [r7, #32]
 8003980:	60da      	str	r2, [r3, #12]
 8003982:	e0ce      	b.n	8003b22 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800398a:	e0ca      	b.n	8003b22 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003994:	d166      	bne.n	8003a64 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003996:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800399a:	2b08      	cmp	r3, #8
 800399c:	d827      	bhi.n	80039ee <UART_SetConfig+0x49a>
 800399e:	a201      	add	r2, pc, #4	@ (adr r2, 80039a4 <UART_SetConfig+0x450>)
 80039a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a4:	080039c9 	.word	0x080039c9
 80039a8:	080039d1 	.word	0x080039d1
 80039ac:	080039d9 	.word	0x080039d9
 80039b0:	080039ef 	.word	0x080039ef
 80039b4:	080039df 	.word	0x080039df
 80039b8:	080039ef 	.word	0x080039ef
 80039bc:	080039ef 	.word	0x080039ef
 80039c0:	080039ef 	.word	0x080039ef
 80039c4:	080039e7 	.word	0x080039e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039c8:	f7fe fb80 	bl	80020cc <HAL_RCC_GetPCLK1Freq>
 80039cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039ce:	e014      	b.n	80039fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039d0:	f7fe fb92 	bl	80020f8 <HAL_RCC_GetPCLK2Freq>
 80039d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039d6:	e010      	b.n	80039fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039d8:	4b4e      	ldr	r3, [pc, #312]	@ (8003b14 <UART_SetConfig+0x5c0>)
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039dc:	e00d      	b.n	80039fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039de:	f7fe fadd 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 80039e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039e4:	e009      	b.n	80039fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039ec:	e005      	b.n	80039fa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80039f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 8090 	beq.w	8003b22 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	4a44      	ldr	r2, [pc, #272]	@ (8003b18 <UART_SetConfig+0x5c4>)
 8003a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a10:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a14:	005a      	lsls	r2, r3, #1
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	085b      	lsrs	r3, r3, #1
 8003a1c:	441a      	add	r2, r3
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a26:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	2b0f      	cmp	r3, #15
 8003a2c:	d916      	bls.n	8003a5c <UART_SetConfig+0x508>
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a34:	d212      	bcs.n	8003a5c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	f023 030f 	bic.w	r3, r3, #15
 8003a3e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	085b      	lsrs	r3, r3, #1
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	8bfb      	ldrh	r3, [r7, #30]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	8bfa      	ldrh	r2, [r7, #30]
 8003a58:	60da      	str	r2, [r3, #12]
 8003a5a:	e062      	b.n	8003b22 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003a62:	e05e      	b.n	8003b22 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d828      	bhi.n	8003abe <UART_SetConfig+0x56a>
 8003a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a74 <UART_SetConfig+0x520>)
 8003a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a72:	bf00      	nop
 8003a74:	08003a99 	.word	0x08003a99
 8003a78:	08003aa1 	.word	0x08003aa1
 8003a7c:	08003aa9 	.word	0x08003aa9
 8003a80:	08003abf 	.word	0x08003abf
 8003a84:	08003aaf 	.word	0x08003aaf
 8003a88:	08003abf 	.word	0x08003abf
 8003a8c:	08003abf 	.word	0x08003abf
 8003a90:	08003abf 	.word	0x08003abf
 8003a94:	08003ab7 	.word	0x08003ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a98:	f7fe fb18 	bl	80020cc <HAL_RCC_GetPCLK1Freq>
 8003a9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a9e:	e014      	b.n	8003aca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aa0:	f7fe fb2a 	bl	80020f8 <HAL_RCC_GetPCLK2Freq>
 8003aa4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003aa6:	e010      	b.n	8003aca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b14 <UART_SetConfig+0x5c0>)
 8003aaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003aac:	e00d      	b.n	8003aca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aae:	f7fe fa75 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8003ab2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ab4:	e009      	b.n	8003aca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ab6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003abc:	e005      	b.n	8003aca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003ac8:	bf00      	nop
    }

    if (pclk != 0U)
 8003aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d028      	beq.n	8003b22 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad4:	4a10      	ldr	r2, [pc, #64]	@ (8003b18 <UART_SetConfig+0x5c4>)
 8003ad6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ada:	461a      	mov	r2, r3
 8003adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ade:	fbb3 f2f2 	udiv	r2, r3, r2
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	085b      	lsrs	r3, r3, #1
 8003ae8:	441a      	add	r2, r3
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	2b0f      	cmp	r3, #15
 8003af8:	d910      	bls.n	8003b1c <UART_SetConfig+0x5c8>
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b00:	d20c      	bcs.n	8003b1c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	60da      	str	r2, [r3, #12]
 8003b0c:	e009      	b.n	8003b22 <UART_SetConfig+0x5ce>
 8003b0e:	bf00      	nop
 8003b10:	40008000 	.word	0x40008000
 8003b14:	00f42400 	.word	0x00f42400
 8003b18:	08007638 	.word	0x08007638
      }
      else
      {
        ret = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2200      	movs	r2, #0
 8003b36:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003b3e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3730      	adds	r7, #48	@ 0x30
 8003b46:	46bd      	mov	sp, r7
 8003b48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003b4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01a      	beq.n	8003c62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c4a:	d10a      	bne.n	8003c62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	605a      	str	r2, [r3, #4]
  }
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b098      	sub	sp, #96	@ 0x60
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ca0:	f7fc ffca 	bl	8000c38 <HAL_GetTick>
 8003ca4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d12f      	bne.n	8003d14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f88e 	bl	8003de4 <UART_WaitOnFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d022      	beq.n	8003d14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd6:	e853 3f00 	ldrex	r3, [r3]
 8003cda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ce2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003cf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cf4:	e841 2300 	strex	r3, r2, [r1]
 8003cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e6      	bne.n	8003cce <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e063      	b.n	8003ddc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d149      	bne.n	8003db6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f857 	bl	8003de4 <UART_WaitOnFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d03c      	beq.n	8003db6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	623b      	str	r3, [r7, #32]
   return(result);
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e6      	bne.n	8003d3c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3308      	adds	r3, #8
 8003d74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d8e:	61fa      	str	r2, [r7, #28]
 8003d90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d92:	69b9      	ldr	r1, [r7, #24]
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	617b      	str	r3, [r7, #20]
   return(result);
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e5      	bne.n	8003d6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e012      	b.n	8003ddc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3758      	adds	r7, #88	@ 0x58
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	4613      	mov	r3, r2
 8003df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df4:	e04f      	b.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfc:	d04b      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dfe:	f7fc ff1b 	bl	8000c38 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d302      	bcc.n	8003e14 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e04e      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d037      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b80      	cmp	r3, #128	@ 0x80
 8003e2a:	d034      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2b40      	cmp	r3, #64	@ 0x40
 8003e30:	d031      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d110      	bne.n	8003e62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2208      	movs	r2, #8
 8003e46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f838 	bl	8003ebe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2208      	movs	r2, #8
 8003e52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e029      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e70:	d111      	bne.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f81e 	bl	8003ebe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e00f      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	bf0c      	ite	eq
 8003ea6:	2301      	moveq	r3, #1
 8003ea8:	2300      	movne	r3, #0
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d0a0      	beq.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b095      	sub	sp, #84	@ 0x54
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ee4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ee6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003eea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003eec:	e841 2300 	strex	r3, r2, [r1]
 8003ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e6      	bne.n	8003ec6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3308      	adds	r3, #8
 8003efe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	e853 3f00 	ldrex	r3, [r3]
 8003f06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3308      	adds	r3, #8
 8003f1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f24:	e841 2300 	strex	r3, r2, [r1]
 8003f28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1e3      	bne.n	8003ef8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d118      	bne.n	8003f6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	e853 3f00 	ldrex	r3, [r3]
 8003f44:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	f023 0310 	bic.w	r3, r3, #16
 8003f4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f56:	61bb      	str	r3, [r7, #24]
 8003f58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	6979      	ldr	r1, [r7, #20]
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	e841 2300 	strex	r3, r2, [r1]
 8003f62:	613b      	str	r3, [r7, #16]
   return(result);
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1e6      	bne.n	8003f38 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003f7e:	bf00      	nop
 8003f80:	3754      	adds	r7, #84	@ 0x54
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f7ff fabd 	bl	8003528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fae:	bf00      	nop
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b088      	sub	sp, #32
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	e853 3f00 	ldrex	r3, [r3]
 8003fca:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fd2:	61fb      	str	r3, [r7, #28]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	61bb      	str	r3, [r7, #24]
 8003fde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe0:	6979      	ldr	r1, [r7, #20]
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	e841 2300 	strex	r3, r2, [r1]
 8003fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1e6      	bne.n	8003fbe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff fa88 	bl	8003514 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004004:	bf00      	nop
 8004006:	3720      	adds	r7, #32
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <__NVIC_SetPriority>:
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	6039      	str	r1, [r7, #0]
 8004052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004058:	2b00      	cmp	r3, #0
 800405a:	db0a      	blt.n	8004072 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	b2da      	uxtb	r2, r3
 8004060:	490c      	ldr	r1, [pc, #48]	@ (8004094 <__NVIC_SetPriority+0x4c>)
 8004062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004066:	0112      	lsls	r2, r2, #4
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	440b      	add	r3, r1
 800406c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004070:	e00a      	b.n	8004088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	b2da      	uxtb	r2, r3
 8004076:	4908      	ldr	r1, [pc, #32]	@ (8004098 <__NVIC_SetPriority+0x50>)
 8004078:	79fb      	ldrb	r3, [r7, #7]
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	3b04      	subs	r3, #4
 8004080:	0112      	lsls	r2, r2, #4
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	440b      	add	r3, r1
 8004086:	761a      	strb	r2, [r3, #24]
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	e000e100 	.word	0xe000e100
 8004098:	e000ed00 	.word	0xe000ed00

0800409c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80040a0:	2100      	movs	r1, #0
 80040a2:	f06f 0004 	mvn.w	r0, #4
 80040a6:	f7ff ffcf 	bl	8004048 <__NVIC_SetPriority>
#endif
}
 80040aa:	bf00      	nop
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040b6:	f3ef 8305 	mrs	r3, IPSR
 80040ba:	603b      	str	r3, [r7, #0]
  return(result);
 80040bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80040c2:	f06f 0305 	mvn.w	r3, #5
 80040c6:	607b      	str	r3, [r7, #4]
 80040c8:	e00c      	b.n	80040e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80040ca:	4b0a      	ldr	r3, [pc, #40]	@ (80040f4 <osKernelInitialize+0x44>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d105      	bne.n	80040de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80040d2:	4b08      	ldr	r3, [pc, #32]	@ (80040f4 <osKernelInitialize+0x44>)
 80040d4:	2201      	movs	r2, #1
 80040d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80040d8:	2300      	movs	r3, #0
 80040da:	607b      	str	r3, [r7, #4]
 80040dc:	e002      	b.n	80040e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80040de:	f04f 33ff 	mov.w	r3, #4294967295
 80040e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80040e4:	687b      	ldr	r3, [r7, #4]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	20000120 	.word	0x20000120

080040f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040fe:	f3ef 8305 	mrs	r3, IPSR
 8004102:	603b      	str	r3, [r7, #0]
  return(result);
 8004104:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <osKernelStart+0x1a>
    stat = osErrorISR;
 800410a:	f06f 0305 	mvn.w	r3, #5
 800410e:	607b      	str	r3, [r7, #4]
 8004110:	e010      	b.n	8004134 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004112:	4b0b      	ldr	r3, [pc, #44]	@ (8004140 <osKernelStart+0x48>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d109      	bne.n	800412e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800411a:	f7ff ffbf 	bl	800409c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800411e:	4b08      	ldr	r3, [pc, #32]	@ (8004140 <osKernelStart+0x48>)
 8004120:	2202      	movs	r2, #2
 8004122:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004124:	f001 f87a 	bl	800521c <vTaskStartScheduler>
      stat = osOK;
 8004128:	2300      	movs	r3, #0
 800412a:	607b      	str	r3, [r7, #4]
 800412c:	e002      	b.n	8004134 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800412e:	f04f 33ff 	mov.w	r3, #4294967295
 8004132:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004134:	687b      	ldr	r3, [r7, #4]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20000120 	.word	0x20000120

08004144 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004144:	b580      	push	{r7, lr}
 8004146:	b08e      	sub	sp, #56	@ 0x38
 8004148:	af04      	add	r7, sp, #16
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004150:	2300      	movs	r3, #0
 8004152:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004154:	f3ef 8305 	mrs	r3, IPSR
 8004158:	617b      	str	r3, [r7, #20]
  return(result);
 800415a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800415c:	2b00      	cmp	r3, #0
 800415e:	d17e      	bne.n	800425e <osThreadNew+0x11a>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d07b      	beq.n	800425e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004166:	2380      	movs	r3, #128	@ 0x80
 8004168:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800416a:	2318      	movs	r3, #24
 800416c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800416e:	2300      	movs	r3, #0
 8004170:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004172:	f04f 33ff 	mov.w	r3, #4294967295
 8004176:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d045      	beq.n	800420a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <osThreadNew+0x48>
        name = attr->name;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <osThreadNew+0x6e>
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	2b38      	cmp	r3, #56	@ 0x38
 80041a4:	d805      	bhi.n	80041b2 <osThreadNew+0x6e>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <osThreadNew+0x72>
        return (NULL);
 80041b2:	2300      	movs	r3, #0
 80041b4:	e054      	b.n	8004260 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	089b      	lsrs	r3, r3, #2
 80041c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00e      	beq.n	80041ec <osThreadNew+0xa8>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	2b5b      	cmp	r3, #91	@ 0x5b
 80041d4:	d90a      	bls.n	80041ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d006      	beq.n	80041ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <osThreadNew+0xa8>
        mem = 1;
 80041e6:	2301      	movs	r3, #1
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	e010      	b.n	800420e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10c      	bne.n	800420e <osThreadNew+0xca>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d108      	bne.n	800420e <osThreadNew+0xca>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d104      	bne.n	800420e <osThreadNew+0xca>
          mem = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	61bb      	str	r3, [r7, #24]
 8004208:	e001      	b.n	800420e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800420a:	2300      	movs	r3, #0
 800420c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d110      	bne.n	8004236 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800421c:	9202      	str	r2, [sp, #8]
 800421e:	9301      	str	r3, [sp, #4]
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	6a3a      	ldr	r2, [r7, #32]
 8004228:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 fe1a 	bl	8004e64 <xTaskCreateStatic>
 8004230:	4603      	mov	r3, r0
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	e013      	b.n	800425e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d110      	bne.n	800425e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	b29a      	uxth	r2, r3
 8004240:	f107 0310 	add.w	r3, r7, #16
 8004244:	9301      	str	r3, [sp, #4]
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 fe68 	bl	8004f24 <xTaskCreate>
 8004254:	4603      	mov	r3, r0
 8004256:	2b01      	cmp	r3, #1
 8004258:	d001      	beq.n	800425e <osThreadNew+0x11a>
            hTask = NULL;
 800425a:	2300      	movs	r3, #0
 800425c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800425e:	693b      	ldr	r3, [r7, #16]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3728      	adds	r7, #40	@ 0x28
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004270:	f3ef 8305 	mrs	r3, IPSR
 8004274:	60bb      	str	r3, [r7, #8]
  return(result);
 8004276:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <osDelay+0x1c>
    stat = osErrorISR;
 800427c:	f06f 0305 	mvn.w	r3, #5
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	e007      	b.n	8004294 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004284:	2300      	movs	r3, #0
 8004286:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <osDelay+0x2c>
      vTaskDelay(ticks);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 ff8e 	bl	80051b0 <vTaskDelay>
    }
  }

  return (stat);
 8004294:	68fb      	ldr	r3, [r7, #12]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4a07      	ldr	r2, [pc, #28]	@ (80042cc <vApplicationGetIdleTaskMemory+0x2c>)
 80042b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	4a06      	ldr	r2, [pc, #24]	@ (80042d0 <vApplicationGetIdleTaskMemory+0x30>)
 80042b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2280      	movs	r2, #128	@ 0x80
 80042bc:	601a      	str	r2, [r3, #0]
}
 80042be:	bf00      	nop
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	20000124 	.word	0x20000124
 80042d0:	20000180 	.word	0x20000180

080042d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4a07      	ldr	r2, [pc, #28]	@ (8004300 <vApplicationGetTimerTaskMemory+0x2c>)
 80042e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	4a06      	ldr	r2, [pc, #24]	@ (8004304 <vApplicationGetTimerTaskMemory+0x30>)
 80042ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042f2:	601a      	str	r2, [r3, #0]
}
 80042f4:	bf00      	nop
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	20000380 	.word	0x20000380
 8004304:	200003dc 	.word	0x200003dc

08004308 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f103 0208 	add.w	r2, r3, #8
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f04f 32ff 	mov.w	r2, #4294967295
 8004320:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f103 0208 	add.w	r2, r3, #8
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f103 0208 	add.w	r2, r3, #8
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	601a      	str	r2, [r3, #0]
}
 800439e:	bf00      	nop
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043aa:	b480      	push	{r7}
 80043ac:	b085      	sub	sp, #20
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c0:	d103      	bne.n	80043ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e00c      	b.n	80043e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3308      	adds	r3, #8
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	e002      	b.n	80043d8 <vListInsert+0x2e>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d2f6      	bcs.n	80043d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	601a      	str	r2, [r3, #0]
}
 8004410:	bf00      	nop
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6892      	ldr	r2, [r2, #8]
 8004432:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6852      	ldr	r2, [r2, #4]
 800443c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	429a      	cmp	r2, r3
 8004446:	d103      	bne.n	8004450 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	1e5a      	subs	r2, r3, #1
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10b      	bne.n	800449c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004496:	bf00      	nop
 8004498:	bf00      	nop
 800449a:	e7fd      	b.n	8004498 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800449c:	f002 f87c 	bl	8006598 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a8:	68f9      	ldr	r1, [r7, #12]
 80044aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80044ac:	fb01 f303 	mul.w	r3, r1, r3
 80044b0:	441a      	add	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044cc:	3b01      	subs	r3, #1
 80044ce:	68f9      	ldr	r1, [r7, #12]
 80044d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80044d2:	fb01 f303 	mul.w	r3, r1, r3
 80044d6:	441a      	add	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	22ff      	movs	r2, #255	@ 0xff
 80044e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	22ff      	movs	r2, #255	@ 0xff
 80044e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d114      	bne.n	800451c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d01a      	beq.n	8004530 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	3310      	adds	r3, #16
 80044fe:	4618      	mov	r0, r3
 8004500:	f001 f91a 	bl	8005738 <xTaskRemoveFromEventList>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d012      	beq.n	8004530 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800450a:	4b0d      	ldr	r3, [pc, #52]	@ (8004540 <xQueueGenericReset+0xd0>)
 800450c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	e009      	b.n	8004530 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	3310      	adds	r3, #16
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff fef1 	bl	8004308 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3324      	adds	r3, #36	@ 0x24
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff feec 	bl	8004308 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004530:	f002 f864 	bl	80065fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004534:	2301      	movs	r3, #1
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	e000ed04 	.word	0xe000ed04

08004544 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08e      	sub	sp, #56	@ 0x38
 8004548:	af02      	add	r7, sp, #8
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10b      	bne.n	8004570 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800456a:	bf00      	nop
 800456c:	bf00      	nop
 800456e:	e7fd      	b.n	800456c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10b      	bne.n	800458e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004588:	bf00      	nop
 800458a:	bf00      	nop
 800458c:	e7fd      	b.n	800458a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <xQueueGenericCreateStatic+0x56>
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <xQueueGenericCreateStatic+0x5a>
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <xQueueGenericCreateStatic+0x5c>
 800459e:	2300      	movs	r3, #0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10b      	bne.n	80045bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	623b      	str	r3, [r7, #32]
}
 80045b6:	bf00      	nop
 80045b8:	bf00      	nop
 80045ba:	e7fd      	b.n	80045b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d102      	bne.n	80045c8 <xQueueGenericCreateStatic+0x84>
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <xQueueGenericCreateStatic+0x88>
 80045c8:	2301      	movs	r3, #1
 80045ca:	e000      	b.n	80045ce <xQueueGenericCreateStatic+0x8a>
 80045cc:	2300      	movs	r3, #0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10b      	bne.n	80045ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80045d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d6:	f383 8811 	msr	BASEPRI, r3
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	61fb      	str	r3, [r7, #28]
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop
 80045e8:	e7fd      	b.n	80045e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80045ea:	2350      	movs	r3, #80	@ 0x50
 80045ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2b50      	cmp	r3, #80	@ 0x50
 80045f2:	d00b      	beq.n	800460c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80045f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	61bb      	str	r3, [r7, #24]
}
 8004606:	bf00      	nop
 8004608:	bf00      	nop
 800460a:	e7fd      	b.n	8004608 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800460c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00d      	beq.n	8004634 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004620:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	4613      	mov	r3, r2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	68b9      	ldr	r1, [r7, #8]
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 f805 	bl	800463e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004636:	4618      	mov	r0, r3
 8004638:	3730      	adds	r7, #48	@ 0x30
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b084      	sub	sp, #16
 8004642:	af00      	add	r7, sp, #0
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	607a      	str	r2, [r7, #4]
 800464a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	e002      	b.n	8004660 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800466c:	2101      	movs	r1, #1
 800466e:	69b8      	ldr	r0, [r7, #24]
 8004670:	f7ff fefe 	bl	8004470 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	78fa      	ldrb	r2, [r7, #3]
 8004678:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800467c:	bf00      	nop
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08e      	sub	sp, #56	@ 0x38
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004692:	2300      	movs	r3, #0
 8004694:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800469a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10b      	bne.n	80046b8 <xQueueGenericSend+0x34>
	__asm volatile
 80046a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80046b2:	bf00      	nop
 80046b4:	bf00      	nop
 80046b6:	e7fd      	b.n	80046b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d103      	bne.n	80046c6 <xQueueGenericSend+0x42>
 80046be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <xQueueGenericSend+0x46>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <xQueueGenericSend+0x48>
 80046ca:	2300      	movs	r3, #0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10b      	bne.n	80046e8 <xQueueGenericSend+0x64>
	__asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80046e2:	bf00      	nop
 80046e4:	bf00      	nop
 80046e6:	e7fd      	b.n	80046e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d103      	bne.n	80046f6 <xQueueGenericSend+0x72>
 80046ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d101      	bne.n	80046fa <xQueueGenericSend+0x76>
 80046f6:	2301      	movs	r3, #1
 80046f8:	e000      	b.n	80046fc <xQueueGenericSend+0x78>
 80046fa:	2300      	movs	r3, #0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10b      	bne.n	8004718 <xQueueGenericSend+0x94>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	623b      	str	r3, [r7, #32]
}
 8004712:	bf00      	nop
 8004714:	bf00      	nop
 8004716:	e7fd      	b.n	8004714 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004718:	f001 f9ce 	bl	8005ab8 <xTaskGetSchedulerState>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d102      	bne.n	8004728 <xQueueGenericSend+0xa4>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <xQueueGenericSend+0xa8>
 8004728:	2301      	movs	r3, #1
 800472a:	e000      	b.n	800472e <xQueueGenericSend+0xaa>
 800472c:	2300      	movs	r3, #0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10b      	bne.n	800474a <xQueueGenericSend+0xc6>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	61fb      	str	r3, [r7, #28]
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop
 8004748:	e7fd      	b.n	8004746 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800474a:	f001 ff25 	bl	8006598 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800474e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004750:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004756:	429a      	cmp	r2, r3
 8004758:	d302      	bcc.n	8004760 <xQueueGenericSend+0xdc>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b02      	cmp	r3, #2
 800475e:	d129      	bne.n	80047b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004766:	f000 fa0f 	bl	8004b88 <prvCopyDataToQueue>
 800476a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800476c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004770:	2b00      	cmp	r3, #0
 8004772:	d010      	beq.n	8004796 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004776:	3324      	adds	r3, #36	@ 0x24
 8004778:	4618      	mov	r0, r3
 800477a:	f000 ffdd 	bl	8005738 <xTaskRemoveFromEventList>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d013      	beq.n	80047ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004784:	4b3f      	ldr	r3, [pc, #252]	@ (8004884 <xQueueGenericSend+0x200>)
 8004786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	e00a      	b.n	80047ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004798:	2b00      	cmp	r3, #0
 800479a:	d007      	beq.n	80047ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800479c:	4b39      	ldr	r3, [pc, #228]	@ (8004884 <xQueueGenericSend+0x200>)
 800479e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80047ac:	f001 ff26 	bl	80065fc <vPortExitCritical>
				return pdPASS;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e063      	b.n	800487c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d103      	bne.n	80047c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047ba:	f001 ff1f 	bl	80065fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80047be:	2300      	movs	r3, #0
 80047c0:	e05c      	b.n	800487c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d106      	bne.n	80047d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047c8:	f107 0314 	add.w	r3, r7, #20
 80047cc:	4618      	mov	r0, r3
 80047ce:	f001 f817 	bl	8005800 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047d2:	2301      	movs	r3, #1
 80047d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047d6:	f001 ff11 	bl	80065fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047da:	f000 fd87 	bl	80052ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047de:	f001 fedb 	bl	8006598 <vPortEnterCritical>
 80047e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047e8:	b25b      	sxtb	r3, r3
 80047ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ee:	d103      	bne.n	80047f8 <xQueueGenericSend+0x174>
 80047f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047fe:	b25b      	sxtb	r3, r3
 8004800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004804:	d103      	bne.n	800480e <xQueueGenericSend+0x18a>
 8004806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800480e:	f001 fef5 	bl	80065fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004812:	1d3a      	adds	r2, r7, #4
 8004814:	f107 0314 	add.w	r3, r7, #20
 8004818:	4611      	mov	r1, r2
 800481a:	4618      	mov	r0, r3
 800481c:	f001 f806 	bl	800582c <xTaskCheckForTimeOut>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d124      	bne.n	8004870 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004826:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004828:	f000 faa6 	bl	8004d78 <prvIsQueueFull>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d018      	beq.n	8004864 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004834:	3310      	adds	r3, #16
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	4611      	mov	r1, r2
 800483a:	4618      	mov	r0, r3
 800483c:	f000 ff2a 	bl	8005694 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004840:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004842:	f000 fa31 	bl	8004ca8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004846:	f000 fd5f 	bl	8005308 <xTaskResumeAll>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	f47f af7c 	bne.w	800474a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004852:	4b0c      	ldr	r3, [pc, #48]	@ (8004884 <xQueueGenericSend+0x200>)
 8004854:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	e772      	b.n	800474a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004864:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004866:	f000 fa1f 	bl	8004ca8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800486a:	f000 fd4d 	bl	8005308 <xTaskResumeAll>
 800486e:	e76c      	b.n	800474a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004870:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004872:	f000 fa19 	bl	8004ca8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004876:	f000 fd47 	bl	8005308 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800487a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800487c:	4618      	mov	r0, r3
 800487e:	3738      	adds	r7, #56	@ 0x38
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	e000ed04 	.word	0xe000ed04

08004888 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b090      	sub	sp, #64	@ 0x40
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800489a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10b      	bne.n	80048b8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80048b2:	bf00      	nop
 80048b4:	bf00      	nop
 80048b6:	e7fd      	b.n	80048b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d103      	bne.n	80048c6 <xQueueGenericSendFromISR+0x3e>
 80048be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <xQueueGenericSendFromISR+0x42>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <xQueueGenericSendFromISR+0x44>
 80048ca:	2300      	movs	r3, #0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10b      	bne.n	80048e8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80048d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80048e2:	bf00      	nop
 80048e4:	bf00      	nop
 80048e6:	e7fd      	b.n	80048e4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d103      	bne.n	80048f6 <xQueueGenericSendFromISR+0x6e>
 80048ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <xQueueGenericSendFromISR+0x72>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <xQueueGenericSendFromISR+0x74>
 80048fa:	2300      	movs	r3, #0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10b      	bne.n	8004918 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	623b      	str	r3, [r7, #32]
}
 8004912:	bf00      	nop
 8004914:	bf00      	nop
 8004916:	e7fd      	b.n	8004914 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004918:	f001 ff1e 	bl	8006758 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800491c:	f3ef 8211 	mrs	r2, BASEPRI
 8004920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	61fa      	str	r2, [r7, #28]
 8004932:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004934:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004936:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800493c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004940:	429a      	cmp	r2, r3
 8004942:	d302      	bcc.n	800494a <xQueueGenericSendFromISR+0xc2>
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d12f      	bne.n	80049aa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800494a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800494c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004950:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004958:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	68b9      	ldr	r1, [r7, #8]
 800495e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004960:	f000 f912 	bl	8004b88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004964:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496c:	d112      	bne.n	8004994 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800496e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004972:	2b00      	cmp	r3, #0
 8004974:	d016      	beq.n	80049a4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004978:	3324      	adds	r3, #36	@ 0x24
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fedc 	bl	8005738 <xTaskRemoveFromEventList>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00e      	beq.n	80049a4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00b      	beq.n	80049a4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	e007      	b.n	80049a4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004994:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004998:	3301      	adds	r3, #1
 800499a:	b2db      	uxtb	r3, r3
 800499c:	b25a      	sxtb	r2, r3
 800499e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80049a4:	2301      	movs	r3, #1
 80049a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80049a8:	e001      	b.n	80049ae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049b0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3740      	adds	r7, #64	@ 0x40
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b08c      	sub	sp, #48	@ 0x30
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80049d0:	2300      	movs	r3, #0
 80049d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10b      	bne.n	80049f6 <xQueueReceive+0x32>
	__asm volatile
 80049de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	623b      	str	r3, [r7, #32]
}
 80049f0:	bf00      	nop
 80049f2:	bf00      	nop
 80049f4:	e7fd      	b.n	80049f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d103      	bne.n	8004a04 <xQueueReceive+0x40>
 80049fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <xQueueReceive+0x44>
 8004a04:	2301      	movs	r3, #1
 8004a06:	e000      	b.n	8004a0a <xQueueReceive+0x46>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10b      	bne.n	8004a26 <xQueueReceive+0x62>
	__asm volatile
 8004a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	61fb      	str	r3, [r7, #28]
}
 8004a20:	bf00      	nop
 8004a22:	bf00      	nop
 8004a24:	e7fd      	b.n	8004a22 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a26:	f001 f847 	bl	8005ab8 <xTaskGetSchedulerState>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d102      	bne.n	8004a36 <xQueueReceive+0x72>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <xQueueReceive+0x76>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <xQueueReceive+0x78>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10b      	bne.n	8004a58 <xQueueReceive+0x94>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	61bb      	str	r3, [r7, #24]
}
 8004a52:	bf00      	nop
 8004a54:	bf00      	nop
 8004a56:	e7fd      	b.n	8004a54 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a58:	f001 fd9e 	bl	8006598 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a60:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01f      	beq.n	8004aa8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a6c:	f000 f8f6 	bl	8004c5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a72:	1e5a      	subs	r2, r3, #1
 8004a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a76:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00f      	beq.n	8004aa0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a82:	3310      	adds	r3, #16
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fe57 	bl	8005738 <xTaskRemoveFromEventList>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d007      	beq.n	8004aa0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a90:	4b3c      	ldr	r3, [pc, #240]	@ (8004b84 <xQueueReceive+0x1c0>)
 8004a92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004aa0:	f001 fdac 	bl	80065fc <vPortExitCritical>
				return pdPASS;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e069      	b.n	8004b7c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d103      	bne.n	8004ab6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004aae:	f001 fda5 	bl	80065fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	e062      	b.n	8004b7c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d106      	bne.n	8004aca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004abc:	f107 0310 	add.w	r3, r7, #16
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fe9d 	bl	8005800 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004aca:	f001 fd97 	bl	80065fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ace:	f000 fc0d 	bl	80052ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ad2:	f001 fd61 	bl	8006598 <vPortEnterCritical>
 8004ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004adc:	b25b      	sxtb	r3, r3
 8004ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae2:	d103      	bne.n	8004aec <xQueueReceive+0x128>
 8004ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004af2:	b25b      	sxtb	r3, r3
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d103      	bne.n	8004b02 <xQueueReceive+0x13e>
 8004afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b02:	f001 fd7b 	bl	80065fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b06:	1d3a      	adds	r2, r7, #4
 8004b08:	f107 0310 	add.w	r3, r7, #16
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fe8c 	bl	800582c <xTaskCheckForTimeOut>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d123      	bne.n	8004b62 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b1c:	f000 f916 	bl	8004d4c <prvIsQueueEmpty>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d017      	beq.n	8004b56 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b28:	3324      	adds	r3, #36	@ 0x24
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fdb0 	bl	8005694 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b36:	f000 f8b7 	bl	8004ca8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b3a:	f000 fbe5 	bl	8005308 <xTaskResumeAll>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d189      	bne.n	8004a58 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004b44:	4b0f      	ldr	r3, [pc, #60]	@ (8004b84 <xQueueReceive+0x1c0>)
 8004b46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	e780      	b.n	8004a58 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b58:	f000 f8a6 	bl	8004ca8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b5c:	f000 fbd4 	bl	8005308 <xTaskResumeAll>
 8004b60:	e77a      	b.n	8004a58 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b64:	f000 f8a0 	bl	8004ca8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b68:	f000 fbce 	bl	8005308 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b6e:	f000 f8ed 	bl	8004d4c <prvIsQueueEmpty>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f43f af6f 	beq.w	8004a58 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3730      	adds	r7, #48	@ 0x30
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	e000ed04 	.word	0xe000ed04

08004b88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10d      	bne.n	8004bc2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d14d      	bne.n	8004c4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 ff9e 	bl	8005af4 <xTaskPriorityDisinherit>
 8004bb8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	609a      	str	r2, [r3, #8]
 8004bc0:	e043      	b.n	8004c4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d119      	bne.n	8004bfc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6858      	ldr	r0, [r3, #4]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	68b9      	ldr	r1, [r7, #8]
 8004bd4:	f002 f860 	bl	8006c98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be0:	441a      	add	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d32b      	bcc.n	8004c4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	605a      	str	r2, [r3, #4]
 8004bfa:	e026      	b.n	8004c4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	68d8      	ldr	r0, [r3, #12]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c04:	461a      	mov	r2, r3
 8004c06:	68b9      	ldr	r1, [r7, #8]
 8004c08:	f002 f846 	bl	8006c98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c14:	425b      	negs	r3, r3
 8004c16:	441a      	add	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d207      	bcs.n	8004c38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c30:	425b      	negs	r3, r3
 8004c32:	441a      	add	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d105      	bne.n	8004c4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004c52:	697b      	ldr	r3, [r7, #20]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d018      	beq.n	8004ca0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c76:	441a      	add	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d303      	bcc.n	8004c90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68d9      	ldr	r1, [r3, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c98:	461a      	mov	r2, r3
 8004c9a:	6838      	ldr	r0, [r7, #0]
 8004c9c:	f001 fffc 	bl	8006c98 <memcpy>
	}
}
 8004ca0:	bf00      	nop
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004cb0:	f001 fc72 	bl	8006598 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cbc:	e011      	b.n	8004ce2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d012      	beq.n	8004cec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3324      	adds	r3, #36	@ 0x24
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fd34 	bl	8005738 <xTaskRemoveFromEventList>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004cd6:	f000 fe0d 	bl	80058f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	dce9      	bgt.n	8004cbe <prvUnlockQueue+0x16>
 8004cea:	e000      	b.n	8004cee <prvUnlockQueue+0x46>
					break;
 8004cec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	22ff      	movs	r2, #255	@ 0xff
 8004cf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004cf6:	f001 fc81 	bl	80065fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004cfa:	f001 fc4d 	bl	8006598 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d06:	e011      	b.n	8004d2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d012      	beq.n	8004d36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3310      	adds	r3, #16
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 fd0f 	bl	8005738 <xTaskRemoveFromEventList>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d20:	f000 fde8 	bl	80058f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d24:	7bbb      	ldrb	r3, [r7, #14]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	dce9      	bgt.n	8004d08 <prvUnlockQueue+0x60>
 8004d34:	e000      	b.n	8004d38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	22ff      	movs	r2, #255	@ 0xff
 8004d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004d40:	f001 fc5c 	bl	80065fc <vPortExitCritical>
}
 8004d44:	bf00      	nop
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d54:	f001 fc20 	bl	8006598 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d102      	bne.n	8004d66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d60:	2301      	movs	r3, #1
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	e001      	b.n	8004d6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d6a:	f001 fc47 	bl	80065fc <vPortExitCritical>

	return xReturn;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d80:	f001 fc0a 	bl	8006598 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d102      	bne.n	8004d96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d90:	2301      	movs	r3, #1
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	e001      	b.n	8004d9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d9a:	f001 fc2f 	bl	80065fc <vPortExitCritical>

	return xReturn;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004db2:	2300      	movs	r3, #0
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	e014      	b.n	8004de2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004db8:	4a0f      	ldr	r2, [pc, #60]	@ (8004df8 <vQueueAddToRegistry+0x50>)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10b      	bne.n	8004ddc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004dc4:	490c      	ldr	r1, [pc, #48]	@ (8004df8 <vQueueAddToRegistry+0x50>)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004dce:	4a0a      	ldr	r2, [pc, #40]	@ (8004df8 <vQueueAddToRegistry+0x50>)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	4413      	add	r3, r2
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004dda:	e006      	b.n	8004dea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3301      	adds	r3, #1
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b07      	cmp	r3, #7
 8004de6:	d9e7      	bls.n	8004db8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004de8:	bf00      	nop
 8004dea:	bf00      	nop
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	200007dc 	.word	0x200007dc

08004dfc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e0c:	f001 fbc4 	bl	8006598 <vPortEnterCritical>
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e16:	b25b      	sxtb	r3, r3
 8004e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1c:	d103      	bne.n	8004e26 <vQueueWaitForMessageRestricted+0x2a>
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e2c:	b25b      	sxtb	r3, r3
 8004e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e32:	d103      	bne.n	8004e3c <vQueueWaitForMessageRestricted+0x40>
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e3c:	f001 fbde 	bl	80065fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d106      	bne.n	8004e56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	3324      	adds	r3, #36	@ 0x24
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	68b9      	ldr	r1, [r7, #8]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 fc45 	bl	80056e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e56:	6978      	ldr	r0, [r7, #20]
 8004e58:	f7ff ff26 	bl	8004ca8 <prvUnlockQueue>
	}
 8004e5c:	bf00      	nop
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08e      	sub	sp, #56	@ 0x38
 8004e68:	af04      	add	r7, sp, #16
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10b      	bne.n	8004e90 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e7c:	f383 8811 	msr	BASEPRI, r3
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	623b      	str	r3, [r7, #32]
}
 8004e8a:	bf00      	nop
 8004e8c:	bf00      	nop
 8004e8e:	e7fd      	b.n	8004e8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10b      	bne.n	8004eae <xTaskCreateStatic+0x4a>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	61fb      	str	r3, [r7, #28]
}
 8004ea8:	bf00      	nop
 8004eaa:	bf00      	nop
 8004eac:	e7fd      	b.n	8004eaa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004eae:	235c      	movs	r3, #92	@ 0x5c
 8004eb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	2b5c      	cmp	r3, #92	@ 0x5c
 8004eb6:	d00b      	beq.n	8004ed0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	61bb      	str	r3, [r7, #24]
}
 8004eca:	bf00      	nop
 8004ecc:	bf00      	nop
 8004ece:	e7fd      	b.n	8004ecc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ed0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d01e      	beq.n	8004f16 <xTaskCreateStatic+0xb2>
 8004ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d01b      	beq.n	8004f16 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ee6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	9303      	str	r3, [sp, #12]
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef6:	9302      	str	r3, [sp, #8]
 8004ef8:	f107 0314 	add.w	r3, r7, #20
 8004efc:	9301      	str	r3, [sp, #4]
 8004efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 f850 	bl	8004fae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f10:	f000 f8de 	bl	80050d0 <prvAddNewTaskToReadyList>
 8004f14:	e001      	b.n	8004f1a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f1a:	697b      	ldr	r3, [r7, #20]
	}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3728      	adds	r7, #40	@ 0x28
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08c      	sub	sp, #48	@ 0x30
 8004f28:	af04      	add	r7, sp, #16
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	603b      	str	r3, [r7, #0]
 8004f30:	4613      	mov	r3, r2
 8004f32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f34:	88fb      	ldrh	r3, [r7, #6]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f001 fc4f 	bl	80067dc <pvPortMalloc>
 8004f3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00e      	beq.n	8004f64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f46:	205c      	movs	r0, #92	@ 0x5c
 8004f48:	f001 fc48 	bl	80067dc <pvPortMalloc>
 8004f4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f5a:	e005      	b.n	8004f68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f5c:	6978      	ldr	r0, [r7, #20]
 8004f5e:	f001 fd0b 	bl	8006978 <vPortFree>
 8004f62:	e001      	b.n	8004f68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d017      	beq.n	8004f9e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f76:	88fa      	ldrh	r2, [r7, #6]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	9303      	str	r3, [sp, #12]
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	9302      	str	r3, [sp, #8]
 8004f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f82:	9301      	str	r3, [sp, #4]
 8004f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68b9      	ldr	r1, [r7, #8]
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 f80e 	bl	8004fae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f92:	69f8      	ldr	r0, [r7, #28]
 8004f94:	f000 f89c 	bl	80050d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	61bb      	str	r3, [r7, #24]
 8004f9c:	e002      	b.n	8004fa4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004fa4:	69bb      	ldr	r3, [r7, #24]
	}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3720      	adds	r7, #32
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b088      	sub	sp, #32
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	607a      	str	r2, [r7, #4]
 8004fba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	21a5      	movs	r1, #165	@ 0xa5
 8004fc8:	f001 fe32 	bl	8006c30 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	f023 0307 	bic.w	r3, r3, #7
 8004fe4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00b      	beq.n	8005008 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	617b      	str	r3, [r7, #20]
}
 8005002:	bf00      	nop
 8005004:	bf00      	nop
 8005006:	e7fd      	b.n	8005004 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d01f      	beq.n	800504e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800500e:	2300      	movs	r3, #0
 8005010:	61fb      	str	r3, [r7, #28]
 8005012:	e012      	b.n	800503a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	4413      	add	r3, r2
 800501a:	7819      	ldrb	r1, [r3, #0]
 800501c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	3334      	adds	r3, #52	@ 0x34
 8005024:	460a      	mov	r2, r1
 8005026:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	4413      	add	r3, r2
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d006      	beq.n	8005042 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	3301      	adds	r3, #1
 8005038:	61fb      	str	r3, [r7, #28]
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	2b0f      	cmp	r3, #15
 800503e:	d9e9      	bls.n	8005014 <prvInitialiseNewTask+0x66>
 8005040:	e000      	b.n	8005044 <prvInitialiseNewTask+0x96>
			{
				break;
 8005042:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800504c:	e003      	b.n	8005056 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800504e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005058:	2b37      	cmp	r3, #55	@ 0x37
 800505a:	d901      	bls.n	8005060 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800505c:	2337      	movs	r3, #55	@ 0x37
 800505e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005062:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005064:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005068:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800506a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800506c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506e:	2200      	movs	r2, #0
 8005070:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005074:	3304      	adds	r3, #4
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff f966 	bl	8004348 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800507c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507e:	3318      	adds	r3, #24
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff f961 	bl	8004348 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800508a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800508c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005094:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800509a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800509c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509e:	2200      	movs	r2, #0
 80050a0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	68f9      	ldr	r1, [r7, #12]
 80050ae:	69b8      	ldr	r0, [r7, #24]
 80050b0:	f001 f93e 	bl	8006330 <pxPortInitialiseStack>
 80050b4:	4602      	mov	r2, r0
 80050b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80050ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050c6:	bf00      	nop
 80050c8:	3720      	adds	r7, #32
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050d8:	f001 fa5e 	bl	8006598 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050dc:	4b2d      	ldr	r3, [pc, #180]	@ (8005194 <prvAddNewTaskToReadyList+0xc4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3301      	adds	r3, #1
 80050e2:	4a2c      	ldr	r2, [pc, #176]	@ (8005194 <prvAddNewTaskToReadyList+0xc4>)
 80050e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050e6:	4b2c      	ldr	r3, [pc, #176]	@ (8005198 <prvAddNewTaskToReadyList+0xc8>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d109      	bne.n	8005102 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050ee:	4a2a      	ldr	r2, [pc, #168]	@ (8005198 <prvAddNewTaskToReadyList+0xc8>)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050f4:	4b27      	ldr	r3, [pc, #156]	@ (8005194 <prvAddNewTaskToReadyList+0xc4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d110      	bne.n	800511e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050fc:	f000 fc1e 	bl	800593c <prvInitialiseTaskLists>
 8005100:	e00d      	b.n	800511e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005102:	4b26      	ldr	r3, [pc, #152]	@ (800519c <prvAddNewTaskToReadyList+0xcc>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d109      	bne.n	800511e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800510a:	4b23      	ldr	r3, [pc, #140]	@ (8005198 <prvAddNewTaskToReadyList+0xc8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005114:	429a      	cmp	r2, r3
 8005116:	d802      	bhi.n	800511e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005118:	4a1f      	ldr	r2, [pc, #124]	@ (8005198 <prvAddNewTaskToReadyList+0xc8>)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800511e:	4b20      	ldr	r3, [pc, #128]	@ (80051a0 <prvAddNewTaskToReadyList+0xd0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3301      	adds	r3, #1
 8005124:	4a1e      	ldr	r2, [pc, #120]	@ (80051a0 <prvAddNewTaskToReadyList+0xd0>)
 8005126:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005128:	4b1d      	ldr	r3, [pc, #116]	@ (80051a0 <prvAddNewTaskToReadyList+0xd0>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005134:	4b1b      	ldr	r3, [pc, #108]	@ (80051a4 <prvAddNewTaskToReadyList+0xd4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	429a      	cmp	r2, r3
 800513a:	d903      	bls.n	8005144 <prvAddNewTaskToReadyList+0x74>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005140:	4a18      	ldr	r2, [pc, #96]	@ (80051a4 <prvAddNewTaskToReadyList+0xd4>)
 8005142:	6013      	str	r3, [r2, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005148:	4613      	mov	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4a15      	ldr	r2, [pc, #84]	@ (80051a8 <prvAddNewTaskToReadyList+0xd8>)
 8005152:	441a      	add	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3304      	adds	r3, #4
 8005158:	4619      	mov	r1, r3
 800515a:	4610      	mov	r0, r2
 800515c:	f7ff f901 	bl	8004362 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005160:	f001 fa4c 	bl	80065fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005164:	4b0d      	ldr	r3, [pc, #52]	@ (800519c <prvAddNewTaskToReadyList+0xcc>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00e      	beq.n	800518a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800516c:	4b0a      	ldr	r3, [pc, #40]	@ (8005198 <prvAddNewTaskToReadyList+0xc8>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005176:	429a      	cmp	r2, r3
 8005178:	d207      	bcs.n	800518a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800517a:	4b0c      	ldr	r3, [pc, #48]	@ (80051ac <prvAddNewTaskToReadyList+0xdc>)
 800517c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000cf0 	.word	0x20000cf0
 8005198:	2000081c 	.word	0x2000081c
 800519c:	20000cfc 	.word	0x20000cfc
 80051a0:	20000d0c 	.word	0x20000d0c
 80051a4:	20000cf8 	.word	0x20000cf8
 80051a8:	20000820 	.word	0x20000820
 80051ac:	e000ed04 	.word	0xe000ed04

080051b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051b8:	2300      	movs	r3, #0
 80051ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d018      	beq.n	80051f4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80051c2:	4b14      	ldr	r3, [pc, #80]	@ (8005214 <vTaskDelay+0x64>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00b      	beq.n	80051e2 <vTaskDelay+0x32>
	__asm volatile
 80051ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	60bb      	str	r3, [r7, #8]
}
 80051dc:	bf00      	nop
 80051de:	bf00      	nop
 80051e0:	e7fd      	b.n	80051de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80051e2:	f000 f883 	bl	80052ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051e6:	2100      	movs	r1, #0
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fcf3 	bl	8005bd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80051ee:	f000 f88b 	bl	8005308 <xTaskResumeAll>
 80051f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d107      	bne.n	800520a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80051fa:	4b07      	ldr	r3, [pc, #28]	@ (8005218 <vTaskDelay+0x68>)
 80051fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800520a:	bf00      	nop
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20000d18 	.word	0x20000d18
 8005218:	e000ed04 	.word	0xe000ed04

0800521c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08a      	sub	sp, #40	@ 0x28
 8005220:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005222:	2300      	movs	r3, #0
 8005224:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005226:	2300      	movs	r3, #0
 8005228:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800522a:	463a      	mov	r2, r7
 800522c:	1d39      	adds	r1, r7, #4
 800522e:	f107 0308 	add.w	r3, r7, #8
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff f834 	bl	80042a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005238:	6839      	ldr	r1, [r7, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	9202      	str	r2, [sp, #8]
 8005240:	9301      	str	r3, [sp, #4]
 8005242:	2300      	movs	r3, #0
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	2300      	movs	r3, #0
 8005248:	460a      	mov	r2, r1
 800524a:	4922      	ldr	r1, [pc, #136]	@ (80052d4 <vTaskStartScheduler+0xb8>)
 800524c:	4822      	ldr	r0, [pc, #136]	@ (80052d8 <vTaskStartScheduler+0xbc>)
 800524e:	f7ff fe09 	bl	8004e64 <xTaskCreateStatic>
 8005252:	4603      	mov	r3, r0
 8005254:	4a21      	ldr	r2, [pc, #132]	@ (80052dc <vTaskStartScheduler+0xc0>)
 8005256:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005258:	4b20      	ldr	r3, [pc, #128]	@ (80052dc <vTaskStartScheduler+0xc0>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d002      	beq.n	8005266 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005260:	2301      	movs	r3, #1
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	e001      	b.n	800526a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005266:	2300      	movs	r3, #0
 8005268:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d102      	bne.n	8005276 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005270:	f000 fd04 	bl	8005c7c <xTimerCreateTimerTask>
 8005274:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d116      	bne.n	80052aa <vTaskStartScheduler+0x8e>
	__asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	613b      	str	r3, [r7, #16]
}
 800528e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005290:	4b13      	ldr	r3, [pc, #76]	@ (80052e0 <vTaskStartScheduler+0xc4>)
 8005292:	f04f 32ff 	mov.w	r2, #4294967295
 8005296:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005298:	4b12      	ldr	r3, [pc, #72]	@ (80052e4 <vTaskStartScheduler+0xc8>)
 800529a:	2201      	movs	r2, #1
 800529c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800529e:	4b12      	ldr	r3, [pc, #72]	@ (80052e8 <vTaskStartScheduler+0xcc>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80052a4:	f001 f8d4 	bl	8006450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80052a8:	e00f      	b.n	80052ca <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b0:	d10b      	bne.n	80052ca <vTaskStartScheduler+0xae>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	60fb      	str	r3, [r7, #12]
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	e7fd      	b.n	80052c6 <vTaskStartScheduler+0xaa>
}
 80052ca:	bf00      	nop
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	08007590 	.word	0x08007590
 80052d8:	0800590d 	.word	0x0800590d
 80052dc:	20000d14 	.word	0x20000d14
 80052e0:	20000d10 	.word	0x20000d10
 80052e4:	20000cfc 	.word	0x20000cfc
 80052e8:	20000cf4 	.word	0x20000cf4

080052ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80052f0:	4b04      	ldr	r3, [pc, #16]	@ (8005304 <vTaskSuspendAll+0x18>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3301      	adds	r3, #1
 80052f6:	4a03      	ldr	r2, [pc, #12]	@ (8005304 <vTaskSuspendAll+0x18>)
 80052f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80052fa:	bf00      	nop
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	20000d18 	.word	0x20000d18

08005308 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005312:	2300      	movs	r3, #0
 8005314:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005316:	4b42      	ldr	r3, [pc, #264]	@ (8005420 <xTaskResumeAll+0x118>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10b      	bne.n	8005336 <xTaskResumeAll+0x2e>
	__asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	603b      	str	r3, [r7, #0]
}
 8005330:	bf00      	nop
 8005332:	bf00      	nop
 8005334:	e7fd      	b.n	8005332 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005336:	f001 f92f 	bl	8006598 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800533a:	4b39      	ldr	r3, [pc, #228]	@ (8005420 <xTaskResumeAll+0x118>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3b01      	subs	r3, #1
 8005340:	4a37      	ldr	r2, [pc, #220]	@ (8005420 <xTaskResumeAll+0x118>)
 8005342:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005344:	4b36      	ldr	r3, [pc, #216]	@ (8005420 <xTaskResumeAll+0x118>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d162      	bne.n	8005412 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800534c:	4b35      	ldr	r3, [pc, #212]	@ (8005424 <xTaskResumeAll+0x11c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d05e      	beq.n	8005412 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005354:	e02f      	b.n	80053b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005356:	4b34      	ldr	r3, [pc, #208]	@ (8005428 <xTaskResumeAll+0x120>)
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3318      	adds	r3, #24
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff f85a 	bl	800441c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3304      	adds	r3, #4
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff f855 	bl	800441c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005376:	4b2d      	ldr	r3, [pc, #180]	@ (800542c <xTaskResumeAll+0x124>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d903      	bls.n	8005386 <xTaskResumeAll+0x7e>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005382:	4a2a      	ldr	r2, [pc, #168]	@ (800542c <xTaskResumeAll+0x124>)
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4a27      	ldr	r2, [pc, #156]	@ (8005430 <xTaskResumeAll+0x128>)
 8005394:	441a      	add	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	3304      	adds	r3, #4
 800539a:	4619      	mov	r1, r3
 800539c:	4610      	mov	r0, r2
 800539e:	f7fe ffe0 	bl	8004362 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053a6:	4b23      	ldr	r3, [pc, #140]	@ (8005434 <xTaskResumeAll+0x12c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d302      	bcc.n	80053b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80053b0:	4b21      	ldr	r3, [pc, #132]	@ (8005438 <xTaskResumeAll+0x130>)
 80053b2:	2201      	movs	r2, #1
 80053b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053b6:	4b1c      	ldr	r3, [pc, #112]	@ (8005428 <xTaskResumeAll+0x120>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1cb      	bne.n	8005356 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053c4:	f000 fb58 	bl	8005a78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80053c8:	4b1c      	ldr	r3, [pc, #112]	@ (800543c <xTaskResumeAll+0x134>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d010      	beq.n	80053f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053d4:	f000 f846 	bl	8005464 <xTaskIncrementTick>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d002      	beq.n	80053e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80053de:	4b16      	ldr	r3, [pc, #88]	@ (8005438 <xTaskResumeAll+0x130>)
 80053e0:	2201      	movs	r2, #1
 80053e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3b01      	subs	r3, #1
 80053e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1f1      	bne.n	80053d4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80053f0:	4b12      	ldr	r3, [pc, #72]	@ (800543c <xTaskResumeAll+0x134>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053f6:	4b10      	ldr	r3, [pc, #64]	@ (8005438 <xTaskResumeAll+0x130>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d009      	beq.n	8005412 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80053fe:	2301      	movs	r3, #1
 8005400:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005402:	4b0f      	ldr	r3, [pc, #60]	@ (8005440 <xTaskResumeAll+0x138>)
 8005404:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005412:	f001 f8f3 	bl	80065fc <vPortExitCritical>

	return xAlreadyYielded;
 8005416:	68bb      	ldr	r3, [r7, #8]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	20000d18 	.word	0x20000d18
 8005424:	20000cf0 	.word	0x20000cf0
 8005428:	20000cb0 	.word	0x20000cb0
 800542c:	20000cf8 	.word	0x20000cf8
 8005430:	20000820 	.word	0x20000820
 8005434:	2000081c 	.word	0x2000081c
 8005438:	20000d04 	.word	0x20000d04
 800543c:	20000d00 	.word	0x20000d00
 8005440:	e000ed04 	.word	0xe000ed04

08005444 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800544a:	4b05      	ldr	r3, [pc, #20]	@ (8005460 <xTaskGetTickCount+0x1c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005450:	687b      	ldr	r3, [r7, #4]
}
 8005452:	4618      	mov	r0, r3
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	20000cf4 	.word	0x20000cf4

08005464 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800546a:	2300      	movs	r3, #0
 800546c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800546e:	4b4f      	ldr	r3, [pc, #316]	@ (80055ac <xTaskIncrementTick+0x148>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	f040 8090 	bne.w	8005598 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005478:	4b4d      	ldr	r3, [pc, #308]	@ (80055b0 <xTaskIncrementTick+0x14c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3301      	adds	r3, #1
 800547e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005480:	4a4b      	ldr	r2, [pc, #300]	@ (80055b0 <xTaskIncrementTick+0x14c>)
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d121      	bne.n	80054d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800548c:	4b49      	ldr	r3, [pc, #292]	@ (80055b4 <xTaskIncrementTick+0x150>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00b      	beq.n	80054ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8005496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	603b      	str	r3, [r7, #0]
}
 80054a8:	bf00      	nop
 80054aa:	bf00      	nop
 80054ac:	e7fd      	b.n	80054aa <xTaskIncrementTick+0x46>
 80054ae:	4b41      	ldr	r3, [pc, #260]	@ (80055b4 <xTaskIncrementTick+0x150>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	4b40      	ldr	r3, [pc, #256]	@ (80055b8 <xTaskIncrementTick+0x154>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a3e      	ldr	r2, [pc, #248]	@ (80055b4 <xTaskIncrementTick+0x150>)
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	4a3e      	ldr	r2, [pc, #248]	@ (80055b8 <xTaskIncrementTick+0x154>)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	4b3e      	ldr	r3, [pc, #248]	@ (80055bc <xTaskIncrementTick+0x158>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3301      	adds	r3, #1
 80054c8:	4a3c      	ldr	r2, [pc, #240]	@ (80055bc <xTaskIncrementTick+0x158>)
 80054ca:	6013      	str	r3, [r2, #0]
 80054cc:	f000 fad4 	bl	8005a78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80054d0:	4b3b      	ldr	r3, [pc, #236]	@ (80055c0 <xTaskIncrementTick+0x15c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d349      	bcc.n	800556e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054da:	4b36      	ldr	r3, [pc, #216]	@ (80055b4 <xTaskIncrementTick+0x150>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d104      	bne.n	80054ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054e4:	4b36      	ldr	r3, [pc, #216]	@ (80055c0 <xTaskIncrementTick+0x15c>)
 80054e6:	f04f 32ff 	mov.w	r2, #4294967295
 80054ea:	601a      	str	r2, [r3, #0]
					break;
 80054ec:	e03f      	b.n	800556e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054ee:	4b31      	ldr	r3, [pc, #196]	@ (80055b4 <xTaskIncrementTick+0x150>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	429a      	cmp	r2, r3
 8005504:	d203      	bcs.n	800550e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005506:	4a2e      	ldr	r2, [pc, #184]	@ (80055c0 <xTaskIncrementTick+0x15c>)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800550c:	e02f      	b.n	800556e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	3304      	adds	r3, #4
 8005512:	4618      	mov	r0, r3
 8005514:	f7fe ff82 	bl	800441c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551c:	2b00      	cmp	r3, #0
 800551e:	d004      	beq.n	800552a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	3318      	adds	r3, #24
 8005524:	4618      	mov	r0, r3
 8005526:	f7fe ff79 	bl	800441c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800552e:	4b25      	ldr	r3, [pc, #148]	@ (80055c4 <xTaskIncrementTick+0x160>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d903      	bls.n	800553e <xTaskIncrementTick+0xda>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553a:	4a22      	ldr	r2, [pc, #136]	@ (80055c4 <xTaskIncrementTick+0x160>)
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005542:	4613      	mov	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4a1f      	ldr	r2, [pc, #124]	@ (80055c8 <xTaskIncrementTick+0x164>)
 800554c:	441a      	add	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	3304      	adds	r3, #4
 8005552:	4619      	mov	r1, r3
 8005554:	4610      	mov	r0, r2
 8005556:	f7fe ff04 	bl	8004362 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800555e:	4b1b      	ldr	r3, [pc, #108]	@ (80055cc <xTaskIncrementTick+0x168>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005564:	429a      	cmp	r2, r3
 8005566:	d3b8      	bcc.n	80054da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005568:	2301      	movs	r3, #1
 800556a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800556c:	e7b5      	b.n	80054da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800556e:	4b17      	ldr	r3, [pc, #92]	@ (80055cc <xTaskIncrementTick+0x168>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005574:	4914      	ldr	r1, [pc, #80]	@ (80055c8 <xTaskIncrementTick+0x164>)
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	440b      	add	r3, r1
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d901      	bls.n	800558a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005586:	2301      	movs	r3, #1
 8005588:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800558a:	4b11      	ldr	r3, [pc, #68]	@ (80055d0 <xTaskIncrementTick+0x16c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d007      	beq.n	80055a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005592:	2301      	movs	r3, #1
 8005594:	617b      	str	r3, [r7, #20]
 8005596:	e004      	b.n	80055a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005598:	4b0e      	ldr	r3, [pc, #56]	@ (80055d4 <xTaskIncrementTick+0x170>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3301      	adds	r3, #1
 800559e:	4a0d      	ldr	r2, [pc, #52]	@ (80055d4 <xTaskIncrementTick+0x170>)
 80055a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80055a2:	697b      	ldr	r3, [r7, #20]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20000d18 	.word	0x20000d18
 80055b0:	20000cf4 	.word	0x20000cf4
 80055b4:	20000ca8 	.word	0x20000ca8
 80055b8:	20000cac 	.word	0x20000cac
 80055bc:	20000d08 	.word	0x20000d08
 80055c0:	20000d10 	.word	0x20000d10
 80055c4:	20000cf8 	.word	0x20000cf8
 80055c8:	20000820 	.word	0x20000820
 80055cc:	2000081c 	.word	0x2000081c
 80055d0:	20000d04 	.word	0x20000d04
 80055d4:	20000d00 	.word	0x20000d00

080055d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055de:	4b28      	ldr	r3, [pc, #160]	@ (8005680 <vTaskSwitchContext+0xa8>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055e6:	4b27      	ldr	r3, [pc, #156]	@ (8005684 <vTaskSwitchContext+0xac>)
 80055e8:	2201      	movs	r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055ec:	e042      	b.n	8005674 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80055ee:	4b25      	ldr	r3, [pc, #148]	@ (8005684 <vTaskSwitchContext+0xac>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055f4:	4b24      	ldr	r3, [pc, #144]	@ (8005688 <vTaskSwitchContext+0xb0>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	e011      	b.n	8005620 <vTaskSwitchContext+0x48>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10b      	bne.n	800561a <vTaskSwitchContext+0x42>
	__asm volatile
 8005602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	607b      	str	r3, [r7, #4]
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop
 8005618:	e7fd      	b.n	8005616 <vTaskSwitchContext+0x3e>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3b01      	subs	r3, #1
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	491a      	ldr	r1, [pc, #104]	@ (800568c <vTaskSwitchContext+0xb4>)
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0e3      	beq.n	80055fc <vTaskSwitchContext+0x24>
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4a13      	ldr	r2, [pc, #76]	@ (800568c <vTaskSwitchContext+0xb4>)
 8005640:	4413      	add	r3, r2
 8005642:	60bb      	str	r3, [r7, #8]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	605a      	str	r2, [r3, #4]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	3308      	adds	r3, #8
 8005656:	429a      	cmp	r2, r3
 8005658:	d104      	bne.n	8005664 <vTaskSwitchContext+0x8c>
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	605a      	str	r2, [r3, #4]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	4a09      	ldr	r2, [pc, #36]	@ (8005690 <vTaskSwitchContext+0xb8>)
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	4a06      	ldr	r2, [pc, #24]	@ (8005688 <vTaskSwitchContext+0xb0>)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6013      	str	r3, [r2, #0]
}
 8005674:	bf00      	nop
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	20000d18 	.word	0x20000d18
 8005684:	20000d04 	.word	0x20000d04
 8005688:	20000cf8 	.word	0x20000cf8
 800568c:	20000820 	.word	0x20000820
 8005690:	2000081c 	.word	0x2000081c

08005694 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10b      	bne.n	80056bc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80056a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	60fb      	str	r3, [r7, #12]
}
 80056b6:	bf00      	nop
 80056b8:	bf00      	nop
 80056ba:	e7fd      	b.n	80056b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056bc:	4b07      	ldr	r3, [pc, #28]	@ (80056dc <vTaskPlaceOnEventList+0x48>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3318      	adds	r3, #24
 80056c2:	4619      	mov	r1, r3
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7fe fe70 	bl	80043aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80056ca:	2101      	movs	r1, #1
 80056cc:	6838      	ldr	r0, [r7, #0]
 80056ce:	f000 fa81 	bl	8005bd4 <prvAddCurrentTaskToDelayedList>
}
 80056d2:	bf00      	nop
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	2000081c 	.word	0x2000081c

080056e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10b      	bne.n	800570a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80056f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	617b      	str	r3, [r7, #20]
}
 8005704:	bf00      	nop
 8005706:	bf00      	nop
 8005708:	e7fd      	b.n	8005706 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800570a:	4b0a      	ldr	r3, [pc, #40]	@ (8005734 <vTaskPlaceOnEventListRestricted+0x54>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	3318      	adds	r3, #24
 8005710:	4619      	mov	r1, r3
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f7fe fe25 	bl	8004362 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800571e:	f04f 33ff 	mov.w	r3, #4294967295
 8005722:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	68b8      	ldr	r0, [r7, #8]
 8005728:	f000 fa54 	bl	8005bd4 <prvAddCurrentTaskToDelayedList>
	}
 800572c:	bf00      	nop
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	2000081c 	.word	0x2000081c

08005738 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10b      	bne.n	8005766 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	60fb      	str	r3, [r7, #12]
}
 8005760:	bf00      	nop
 8005762:	bf00      	nop
 8005764:	e7fd      	b.n	8005762 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	3318      	adds	r3, #24
 800576a:	4618      	mov	r0, r3
 800576c:	f7fe fe56 	bl	800441c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005770:	4b1d      	ldr	r3, [pc, #116]	@ (80057e8 <xTaskRemoveFromEventList+0xb0>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d11d      	bne.n	80057b4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	3304      	adds	r3, #4
 800577c:	4618      	mov	r0, r3
 800577e:	f7fe fe4d 	bl	800441c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005786:	4b19      	ldr	r3, [pc, #100]	@ (80057ec <xTaskRemoveFromEventList+0xb4>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d903      	bls.n	8005796 <xTaskRemoveFromEventList+0x5e>
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005792:	4a16      	ldr	r2, [pc, #88]	@ (80057ec <xTaskRemoveFromEventList+0xb4>)
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800579a:	4613      	mov	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4a13      	ldr	r2, [pc, #76]	@ (80057f0 <xTaskRemoveFromEventList+0xb8>)
 80057a4:	441a      	add	r2, r3
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	3304      	adds	r3, #4
 80057aa:	4619      	mov	r1, r3
 80057ac:	4610      	mov	r0, r2
 80057ae:	f7fe fdd8 	bl	8004362 <vListInsertEnd>
 80057b2:	e005      	b.n	80057c0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	3318      	adds	r3, #24
 80057b8:	4619      	mov	r1, r3
 80057ba:	480e      	ldr	r0, [pc, #56]	@ (80057f4 <xTaskRemoveFromEventList+0xbc>)
 80057bc:	f7fe fdd1 	bl	8004362 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057c4:	4b0c      	ldr	r3, [pc, #48]	@ (80057f8 <xTaskRemoveFromEventList+0xc0>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d905      	bls.n	80057da <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80057ce:	2301      	movs	r3, #1
 80057d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80057d2:	4b0a      	ldr	r3, [pc, #40]	@ (80057fc <xTaskRemoveFromEventList+0xc4>)
 80057d4:	2201      	movs	r2, #1
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	e001      	b.n	80057de <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80057da:	2300      	movs	r3, #0
 80057dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80057de:	697b      	ldr	r3, [r7, #20]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	20000d18 	.word	0x20000d18
 80057ec:	20000cf8 	.word	0x20000cf8
 80057f0:	20000820 	.word	0x20000820
 80057f4:	20000cb0 	.word	0x20000cb0
 80057f8:	2000081c 	.word	0x2000081c
 80057fc:	20000d04 	.word	0x20000d04

08005800 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005808:	4b06      	ldr	r3, [pc, #24]	@ (8005824 <vTaskInternalSetTimeOutState+0x24>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005810:	4b05      	ldr	r3, [pc, #20]	@ (8005828 <vTaskInternalSetTimeOutState+0x28>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	605a      	str	r2, [r3, #4]
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	20000d08 	.word	0x20000d08
 8005828:	20000cf4 	.word	0x20000cf4

0800582c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10b      	bne.n	8005854 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800583c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	613b      	str	r3, [r7, #16]
}
 800584e:	bf00      	nop
 8005850:	bf00      	nop
 8005852:	e7fd      	b.n	8005850 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10b      	bne.n	8005872 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800585a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	60fb      	str	r3, [r7, #12]
}
 800586c:	bf00      	nop
 800586e:	bf00      	nop
 8005870:	e7fd      	b.n	800586e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005872:	f000 fe91 	bl	8006598 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005876:	4b1d      	ldr	r3, [pc, #116]	@ (80058ec <xTaskCheckForTimeOut+0xc0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588e:	d102      	bne.n	8005896 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005890:	2300      	movs	r3, #0
 8005892:	61fb      	str	r3, [r7, #28]
 8005894:	e023      	b.n	80058de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	4b15      	ldr	r3, [pc, #84]	@ (80058f0 <xTaskCheckForTimeOut+0xc4>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d007      	beq.n	80058b2 <xTaskCheckForTimeOut+0x86>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d302      	bcc.n	80058b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80058ac:	2301      	movs	r3, #1
 80058ae:	61fb      	str	r3, [r7, #28]
 80058b0:	e015      	b.n	80058de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d20b      	bcs.n	80058d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	1ad2      	subs	r2, r2, r3
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff ff99 	bl	8005800 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80058ce:	2300      	movs	r3, #0
 80058d0:	61fb      	str	r3, [r7, #28]
 80058d2:	e004      	b.n	80058de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80058da:	2301      	movs	r3, #1
 80058dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80058de:	f000 fe8d 	bl	80065fc <vPortExitCritical>

	return xReturn;
 80058e2:	69fb      	ldr	r3, [r7, #28]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3720      	adds	r7, #32
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	20000cf4 	.word	0x20000cf4
 80058f0:	20000d08 	.word	0x20000d08

080058f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80058f4:	b480      	push	{r7}
 80058f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80058f8:	4b03      	ldr	r3, [pc, #12]	@ (8005908 <vTaskMissedYield+0x14>)
 80058fa:	2201      	movs	r2, #1
 80058fc:	601a      	str	r2, [r3, #0]
}
 80058fe:	bf00      	nop
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	20000d04 	.word	0x20000d04

0800590c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005914:	f000 f852 	bl	80059bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005918:	4b06      	ldr	r3, [pc, #24]	@ (8005934 <prvIdleTask+0x28>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d9f9      	bls.n	8005914 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005920:	4b05      	ldr	r3, [pc, #20]	@ (8005938 <prvIdleTask+0x2c>)
 8005922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005930:	e7f0      	b.n	8005914 <prvIdleTask+0x8>
 8005932:	bf00      	nop
 8005934:	20000820 	.word	0x20000820
 8005938:	e000ed04 	.word	0xe000ed04

0800593c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005942:	2300      	movs	r3, #0
 8005944:	607b      	str	r3, [r7, #4]
 8005946:	e00c      	b.n	8005962 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	4613      	mov	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4a12      	ldr	r2, [pc, #72]	@ (800599c <prvInitialiseTaskLists+0x60>)
 8005954:	4413      	add	r3, r2
 8005956:	4618      	mov	r0, r3
 8005958:	f7fe fcd6 	bl	8004308 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	3301      	adds	r3, #1
 8005960:	607b      	str	r3, [r7, #4]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b37      	cmp	r3, #55	@ 0x37
 8005966:	d9ef      	bls.n	8005948 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005968:	480d      	ldr	r0, [pc, #52]	@ (80059a0 <prvInitialiseTaskLists+0x64>)
 800596a:	f7fe fccd 	bl	8004308 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800596e:	480d      	ldr	r0, [pc, #52]	@ (80059a4 <prvInitialiseTaskLists+0x68>)
 8005970:	f7fe fcca 	bl	8004308 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005974:	480c      	ldr	r0, [pc, #48]	@ (80059a8 <prvInitialiseTaskLists+0x6c>)
 8005976:	f7fe fcc7 	bl	8004308 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800597a:	480c      	ldr	r0, [pc, #48]	@ (80059ac <prvInitialiseTaskLists+0x70>)
 800597c:	f7fe fcc4 	bl	8004308 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005980:	480b      	ldr	r0, [pc, #44]	@ (80059b0 <prvInitialiseTaskLists+0x74>)
 8005982:	f7fe fcc1 	bl	8004308 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005986:	4b0b      	ldr	r3, [pc, #44]	@ (80059b4 <prvInitialiseTaskLists+0x78>)
 8005988:	4a05      	ldr	r2, [pc, #20]	@ (80059a0 <prvInitialiseTaskLists+0x64>)
 800598a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800598c:	4b0a      	ldr	r3, [pc, #40]	@ (80059b8 <prvInitialiseTaskLists+0x7c>)
 800598e:	4a05      	ldr	r2, [pc, #20]	@ (80059a4 <prvInitialiseTaskLists+0x68>)
 8005990:	601a      	str	r2, [r3, #0]
}
 8005992:	bf00      	nop
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	20000820 	.word	0x20000820
 80059a0:	20000c80 	.word	0x20000c80
 80059a4:	20000c94 	.word	0x20000c94
 80059a8:	20000cb0 	.word	0x20000cb0
 80059ac:	20000cc4 	.word	0x20000cc4
 80059b0:	20000cdc 	.word	0x20000cdc
 80059b4:	20000ca8 	.word	0x20000ca8
 80059b8:	20000cac 	.word	0x20000cac

080059bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059c2:	e019      	b.n	80059f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059c4:	f000 fde8 	bl	8006598 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059c8:	4b10      	ldr	r3, [pc, #64]	@ (8005a0c <prvCheckTasksWaitingTermination+0x50>)
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3304      	adds	r3, #4
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fe fd21 	bl	800441c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059da:	4b0d      	ldr	r3, [pc, #52]	@ (8005a10 <prvCheckTasksWaitingTermination+0x54>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3b01      	subs	r3, #1
 80059e0:	4a0b      	ldr	r2, [pc, #44]	@ (8005a10 <prvCheckTasksWaitingTermination+0x54>)
 80059e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005a14 <prvCheckTasksWaitingTermination+0x58>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3b01      	subs	r3, #1
 80059ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005a14 <prvCheckTasksWaitingTermination+0x58>)
 80059ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059ee:	f000 fe05 	bl	80065fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f810 	bl	8005a18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059f8:	4b06      	ldr	r3, [pc, #24]	@ (8005a14 <prvCheckTasksWaitingTermination+0x58>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1e1      	bne.n	80059c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a00:	bf00      	nop
 8005a02:	bf00      	nop
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20000cc4 	.word	0x20000cc4
 8005a10:	20000cf0 	.word	0x20000cf0
 8005a14:	20000cd8 	.word	0x20000cd8

08005a18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d108      	bne.n	8005a3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 ffa2 	bl	8006978 <vPortFree>
				vPortFree( pxTCB );
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 ff9f 	bl	8006978 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a3a:	e019      	b.n	8005a70 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d103      	bne.n	8005a4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 ff96 	bl	8006978 <vPortFree>
	}
 8005a4c:	e010      	b.n	8005a70 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d00b      	beq.n	8005a70 <prvDeleteTCB+0x58>
	__asm volatile
 8005a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	60fb      	str	r3, [r7, #12]
}
 8005a6a:	bf00      	nop
 8005a6c:	bf00      	nop
 8005a6e:	e7fd      	b.n	8005a6c <prvDeleteTCB+0x54>
	}
 8005a70:	bf00      	nop
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ab0 <prvResetNextTaskUnblockTime+0x38>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d104      	bne.n	8005a92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a88:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab4 <prvResetNextTaskUnblockTime+0x3c>)
 8005a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a90:	e008      	b.n	8005aa4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a92:	4b07      	ldr	r3, [pc, #28]	@ (8005ab0 <prvResetNextTaskUnblockTime+0x38>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	4a04      	ldr	r2, [pc, #16]	@ (8005ab4 <prvResetNextTaskUnblockTime+0x3c>)
 8005aa2:	6013      	str	r3, [r2, #0]
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	20000ca8 	.word	0x20000ca8
 8005ab4:	20000d10 	.word	0x20000d10

08005ab8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005abe:	4b0b      	ldr	r3, [pc, #44]	@ (8005aec <xTaskGetSchedulerState+0x34>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d102      	bne.n	8005acc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	607b      	str	r3, [r7, #4]
 8005aca:	e008      	b.n	8005ade <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005acc:	4b08      	ldr	r3, [pc, #32]	@ (8005af0 <xTaskGetSchedulerState+0x38>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d102      	bne.n	8005ada <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	607b      	str	r3, [r7, #4]
 8005ad8:	e001      	b.n	8005ade <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ada:	2300      	movs	r3, #0
 8005adc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ade:	687b      	ldr	r3, [r7, #4]
	}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	20000cfc 	.word	0x20000cfc
 8005af0:	20000d18 	.word	0x20000d18

08005af4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d058      	beq.n	8005bbc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8005bc8 <xTaskPriorityDisinherit+0xd4>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d00b      	beq.n	8005b2c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	60fb      	str	r3, [r7, #12]
}
 8005b26:	bf00      	nop
 8005b28:	bf00      	nop
 8005b2a:	e7fd      	b.n	8005b28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10b      	bne.n	8005b4c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	60bb      	str	r3, [r7, #8]
}
 8005b46:	bf00      	nop
 8005b48:	bf00      	nop
 8005b4a:	e7fd      	b.n	8005b48 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b50:	1e5a      	subs	r2, r3, #1
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d02c      	beq.n	8005bbc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d128      	bne.n	8005bbc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fe fc54 	bl	800441c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b80:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8005bcc <xTaskPriorityDisinherit+0xd8>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d903      	bls.n	8005b9c <xTaskPriorityDisinherit+0xa8>
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b98:	4a0c      	ldr	r2, [pc, #48]	@ (8005bcc <xTaskPriorityDisinherit+0xd8>)
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4a09      	ldr	r2, [pc, #36]	@ (8005bd0 <xTaskPriorityDisinherit+0xdc>)
 8005baa:	441a      	add	r2, r3
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	f7fe fbd5 	bl	8004362 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005bbc:	697b      	ldr	r3, [r7, #20]
	}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	2000081c 	.word	0x2000081c
 8005bcc:	20000cf8 	.word	0x20000cf8
 8005bd0:	20000820 	.word	0x20000820

08005bd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005bde:	4b21      	ldr	r3, [pc, #132]	@ (8005c64 <prvAddCurrentTaskToDelayedList+0x90>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005be4:	4b20      	ldr	r3, [pc, #128]	@ (8005c68 <prvAddCurrentTaskToDelayedList+0x94>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3304      	adds	r3, #4
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fe fc16 	bl	800441c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf6:	d10a      	bne.n	8005c0e <prvAddCurrentTaskToDelayedList+0x3a>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d007      	beq.n	8005c0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8005c68 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3304      	adds	r3, #4
 8005c04:	4619      	mov	r1, r3
 8005c06:	4819      	ldr	r0, [pc, #100]	@ (8005c6c <prvAddCurrentTaskToDelayedList+0x98>)
 8005c08:	f7fe fbab 	bl	8004362 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c0c:	e026      	b.n	8005c5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4413      	add	r3, r2
 8005c14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c16:	4b14      	ldr	r3, [pc, #80]	@ (8005c68 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d209      	bcs.n	8005c3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c26:	4b12      	ldr	r3, [pc, #72]	@ (8005c70 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8005c68 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3304      	adds	r3, #4
 8005c30:	4619      	mov	r1, r3
 8005c32:	4610      	mov	r0, r2
 8005c34:	f7fe fbb9 	bl	80043aa <vListInsert>
}
 8005c38:	e010      	b.n	8005c5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8005c74 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c68 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4619      	mov	r1, r3
 8005c46:	4610      	mov	r0, r2
 8005c48:	f7fe fbaf 	bl	80043aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d202      	bcs.n	8005c5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c56:	4a08      	ldr	r2, [pc, #32]	@ (8005c78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	6013      	str	r3, [r2, #0]
}
 8005c5c:	bf00      	nop
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	20000cf4 	.word	0x20000cf4
 8005c68:	2000081c 	.word	0x2000081c
 8005c6c:	20000cdc 	.word	0x20000cdc
 8005c70:	20000cac 	.word	0x20000cac
 8005c74:	20000ca8 	.word	0x20000ca8
 8005c78:	20000d10 	.word	0x20000d10

08005c7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b08a      	sub	sp, #40	@ 0x28
 8005c80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c82:	2300      	movs	r3, #0
 8005c84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c86:	f000 fb13 	bl	80062b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8005d00 <xTimerCreateTimerTask+0x84>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d021      	beq.n	8005cd6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c9a:	1d3a      	adds	r2, r7, #4
 8005c9c:	f107 0108 	add.w	r1, r7, #8
 8005ca0:	f107 030c 	add.w	r3, r7, #12
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fe fb15 	bl	80042d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	9202      	str	r2, [sp, #8]
 8005cb2:	9301      	str	r3, [sp, #4]
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	2300      	movs	r3, #0
 8005cba:	460a      	mov	r2, r1
 8005cbc:	4911      	ldr	r1, [pc, #68]	@ (8005d04 <xTimerCreateTimerTask+0x88>)
 8005cbe:	4812      	ldr	r0, [pc, #72]	@ (8005d08 <xTimerCreateTimerTask+0x8c>)
 8005cc0:	f7ff f8d0 	bl	8004e64 <xTaskCreateStatic>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	4a11      	ldr	r2, [pc, #68]	@ (8005d0c <xTimerCreateTimerTask+0x90>)
 8005cc8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005cca:	4b10      	ldr	r3, [pc, #64]	@ (8005d0c <xTimerCreateTimerTask+0x90>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10b      	bne.n	8005cf4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	613b      	str	r3, [r7, #16]
}
 8005cee:	bf00      	nop
 8005cf0:	bf00      	nop
 8005cf2:	e7fd      	b.n	8005cf0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005cf4:	697b      	ldr	r3, [r7, #20]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	20000d4c 	.word	0x20000d4c
 8005d04:	08007598 	.word	0x08007598
 8005d08:	08005e49 	.word	0x08005e49
 8005d0c:	20000d50 	.word	0x20000d50

08005d10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08a      	sub	sp, #40	@ 0x28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10b      	bne.n	8005d40 <xTimerGenericCommand+0x30>
	__asm volatile
 8005d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	623b      	str	r3, [r7, #32]
}
 8005d3a:	bf00      	nop
 8005d3c:	bf00      	nop
 8005d3e:	e7fd      	b.n	8005d3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d40:	4b19      	ldr	r3, [pc, #100]	@ (8005da8 <xTimerGenericCommand+0x98>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d02a      	beq.n	8005d9e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2b05      	cmp	r3, #5
 8005d58:	dc18      	bgt.n	8005d8c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d5a:	f7ff fead 	bl	8005ab8 <xTaskGetSchedulerState>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d109      	bne.n	8005d78 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d64:	4b10      	ldr	r3, [pc, #64]	@ (8005da8 <xTimerGenericCommand+0x98>)
 8005d66:	6818      	ldr	r0, [r3, #0]
 8005d68:	f107 0110 	add.w	r1, r7, #16
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d70:	f7fe fc88 	bl	8004684 <xQueueGenericSend>
 8005d74:	6278      	str	r0, [r7, #36]	@ 0x24
 8005d76:	e012      	b.n	8005d9e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d78:	4b0b      	ldr	r3, [pc, #44]	@ (8005da8 <xTimerGenericCommand+0x98>)
 8005d7a:	6818      	ldr	r0, [r3, #0]
 8005d7c:	f107 0110 	add.w	r1, r7, #16
 8005d80:	2300      	movs	r3, #0
 8005d82:	2200      	movs	r2, #0
 8005d84:	f7fe fc7e 	bl	8004684 <xQueueGenericSend>
 8005d88:	6278      	str	r0, [r7, #36]	@ 0x24
 8005d8a:	e008      	b.n	8005d9e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d8c:	4b06      	ldr	r3, [pc, #24]	@ (8005da8 <xTimerGenericCommand+0x98>)
 8005d8e:	6818      	ldr	r0, [r3, #0]
 8005d90:	f107 0110 	add.w	r1, r7, #16
 8005d94:	2300      	movs	r3, #0
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	f7fe fd76 	bl	8004888 <xQueueGenericSendFromISR>
 8005d9c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3728      	adds	r7, #40	@ 0x28
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	20000d4c 	.word	0x20000d4c

08005dac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b088      	sub	sp, #32
 8005db0:	af02      	add	r7, sp, #8
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db6:	4b23      	ldr	r3, [pc, #140]	@ (8005e44 <prvProcessExpiredTimer+0x98>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7fe fb29 	bl	800441c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d023      	beq.n	8005e20 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	699a      	ldr	r2, [r3, #24]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	18d1      	adds	r1, r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	6978      	ldr	r0, [r7, #20]
 8005de6:	f000 f8d5 	bl	8005f94 <prvInsertTimerInActiveList>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d020      	beq.n	8005e32 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005df0:	2300      	movs	r3, #0
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	2300      	movs	r3, #0
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	2100      	movs	r1, #0
 8005dfa:	6978      	ldr	r0, [r7, #20]
 8005dfc:	f7ff ff88 	bl	8005d10 <xTimerGenericCommand>
 8005e00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d114      	bne.n	8005e32 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e0c:	f383 8811 	msr	BASEPRI, r3
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	60fb      	str	r3, [r7, #12]
}
 8005e1a:	bf00      	nop
 8005e1c:	bf00      	nop
 8005e1e:	e7fd      	b.n	8005e1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e26:	f023 0301 	bic.w	r3, r3, #1
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	6978      	ldr	r0, [r7, #20]
 8005e38:	4798      	blx	r3
}
 8005e3a:	bf00      	nop
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20000d44 	.word	0x20000d44

08005e48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e50:	f107 0308 	add.w	r3, r7, #8
 8005e54:	4618      	mov	r0, r3
 8005e56:	f000 f859 	bl	8005f0c <prvGetNextExpireTime>
 8005e5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f805 	bl	8005e70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e66:	f000 f8d7 	bl	8006018 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e6a:	bf00      	nop
 8005e6c:	e7f0      	b.n	8005e50 <prvTimerTask+0x8>
	...

08005e70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e7a:	f7ff fa37 	bl	80052ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e7e:	f107 0308 	add.w	r3, r7, #8
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 f866 	bl	8005f54 <prvSampleTimeNow>
 8005e88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d130      	bne.n	8005ef2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10a      	bne.n	8005eac <prvProcessTimerOrBlockTask+0x3c>
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d806      	bhi.n	8005eac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e9e:	f7ff fa33 	bl	8005308 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005ea2:	68f9      	ldr	r1, [r7, #12]
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7ff ff81 	bl	8005dac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005eaa:	e024      	b.n	8005ef6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d008      	beq.n	8005ec4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005eb2:	4b13      	ldr	r3, [pc, #76]	@ (8005f00 <prvProcessTimerOrBlockTask+0x90>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <prvProcessTimerOrBlockTask+0x50>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e000      	b.n	8005ec2 <prvProcessTimerOrBlockTask+0x52>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8005f04 <prvProcessTimerOrBlockTask+0x94>)
 8005ec6:	6818      	ldr	r0, [r3, #0]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	f7fe ff93 	bl	8004dfc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ed6:	f7ff fa17 	bl	8005308 <xTaskResumeAll>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10a      	bne.n	8005ef6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ee0:	4b09      	ldr	r3, [pc, #36]	@ (8005f08 <prvProcessTimerOrBlockTask+0x98>)
 8005ee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	f3bf 8f6f 	isb	sy
}
 8005ef0:	e001      	b.n	8005ef6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ef2:	f7ff fa09 	bl	8005308 <xTaskResumeAll>
}
 8005ef6:	bf00      	nop
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20000d48 	.word	0x20000d48
 8005f04:	20000d4c 	.word	0x20000d4c
 8005f08:	e000ed04 	.word	0xe000ed04

08005f0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f14:	4b0e      	ldr	r3, [pc, #56]	@ (8005f50 <prvGetNextExpireTime+0x44>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <prvGetNextExpireTime+0x16>
 8005f1e:	2201      	movs	r2, #1
 8005f20:	e000      	b.n	8005f24 <prvGetNextExpireTime+0x18>
 8005f22:	2200      	movs	r2, #0
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d105      	bne.n	8005f3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f30:	4b07      	ldr	r3, [pc, #28]	@ (8005f50 <prvGetNextExpireTime+0x44>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	e001      	b.n	8005f40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f40:	68fb      	ldr	r3, [r7, #12]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	20000d44 	.word	0x20000d44

08005f54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f5c:	f7ff fa72 	bl	8005444 <xTaskGetTickCount>
 8005f60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f62:	4b0b      	ldr	r3, [pc, #44]	@ (8005f90 <prvSampleTimeNow+0x3c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d205      	bcs.n	8005f78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f6c:	f000 f93a 	bl	80061e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	e002      	b.n	8005f7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f7e:	4a04      	ldr	r2, [pc, #16]	@ (8005f90 <prvSampleTimeNow+0x3c>)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f84:	68fb      	ldr	r3, [r7, #12]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20000d54 	.word	0x20000d54

08005f94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d812      	bhi.n	8005fe0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	1ad2      	subs	r2, r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d302      	bcc.n	8005fce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	617b      	str	r3, [r7, #20]
 8005fcc:	e01b      	b.n	8006006 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005fce:	4b10      	ldr	r3, [pc, #64]	@ (8006010 <prvInsertTimerInActiveList+0x7c>)
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	4610      	mov	r0, r2
 8005fda:	f7fe f9e6 	bl	80043aa <vListInsert>
 8005fde:	e012      	b.n	8006006 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d206      	bcs.n	8005ff6 <prvInsertTimerInActiveList+0x62>
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d302      	bcc.n	8005ff6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	617b      	str	r3, [r7, #20]
 8005ff4:	e007      	b.n	8006006 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ff6:	4b07      	ldr	r3, [pc, #28]	@ (8006014 <prvInsertTimerInActiveList+0x80>)
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	4619      	mov	r1, r3
 8006000:	4610      	mov	r0, r2
 8006002:	f7fe f9d2 	bl	80043aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006006:	697b      	ldr	r3, [r7, #20]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	20000d48 	.word	0x20000d48
 8006014:	20000d44 	.word	0x20000d44

08006018 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b08e      	sub	sp, #56	@ 0x38
 800601c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800601e:	e0ce      	b.n	80061be <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	da19      	bge.n	800605a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006026:	1d3b      	adds	r3, r7, #4
 8006028:	3304      	adds	r3, #4
 800602a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800602c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10b      	bne.n	800604a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	61fb      	str	r3, [r7, #28]
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop
 8006048:	e7fd      	b.n	8006046 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800604a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006050:	6850      	ldr	r0, [r2, #4]
 8006052:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006054:	6892      	ldr	r2, [r2, #8]
 8006056:	4611      	mov	r1, r2
 8006058:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	f2c0 80ae 	blt.w	80061be <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d004      	beq.n	8006078 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800606e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006070:	3304      	adds	r3, #4
 8006072:	4618      	mov	r0, r3
 8006074:	f7fe f9d2 	bl	800441c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006078:	463b      	mov	r3, r7
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff ff6a 	bl	8005f54 <prvSampleTimeNow>
 8006080:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b09      	cmp	r3, #9
 8006086:	f200 8097 	bhi.w	80061b8 <prvProcessReceivedCommands+0x1a0>
 800608a:	a201      	add	r2, pc, #4	@ (adr r2, 8006090 <prvProcessReceivedCommands+0x78>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	080060b9 	.word	0x080060b9
 8006094:	080060b9 	.word	0x080060b9
 8006098:	080060b9 	.word	0x080060b9
 800609c:	0800612f 	.word	0x0800612f
 80060a0:	08006143 	.word	0x08006143
 80060a4:	0800618f 	.word	0x0800618f
 80060a8:	080060b9 	.word	0x080060b9
 80060ac:	080060b9 	.word	0x080060b9
 80060b0:	0800612f 	.word	0x0800612f
 80060b4:	08006143 	.word	0x08006143
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060be:	f043 0301 	orr.w	r3, r3, #1
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	18d1      	adds	r1, r2, r3
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060d8:	f7ff ff5c 	bl	8005f94 <prvInsertTimerInActiveList>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d06c      	beq.n	80061bc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d061      	beq.n	80061bc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	441a      	add	r2, r3
 8006100:	2300      	movs	r3, #0
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	2300      	movs	r3, #0
 8006106:	2100      	movs	r1, #0
 8006108:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800610a:	f7ff fe01 	bl	8005d10 <xTimerGenericCommand>
 800610e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d152      	bne.n	80061bc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	61bb      	str	r3, [r7, #24]
}
 8006128:	bf00      	nop
 800612a:	bf00      	nop
 800612c:	e7fd      	b.n	800612a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800612e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006130:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006134:	f023 0301 	bic.w	r3, r3, #1
 8006138:	b2da      	uxtb	r2, r3
 800613a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006140:	e03d      	b.n	80061be <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006144:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006148:	f043 0301 	orr.w	r3, r3, #1
 800614c:	b2da      	uxtb	r2, r3
 800614e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006150:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006158:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800615a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10b      	bne.n	800617a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	617b      	str	r3, [r7, #20]
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop
 8006178:	e7fd      	b.n	8006176 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800617a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617c:	699a      	ldr	r2, [r3, #24]
 800617e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006180:	18d1      	adds	r1, r2, r3
 8006182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006186:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006188:	f7ff ff04 	bl	8005f94 <prvInsertTimerInActiveList>
					break;
 800618c:	e017      	b.n	80061be <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800618e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006190:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d103      	bne.n	80061a4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800619c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800619e:	f000 fbeb 	bl	8006978 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80061a2:	e00c      	b.n	80061be <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061aa:	f023 0301 	bic.w	r3, r3, #1
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80061b6:	e002      	b.n	80061be <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80061b8:	bf00      	nop
 80061ba:	e000      	b.n	80061be <prvProcessReceivedCommands+0x1a6>
					break;
 80061bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061be:	4b08      	ldr	r3, [pc, #32]	@ (80061e0 <prvProcessReceivedCommands+0x1c8>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	1d39      	adds	r1, r7, #4
 80061c4:	2200      	movs	r2, #0
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fe fbfc 	bl	80049c4 <xQueueReceive>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f47f af26 	bne.w	8006020 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80061d4:	bf00      	nop
 80061d6:	bf00      	nop
 80061d8:	3730      	adds	r7, #48	@ 0x30
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20000d4c 	.word	0x20000d4c

080061e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b088      	sub	sp, #32
 80061e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061ea:	e049      	b.n	8006280 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061ec:	4b2e      	ldr	r3, [pc, #184]	@ (80062a8 <prvSwitchTimerLists+0xc4>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061f6:	4b2c      	ldr	r3, [pc, #176]	@ (80062a8 <prvSwitchTimerLists+0xc4>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3304      	adds	r3, #4
 8006204:	4618      	mov	r0, r3
 8006206:	f7fe f909 	bl	800441c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b00      	cmp	r3, #0
 800621e:	d02f      	beq.n	8006280 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	4413      	add	r3, r2
 8006228:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	429a      	cmp	r2, r3
 8006230:	d90e      	bls.n	8006250 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800623e:	4b1a      	ldr	r3, [pc, #104]	@ (80062a8 <prvSwitchTimerLists+0xc4>)
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	3304      	adds	r3, #4
 8006246:	4619      	mov	r1, r3
 8006248:	4610      	mov	r0, r2
 800624a:	f7fe f8ae 	bl	80043aa <vListInsert>
 800624e:	e017      	b.n	8006280 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006250:	2300      	movs	r3, #0
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	2300      	movs	r3, #0
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	2100      	movs	r1, #0
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f7ff fd58 	bl	8005d10 <xTimerGenericCommand>
 8006260:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10b      	bne.n	8006280 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	603b      	str	r3, [r7, #0]
}
 800627a:	bf00      	nop
 800627c:	bf00      	nop
 800627e:	e7fd      	b.n	800627c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006280:	4b09      	ldr	r3, [pc, #36]	@ (80062a8 <prvSwitchTimerLists+0xc4>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1b0      	bne.n	80061ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800628a:	4b07      	ldr	r3, [pc, #28]	@ (80062a8 <prvSwitchTimerLists+0xc4>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006290:	4b06      	ldr	r3, [pc, #24]	@ (80062ac <prvSwitchTimerLists+0xc8>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a04      	ldr	r2, [pc, #16]	@ (80062a8 <prvSwitchTimerLists+0xc4>)
 8006296:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006298:	4a04      	ldr	r2, [pc, #16]	@ (80062ac <prvSwitchTimerLists+0xc8>)
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	6013      	str	r3, [r2, #0]
}
 800629e:	bf00      	nop
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20000d44 	.word	0x20000d44
 80062ac:	20000d48 	.word	0x20000d48

080062b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80062b6:	f000 f96f 	bl	8006598 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80062ba:	4b15      	ldr	r3, [pc, #84]	@ (8006310 <prvCheckForValidListAndQueue+0x60>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d120      	bne.n	8006304 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062c2:	4814      	ldr	r0, [pc, #80]	@ (8006314 <prvCheckForValidListAndQueue+0x64>)
 80062c4:	f7fe f820 	bl	8004308 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062c8:	4813      	ldr	r0, [pc, #76]	@ (8006318 <prvCheckForValidListAndQueue+0x68>)
 80062ca:	f7fe f81d 	bl	8004308 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80062ce:	4b13      	ldr	r3, [pc, #76]	@ (800631c <prvCheckForValidListAndQueue+0x6c>)
 80062d0:	4a10      	ldr	r2, [pc, #64]	@ (8006314 <prvCheckForValidListAndQueue+0x64>)
 80062d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80062d4:	4b12      	ldr	r3, [pc, #72]	@ (8006320 <prvCheckForValidListAndQueue+0x70>)
 80062d6:	4a10      	ldr	r2, [pc, #64]	@ (8006318 <prvCheckForValidListAndQueue+0x68>)
 80062d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80062da:	2300      	movs	r3, #0
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	4b11      	ldr	r3, [pc, #68]	@ (8006324 <prvCheckForValidListAndQueue+0x74>)
 80062e0:	4a11      	ldr	r2, [pc, #68]	@ (8006328 <prvCheckForValidListAndQueue+0x78>)
 80062e2:	2110      	movs	r1, #16
 80062e4:	200a      	movs	r0, #10
 80062e6:	f7fe f92d 	bl	8004544 <xQueueGenericCreateStatic>
 80062ea:	4603      	mov	r3, r0
 80062ec:	4a08      	ldr	r2, [pc, #32]	@ (8006310 <prvCheckForValidListAndQueue+0x60>)
 80062ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80062f0:	4b07      	ldr	r3, [pc, #28]	@ (8006310 <prvCheckForValidListAndQueue+0x60>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d005      	beq.n	8006304 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80062f8:	4b05      	ldr	r3, [pc, #20]	@ (8006310 <prvCheckForValidListAndQueue+0x60>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	490b      	ldr	r1, [pc, #44]	@ (800632c <prvCheckForValidListAndQueue+0x7c>)
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fe fd52 	bl	8004da8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006304:	f000 f97a 	bl	80065fc <vPortExitCritical>
}
 8006308:	bf00      	nop
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	20000d4c 	.word	0x20000d4c
 8006314:	20000d1c 	.word	0x20000d1c
 8006318:	20000d30 	.word	0x20000d30
 800631c:	20000d44 	.word	0x20000d44
 8006320:	20000d48 	.word	0x20000d48
 8006324:	20000df8 	.word	0x20000df8
 8006328:	20000d58 	.word	0x20000d58
 800632c:	080075a0 	.word	0x080075a0

08006330 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	3b04      	subs	r3, #4
 8006340:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006348:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3b04      	subs	r3, #4
 800634e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f023 0201 	bic.w	r2, r3, #1
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	3b04      	subs	r3, #4
 800635e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006360:	4a0c      	ldr	r2, [pc, #48]	@ (8006394 <pxPortInitialiseStack+0x64>)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	3b14      	subs	r3, #20
 800636a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3b04      	subs	r3, #4
 8006376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f06f 0202 	mvn.w	r2, #2
 800637e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3b20      	subs	r3, #32
 8006384:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006386:	68fb      	ldr	r3, [r7, #12]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	08006399 	.word	0x08006399

08006398 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063a2:	4b13      	ldr	r3, [pc, #76]	@ (80063f0 <prvTaskExitError+0x58>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063aa:	d00b      	beq.n	80063c4 <prvTaskExitError+0x2c>
	__asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	60fb      	str	r3, [r7, #12]
}
 80063be:	bf00      	nop
 80063c0:	bf00      	nop
 80063c2:	e7fd      	b.n	80063c0 <prvTaskExitError+0x28>
	__asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	60bb      	str	r3, [r7, #8]
}
 80063d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063d8:	bf00      	nop
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0fc      	beq.n	80063da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063e0:	bf00      	nop
 80063e2:	bf00      	nop
 80063e4:	3714      	adds	r7, #20
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	2000000c 	.word	0x2000000c
	...

08006400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006400:	4b07      	ldr	r3, [pc, #28]	@ (8006420 <pxCurrentTCBConst2>)
 8006402:	6819      	ldr	r1, [r3, #0]
 8006404:	6808      	ldr	r0, [r1, #0]
 8006406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640a:	f380 8809 	msr	PSP, r0
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f04f 0000 	mov.w	r0, #0
 8006416:	f380 8811 	msr	BASEPRI, r0
 800641a:	4770      	bx	lr
 800641c:	f3af 8000 	nop.w

08006420 <pxCurrentTCBConst2>:
 8006420:	2000081c 	.word	0x2000081c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006424:	bf00      	nop
 8006426:	bf00      	nop

08006428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006428:	4808      	ldr	r0, [pc, #32]	@ (800644c <prvPortStartFirstTask+0x24>)
 800642a:	6800      	ldr	r0, [r0, #0]
 800642c:	6800      	ldr	r0, [r0, #0]
 800642e:	f380 8808 	msr	MSP, r0
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f380 8814 	msr	CONTROL, r0
 800643a:	b662      	cpsie	i
 800643c:	b661      	cpsie	f
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	df00      	svc	0
 8006448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800644a:	bf00      	nop
 800644c:	e000ed08 	.word	0xe000ed08

08006450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006456:	4b47      	ldr	r3, [pc, #284]	@ (8006574 <xPortStartScheduler+0x124>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a47      	ldr	r2, [pc, #284]	@ (8006578 <xPortStartScheduler+0x128>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d10b      	bne.n	8006478 <xPortStartScheduler+0x28>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	60fb      	str	r3, [r7, #12]
}
 8006472:	bf00      	nop
 8006474:	bf00      	nop
 8006476:	e7fd      	b.n	8006474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006478:	4b3e      	ldr	r3, [pc, #248]	@ (8006574 <xPortStartScheduler+0x124>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a3f      	ldr	r2, [pc, #252]	@ (800657c <xPortStartScheduler+0x12c>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d10b      	bne.n	800649a <xPortStartScheduler+0x4a>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	613b      	str	r3, [r7, #16]
}
 8006494:	bf00      	nop
 8006496:	bf00      	nop
 8006498:	e7fd      	b.n	8006496 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800649a:	4b39      	ldr	r3, [pc, #228]	@ (8006580 <xPortStartScheduler+0x130>)
 800649c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	22ff      	movs	r2, #255	@ 0xff
 80064aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064b4:	78fb      	ldrb	r3, [r7, #3]
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80064bc:	b2da      	uxtb	r2, r3
 80064be:	4b31      	ldr	r3, [pc, #196]	@ (8006584 <xPortStartScheduler+0x134>)
 80064c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064c2:	4b31      	ldr	r3, [pc, #196]	@ (8006588 <xPortStartScheduler+0x138>)
 80064c4:	2207      	movs	r2, #7
 80064c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064c8:	e009      	b.n	80064de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80064ca:	4b2f      	ldr	r3, [pc, #188]	@ (8006588 <xPortStartScheduler+0x138>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3b01      	subs	r3, #1
 80064d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006588 <xPortStartScheduler+0x138>)
 80064d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064de:	78fb      	ldrb	r3, [r7, #3]
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064e6:	2b80      	cmp	r3, #128	@ 0x80
 80064e8:	d0ef      	beq.n	80064ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064ea:	4b27      	ldr	r3, [pc, #156]	@ (8006588 <xPortStartScheduler+0x138>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f1c3 0307 	rsb	r3, r3, #7
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d00b      	beq.n	800650e <xPortStartScheduler+0xbe>
	__asm volatile
 80064f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	60bb      	str	r3, [r7, #8]
}
 8006508:	bf00      	nop
 800650a:	bf00      	nop
 800650c:	e7fd      	b.n	800650a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800650e:	4b1e      	ldr	r3, [pc, #120]	@ (8006588 <xPortStartScheduler+0x138>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	021b      	lsls	r3, r3, #8
 8006514:	4a1c      	ldr	r2, [pc, #112]	@ (8006588 <xPortStartScheduler+0x138>)
 8006516:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006518:	4b1b      	ldr	r3, [pc, #108]	@ (8006588 <xPortStartScheduler+0x138>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006520:	4a19      	ldr	r2, [pc, #100]	@ (8006588 <xPortStartScheduler+0x138>)
 8006522:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	b2da      	uxtb	r2, r3
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800652c:	4b17      	ldr	r3, [pc, #92]	@ (800658c <xPortStartScheduler+0x13c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a16      	ldr	r2, [pc, #88]	@ (800658c <xPortStartScheduler+0x13c>)
 8006532:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006536:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006538:	4b14      	ldr	r3, [pc, #80]	@ (800658c <xPortStartScheduler+0x13c>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a13      	ldr	r2, [pc, #76]	@ (800658c <xPortStartScheduler+0x13c>)
 800653e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006542:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006544:	f000 f8da 	bl	80066fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006548:	4b11      	ldr	r3, [pc, #68]	@ (8006590 <xPortStartScheduler+0x140>)
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800654e:	f000 f8f9 	bl	8006744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006552:	4b10      	ldr	r3, [pc, #64]	@ (8006594 <xPortStartScheduler+0x144>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a0f      	ldr	r2, [pc, #60]	@ (8006594 <xPortStartScheduler+0x144>)
 8006558:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800655c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800655e:	f7ff ff63 	bl	8006428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006562:	f7ff f839 	bl	80055d8 <vTaskSwitchContext>
	prvTaskExitError();
 8006566:	f7ff ff17 	bl	8006398 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3718      	adds	r7, #24
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	e000ed00 	.word	0xe000ed00
 8006578:	410fc271 	.word	0x410fc271
 800657c:	410fc270 	.word	0x410fc270
 8006580:	e000e400 	.word	0xe000e400
 8006584:	20000e48 	.word	0x20000e48
 8006588:	20000e4c 	.word	0x20000e4c
 800658c:	e000ed20 	.word	0xe000ed20
 8006590:	2000000c 	.word	0x2000000c
 8006594:	e000ef34 	.word	0xe000ef34

08006598 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	607b      	str	r3, [r7, #4]
}
 80065b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065b2:	4b10      	ldr	r3, [pc, #64]	@ (80065f4 <vPortEnterCritical+0x5c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3301      	adds	r3, #1
 80065b8:	4a0e      	ldr	r2, [pc, #56]	@ (80065f4 <vPortEnterCritical+0x5c>)
 80065ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065bc:	4b0d      	ldr	r3, [pc, #52]	@ (80065f4 <vPortEnterCritical+0x5c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d110      	bne.n	80065e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065c4:	4b0c      	ldr	r3, [pc, #48]	@ (80065f8 <vPortEnterCritical+0x60>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00b      	beq.n	80065e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	603b      	str	r3, [r7, #0]
}
 80065e0:	bf00      	nop
 80065e2:	bf00      	nop
 80065e4:	e7fd      	b.n	80065e2 <vPortEnterCritical+0x4a>
	}
}
 80065e6:	bf00      	nop
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	2000000c 	.word	0x2000000c
 80065f8:	e000ed04 	.word	0xe000ed04

080065fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006602:	4b12      	ldr	r3, [pc, #72]	@ (800664c <vPortExitCritical+0x50>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10b      	bne.n	8006622 <vPortExitCritical+0x26>
	__asm volatile
 800660a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660e:	f383 8811 	msr	BASEPRI, r3
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	607b      	str	r3, [r7, #4]
}
 800661c:	bf00      	nop
 800661e:	bf00      	nop
 8006620:	e7fd      	b.n	800661e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006622:	4b0a      	ldr	r3, [pc, #40]	@ (800664c <vPortExitCritical+0x50>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3b01      	subs	r3, #1
 8006628:	4a08      	ldr	r2, [pc, #32]	@ (800664c <vPortExitCritical+0x50>)
 800662a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800662c:	4b07      	ldr	r3, [pc, #28]	@ (800664c <vPortExitCritical+0x50>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d105      	bne.n	8006640 <vPortExitCritical+0x44>
 8006634:	2300      	movs	r3, #0
 8006636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	f383 8811 	msr	BASEPRI, r3
}
 800663e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	2000000c 	.word	0x2000000c

08006650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006650:	f3ef 8009 	mrs	r0, PSP
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	4b15      	ldr	r3, [pc, #84]	@ (80066b0 <pxCurrentTCBConst>)
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	f01e 0f10 	tst.w	lr, #16
 8006660:	bf08      	it	eq
 8006662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666a:	6010      	str	r0, [r2, #0]
 800666c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006670:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006674:	f380 8811 	msr	BASEPRI, r0
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f7fe ffaa 	bl	80055d8 <vTaskSwitchContext>
 8006684:	f04f 0000 	mov.w	r0, #0
 8006688:	f380 8811 	msr	BASEPRI, r0
 800668c:	bc09      	pop	{r0, r3}
 800668e:	6819      	ldr	r1, [r3, #0]
 8006690:	6808      	ldr	r0, [r1, #0]
 8006692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006696:	f01e 0f10 	tst.w	lr, #16
 800669a:	bf08      	it	eq
 800669c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066a0:	f380 8809 	msr	PSP, r0
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	f3af 8000 	nop.w

080066b0 <pxCurrentTCBConst>:
 80066b0:	2000081c 	.word	0x2000081c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop

080066b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	607b      	str	r3, [r7, #4]
}
 80066d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066d2:	f7fe fec7 	bl	8005464 <xTaskIncrementTick>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066dc:	4b06      	ldr	r3, [pc, #24]	@ (80066f8 <xPortSysTickHandler+0x40>)
 80066de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	2300      	movs	r3, #0
 80066e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	f383 8811 	msr	BASEPRI, r3
}
 80066ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80066f0:	bf00      	nop
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	e000ed04 	.word	0xe000ed04

080066fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80066fc:	b480      	push	{r7}
 80066fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006700:	4b0b      	ldr	r3, [pc, #44]	@ (8006730 <vPortSetupTimerInterrupt+0x34>)
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006706:	4b0b      	ldr	r3, [pc, #44]	@ (8006734 <vPortSetupTimerInterrupt+0x38>)
 8006708:	2200      	movs	r2, #0
 800670a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800670c:	4b0a      	ldr	r3, [pc, #40]	@ (8006738 <vPortSetupTimerInterrupt+0x3c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a0a      	ldr	r2, [pc, #40]	@ (800673c <vPortSetupTimerInterrupt+0x40>)
 8006712:	fba2 2303 	umull	r2, r3, r2, r3
 8006716:	099b      	lsrs	r3, r3, #6
 8006718:	4a09      	ldr	r2, [pc, #36]	@ (8006740 <vPortSetupTimerInterrupt+0x44>)
 800671a:	3b01      	subs	r3, #1
 800671c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800671e:	4b04      	ldr	r3, [pc, #16]	@ (8006730 <vPortSetupTimerInterrupt+0x34>)
 8006720:	2207      	movs	r2, #7
 8006722:	601a      	str	r2, [r3, #0]
}
 8006724:	bf00      	nop
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	e000e010 	.word	0xe000e010
 8006734:	e000e018 	.word	0xe000e018
 8006738:	20000000 	.word	0x20000000
 800673c:	10624dd3 	.word	0x10624dd3
 8006740:	e000e014 	.word	0xe000e014

08006744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006744:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006754 <vPortEnableVFP+0x10>
 8006748:	6801      	ldr	r1, [r0, #0]
 800674a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800674e:	6001      	str	r1, [r0, #0]
 8006750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006752:	bf00      	nop
 8006754:	e000ed88 	.word	0xe000ed88

08006758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800675e:	f3ef 8305 	mrs	r3, IPSR
 8006762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2b0f      	cmp	r3, #15
 8006768:	d915      	bls.n	8006796 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800676a:	4a18      	ldr	r2, [pc, #96]	@ (80067cc <vPortValidateInterruptPriority+0x74>)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4413      	add	r3, r2
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006774:	4b16      	ldr	r3, [pc, #88]	@ (80067d0 <vPortValidateInterruptPriority+0x78>)
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	7afa      	ldrb	r2, [r7, #11]
 800677a:	429a      	cmp	r2, r3
 800677c:	d20b      	bcs.n	8006796 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	607b      	str	r3, [r7, #4]
}
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	e7fd      	b.n	8006792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006796:	4b0f      	ldr	r3, [pc, #60]	@ (80067d4 <vPortValidateInterruptPriority+0x7c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800679e:	4b0e      	ldr	r3, [pc, #56]	@ (80067d8 <vPortValidateInterruptPriority+0x80>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d90b      	bls.n	80067be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80067a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067aa:	f383 8811 	msr	BASEPRI, r3
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f3bf 8f4f 	dsb	sy
 80067b6:	603b      	str	r3, [r7, #0]
}
 80067b8:	bf00      	nop
 80067ba:	bf00      	nop
 80067bc:	e7fd      	b.n	80067ba <vPortValidateInterruptPriority+0x62>
	}
 80067be:	bf00      	nop
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	e000e3f0 	.word	0xe000e3f0
 80067d0:	20000e48 	.word	0x20000e48
 80067d4:	e000ed0c 	.word	0xe000ed0c
 80067d8:	20000e4c 	.word	0x20000e4c

080067dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08a      	sub	sp, #40	@ 0x28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067e4:	2300      	movs	r3, #0
 80067e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067e8:	f7fe fd80 	bl	80052ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067ec:	4b5c      	ldr	r3, [pc, #368]	@ (8006960 <pvPortMalloc+0x184>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067f4:	f000 f924 	bl	8006a40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067f8:	4b5a      	ldr	r3, [pc, #360]	@ (8006964 <pvPortMalloc+0x188>)
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4013      	ands	r3, r2
 8006800:	2b00      	cmp	r3, #0
 8006802:	f040 8095 	bne.w	8006930 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d01e      	beq.n	800684a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800680c:	2208      	movs	r2, #8
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4413      	add	r3, r2
 8006812:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	2b00      	cmp	r3, #0
 800681c:	d015      	beq.n	800684a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f023 0307 	bic.w	r3, r3, #7
 8006824:	3308      	adds	r3, #8
 8006826:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00b      	beq.n	800684a <pvPortMalloc+0x6e>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	617b      	str	r3, [r7, #20]
}
 8006844:	bf00      	nop
 8006846:	bf00      	nop
 8006848:	e7fd      	b.n	8006846 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d06f      	beq.n	8006930 <pvPortMalloc+0x154>
 8006850:	4b45      	ldr	r3, [pc, #276]	@ (8006968 <pvPortMalloc+0x18c>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	429a      	cmp	r2, r3
 8006858:	d86a      	bhi.n	8006930 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800685a:	4b44      	ldr	r3, [pc, #272]	@ (800696c <pvPortMalloc+0x190>)
 800685c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800685e:	4b43      	ldr	r3, [pc, #268]	@ (800696c <pvPortMalloc+0x190>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006864:	e004      	b.n	8006870 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006868:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800686a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	429a      	cmp	r2, r3
 8006878:	d903      	bls.n	8006882 <pvPortMalloc+0xa6>
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1f1      	bne.n	8006866 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006882:	4b37      	ldr	r3, [pc, #220]	@ (8006960 <pvPortMalloc+0x184>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006888:	429a      	cmp	r2, r3
 800688a:	d051      	beq.n	8006930 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2208      	movs	r2, #8
 8006892:	4413      	add	r3, r2
 8006894:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800689e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	1ad2      	subs	r2, r2, r3
 80068a6:	2308      	movs	r3, #8
 80068a8:	005b      	lsls	r3, r3, #1
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d920      	bls.n	80068f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4413      	add	r3, r2
 80068b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	f003 0307 	and.w	r3, r3, #7
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00b      	beq.n	80068d8 <pvPortMalloc+0xfc>
	__asm volatile
 80068c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	613b      	str	r3, [r7, #16]
}
 80068d2:	bf00      	nop
 80068d4:	bf00      	nop
 80068d6:	e7fd      	b.n	80068d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	1ad2      	subs	r2, r2, r3
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068ea:	69b8      	ldr	r0, [r7, #24]
 80068ec:	f000 f90a 	bl	8006b04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006968 <pvPortMalloc+0x18c>)
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	4a1b      	ldr	r2, [pc, #108]	@ (8006968 <pvPortMalloc+0x18c>)
 80068fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068fe:	4b1a      	ldr	r3, [pc, #104]	@ (8006968 <pvPortMalloc+0x18c>)
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	4b1b      	ldr	r3, [pc, #108]	@ (8006970 <pvPortMalloc+0x194>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	429a      	cmp	r2, r3
 8006908:	d203      	bcs.n	8006912 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800690a:	4b17      	ldr	r3, [pc, #92]	@ (8006968 <pvPortMalloc+0x18c>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a18      	ldr	r2, [pc, #96]	@ (8006970 <pvPortMalloc+0x194>)
 8006910:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	4b13      	ldr	r3, [pc, #76]	@ (8006964 <pvPortMalloc+0x188>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	431a      	orrs	r2, r3
 800691c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006926:	4b13      	ldr	r3, [pc, #76]	@ (8006974 <pvPortMalloc+0x198>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3301      	adds	r3, #1
 800692c:	4a11      	ldr	r2, [pc, #68]	@ (8006974 <pvPortMalloc+0x198>)
 800692e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006930:	f7fe fcea 	bl	8005308 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00b      	beq.n	8006956 <pvPortMalloc+0x17a>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	60fb      	str	r3, [r7, #12]
}
 8006950:	bf00      	nop
 8006952:	bf00      	nop
 8006954:	e7fd      	b.n	8006952 <pvPortMalloc+0x176>
	return pvReturn;
 8006956:	69fb      	ldr	r3, [r7, #28]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3728      	adds	r7, #40	@ 0x28
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	20001a10 	.word	0x20001a10
 8006964:	20001a24 	.word	0x20001a24
 8006968:	20001a14 	.word	0x20001a14
 800696c:	20001a08 	.word	0x20001a08
 8006970:	20001a18 	.word	0x20001a18
 8006974:	20001a1c 	.word	0x20001a1c

08006978 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d04f      	beq.n	8006a2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800698a:	2308      	movs	r3, #8
 800698c:	425b      	negs	r3, r3
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	4413      	add	r3, r2
 8006992:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	4b25      	ldr	r3, [pc, #148]	@ (8006a34 <vPortFree+0xbc>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4013      	ands	r3, r2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10b      	bne.n	80069be <vPortFree+0x46>
	__asm volatile
 80069a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069aa:	f383 8811 	msr	BASEPRI, r3
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	60fb      	str	r3, [r7, #12]
}
 80069b8:	bf00      	nop
 80069ba:	bf00      	nop
 80069bc:	e7fd      	b.n	80069ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00b      	beq.n	80069de <vPortFree+0x66>
	__asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	60bb      	str	r3, [r7, #8]
}
 80069d8:	bf00      	nop
 80069da:	bf00      	nop
 80069dc:	e7fd      	b.n	80069da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	4b14      	ldr	r3, [pc, #80]	@ (8006a34 <vPortFree+0xbc>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4013      	ands	r3, r2
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d01e      	beq.n	8006a2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d11a      	bne.n	8006a2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006a34 <vPortFree+0xbc>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	43db      	mvns	r3, r3
 80069fe:	401a      	ands	r2, r3
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a04:	f7fe fc72 	bl	80052ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a38 <vPortFree+0xc0>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4413      	add	r3, r2
 8006a12:	4a09      	ldr	r2, [pc, #36]	@ (8006a38 <vPortFree+0xc0>)
 8006a14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a16:	6938      	ldr	r0, [r7, #16]
 8006a18:	f000 f874 	bl	8006b04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a1c:	4b07      	ldr	r3, [pc, #28]	@ (8006a3c <vPortFree+0xc4>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	3301      	adds	r3, #1
 8006a22:	4a06      	ldr	r2, [pc, #24]	@ (8006a3c <vPortFree+0xc4>)
 8006a24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a26:	f7fe fc6f 	bl	8005308 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a2a:	bf00      	nop
 8006a2c:	3718      	adds	r7, #24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	20001a24 	.word	0x20001a24
 8006a38:	20001a14 	.word	0x20001a14
 8006a3c:	20001a20 	.word	0x20001a20

08006a40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a46:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006a4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a4c:	4b27      	ldr	r3, [pc, #156]	@ (8006aec <prvHeapInit+0xac>)
 8006a4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f003 0307 	and.w	r3, r3, #7
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00c      	beq.n	8006a74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	3307      	adds	r3, #7
 8006a5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0307 	bic.w	r3, r3, #7
 8006a66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8006aec <prvHeapInit+0xac>)
 8006a70:	4413      	add	r3, r2
 8006a72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a78:	4a1d      	ldr	r2, [pc, #116]	@ (8006af0 <prvHeapInit+0xb0>)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8006af0 <prvHeapInit+0xb0>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	4413      	add	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a8c:	2208      	movs	r2, #8
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	1a9b      	subs	r3, r3, r2
 8006a92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0307 	bic.w	r3, r3, #7
 8006a9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4a15      	ldr	r2, [pc, #84]	@ (8006af4 <prvHeapInit+0xb4>)
 8006aa0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006aa2:	4b14      	ldr	r3, [pc, #80]	@ (8006af4 <prvHeapInit+0xb4>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006aaa:	4b12      	ldr	r3, [pc, #72]	@ (8006af4 <prvHeapInit+0xb4>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	1ad2      	subs	r2, r2, r3
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8006af4 <prvHeapInit+0xb4>)
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	4a0a      	ldr	r2, [pc, #40]	@ (8006af8 <prvHeapInit+0xb8>)
 8006ace:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	4a09      	ldr	r2, [pc, #36]	@ (8006afc <prvHeapInit+0xbc>)
 8006ad6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ad8:	4b09      	ldr	r3, [pc, #36]	@ (8006b00 <prvHeapInit+0xc0>)
 8006ada:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006ade:	601a      	str	r2, [r3, #0]
}
 8006ae0:	bf00      	nop
 8006ae2:	3714      	adds	r7, #20
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	20000e50 	.word	0x20000e50
 8006af0:	20001a08 	.word	0x20001a08
 8006af4:	20001a10 	.word	0x20001a10
 8006af8:	20001a18 	.word	0x20001a18
 8006afc:	20001a14 	.word	0x20001a14
 8006b00:	20001a24 	.word	0x20001a24

08006b04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b0c:	4b28      	ldr	r3, [pc, #160]	@ (8006bb0 <prvInsertBlockIntoFreeList+0xac>)
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	e002      	b.n	8006b18 <prvInsertBlockIntoFreeList+0x14>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d8f7      	bhi.n	8006b12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d108      	bne.n	8006b46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	441a      	add	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	441a      	add	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d118      	bne.n	8006b8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	4b15      	ldr	r3, [pc, #84]	@ (8006bb4 <prvInsertBlockIntoFreeList+0xb0>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d00d      	beq.n	8006b82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	441a      	add	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	e008      	b.n	8006b94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b82:	4b0c      	ldr	r3, [pc, #48]	@ (8006bb4 <prvInsertBlockIntoFreeList+0xb0>)
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	e003      	b.n	8006b94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d002      	beq.n	8006ba2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ba2:	bf00      	nop
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	20001a08 	.word	0x20001a08
 8006bb4:	20001a10 	.word	0x20001a10

08006bb8 <_vsniprintf_r>:
 8006bb8:	b530      	push	{r4, r5, lr}
 8006bba:	4614      	mov	r4, r2
 8006bbc:	2c00      	cmp	r4, #0
 8006bbe:	b09b      	sub	sp, #108	@ 0x6c
 8006bc0:	4605      	mov	r5, r0
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	da05      	bge.n	8006bd2 <_vsniprintf_r+0x1a>
 8006bc6:	238b      	movs	r3, #139	@ 0x8b
 8006bc8:	6003      	str	r3, [r0, #0]
 8006bca:	f04f 30ff 	mov.w	r0, #4294967295
 8006bce:	b01b      	add	sp, #108	@ 0x6c
 8006bd0:	bd30      	pop	{r4, r5, pc}
 8006bd2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006bd6:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006bda:	f04f 0300 	mov.w	r3, #0
 8006bde:	9319      	str	r3, [sp, #100]	@ 0x64
 8006be0:	bf14      	ite	ne
 8006be2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006be6:	4623      	moveq	r3, r4
 8006be8:	9302      	str	r3, [sp, #8]
 8006bea:	9305      	str	r3, [sp, #20]
 8006bec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006bf0:	9100      	str	r1, [sp, #0]
 8006bf2:	9104      	str	r1, [sp, #16]
 8006bf4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006bf8:	4669      	mov	r1, sp
 8006bfa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006bfc:	f000 f9ae 	bl	8006f5c <_svfiprintf_r>
 8006c00:	1c43      	adds	r3, r0, #1
 8006c02:	bfbc      	itt	lt
 8006c04:	238b      	movlt	r3, #139	@ 0x8b
 8006c06:	602b      	strlt	r3, [r5, #0]
 8006c08:	2c00      	cmp	r4, #0
 8006c0a:	d0e0      	beq.n	8006bce <_vsniprintf_r+0x16>
 8006c0c:	9b00      	ldr	r3, [sp, #0]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	701a      	strb	r2, [r3, #0]
 8006c12:	e7dc      	b.n	8006bce <_vsniprintf_r+0x16>

08006c14 <vsniprintf>:
 8006c14:	b507      	push	{r0, r1, r2, lr}
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	460a      	mov	r2, r1
 8006c1c:	4601      	mov	r1, r0
 8006c1e:	4803      	ldr	r0, [pc, #12]	@ (8006c2c <vsniprintf+0x18>)
 8006c20:	6800      	ldr	r0, [r0, #0]
 8006c22:	f7ff ffc9 	bl	8006bb8 <_vsniprintf_r>
 8006c26:	b003      	add	sp, #12
 8006c28:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c2c:	20000010 	.word	0x20000010

08006c30 <memset>:
 8006c30:	4402      	add	r2, r0
 8006c32:	4603      	mov	r3, r0
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d100      	bne.n	8006c3a <memset+0xa>
 8006c38:	4770      	bx	lr
 8006c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c3e:	e7f9      	b.n	8006c34 <memset+0x4>

08006c40 <__errno>:
 8006c40:	4b01      	ldr	r3, [pc, #4]	@ (8006c48 <__errno+0x8>)
 8006c42:	6818      	ldr	r0, [r3, #0]
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	20000010 	.word	0x20000010

08006c4c <__libc_init_array>:
 8006c4c:	b570      	push	{r4, r5, r6, lr}
 8006c4e:	4d0d      	ldr	r5, [pc, #52]	@ (8006c84 <__libc_init_array+0x38>)
 8006c50:	4c0d      	ldr	r4, [pc, #52]	@ (8006c88 <__libc_init_array+0x3c>)
 8006c52:	1b64      	subs	r4, r4, r5
 8006c54:	10a4      	asrs	r4, r4, #2
 8006c56:	2600      	movs	r6, #0
 8006c58:	42a6      	cmp	r6, r4
 8006c5a:	d109      	bne.n	8006c70 <__libc_init_array+0x24>
 8006c5c:	4d0b      	ldr	r5, [pc, #44]	@ (8006c8c <__libc_init_array+0x40>)
 8006c5e:	4c0c      	ldr	r4, [pc, #48]	@ (8006c90 <__libc_init_array+0x44>)
 8006c60:	f000 fc64 	bl	800752c <_init>
 8006c64:	1b64      	subs	r4, r4, r5
 8006c66:	10a4      	asrs	r4, r4, #2
 8006c68:	2600      	movs	r6, #0
 8006c6a:	42a6      	cmp	r6, r4
 8006c6c:	d105      	bne.n	8006c7a <__libc_init_array+0x2e>
 8006c6e:	bd70      	pop	{r4, r5, r6, pc}
 8006c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c74:	4798      	blx	r3
 8006c76:	3601      	adds	r6, #1
 8006c78:	e7ee      	b.n	8006c58 <__libc_init_array+0xc>
 8006c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c7e:	4798      	blx	r3
 8006c80:	3601      	adds	r6, #1
 8006c82:	e7f2      	b.n	8006c6a <__libc_init_array+0x1e>
 8006c84:	0800768c 	.word	0x0800768c
 8006c88:	0800768c 	.word	0x0800768c
 8006c8c:	0800768c 	.word	0x0800768c
 8006c90:	08007690 	.word	0x08007690

08006c94 <__retarget_lock_acquire_recursive>:
 8006c94:	4770      	bx	lr

08006c96 <__retarget_lock_release_recursive>:
 8006c96:	4770      	bx	lr

08006c98 <memcpy>:
 8006c98:	440a      	add	r2, r1
 8006c9a:	4291      	cmp	r1, r2
 8006c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ca0:	d100      	bne.n	8006ca4 <memcpy+0xc>
 8006ca2:	4770      	bx	lr
 8006ca4:	b510      	push	{r4, lr}
 8006ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006caa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cae:	4291      	cmp	r1, r2
 8006cb0:	d1f9      	bne.n	8006ca6 <memcpy+0xe>
 8006cb2:	bd10      	pop	{r4, pc}

08006cb4 <_free_r>:
 8006cb4:	b538      	push	{r3, r4, r5, lr}
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	2900      	cmp	r1, #0
 8006cba:	d041      	beq.n	8006d40 <_free_r+0x8c>
 8006cbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cc0:	1f0c      	subs	r4, r1, #4
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	bfb8      	it	lt
 8006cc6:	18e4      	addlt	r4, r4, r3
 8006cc8:	f000 f8e0 	bl	8006e8c <__malloc_lock>
 8006ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8006d44 <_free_r+0x90>)
 8006cce:	6813      	ldr	r3, [r2, #0]
 8006cd0:	b933      	cbnz	r3, 8006ce0 <_free_r+0x2c>
 8006cd2:	6063      	str	r3, [r4, #4]
 8006cd4:	6014      	str	r4, [r2, #0]
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cdc:	f000 b8dc 	b.w	8006e98 <__malloc_unlock>
 8006ce0:	42a3      	cmp	r3, r4
 8006ce2:	d908      	bls.n	8006cf6 <_free_r+0x42>
 8006ce4:	6820      	ldr	r0, [r4, #0]
 8006ce6:	1821      	adds	r1, r4, r0
 8006ce8:	428b      	cmp	r3, r1
 8006cea:	bf01      	itttt	eq
 8006cec:	6819      	ldreq	r1, [r3, #0]
 8006cee:	685b      	ldreq	r3, [r3, #4]
 8006cf0:	1809      	addeq	r1, r1, r0
 8006cf2:	6021      	streq	r1, [r4, #0]
 8006cf4:	e7ed      	b.n	8006cd2 <_free_r+0x1e>
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	b10b      	cbz	r3, 8006d00 <_free_r+0x4c>
 8006cfc:	42a3      	cmp	r3, r4
 8006cfe:	d9fa      	bls.n	8006cf6 <_free_r+0x42>
 8006d00:	6811      	ldr	r1, [r2, #0]
 8006d02:	1850      	adds	r0, r2, r1
 8006d04:	42a0      	cmp	r0, r4
 8006d06:	d10b      	bne.n	8006d20 <_free_r+0x6c>
 8006d08:	6820      	ldr	r0, [r4, #0]
 8006d0a:	4401      	add	r1, r0
 8006d0c:	1850      	adds	r0, r2, r1
 8006d0e:	4283      	cmp	r3, r0
 8006d10:	6011      	str	r1, [r2, #0]
 8006d12:	d1e0      	bne.n	8006cd6 <_free_r+0x22>
 8006d14:	6818      	ldr	r0, [r3, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	6053      	str	r3, [r2, #4]
 8006d1a:	4408      	add	r0, r1
 8006d1c:	6010      	str	r0, [r2, #0]
 8006d1e:	e7da      	b.n	8006cd6 <_free_r+0x22>
 8006d20:	d902      	bls.n	8006d28 <_free_r+0x74>
 8006d22:	230c      	movs	r3, #12
 8006d24:	602b      	str	r3, [r5, #0]
 8006d26:	e7d6      	b.n	8006cd6 <_free_r+0x22>
 8006d28:	6820      	ldr	r0, [r4, #0]
 8006d2a:	1821      	adds	r1, r4, r0
 8006d2c:	428b      	cmp	r3, r1
 8006d2e:	bf04      	itt	eq
 8006d30:	6819      	ldreq	r1, [r3, #0]
 8006d32:	685b      	ldreq	r3, [r3, #4]
 8006d34:	6063      	str	r3, [r4, #4]
 8006d36:	bf04      	itt	eq
 8006d38:	1809      	addeq	r1, r1, r0
 8006d3a:	6021      	streq	r1, [r4, #0]
 8006d3c:	6054      	str	r4, [r2, #4]
 8006d3e:	e7ca      	b.n	8006cd6 <_free_r+0x22>
 8006d40:	bd38      	pop	{r3, r4, r5, pc}
 8006d42:	bf00      	nop
 8006d44:	20001b6c 	.word	0x20001b6c

08006d48 <sbrk_aligned>:
 8006d48:	b570      	push	{r4, r5, r6, lr}
 8006d4a:	4e0f      	ldr	r6, [pc, #60]	@ (8006d88 <sbrk_aligned+0x40>)
 8006d4c:	460c      	mov	r4, r1
 8006d4e:	6831      	ldr	r1, [r6, #0]
 8006d50:	4605      	mov	r5, r0
 8006d52:	b911      	cbnz	r1, 8006d5a <sbrk_aligned+0x12>
 8006d54:	f000 fba4 	bl	80074a0 <_sbrk_r>
 8006d58:	6030      	str	r0, [r6, #0]
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f000 fb9f 	bl	80074a0 <_sbrk_r>
 8006d62:	1c43      	adds	r3, r0, #1
 8006d64:	d103      	bne.n	8006d6e <sbrk_aligned+0x26>
 8006d66:	f04f 34ff 	mov.w	r4, #4294967295
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	bd70      	pop	{r4, r5, r6, pc}
 8006d6e:	1cc4      	adds	r4, r0, #3
 8006d70:	f024 0403 	bic.w	r4, r4, #3
 8006d74:	42a0      	cmp	r0, r4
 8006d76:	d0f8      	beq.n	8006d6a <sbrk_aligned+0x22>
 8006d78:	1a21      	subs	r1, r4, r0
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	f000 fb90 	bl	80074a0 <_sbrk_r>
 8006d80:	3001      	adds	r0, #1
 8006d82:	d1f2      	bne.n	8006d6a <sbrk_aligned+0x22>
 8006d84:	e7ef      	b.n	8006d66 <sbrk_aligned+0x1e>
 8006d86:	bf00      	nop
 8006d88:	20001b68 	.word	0x20001b68

08006d8c <_malloc_r>:
 8006d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d90:	1ccd      	adds	r5, r1, #3
 8006d92:	f025 0503 	bic.w	r5, r5, #3
 8006d96:	3508      	adds	r5, #8
 8006d98:	2d0c      	cmp	r5, #12
 8006d9a:	bf38      	it	cc
 8006d9c:	250c      	movcc	r5, #12
 8006d9e:	2d00      	cmp	r5, #0
 8006da0:	4606      	mov	r6, r0
 8006da2:	db01      	blt.n	8006da8 <_malloc_r+0x1c>
 8006da4:	42a9      	cmp	r1, r5
 8006da6:	d904      	bls.n	8006db2 <_malloc_r+0x26>
 8006da8:	230c      	movs	r3, #12
 8006daa:	6033      	str	r3, [r6, #0]
 8006dac:	2000      	movs	r0, #0
 8006dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006db2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e88 <_malloc_r+0xfc>
 8006db6:	f000 f869 	bl	8006e8c <__malloc_lock>
 8006dba:	f8d8 3000 	ldr.w	r3, [r8]
 8006dbe:	461c      	mov	r4, r3
 8006dc0:	bb44      	cbnz	r4, 8006e14 <_malloc_r+0x88>
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f7ff ffbf 	bl	8006d48 <sbrk_aligned>
 8006dca:	1c43      	adds	r3, r0, #1
 8006dcc:	4604      	mov	r4, r0
 8006dce:	d158      	bne.n	8006e82 <_malloc_r+0xf6>
 8006dd0:	f8d8 4000 	ldr.w	r4, [r8]
 8006dd4:	4627      	mov	r7, r4
 8006dd6:	2f00      	cmp	r7, #0
 8006dd8:	d143      	bne.n	8006e62 <_malloc_r+0xd6>
 8006dda:	2c00      	cmp	r4, #0
 8006ddc:	d04b      	beq.n	8006e76 <_malloc_r+0xea>
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	4639      	mov	r1, r7
 8006de2:	4630      	mov	r0, r6
 8006de4:	eb04 0903 	add.w	r9, r4, r3
 8006de8:	f000 fb5a 	bl	80074a0 <_sbrk_r>
 8006dec:	4581      	cmp	r9, r0
 8006dee:	d142      	bne.n	8006e76 <_malloc_r+0xea>
 8006df0:	6821      	ldr	r1, [r4, #0]
 8006df2:	1a6d      	subs	r5, r5, r1
 8006df4:	4629      	mov	r1, r5
 8006df6:	4630      	mov	r0, r6
 8006df8:	f7ff ffa6 	bl	8006d48 <sbrk_aligned>
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	d03a      	beq.n	8006e76 <_malloc_r+0xea>
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	442b      	add	r3, r5
 8006e04:	6023      	str	r3, [r4, #0]
 8006e06:	f8d8 3000 	ldr.w	r3, [r8]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	bb62      	cbnz	r2, 8006e68 <_malloc_r+0xdc>
 8006e0e:	f8c8 7000 	str.w	r7, [r8]
 8006e12:	e00f      	b.n	8006e34 <_malloc_r+0xa8>
 8006e14:	6822      	ldr	r2, [r4, #0]
 8006e16:	1b52      	subs	r2, r2, r5
 8006e18:	d420      	bmi.n	8006e5c <_malloc_r+0xd0>
 8006e1a:	2a0b      	cmp	r2, #11
 8006e1c:	d917      	bls.n	8006e4e <_malloc_r+0xc2>
 8006e1e:	1961      	adds	r1, r4, r5
 8006e20:	42a3      	cmp	r3, r4
 8006e22:	6025      	str	r5, [r4, #0]
 8006e24:	bf18      	it	ne
 8006e26:	6059      	strne	r1, [r3, #4]
 8006e28:	6863      	ldr	r3, [r4, #4]
 8006e2a:	bf08      	it	eq
 8006e2c:	f8c8 1000 	streq.w	r1, [r8]
 8006e30:	5162      	str	r2, [r4, r5]
 8006e32:	604b      	str	r3, [r1, #4]
 8006e34:	4630      	mov	r0, r6
 8006e36:	f000 f82f 	bl	8006e98 <__malloc_unlock>
 8006e3a:	f104 000b 	add.w	r0, r4, #11
 8006e3e:	1d23      	adds	r3, r4, #4
 8006e40:	f020 0007 	bic.w	r0, r0, #7
 8006e44:	1ac2      	subs	r2, r0, r3
 8006e46:	bf1c      	itt	ne
 8006e48:	1a1b      	subne	r3, r3, r0
 8006e4a:	50a3      	strne	r3, [r4, r2]
 8006e4c:	e7af      	b.n	8006dae <_malloc_r+0x22>
 8006e4e:	6862      	ldr	r2, [r4, #4]
 8006e50:	42a3      	cmp	r3, r4
 8006e52:	bf0c      	ite	eq
 8006e54:	f8c8 2000 	streq.w	r2, [r8]
 8006e58:	605a      	strne	r2, [r3, #4]
 8006e5a:	e7eb      	b.n	8006e34 <_malloc_r+0xa8>
 8006e5c:	4623      	mov	r3, r4
 8006e5e:	6864      	ldr	r4, [r4, #4]
 8006e60:	e7ae      	b.n	8006dc0 <_malloc_r+0x34>
 8006e62:	463c      	mov	r4, r7
 8006e64:	687f      	ldr	r7, [r7, #4]
 8006e66:	e7b6      	b.n	8006dd6 <_malloc_r+0x4a>
 8006e68:	461a      	mov	r2, r3
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	42a3      	cmp	r3, r4
 8006e6e:	d1fb      	bne.n	8006e68 <_malloc_r+0xdc>
 8006e70:	2300      	movs	r3, #0
 8006e72:	6053      	str	r3, [r2, #4]
 8006e74:	e7de      	b.n	8006e34 <_malloc_r+0xa8>
 8006e76:	230c      	movs	r3, #12
 8006e78:	6033      	str	r3, [r6, #0]
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	f000 f80c 	bl	8006e98 <__malloc_unlock>
 8006e80:	e794      	b.n	8006dac <_malloc_r+0x20>
 8006e82:	6005      	str	r5, [r0, #0]
 8006e84:	e7d6      	b.n	8006e34 <_malloc_r+0xa8>
 8006e86:	bf00      	nop
 8006e88:	20001b6c 	.word	0x20001b6c

08006e8c <__malloc_lock>:
 8006e8c:	4801      	ldr	r0, [pc, #4]	@ (8006e94 <__malloc_lock+0x8>)
 8006e8e:	f7ff bf01 	b.w	8006c94 <__retarget_lock_acquire_recursive>
 8006e92:	bf00      	nop
 8006e94:	20001b64 	.word	0x20001b64

08006e98 <__malloc_unlock>:
 8006e98:	4801      	ldr	r0, [pc, #4]	@ (8006ea0 <__malloc_unlock+0x8>)
 8006e9a:	f7ff befc 	b.w	8006c96 <__retarget_lock_release_recursive>
 8006e9e:	bf00      	nop
 8006ea0:	20001b64 	.word	0x20001b64

08006ea4 <__ssputs_r>:
 8006ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ea8:	688e      	ldr	r6, [r1, #8]
 8006eaa:	461f      	mov	r7, r3
 8006eac:	42be      	cmp	r6, r7
 8006eae:	680b      	ldr	r3, [r1, #0]
 8006eb0:	4682      	mov	sl, r0
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	4690      	mov	r8, r2
 8006eb6:	d82d      	bhi.n	8006f14 <__ssputs_r+0x70>
 8006eb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ebc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006ec0:	d026      	beq.n	8006f10 <__ssputs_r+0x6c>
 8006ec2:	6965      	ldr	r5, [r4, #20]
 8006ec4:	6909      	ldr	r1, [r1, #16]
 8006ec6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006eca:	eba3 0901 	sub.w	r9, r3, r1
 8006ece:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ed2:	1c7b      	adds	r3, r7, #1
 8006ed4:	444b      	add	r3, r9
 8006ed6:	106d      	asrs	r5, r5, #1
 8006ed8:	429d      	cmp	r5, r3
 8006eda:	bf38      	it	cc
 8006edc:	461d      	movcc	r5, r3
 8006ede:	0553      	lsls	r3, r2, #21
 8006ee0:	d527      	bpl.n	8006f32 <__ssputs_r+0x8e>
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	f7ff ff52 	bl	8006d8c <_malloc_r>
 8006ee8:	4606      	mov	r6, r0
 8006eea:	b360      	cbz	r0, 8006f46 <__ssputs_r+0xa2>
 8006eec:	6921      	ldr	r1, [r4, #16]
 8006eee:	464a      	mov	r2, r9
 8006ef0:	f7ff fed2 	bl	8006c98 <memcpy>
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006efe:	81a3      	strh	r3, [r4, #12]
 8006f00:	6126      	str	r6, [r4, #16]
 8006f02:	6165      	str	r5, [r4, #20]
 8006f04:	444e      	add	r6, r9
 8006f06:	eba5 0509 	sub.w	r5, r5, r9
 8006f0a:	6026      	str	r6, [r4, #0]
 8006f0c:	60a5      	str	r5, [r4, #8]
 8006f0e:	463e      	mov	r6, r7
 8006f10:	42be      	cmp	r6, r7
 8006f12:	d900      	bls.n	8006f16 <__ssputs_r+0x72>
 8006f14:	463e      	mov	r6, r7
 8006f16:	6820      	ldr	r0, [r4, #0]
 8006f18:	4632      	mov	r2, r6
 8006f1a:	4641      	mov	r1, r8
 8006f1c:	f000 faa6 	bl	800746c <memmove>
 8006f20:	68a3      	ldr	r3, [r4, #8]
 8006f22:	1b9b      	subs	r3, r3, r6
 8006f24:	60a3      	str	r3, [r4, #8]
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	4433      	add	r3, r6
 8006f2a:	6023      	str	r3, [r4, #0]
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f32:	462a      	mov	r2, r5
 8006f34:	f000 fac4 	bl	80074c0 <_realloc_r>
 8006f38:	4606      	mov	r6, r0
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	d1e0      	bne.n	8006f00 <__ssputs_r+0x5c>
 8006f3e:	6921      	ldr	r1, [r4, #16]
 8006f40:	4650      	mov	r0, sl
 8006f42:	f7ff feb7 	bl	8006cb4 <_free_r>
 8006f46:	230c      	movs	r3, #12
 8006f48:	f8ca 3000 	str.w	r3, [sl]
 8006f4c:	89a3      	ldrh	r3, [r4, #12]
 8006f4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f52:	81a3      	strh	r3, [r4, #12]
 8006f54:	f04f 30ff 	mov.w	r0, #4294967295
 8006f58:	e7e9      	b.n	8006f2e <__ssputs_r+0x8a>
	...

08006f5c <_svfiprintf_r>:
 8006f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f60:	4698      	mov	r8, r3
 8006f62:	898b      	ldrh	r3, [r1, #12]
 8006f64:	061b      	lsls	r3, r3, #24
 8006f66:	b09d      	sub	sp, #116	@ 0x74
 8006f68:	4607      	mov	r7, r0
 8006f6a:	460d      	mov	r5, r1
 8006f6c:	4614      	mov	r4, r2
 8006f6e:	d510      	bpl.n	8006f92 <_svfiprintf_r+0x36>
 8006f70:	690b      	ldr	r3, [r1, #16]
 8006f72:	b973      	cbnz	r3, 8006f92 <_svfiprintf_r+0x36>
 8006f74:	2140      	movs	r1, #64	@ 0x40
 8006f76:	f7ff ff09 	bl	8006d8c <_malloc_r>
 8006f7a:	6028      	str	r0, [r5, #0]
 8006f7c:	6128      	str	r0, [r5, #16]
 8006f7e:	b930      	cbnz	r0, 8006f8e <_svfiprintf_r+0x32>
 8006f80:	230c      	movs	r3, #12
 8006f82:	603b      	str	r3, [r7, #0]
 8006f84:	f04f 30ff 	mov.w	r0, #4294967295
 8006f88:	b01d      	add	sp, #116	@ 0x74
 8006f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f8e:	2340      	movs	r3, #64	@ 0x40
 8006f90:	616b      	str	r3, [r5, #20]
 8006f92:	2300      	movs	r3, #0
 8006f94:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f96:	2320      	movs	r3, #32
 8006f98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fa0:	2330      	movs	r3, #48	@ 0x30
 8006fa2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007140 <_svfiprintf_r+0x1e4>
 8006fa6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006faa:	f04f 0901 	mov.w	r9, #1
 8006fae:	4623      	mov	r3, r4
 8006fb0:	469a      	mov	sl, r3
 8006fb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fb6:	b10a      	cbz	r2, 8006fbc <_svfiprintf_r+0x60>
 8006fb8:	2a25      	cmp	r2, #37	@ 0x25
 8006fba:	d1f9      	bne.n	8006fb0 <_svfiprintf_r+0x54>
 8006fbc:	ebba 0b04 	subs.w	fp, sl, r4
 8006fc0:	d00b      	beq.n	8006fda <_svfiprintf_r+0x7e>
 8006fc2:	465b      	mov	r3, fp
 8006fc4:	4622      	mov	r2, r4
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	4638      	mov	r0, r7
 8006fca:	f7ff ff6b 	bl	8006ea4 <__ssputs_r>
 8006fce:	3001      	adds	r0, #1
 8006fd0:	f000 80a7 	beq.w	8007122 <_svfiprintf_r+0x1c6>
 8006fd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fd6:	445a      	add	r2, fp
 8006fd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fda:	f89a 3000 	ldrb.w	r3, [sl]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f000 809f 	beq.w	8007122 <_svfiprintf_r+0x1c6>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8006fea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fee:	f10a 0a01 	add.w	sl, sl, #1
 8006ff2:	9304      	str	r3, [sp, #16]
 8006ff4:	9307      	str	r3, [sp, #28]
 8006ff6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ffa:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ffc:	4654      	mov	r4, sl
 8006ffe:	2205      	movs	r2, #5
 8007000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007004:	484e      	ldr	r0, [pc, #312]	@ (8007140 <_svfiprintf_r+0x1e4>)
 8007006:	f7f9 f8fb 	bl	8000200 <memchr>
 800700a:	9a04      	ldr	r2, [sp, #16]
 800700c:	b9d8      	cbnz	r0, 8007046 <_svfiprintf_r+0xea>
 800700e:	06d0      	lsls	r0, r2, #27
 8007010:	bf44      	itt	mi
 8007012:	2320      	movmi	r3, #32
 8007014:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007018:	0711      	lsls	r1, r2, #28
 800701a:	bf44      	itt	mi
 800701c:	232b      	movmi	r3, #43	@ 0x2b
 800701e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007022:	f89a 3000 	ldrb.w	r3, [sl]
 8007026:	2b2a      	cmp	r3, #42	@ 0x2a
 8007028:	d015      	beq.n	8007056 <_svfiprintf_r+0xfa>
 800702a:	9a07      	ldr	r2, [sp, #28]
 800702c:	4654      	mov	r4, sl
 800702e:	2000      	movs	r0, #0
 8007030:	f04f 0c0a 	mov.w	ip, #10
 8007034:	4621      	mov	r1, r4
 8007036:	f811 3b01 	ldrb.w	r3, [r1], #1
 800703a:	3b30      	subs	r3, #48	@ 0x30
 800703c:	2b09      	cmp	r3, #9
 800703e:	d94b      	bls.n	80070d8 <_svfiprintf_r+0x17c>
 8007040:	b1b0      	cbz	r0, 8007070 <_svfiprintf_r+0x114>
 8007042:	9207      	str	r2, [sp, #28]
 8007044:	e014      	b.n	8007070 <_svfiprintf_r+0x114>
 8007046:	eba0 0308 	sub.w	r3, r0, r8
 800704a:	fa09 f303 	lsl.w	r3, r9, r3
 800704e:	4313      	orrs	r3, r2
 8007050:	9304      	str	r3, [sp, #16]
 8007052:	46a2      	mov	sl, r4
 8007054:	e7d2      	b.n	8006ffc <_svfiprintf_r+0xa0>
 8007056:	9b03      	ldr	r3, [sp, #12]
 8007058:	1d19      	adds	r1, r3, #4
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	9103      	str	r1, [sp, #12]
 800705e:	2b00      	cmp	r3, #0
 8007060:	bfbb      	ittet	lt
 8007062:	425b      	neglt	r3, r3
 8007064:	f042 0202 	orrlt.w	r2, r2, #2
 8007068:	9307      	strge	r3, [sp, #28]
 800706a:	9307      	strlt	r3, [sp, #28]
 800706c:	bfb8      	it	lt
 800706e:	9204      	strlt	r2, [sp, #16]
 8007070:	7823      	ldrb	r3, [r4, #0]
 8007072:	2b2e      	cmp	r3, #46	@ 0x2e
 8007074:	d10a      	bne.n	800708c <_svfiprintf_r+0x130>
 8007076:	7863      	ldrb	r3, [r4, #1]
 8007078:	2b2a      	cmp	r3, #42	@ 0x2a
 800707a:	d132      	bne.n	80070e2 <_svfiprintf_r+0x186>
 800707c:	9b03      	ldr	r3, [sp, #12]
 800707e:	1d1a      	adds	r2, r3, #4
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	9203      	str	r2, [sp, #12]
 8007084:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007088:	3402      	adds	r4, #2
 800708a:	9305      	str	r3, [sp, #20]
 800708c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007150 <_svfiprintf_r+0x1f4>
 8007090:	7821      	ldrb	r1, [r4, #0]
 8007092:	2203      	movs	r2, #3
 8007094:	4650      	mov	r0, sl
 8007096:	f7f9 f8b3 	bl	8000200 <memchr>
 800709a:	b138      	cbz	r0, 80070ac <_svfiprintf_r+0x150>
 800709c:	9b04      	ldr	r3, [sp, #16]
 800709e:	eba0 000a 	sub.w	r0, r0, sl
 80070a2:	2240      	movs	r2, #64	@ 0x40
 80070a4:	4082      	lsls	r2, r0
 80070a6:	4313      	orrs	r3, r2
 80070a8:	3401      	adds	r4, #1
 80070aa:	9304      	str	r3, [sp, #16]
 80070ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070b0:	4824      	ldr	r0, [pc, #144]	@ (8007144 <_svfiprintf_r+0x1e8>)
 80070b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070b6:	2206      	movs	r2, #6
 80070b8:	f7f9 f8a2 	bl	8000200 <memchr>
 80070bc:	2800      	cmp	r0, #0
 80070be:	d036      	beq.n	800712e <_svfiprintf_r+0x1d2>
 80070c0:	4b21      	ldr	r3, [pc, #132]	@ (8007148 <_svfiprintf_r+0x1ec>)
 80070c2:	bb1b      	cbnz	r3, 800710c <_svfiprintf_r+0x1b0>
 80070c4:	9b03      	ldr	r3, [sp, #12]
 80070c6:	3307      	adds	r3, #7
 80070c8:	f023 0307 	bic.w	r3, r3, #7
 80070cc:	3308      	adds	r3, #8
 80070ce:	9303      	str	r3, [sp, #12]
 80070d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070d2:	4433      	add	r3, r6
 80070d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80070d6:	e76a      	b.n	8006fae <_svfiprintf_r+0x52>
 80070d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80070dc:	460c      	mov	r4, r1
 80070de:	2001      	movs	r0, #1
 80070e0:	e7a8      	b.n	8007034 <_svfiprintf_r+0xd8>
 80070e2:	2300      	movs	r3, #0
 80070e4:	3401      	adds	r4, #1
 80070e6:	9305      	str	r3, [sp, #20]
 80070e8:	4619      	mov	r1, r3
 80070ea:	f04f 0c0a 	mov.w	ip, #10
 80070ee:	4620      	mov	r0, r4
 80070f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070f4:	3a30      	subs	r2, #48	@ 0x30
 80070f6:	2a09      	cmp	r2, #9
 80070f8:	d903      	bls.n	8007102 <_svfiprintf_r+0x1a6>
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d0c6      	beq.n	800708c <_svfiprintf_r+0x130>
 80070fe:	9105      	str	r1, [sp, #20]
 8007100:	e7c4      	b.n	800708c <_svfiprintf_r+0x130>
 8007102:	fb0c 2101 	mla	r1, ip, r1, r2
 8007106:	4604      	mov	r4, r0
 8007108:	2301      	movs	r3, #1
 800710a:	e7f0      	b.n	80070ee <_svfiprintf_r+0x192>
 800710c:	ab03      	add	r3, sp, #12
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	462a      	mov	r2, r5
 8007112:	4b0e      	ldr	r3, [pc, #56]	@ (800714c <_svfiprintf_r+0x1f0>)
 8007114:	a904      	add	r1, sp, #16
 8007116:	4638      	mov	r0, r7
 8007118:	f3af 8000 	nop.w
 800711c:	1c42      	adds	r2, r0, #1
 800711e:	4606      	mov	r6, r0
 8007120:	d1d6      	bne.n	80070d0 <_svfiprintf_r+0x174>
 8007122:	89ab      	ldrh	r3, [r5, #12]
 8007124:	065b      	lsls	r3, r3, #25
 8007126:	f53f af2d 	bmi.w	8006f84 <_svfiprintf_r+0x28>
 800712a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800712c:	e72c      	b.n	8006f88 <_svfiprintf_r+0x2c>
 800712e:	ab03      	add	r3, sp, #12
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	462a      	mov	r2, r5
 8007134:	4b05      	ldr	r3, [pc, #20]	@ (800714c <_svfiprintf_r+0x1f0>)
 8007136:	a904      	add	r1, sp, #16
 8007138:	4638      	mov	r0, r7
 800713a:	f000 f879 	bl	8007230 <_printf_i>
 800713e:	e7ed      	b.n	800711c <_svfiprintf_r+0x1c0>
 8007140:	08007650 	.word	0x08007650
 8007144:	0800765a 	.word	0x0800765a
 8007148:	00000000 	.word	0x00000000
 800714c:	08006ea5 	.word	0x08006ea5
 8007150:	08007656 	.word	0x08007656

08007154 <_printf_common>:
 8007154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007158:	4616      	mov	r6, r2
 800715a:	4698      	mov	r8, r3
 800715c:	688a      	ldr	r2, [r1, #8]
 800715e:	690b      	ldr	r3, [r1, #16]
 8007160:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007164:	4293      	cmp	r3, r2
 8007166:	bfb8      	it	lt
 8007168:	4613      	movlt	r3, r2
 800716a:	6033      	str	r3, [r6, #0]
 800716c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007170:	4607      	mov	r7, r0
 8007172:	460c      	mov	r4, r1
 8007174:	b10a      	cbz	r2, 800717a <_printf_common+0x26>
 8007176:	3301      	adds	r3, #1
 8007178:	6033      	str	r3, [r6, #0]
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	0699      	lsls	r1, r3, #26
 800717e:	bf42      	ittt	mi
 8007180:	6833      	ldrmi	r3, [r6, #0]
 8007182:	3302      	addmi	r3, #2
 8007184:	6033      	strmi	r3, [r6, #0]
 8007186:	6825      	ldr	r5, [r4, #0]
 8007188:	f015 0506 	ands.w	r5, r5, #6
 800718c:	d106      	bne.n	800719c <_printf_common+0x48>
 800718e:	f104 0a19 	add.w	sl, r4, #25
 8007192:	68e3      	ldr	r3, [r4, #12]
 8007194:	6832      	ldr	r2, [r6, #0]
 8007196:	1a9b      	subs	r3, r3, r2
 8007198:	42ab      	cmp	r3, r5
 800719a:	dc26      	bgt.n	80071ea <_printf_common+0x96>
 800719c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80071a0:	6822      	ldr	r2, [r4, #0]
 80071a2:	3b00      	subs	r3, #0
 80071a4:	bf18      	it	ne
 80071a6:	2301      	movne	r3, #1
 80071a8:	0692      	lsls	r2, r2, #26
 80071aa:	d42b      	bmi.n	8007204 <_printf_common+0xb0>
 80071ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80071b0:	4641      	mov	r1, r8
 80071b2:	4638      	mov	r0, r7
 80071b4:	47c8      	blx	r9
 80071b6:	3001      	adds	r0, #1
 80071b8:	d01e      	beq.n	80071f8 <_printf_common+0xa4>
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	6922      	ldr	r2, [r4, #16]
 80071be:	f003 0306 	and.w	r3, r3, #6
 80071c2:	2b04      	cmp	r3, #4
 80071c4:	bf02      	ittt	eq
 80071c6:	68e5      	ldreq	r5, [r4, #12]
 80071c8:	6833      	ldreq	r3, [r6, #0]
 80071ca:	1aed      	subeq	r5, r5, r3
 80071cc:	68a3      	ldr	r3, [r4, #8]
 80071ce:	bf0c      	ite	eq
 80071d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071d4:	2500      	movne	r5, #0
 80071d6:	4293      	cmp	r3, r2
 80071d8:	bfc4      	itt	gt
 80071da:	1a9b      	subgt	r3, r3, r2
 80071dc:	18ed      	addgt	r5, r5, r3
 80071de:	2600      	movs	r6, #0
 80071e0:	341a      	adds	r4, #26
 80071e2:	42b5      	cmp	r5, r6
 80071e4:	d11a      	bne.n	800721c <_printf_common+0xc8>
 80071e6:	2000      	movs	r0, #0
 80071e8:	e008      	b.n	80071fc <_printf_common+0xa8>
 80071ea:	2301      	movs	r3, #1
 80071ec:	4652      	mov	r2, sl
 80071ee:	4641      	mov	r1, r8
 80071f0:	4638      	mov	r0, r7
 80071f2:	47c8      	blx	r9
 80071f4:	3001      	adds	r0, #1
 80071f6:	d103      	bne.n	8007200 <_printf_common+0xac>
 80071f8:	f04f 30ff 	mov.w	r0, #4294967295
 80071fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007200:	3501      	adds	r5, #1
 8007202:	e7c6      	b.n	8007192 <_printf_common+0x3e>
 8007204:	18e1      	adds	r1, r4, r3
 8007206:	1c5a      	adds	r2, r3, #1
 8007208:	2030      	movs	r0, #48	@ 0x30
 800720a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800720e:	4422      	add	r2, r4
 8007210:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007214:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007218:	3302      	adds	r3, #2
 800721a:	e7c7      	b.n	80071ac <_printf_common+0x58>
 800721c:	2301      	movs	r3, #1
 800721e:	4622      	mov	r2, r4
 8007220:	4641      	mov	r1, r8
 8007222:	4638      	mov	r0, r7
 8007224:	47c8      	blx	r9
 8007226:	3001      	adds	r0, #1
 8007228:	d0e6      	beq.n	80071f8 <_printf_common+0xa4>
 800722a:	3601      	adds	r6, #1
 800722c:	e7d9      	b.n	80071e2 <_printf_common+0x8e>
	...

08007230 <_printf_i>:
 8007230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007234:	7e0f      	ldrb	r7, [r1, #24]
 8007236:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007238:	2f78      	cmp	r7, #120	@ 0x78
 800723a:	4691      	mov	r9, r2
 800723c:	4680      	mov	r8, r0
 800723e:	460c      	mov	r4, r1
 8007240:	469a      	mov	sl, r3
 8007242:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007246:	d807      	bhi.n	8007258 <_printf_i+0x28>
 8007248:	2f62      	cmp	r7, #98	@ 0x62
 800724a:	d80a      	bhi.n	8007262 <_printf_i+0x32>
 800724c:	2f00      	cmp	r7, #0
 800724e:	f000 80d1 	beq.w	80073f4 <_printf_i+0x1c4>
 8007252:	2f58      	cmp	r7, #88	@ 0x58
 8007254:	f000 80b8 	beq.w	80073c8 <_printf_i+0x198>
 8007258:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800725c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007260:	e03a      	b.n	80072d8 <_printf_i+0xa8>
 8007262:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007266:	2b15      	cmp	r3, #21
 8007268:	d8f6      	bhi.n	8007258 <_printf_i+0x28>
 800726a:	a101      	add	r1, pc, #4	@ (adr r1, 8007270 <_printf_i+0x40>)
 800726c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007270:	080072c9 	.word	0x080072c9
 8007274:	080072dd 	.word	0x080072dd
 8007278:	08007259 	.word	0x08007259
 800727c:	08007259 	.word	0x08007259
 8007280:	08007259 	.word	0x08007259
 8007284:	08007259 	.word	0x08007259
 8007288:	080072dd 	.word	0x080072dd
 800728c:	08007259 	.word	0x08007259
 8007290:	08007259 	.word	0x08007259
 8007294:	08007259 	.word	0x08007259
 8007298:	08007259 	.word	0x08007259
 800729c:	080073db 	.word	0x080073db
 80072a0:	08007307 	.word	0x08007307
 80072a4:	08007395 	.word	0x08007395
 80072a8:	08007259 	.word	0x08007259
 80072ac:	08007259 	.word	0x08007259
 80072b0:	080073fd 	.word	0x080073fd
 80072b4:	08007259 	.word	0x08007259
 80072b8:	08007307 	.word	0x08007307
 80072bc:	08007259 	.word	0x08007259
 80072c0:	08007259 	.word	0x08007259
 80072c4:	0800739d 	.word	0x0800739d
 80072c8:	6833      	ldr	r3, [r6, #0]
 80072ca:	1d1a      	adds	r2, r3, #4
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6032      	str	r2, [r6, #0]
 80072d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80072d8:	2301      	movs	r3, #1
 80072da:	e09c      	b.n	8007416 <_printf_i+0x1e6>
 80072dc:	6833      	ldr	r3, [r6, #0]
 80072de:	6820      	ldr	r0, [r4, #0]
 80072e0:	1d19      	adds	r1, r3, #4
 80072e2:	6031      	str	r1, [r6, #0]
 80072e4:	0606      	lsls	r6, r0, #24
 80072e6:	d501      	bpl.n	80072ec <_printf_i+0xbc>
 80072e8:	681d      	ldr	r5, [r3, #0]
 80072ea:	e003      	b.n	80072f4 <_printf_i+0xc4>
 80072ec:	0645      	lsls	r5, r0, #25
 80072ee:	d5fb      	bpl.n	80072e8 <_printf_i+0xb8>
 80072f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80072f4:	2d00      	cmp	r5, #0
 80072f6:	da03      	bge.n	8007300 <_printf_i+0xd0>
 80072f8:	232d      	movs	r3, #45	@ 0x2d
 80072fa:	426d      	negs	r5, r5
 80072fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007300:	4858      	ldr	r0, [pc, #352]	@ (8007464 <_printf_i+0x234>)
 8007302:	230a      	movs	r3, #10
 8007304:	e011      	b.n	800732a <_printf_i+0xfa>
 8007306:	6821      	ldr	r1, [r4, #0]
 8007308:	6833      	ldr	r3, [r6, #0]
 800730a:	0608      	lsls	r0, r1, #24
 800730c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007310:	d402      	bmi.n	8007318 <_printf_i+0xe8>
 8007312:	0649      	lsls	r1, r1, #25
 8007314:	bf48      	it	mi
 8007316:	b2ad      	uxthmi	r5, r5
 8007318:	2f6f      	cmp	r7, #111	@ 0x6f
 800731a:	4852      	ldr	r0, [pc, #328]	@ (8007464 <_printf_i+0x234>)
 800731c:	6033      	str	r3, [r6, #0]
 800731e:	bf14      	ite	ne
 8007320:	230a      	movne	r3, #10
 8007322:	2308      	moveq	r3, #8
 8007324:	2100      	movs	r1, #0
 8007326:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800732a:	6866      	ldr	r6, [r4, #4]
 800732c:	60a6      	str	r6, [r4, #8]
 800732e:	2e00      	cmp	r6, #0
 8007330:	db05      	blt.n	800733e <_printf_i+0x10e>
 8007332:	6821      	ldr	r1, [r4, #0]
 8007334:	432e      	orrs	r6, r5
 8007336:	f021 0104 	bic.w	r1, r1, #4
 800733a:	6021      	str	r1, [r4, #0]
 800733c:	d04b      	beq.n	80073d6 <_printf_i+0x1a6>
 800733e:	4616      	mov	r6, r2
 8007340:	fbb5 f1f3 	udiv	r1, r5, r3
 8007344:	fb03 5711 	mls	r7, r3, r1, r5
 8007348:	5dc7      	ldrb	r7, [r0, r7]
 800734a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800734e:	462f      	mov	r7, r5
 8007350:	42bb      	cmp	r3, r7
 8007352:	460d      	mov	r5, r1
 8007354:	d9f4      	bls.n	8007340 <_printf_i+0x110>
 8007356:	2b08      	cmp	r3, #8
 8007358:	d10b      	bne.n	8007372 <_printf_i+0x142>
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	07df      	lsls	r7, r3, #31
 800735e:	d508      	bpl.n	8007372 <_printf_i+0x142>
 8007360:	6923      	ldr	r3, [r4, #16]
 8007362:	6861      	ldr	r1, [r4, #4]
 8007364:	4299      	cmp	r1, r3
 8007366:	bfde      	ittt	le
 8007368:	2330      	movle	r3, #48	@ 0x30
 800736a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800736e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007372:	1b92      	subs	r2, r2, r6
 8007374:	6122      	str	r2, [r4, #16]
 8007376:	f8cd a000 	str.w	sl, [sp]
 800737a:	464b      	mov	r3, r9
 800737c:	aa03      	add	r2, sp, #12
 800737e:	4621      	mov	r1, r4
 8007380:	4640      	mov	r0, r8
 8007382:	f7ff fee7 	bl	8007154 <_printf_common>
 8007386:	3001      	adds	r0, #1
 8007388:	d14a      	bne.n	8007420 <_printf_i+0x1f0>
 800738a:	f04f 30ff 	mov.w	r0, #4294967295
 800738e:	b004      	add	sp, #16
 8007390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	f043 0320 	orr.w	r3, r3, #32
 800739a:	6023      	str	r3, [r4, #0]
 800739c:	4832      	ldr	r0, [pc, #200]	@ (8007468 <_printf_i+0x238>)
 800739e:	2778      	movs	r7, #120	@ 0x78
 80073a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	6831      	ldr	r1, [r6, #0]
 80073a8:	061f      	lsls	r7, r3, #24
 80073aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80073ae:	d402      	bmi.n	80073b6 <_printf_i+0x186>
 80073b0:	065f      	lsls	r7, r3, #25
 80073b2:	bf48      	it	mi
 80073b4:	b2ad      	uxthmi	r5, r5
 80073b6:	6031      	str	r1, [r6, #0]
 80073b8:	07d9      	lsls	r1, r3, #31
 80073ba:	bf44      	itt	mi
 80073bc:	f043 0320 	orrmi.w	r3, r3, #32
 80073c0:	6023      	strmi	r3, [r4, #0]
 80073c2:	b11d      	cbz	r5, 80073cc <_printf_i+0x19c>
 80073c4:	2310      	movs	r3, #16
 80073c6:	e7ad      	b.n	8007324 <_printf_i+0xf4>
 80073c8:	4826      	ldr	r0, [pc, #152]	@ (8007464 <_printf_i+0x234>)
 80073ca:	e7e9      	b.n	80073a0 <_printf_i+0x170>
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	f023 0320 	bic.w	r3, r3, #32
 80073d2:	6023      	str	r3, [r4, #0]
 80073d4:	e7f6      	b.n	80073c4 <_printf_i+0x194>
 80073d6:	4616      	mov	r6, r2
 80073d8:	e7bd      	b.n	8007356 <_printf_i+0x126>
 80073da:	6833      	ldr	r3, [r6, #0]
 80073dc:	6825      	ldr	r5, [r4, #0]
 80073de:	6961      	ldr	r1, [r4, #20]
 80073e0:	1d18      	adds	r0, r3, #4
 80073e2:	6030      	str	r0, [r6, #0]
 80073e4:	062e      	lsls	r6, r5, #24
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	d501      	bpl.n	80073ee <_printf_i+0x1be>
 80073ea:	6019      	str	r1, [r3, #0]
 80073ec:	e002      	b.n	80073f4 <_printf_i+0x1c4>
 80073ee:	0668      	lsls	r0, r5, #25
 80073f0:	d5fb      	bpl.n	80073ea <_printf_i+0x1ba>
 80073f2:	8019      	strh	r1, [r3, #0]
 80073f4:	2300      	movs	r3, #0
 80073f6:	6123      	str	r3, [r4, #16]
 80073f8:	4616      	mov	r6, r2
 80073fa:	e7bc      	b.n	8007376 <_printf_i+0x146>
 80073fc:	6833      	ldr	r3, [r6, #0]
 80073fe:	1d1a      	adds	r2, r3, #4
 8007400:	6032      	str	r2, [r6, #0]
 8007402:	681e      	ldr	r6, [r3, #0]
 8007404:	6862      	ldr	r2, [r4, #4]
 8007406:	2100      	movs	r1, #0
 8007408:	4630      	mov	r0, r6
 800740a:	f7f8 fef9 	bl	8000200 <memchr>
 800740e:	b108      	cbz	r0, 8007414 <_printf_i+0x1e4>
 8007410:	1b80      	subs	r0, r0, r6
 8007412:	6060      	str	r0, [r4, #4]
 8007414:	6863      	ldr	r3, [r4, #4]
 8007416:	6123      	str	r3, [r4, #16]
 8007418:	2300      	movs	r3, #0
 800741a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800741e:	e7aa      	b.n	8007376 <_printf_i+0x146>
 8007420:	6923      	ldr	r3, [r4, #16]
 8007422:	4632      	mov	r2, r6
 8007424:	4649      	mov	r1, r9
 8007426:	4640      	mov	r0, r8
 8007428:	47d0      	blx	sl
 800742a:	3001      	adds	r0, #1
 800742c:	d0ad      	beq.n	800738a <_printf_i+0x15a>
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	079b      	lsls	r3, r3, #30
 8007432:	d413      	bmi.n	800745c <_printf_i+0x22c>
 8007434:	68e0      	ldr	r0, [r4, #12]
 8007436:	9b03      	ldr	r3, [sp, #12]
 8007438:	4298      	cmp	r0, r3
 800743a:	bfb8      	it	lt
 800743c:	4618      	movlt	r0, r3
 800743e:	e7a6      	b.n	800738e <_printf_i+0x15e>
 8007440:	2301      	movs	r3, #1
 8007442:	4632      	mov	r2, r6
 8007444:	4649      	mov	r1, r9
 8007446:	4640      	mov	r0, r8
 8007448:	47d0      	blx	sl
 800744a:	3001      	adds	r0, #1
 800744c:	d09d      	beq.n	800738a <_printf_i+0x15a>
 800744e:	3501      	adds	r5, #1
 8007450:	68e3      	ldr	r3, [r4, #12]
 8007452:	9903      	ldr	r1, [sp, #12]
 8007454:	1a5b      	subs	r3, r3, r1
 8007456:	42ab      	cmp	r3, r5
 8007458:	dcf2      	bgt.n	8007440 <_printf_i+0x210>
 800745a:	e7eb      	b.n	8007434 <_printf_i+0x204>
 800745c:	2500      	movs	r5, #0
 800745e:	f104 0619 	add.w	r6, r4, #25
 8007462:	e7f5      	b.n	8007450 <_printf_i+0x220>
 8007464:	08007661 	.word	0x08007661
 8007468:	08007672 	.word	0x08007672

0800746c <memmove>:
 800746c:	4288      	cmp	r0, r1
 800746e:	b510      	push	{r4, lr}
 8007470:	eb01 0402 	add.w	r4, r1, r2
 8007474:	d902      	bls.n	800747c <memmove+0x10>
 8007476:	4284      	cmp	r4, r0
 8007478:	4623      	mov	r3, r4
 800747a:	d807      	bhi.n	800748c <memmove+0x20>
 800747c:	1e43      	subs	r3, r0, #1
 800747e:	42a1      	cmp	r1, r4
 8007480:	d008      	beq.n	8007494 <memmove+0x28>
 8007482:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007486:	f803 2f01 	strb.w	r2, [r3, #1]!
 800748a:	e7f8      	b.n	800747e <memmove+0x12>
 800748c:	4402      	add	r2, r0
 800748e:	4601      	mov	r1, r0
 8007490:	428a      	cmp	r2, r1
 8007492:	d100      	bne.n	8007496 <memmove+0x2a>
 8007494:	bd10      	pop	{r4, pc}
 8007496:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800749a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800749e:	e7f7      	b.n	8007490 <memmove+0x24>

080074a0 <_sbrk_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	4d06      	ldr	r5, [pc, #24]	@ (80074bc <_sbrk_r+0x1c>)
 80074a4:	2300      	movs	r3, #0
 80074a6:	4604      	mov	r4, r0
 80074a8:	4608      	mov	r0, r1
 80074aa:	602b      	str	r3, [r5, #0]
 80074ac:	f7f9 fab0 	bl	8000a10 <_sbrk>
 80074b0:	1c43      	adds	r3, r0, #1
 80074b2:	d102      	bne.n	80074ba <_sbrk_r+0x1a>
 80074b4:	682b      	ldr	r3, [r5, #0]
 80074b6:	b103      	cbz	r3, 80074ba <_sbrk_r+0x1a>
 80074b8:	6023      	str	r3, [r4, #0]
 80074ba:	bd38      	pop	{r3, r4, r5, pc}
 80074bc:	20001b60 	.word	0x20001b60

080074c0 <_realloc_r>:
 80074c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c4:	4607      	mov	r7, r0
 80074c6:	4614      	mov	r4, r2
 80074c8:	460d      	mov	r5, r1
 80074ca:	b921      	cbnz	r1, 80074d6 <_realloc_r+0x16>
 80074cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074d0:	4611      	mov	r1, r2
 80074d2:	f7ff bc5b 	b.w	8006d8c <_malloc_r>
 80074d6:	b92a      	cbnz	r2, 80074e4 <_realloc_r+0x24>
 80074d8:	f7ff fbec 	bl	8006cb4 <_free_r>
 80074dc:	4625      	mov	r5, r4
 80074de:	4628      	mov	r0, r5
 80074e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074e4:	f000 f81a 	bl	800751c <_malloc_usable_size_r>
 80074e8:	4284      	cmp	r4, r0
 80074ea:	4606      	mov	r6, r0
 80074ec:	d802      	bhi.n	80074f4 <_realloc_r+0x34>
 80074ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80074f2:	d8f4      	bhi.n	80074de <_realloc_r+0x1e>
 80074f4:	4621      	mov	r1, r4
 80074f6:	4638      	mov	r0, r7
 80074f8:	f7ff fc48 	bl	8006d8c <_malloc_r>
 80074fc:	4680      	mov	r8, r0
 80074fe:	b908      	cbnz	r0, 8007504 <_realloc_r+0x44>
 8007500:	4645      	mov	r5, r8
 8007502:	e7ec      	b.n	80074de <_realloc_r+0x1e>
 8007504:	42b4      	cmp	r4, r6
 8007506:	4622      	mov	r2, r4
 8007508:	4629      	mov	r1, r5
 800750a:	bf28      	it	cs
 800750c:	4632      	movcs	r2, r6
 800750e:	f7ff fbc3 	bl	8006c98 <memcpy>
 8007512:	4629      	mov	r1, r5
 8007514:	4638      	mov	r0, r7
 8007516:	f7ff fbcd 	bl	8006cb4 <_free_r>
 800751a:	e7f1      	b.n	8007500 <_realloc_r+0x40>

0800751c <_malloc_usable_size_r>:
 800751c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007520:	1f18      	subs	r0, r3, #4
 8007522:	2b00      	cmp	r3, #0
 8007524:	bfbc      	itt	lt
 8007526:	580b      	ldrlt	r3, [r1, r0]
 8007528:	18c0      	addlt	r0, r0, r3
 800752a:	4770      	bx	lr

0800752c <_init>:
 800752c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752e:	bf00      	nop
 8007530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007532:	bc08      	pop	{r3}
 8007534:	469e      	mov	lr, r3
 8007536:	4770      	bx	lr

08007538 <_fini>:
 8007538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753a:	bf00      	nop
 800753c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800753e:	bc08      	pop	{r3}
 8007540:	469e      	mov	lr, r3
 8007542:	4770      	bx	lr
