
lab6-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000950c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  0800969c  0800969c  0000a69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800980c  0800980c  0000b06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800980c  0800980c  0000a80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009814  08009814  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009814  08009814  0000a814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009818  08009818  0000a818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800981c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002310  2000006c  08009888  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000237c  08009888  0000b37c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002099c  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004023  00000000  00000000  0002ba38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ca0  00000000  00000000  0002fa60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001642  00000000  00000000  00031700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000059a1  00000000  00000000  00032d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f95d  00000000  00000000  000386e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ab50  00000000  00000000  00058040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00172b90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008290  00000000  00000000  00172bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0017ae64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009684 	.word	0x08009684

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08009684 	.word	0x08009684

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <__NVIC_SetVector>:
           VTOR must been relocated to SRAM before.
  \param [in]   IRQn      Interrupt number
  \param [in]   vector    Address of interrupt handler function
 */
__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	6039      	str	r1, [r7, #0]
 80005a6:	71fb      	strb	r3, [r7, #7]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 80005a8:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <__NVIC_SetVector+0x34>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	60fb      	str	r3, [r7, #12]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 80005ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b2:	3310      	adds	r3, #16
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	461a      	mov	r2, r3
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4413      	add	r3, r2
 80005bc:	461a      	mov	r2, r3
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	6013      	str	r3, [r2, #0]
  /* ARM Application Note 321 states that the M4 does not require the architectural barrier */
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80005dc:	1d39      	adds	r1, r7, #4
 80005de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005e2:	2201      	movs	r2, #1
 80005e4:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <__io_putchar+0x20>)
 80005e6:	f004 fbe5 	bl	8004db4 <HAL_UART_Transmit>
	return ch;
 80005ea:	687b      	ldr	r3, [r7, #4]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	2000008c 	.word	0x2000008c

080005f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a0a      	ldr	r2, [pc, #40]	@ (8000630 <HAL_ADC_MspInit+0x38>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d10b      	bne.n	8000622 <HAL_ADC_MspInit+0x2a>
    {
        /* Peripheral clock enable */
        __HAL_RCC_ADC_CLK_ENABLE();
 800060a:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <HAL_ADC_MspInit+0x3c>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	4a09      	ldr	r2, [pc, #36]	@ (8000634 <HAL_ADC_MspInit+0x3c>)
 8000610:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000616:	4b07      	ldr	r3, [pc, #28]	@ (8000634 <HAL_ADC_MspInit+0x3c>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
    }

}
 8000622:	bf00      	nop
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	50040000 	.word	0x50040000
 8000634:	40021000 	.word	0x40021000

08000638 <ADC1_Init>:
    }

}

void ADC1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	@ 0x28
 800063c:	af00      	add	r7, sp, #0
    ADC_MultiModeTypeDef multimode = {0};
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = {0};
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
 8000658:	615a      	str	r2, [r3, #20]

  /** Common config
  */
    hadc1.Instance = ADC1;
 800065a:	4b35      	ldr	r3, [pc, #212]	@ (8000730 <ADC1_Init+0xf8>)
 800065c:	4a35      	ldr	r2, [pc, #212]	@ (8000734 <ADC1_Init+0xfc>)
 800065e:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;//ADC_CLOCK_ASYNC_DIV1;
 8000660:	4b33      	ldr	r3, [pc, #204]	@ (8000730 <ADC1_Init+0xf8>)
 8000662:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000666:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000668:	4b31      	ldr	r3, [pc, #196]	@ (8000730 <ADC1_Init+0xf8>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800066e:	4b30      	ldr	r3, [pc, #192]	@ (8000730 <ADC1_Init+0xf8>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000674:	4b2e      	ldr	r3, [pc, #184]	@ (8000730 <ADC1_Init+0xf8>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800067a:	4b2d      	ldr	r3, [pc, #180]	@ (8000730 <ADC1_Init+0xf8>)
 800067c:	2204      	movs	r2, #4
 800067e:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8000680:	4b2b      	ldr	r3, [pc, #172]	@ (8000730 <ADC1_Init+0xf8>)
 8000682:	2200      	movs	r2, #0
 8000684:	761a      	strb	r2, [r3, #24]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8000686:	4b2a      	ldr	r3, [pc, #168]	@ (8000730 <ADC1_Init+0xf8>)
 8000688:	2200      	movs	r2, #0
 800068a:	765a      	strb	r2, [r3, #25]
    hadc1.Init.NbrOfConversion = 1;
 800068c:	4b28      	ldr	r3, [pc, #160]	@ (8000730 <ADC1_Init+0xf8>)
 800068e:	2201      	movs	r2, #1
 8000690:	61da      	str	r2, [r3, #28]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000692:	4b27      	ldr	r3, [pc, #156]	@ (8000730 <ADC1_Init+0xf8>)
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800069a:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <ADC1_Init+0xf8>)
 800069c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80006a0:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006a2:	4b23      	ldr	r3, [pc, #140]	@ (8000730 <ADC1_Init+0xf8>)
 80006a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80006aa:	4b21      	ldr	r3, [pc, #132]	@ (8000730 <ADC1_Init+0xf8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <ADC1_Init+0xf8>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc1.Init.OversamplingMode = DISABLE;
 80006b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000730 <ADC1_Init+0xf8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c0:	481b      	ldr	r0, [pc, #108]	@ (8000730 <ADC1_Init+0xf8>)
 80006c2:	f000 fed3 	bl	800146c <HAL_ADC_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <ADC1_Init+0x98>
    {
        Error_Handler();
 80006cc:	f000 fa5c 	bl	8000b88 <Error_Handler>
    }

    if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 80006d0:	217f      	movs	r1, #127	@ 0x7f
 80006d2:	4817      	ldr	r0, [pc, #92]	@ (8000730 <ADC1_Init+0xf8>)
 80006d4:	f001 fe9e 	bl	8002414 <HAL_ADCEx_Calibration_Start>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <ADC1_Init+0xaa>
    {
        Error_Handler();
 80006de:	f000 fa53 	bl	8000b88 <Error_Handler>
    }

  /** Configure the ADC multi-mode
  */
    multimode.Mode = ADC_MODE_INDEPENDENT;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	4810      	ldr	r0, [pc, #64]	@ (8000730 <ADC1_Init+0xf8>)
 80006ee:	f001 fef1 	bl	80024d4 <HAL_ADCEx_MultiModeConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <ADC1_Init+0xc4>
    {
        Error_Handler();
 80006f8:	f000 fa46 	bl	8000b88 <Error_Handler>
    }

  /** Configure Regular Channel
  */
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <ADC1_Init+0x100>)
 80006fe:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000700:	2306      	movs	r3, #6
 8000702:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;//ADC_SAMPLETIME_247CYCLES_5;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000708:	237f      	movs	r3, #127	@ 0x7f
 800070a:	613b      	str	r3, [r7, #16]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800070c:	2304      	movs	r3, #4
 800070e:	617b      	str	r3, [r7, #20]
    sConfig.Offset = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4805      	ldr	r0, [pc, #20]	@ (8000730 <ADC1_Init+0xf8>)
 800071a:	f001 f8bd 	bl	8001898 <HAL_ADC_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <ADC1_Init+0xf0>
    {
        Error_Handler();
 8000724:	f000 fa30 	bl	8000b88 <Error_Handler>
    }

}
 8000728:	bf00      	nop
 800072a:	3728      	adds	r7, #40	@ 0x28
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000674 	.word	0x20000674
 8000734:	50040000 	.word	0x50040000
 8000738:	c7520000 	.word	0xc7520000

0800073c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]

	for(i = SAMPLE_BUFFER_SIZE / 2; i < SAMPLE_BUFFER_SIZE; ++i)
		printf("%d", sample_buffer[i]);

	printf("\n");*/
	flag = 1;
 8000744:	4b04      	ldr	r3, [pc, #16]	@ (8000758 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000746:	2201      	movs	r2, #1
 8000748:	601a      	str	r2, [r3, #0]
    printf("Conversion complete callback triggered.\n");
 800074a:	4804      	ldr	r0, [pc, #16]	@ (800075c <HAL_ADC_ConvCpltCallback+0x20>)
 800074c:	f008 f8f6 	bl	800893c <puts>

}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000088 	.word	0x20000088
 800075c:	080096c4 	.word	0x080096c4

08000760 <HAL_ADC_ConvHalfCpltCallback>:


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

	for(i = 0; i < SAMPLE_BUFFER_SIZE / 2; ++i)
		printf("%d", sample_buffer[i]);

	printf("\n");*/
	flag = 1;
 8000768:	4b04      	ldr	r3, [pc, #16]	@ (800077c <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
    printf("Half conversion complete callback triggered.\n");
 800076e:	4804      	ldr	r0, [pc, #16]	@ (8000780 <HAL_ADC_ConvHalfCpltCallback+0x20>)
 8000770:	f008 f8e4 	bl	800893c <puts>


    //printf("pio\n");


}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000088 	.word	0x20000088
 8000780:	080096ec 	.word	0x080096ec

08000784 <DMA1_Channel1_IRQHandler>:

void DMA1_Channel1_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
    SET_BIT(hadc1.Instance->CFGR, ADC_CFGR_DMACFG);
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <DMA1_Channel1_IRQHandler+0x20>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	68da      	ldr	r2, [r3, #12]
 800078e:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <DMA1_Channel1_IRQHandler+0x20>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f042 0202 	orr.w	r2, r2, #2
 8000796:	60da      	str	r2, [r3, #12]
    HAL_DMA_IRQHandler(&hdma1);
 8000798:	4803      	ldr	r0, [pc, #12]	@ (80007a8 <DMA1_Channel1_IRQHandler+0x24>)
 800079a:	f002 f975 	bl	8002a88 <HAL_DMA_IRQHandler>
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000674 	.word	0x20000674
 80007a8:	200006d8 	.word	0x200006d8

080007ac <ADC1_DMA1CH1_init>:

void ADC1_DMA1CH1_init()
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 80007b2:	4b24      	ldr	r3, [pc, #144]	@ (8000844 <ADC1_DMA1CH1_init+0x98>)
 80007b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007b6:	4a23      	ldr	r2, [pc, #140]	@ (8000844 <ADC1_DMA1CH1_init+0x98>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80007be:	4b21      	ldr	r3, [pc, #132]	@ (8000844 <ADC1_DMA1CH1_init+0x98>)
 80007c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

    hdma1.Instance = DMA1_Channel1;
 80007ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000848 <ADC1_DMA1CH1_init+0x9c>)
 80007cc:	4a1f      	ldr	r2, [pc, #124]	@ (800084c <ADC1_DMA1CH1_init+0xa0>)
 80007ce:	601a      	str	r2, [r3, #0]
    hdma1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000848 <ADC1_DMA1CH1_init+0x9c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
    hdma1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <ADC1_DMA1CH1_init+0x9c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
    hdma1.Init.MemInc = DMA_MINC_ENABLE;
 80007dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000848 <ADC1_DMA1CH1_init+0x9c>)
 80007de:	2280      	movs	r2, #128	@ 0x80
 80007e0:	611a      	str	r2, [r3, #16]
    hdma1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007e2:	4b19      	ldr	r3, [pc, #100]	@ (8000848 <ADC1_DMA1CH1_init+0x9c>)
 80007e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007e8:	615a      	str	r2, [r3, #20]
    hdma1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007ea:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <ADC1_DMA1CH1_init+0x9c>)
 80007ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007f0:	619a      	str	r2, [r3, #24]
    hdma1.Init.Mode = DMA_CIRCULAR;
 80007f2:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <ADC1_DMA1CH1_init+0x9c>)
 80007f4:	2220      	movs	r2, #32
 80007f6:	61da      	str	r2, [r3, #28]
    hdma1.Init.Priority = DMA_PRIORITY_HIGH;
 80007f8:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <ADC1_DMA1CH1_init+0x9c>)
 80007fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007fe:	621a      	str	r2, [r3, #32]

    if (HAL_DMA_Init(&hdma1) != HAL_OK)
 8000800:	4811      	ldr	r0, [pc, #68]	@ (8000848 <ADC1_DMA1CH1_init+0x9c>)
 8000802:	f002 f829 	bl	8002858 <HAL_DMA_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <ADC1_DMA1CH1_init+0x64>
    {
        Error_Handler();
 800080c:	f000 f9bc 	bl	8000b88 <Error_Handler>
    }

    __HAL_LINKDMA(&hadc1, DMA_Handle, hdma1);
 8000810:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <ADC1_DMA1CH1_init+0xa4>)
 8000812:	4a0d      	ldr	r2, [pc, #52]	@ (8000848 <ADC1_DMA1CH1_init+0x9c>)
 8000814:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000816:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <ADC1_DMA1CH1_init+0x9c>)
 8000818:	4a0d      	ldr	r2, [pc, #52]	@ (8000850 <ADC1_DMA1CH1_init+0xa4>)
 800081a:	629a      	str	r2, [r3, #40]	@ 0x28

    ADC1_Init();
 800081c:	f7ff ff0c 	bl	8000638 <ADC1_Init>

    NVIC_SetVector(DMA1_Channel1_IRQn, (uint32_t)&DMA1_Channel1_IRQHandler);
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <ADC1_DMA1CH1_init+0xa8>)
 8000822:	4619      	mov	r1, r3
 8000824:	200b      	movs	r0, #11
 8000826:	f7ff feb9 	bl	800059c <__NVIC_SetVector>
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	200b      	movs	r0, #11
 8000830:	f001 ffdb 	bl	80027ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000834:	200b      	movs	r0, #11
 8000836:	f001 fff4 	bl	8002822 <HAL_NVIC_EnableIRQ>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000
 8000848:	200006d8 	.word	0x200006d8
 800084c:	40020008 	.word	0x40020008
 8000850:	20000674 	.word	0x20000674
 8000854:	08000785 	.word	0x08000785

08000858 <HAL_TIM_Base_MspInit>:



void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
    if(htim_base->Instance == TIM1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a0a      	ldr	r2, [pc, #40]	@ (8000890 <HAL_TIM_Base_MspInit+0x38>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d10b      	bne.n	8000882 <HAL_TIM_Base_MspInit+0x2a>
    {
        __HAL_RCC_TIM1_CLK_ENABLE();
 800086a:	4b0a      	ldr	r3, [pc, #40]	@ (8000894 <HAL_TIM_Base_MspInit+0x3c>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800086e:	4a09      	ldr	r2, [pc, #36]	@ (8000894 <HAL_TIM_Base_MspInit+0x3c>)
 8000870:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000874:	6613      	str	r3, [r2, #96]	@ 0x60
 8000876:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <HAL_TIM_Base_MspInit+0x3c>)
 8000878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800087a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
    }
}
 8000882:	bf00      	nop
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	40012c00 	.word	0x40012c00
 8000894:	40021000 	.word	0x40021000

08000898 <TIM1_Init>:
    }
}


static void TIM1_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]

    htim1.Instance = TIM1;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000930 <TIM1_Init+0x98>)
 80008b8:	4a1e      	ldr	r2, [pc, #120]	@ (8000934 <TIM1_Init+0x9c>)
 80008ba:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 4000 - 1;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <TIM1_Init+0x98>)
 80008be:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80008c2:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <TIM1_Init+0x98>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 1000 - 1;
 80008ca:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <TIM1_Init+0x98>)
 80008cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008d0:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d2:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <TIM1_Init+0x98>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d8:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <TIM1_Init+0x98>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008de:	4814      	ldr	r0, [pc, #80]	@ (8000930 <TIM1_Init+0x98>)
 80008e0:	f003 fec0 	bl	8004664 <HAL_TIM_Base_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <TIM1_Init+0x56>
    {
        Error_Handler();
 80008ea:	f000 f94d 	bl	8000b88 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f2:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	4619      	mov	r1, r3
 80008fa:	480d      	ldr	r0, [pc, #52]	@ (8000930 <TIM1_Init+0x98>)
 80008fc:	f003 ff7a 	bl	80047f4 <HAL_TIM_ConfigClockSource>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <TIM1_Init+0x72>
    {
        Error_Handler();
 8000906:	f000 f93f 	bl	8000b88 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800090a:	2320      	movs	r3, #32
 800090c:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	4619      	mov	r1, r3
 8000916:	4806      	ldr	r0, [pc, #24]	@ (8000930 <TIM1_Init+0x98>)
 8000918:	f004 f976 	bl	8004c08 <HAL_TIMEx_MasterConfigSynchronization>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <TIM1_Init+0x8e>
    {
        Error_Handler();
 8000922:	f000 f931 	bl	8000b88 <Error_Handler>
    }
}
 8000926:	bf00      	nop
 8000928:	3720      	adds	r7, #32
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000628 	.word	0x20000628
 8000934:	40012c00 	.word	0x40012c00

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093c:	f000 fb25 	bl	8000f8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000940:	f000 f844 	bl	80009cc <SystemClock_Config>
  MX_QUADSPI_Init();
  MX_SPI3_Init();*/



  MX_USART1_UART_Init();
 8000944:	f000 f8a4 	bl	8000a90 <MX_USART1_UART_Init>
  /*MX_USART3_UART_Init();
  MX_USB_OTG_FS_PCD_Init();*/
  /* USER CODE BEGIN 2 */
  TIM1_Init();
 8000948:	f7ff ffa6 	bl	8000898 <TIM1_Init>
  ADC1_DMA1CH1_init();
 800094c:	f7ff ff2e 	bl	80007ac <ADC1_DMA1CH1_init>

  piosemaphoreHandle = osSemaphoreNew(1, 0, &piosemaphore_attributes);
 8000950:	4a13      	ldr	r2, [pc, #76]	@ (80009a0 <main+0x68>)
 8000952:	2100      	movs	r1, #0
 8000954:	2001      	movs	r0, #1
 8000956:	f005 f8b6 	bl	8005ac6 <osSemaphoreNew>
 800095a:	4603      	mov	r3, r0
 800095c:	4a11      	ldr	r2, [pc, #68]	@ (80009a4 <main+0x6c>)
 800095e:	6013      	str	r3, [r2, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000960:	4a11      	ldr	r2, [pc, #68]	@ (80009a8 <main+0x70>)
 8000962:	2100      	movs	r1, #0
 8000964:	4811      	ldr	r0, [pc, #68]	@ (80009ac <main+0x74>)
 8000966:	f005 f801 	bl	800596c <osThreadNew>
 800096a:	4603      	mov	r3, r0
 800096c:	4a10      	ldr	r2, [pc, #64]	@ (80009b0 <main+0x78>)
 800096e:	6013      	str	r3, [r2, #0]

  /* creation of printpio */
  printpioHandle = osThreadNew(StartTask02, NULL, &printpio_attributes);
 8000970:	4a10      	ldr	r2, [pc, #64]	@ (80009b4 <main+0x7c>)
 8000972:	2100      	movs	r1, #0
 8000974:	4810      	ldr	r0, [pc, #64]	@ (80009b8 <main+0x80>)
 8000976:	f004 fff9 	bl	800596c <osThreadNew>
 800097a:	4603      	mov	r3, r0
 800097c:	4a0f      	ldr	r2, [pc, #60]	@ (80009bc <main+0x84>)
 800097e:	6013      	str	r3, [r2, #0]

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&sample_buffer[0], SAMPLE_BUFFER_SIZE);
 8000980:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000984:	490e      	ldr	r1, [pc, #56]	@ (80009c0 <main+0x88>)
 8000986:	480f      	ldr	r0, [pc, #60]	@ (80009c4 <main+0x8c>)
 8000988:	f000 fec0 	bl	800170c <HAL_ADC_Start_DMA>


  HAL_TIM_Base_Start_IT(&htim1);
 800098c:	480e      	ldr	r0, [pc, #56]	@ (80009c8 <main+0x90>)
 800098e:	f003 fec1 	bl	8004714 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000992:	f004 ffa1 	bl	80058d8 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000996:	f004 ffc3 	bl	8005920 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800099a:	bf00      	nop
 800099c:	e7fd      	b.n	800099a <main+0x62>
 800099e:	bf00      	nop
 80009a0:	08009780 	.word	0x08009780
 80009a4:	200005d4 	.word	0x200005d4
 80009a8:	08009738 	.word	0x08009738
 80009ac:	08000af1 	.word	0x08000af1
 80009b0:	20000114 	.word	0x20000114
 80009b4:	0800975c 	.word	0x0800975c
 80009b8:	08000b01 	.word	0x08000b01
 80009bc:	20000374 	.word	0x20000374
 80009c0:	20000720 	.word	0x20000720
 80009c4:	20000674 	.word	0x20000674
 80009c8:	20000628 	.word	0x20000628

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b096      	sub	sp, #88	@ 0x58
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	2244      	movs	r2, #68	@ 0x44
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f008 f88e 	bl	8008afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	463b      	mov	r3, r7
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009f2:	f002 fb15 	bl	8003020 <HAL_PWREx_ControlVoltageScaling>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009fc:	f000 f8c4 	bl	8000b88 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a00:	f002 faf0 	bl	8002fe4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a04:	4b21      	ldr	r3, [pc, #132]	@ (8000a8c <SystemClock_Config+0xc0>)
 8000a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000a0a:	4a20      	ldr	r2, [pc, #128]	@ (8000a8c <SystemClock_Config+0xc0>)
 8000a0c:	f023 0318 	bic.w	r3, r3, #24
 8000a10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000a14:	2314      	movs	r3, #20
 8000a16:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a24:	2360      	movs	r3, #96	@ 0x60
 8000a26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a30:	2301      	movs	r3, #1
 8000a32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000a34:	2328      	movs	r3, #40	@ 0x28
 8000a36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f002 fb3f 	bl	80030cc <HAL_RCC_OscConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a54:	f000 f898 	bl	8000b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a58:	230f      	movs	r3, #15
 8000a5a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	2104      	movs	r1, #4
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 ff07 	bl	8003884 <HAL_RCC_ClockConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a7c:	f000 f884 	bl	8000b88 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a80:	f003 fc0e 	bl	80042a0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a84:	bf00      	nop
 8000a86:	3758      	adds	r7, #88	@ 0x58
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40021000 	.word	0x40021000

08000a90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a94:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <MX_USART1_UART_Init+0x58>)
 8000a96:	4a15      	ldr	r2, [pc, #84]	@ (8000aec <MX_USART1_UART_Init+0x5c>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <MX_USART1_UART_Init+0x58>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <MX_USART1_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <MX_USART1_UART_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <MX_USART1_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <MX_USART1_UART_Init+0x58>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <MX_USART1_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <MX_USART1_UART_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <MX_USART1_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <MX_USART1_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <MX_USART1_UART_Init+0x58>)
 8000ad4:	f004 f920 	bl	8004d18 <HAL_UART_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ade:	f000 f853 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2000008c 	.word	0x2000008c
 8000aec:	40013800 	.word	0x40013800

08000af0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f004 ffc9 	bl	8005a90 <osDelay>
 8000afe:	e7fb      	b.n	8000af8 <StartDefaultTask+0x8>

08000b00 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	uint32_t half = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
	//uint32_t counter = 0;
		// Wait for semaphore release
	while(1){
		if(flag == 1){
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b7c <StartTask02+0x7c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d1fb      	bne.n	8000b0c <StartTask02+0xc>
			if (half == 0)
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d116      	bne.n	8000b48 <StartTask02+0x48>
			{
				// Print first half of the buffer
				for(int i = 0; i < SAMPLE_BUFFER_SIZE / 2; ++i)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	e00a      	b.n	8000b36 <StartTask02+0x36>
					printf("%d", sample_buffer[i]);
 8000b20:	4a17      	ldr	r2, [pc, #92]	@ (8000b80 <StartTask02+0x80>)
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4816      	ldr	r0, [pc, #88]	@ (8000b84 <StartTask02+0x84>)
 8000b2c:	f007 fe96 	bl	800885c <iprintf>
				for(int i = 0; i < SAMPLE_BUFFER_SIZE / 2; ++i)
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	3301      	adds	r3, #1
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b3a:	ddf1      	ble.n	8000b20 <StartTask02+0x20>
				half = 1; // Set half to 1 to print the second half next
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
				printf("\n");
 8000b40:	200a      	movs	r0, #10
 8000b42:	f007 fe9d 	bl	8008880 <putchar>
 8000b46:	e015      	b.n	8000b74 <StartTask02+0x74>
			}
			else
			{
				// Print second half of the buffer
				for(int i = SAMPLE_BUFFER_SIZE / 2; i < SAMPLE_BUFFER_SIZE; ++i)
 8000b48:	2380      	movs	r3, #128	@ 0x80
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	e00a      	b.n	8000b64 <StartTask02+0x64>
					printf("%d", sample_buffer[i]);
 8000b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b80 <StartTask02+0x80>)
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b56:	4619      	mov	r1, r3
 8000b58:	480a      	ldr	r0, [pc, #40]	@ (8000b84 <StartTask02+0x84>)
 8000b5a:	f007 fe7f 	bl	800885c <iprintf>
				for(int i = SAMPLE_BUFFER_SIZE / 2; i < SAMPLE_BUFFER_SIZE; ++i)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	3301      	adds	r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2bff      	cmp	r3, #255	@ 0xff
 8000b68:	ddf1      	ble.n	8000b4e <StartTask02+0x4e>
				half = 0; // Set half to 0 to print the first half next
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
				printf("\n");
 8000b6e:	200a      	movs	r0, #10
 8000b70:	f007 fe86 	bl	8008880 <putchar>
			}
			flag = 0;
 8000b74:	4b01      	ldr	r3, [pc, #4]	@ (8000b7c <StartTask02+0x7c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
		if(flag == 1){
 8000b7a:	e7c7      	b.n	8000b0c <StartTask02+0xc>
 8000b7c:	20000088 	.word	0x20000088
 8000b80:	20000720 	.word	0x20000720
 8000b84:	0800971c 	.word	0x0800971c

08000b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8c:	b672      	cpsid	i
}
 8000b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <Error_Handler+0x8>

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <HAL_MspInit+0x4c>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b9e:	4a10      	ldr	r2, [pc, #64]	@ (8000be0 <HAL_MspInit+0x4c>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <HAL_MspInit+0x4c>)
 8000ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <HAL_MspInit+0x4c>)
 8000bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000be0 <HAL_MspInit+0x4c>)
 8000bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bbe:	4b08      	ldr	r3, [pc, #32]	@ (8000be0 <HAL_MspInit+0x4c>)
 8000bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	210f      	movs	r1, #15
 8000bce:	f06f 0001 	mvn.w	r0, #1
 8000bd2:	f001 fe0a 	bl	80027ea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000

08000be4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0ae      	sub	sp, #184	@ 0xb8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	2288      	movs	r2, #136	@ 0x88
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f007 ff79 	bl	8008afc <memset>
  if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a42      	ldr	r2, [pc, #264]	@ (8000d18 <HAL_UART_MspInit+0x134>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d13b      	bne.n	8000c8c <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4618      	mov	r0, r3
 8000c22:	f003 f853 	bl	8003ccc <HAL_RCCEx_PeriphCLKConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c2c:	f7ff ffac 	bl	8000b88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c30:	4b3a      	ldr	r3, [pc, #232]	@ (8000d1c <HAL_UART_MspInit+0x138>)
 8000c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c34:	4a39      	ldr	r2, [pc, #228]	@ (8000d1c <HAL_UART_MspInit+0x138>)
 8000c36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c3c:	4b37      	ldr	r3, [pc, #220]	@ (8000d1c <HAL_UART_MspInit+0x138>)
 8000c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c44:	61bb      	str	r3, [r7, #24]
 8000c46:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c48:	4b34      	ldr	r3, [pc, #208]	@ (8000d1c <HAL_UART_MspInit+0x138>)
 8000c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4c:	4a33      	ldr	r2, [pc, #204]	@ (8000d1c <HAL_UART_MspInit+0x138>)
 8000c4e:	f043 0302 	orr.w	r3, r3, #2
 8000c52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c54:	4b31      	ldr	r3, [pc, #196]	@ (8000d1c <HAL_UART_MspInit+0x138>)
 8000c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000c60:	23c0      	movs	r3, #192	@ 0xc0
 8000c62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c78:	2307      	movs	r3, #7
 8000c7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c82:	4619      	mov	r1, r3
 8000c84:	4826      	ldr	r0, [pc, #152]	@ (8000d20 <HAL_UART_MspInit+0x13c>)
 8000c86:	f001 ffdf 	bl	8002c48 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c8a:	e040      	b.n	8000d0e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a24      	ldr	r2, [pc, #144]	@ (8000d24 <HAL_UART_MspInit+0x140>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d13b      	bne.n	8000d0e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c96:	2304      	movs	r3, #4
 8000c98:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f003 f812 	bl	8003ccc <HAL_RCCEx_PeriphCLKConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8000cae:	f7ff ff6b 	bl	8000b88 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <HAL_UART_MspInit+0x138>)
 8000cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb6:	4a19      	ldr	r2, [pc, #100]	@ (8000d1c <HAL_UART_MspInit+0x138>)
 8000cb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cbe:	4b17      	ldr	r3, [pc, #92]	@ (8000d1c <HAL_UART_MspInit+0x138>)
 8000cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cca:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <HAL_UART_MspInit+0x138>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cce:	4a13      	ldr	r2, [pc, #76]	@ (8000d1c <HAL_UART_MspInit+0x138>)
 8000cd0:	f043 0308 	orr.w	r3, r3, #8
 8000cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd6:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <HAL_UART_MspInit+0x138>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	f003 0308 	and.w	r3, r3, #8
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000ce2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ce6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d02:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d06:	4619      	mov	r1, r3
 8000d08:	4807      	ldr	r0, [pc, #28]	@ (8000d28 <HAL_UART_MspInit+0x144>)
 8000d0a:	f001 ff9d 	bl	8002c48 <HAL_GPIO_Init>
}
 8000d0e:	bf00      	nop
 8000d10:	37b8      	adds	r7, #184	@ 0xb8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40013800 	.word	0x40013800
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	48000400 	.word	0x48000400
 8000d24:	40004800 	.word	0x40004800
 8000d28:	48000c00 	.word	0x48000c00

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <NMI_Handler+0x4>

08000d34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <MemManage_Handler+0x4>

08000d44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d66:	f000 f965 	bl	8001034 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d6a:	f006 fc39 	bl	80075e0 <xTaskGetSchedulerState>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d001      	beq.n	8000d78 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d74:	f007 fa30 	bl	80081d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8000d80:	2020      	movs	r0, #32
 8000d82:	f002 f90b 	bl	8002f9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8000d86:	2040      	movs	r0, #64	@ 0x40
 8000d88:	f002 f908 	bl	8002f9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8000d8c:	2080      	movs	r0, #128	@ 0x80
 8000d8e:	f002 f905 	bl	8002f9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8000d92:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000d96:	f002 f901 	bl	8002f9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8000da2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000da6:	f002 f8f9 	bl	8002f9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8000daa:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000dae:	f002 f8f5 	bl	8002f9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8000db2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000db6:	f002 f8f1 	bl	8002f9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8000dba:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000dbe:	f002 f8ed 	bl	8002f9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8000dc2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000dc6:	f002 f8e9 	bl	8002f9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	60f8      	str	r0, [r7, #12]
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	e00a      	b.n	8000df6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000de0:	f3af 8000 	nop.w
 8000de4:	4601      	mov	r1, r0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1c5a      	adds	r2, r3, #1
 8000dea:	60ba      	str	r2, [r7, #8]
 8000dec:	b2ca      	uxtb	r2, r1
 8000dee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf0      	blt.n	8000de0 <_read+0x12>
  }

  return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	e009      	b.n	8000e2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1c5a      	adds	r2, r3, #1
 8000e1e:	60ba      	str	r2, [r7, #8]
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fbd6 	bl	80005d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	dbf1      	blt.n	8000e1a <_write+0x12>
  }
  return len;
 8000e36:	687b      	ldr	r3, [r7, #4]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <_close>:

int _close(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e68:	605a      	str	r2, [r3, #4]
  return 0;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <_isatty>:

int _isatty(int file)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e80:	2301      	movs	r3, #1
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b085      	sub	sp, #20
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb0:	4a14      	ldr	r2, [pc, #80]	@ (8000f04 <_sbrk+0x5c>)
 8000eb2:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <_sbrk+0x60>)
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ebc:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d102      	bne.n	8000eca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <_sbrk+0x64>)
 8000ec6:	4a12      	ldr	r2, [pc, #72]	@ (8000f10 <_sbrk+0x68>)
 8000ec8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eca:	4b10      	ldr	r3, [pc, #64]	@ (8000f0c <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d207      	bcs.n	8000ee8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed8:	f007 fe5e 	bl	8008b98 <__errno>
 8000edc:	4603      	mov	r3, r0
 8000ede:	220c      	movs	r2, #12
 8000ee0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee6:	e009      	b.n	8000efc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee8:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eee:	4b07      	ldr	r3, [pc, #28]	@ (8000f0c <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4a05      	ldr	r2, [pc, #20]	@ (8000f0c <_sbrk+0x64>)
 8000ef8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efa:	68fb      	ldr	r3, [r7, #12]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20018000 	.word	0x20018000
 8000f08:	00000400 	.word	0x00000400
 8000f0c:	20000920 	.word	0x20000920
 8000f10:	20002380 	.word	0x20002380

08000f14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f18:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <SystemInit+0x20>)
 8000f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f1e:	4a05      	ldr	r2, [pc, #20]	@ (8000f34 <SystemInit+0x20>)
 8000f20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f3c:	f7ff ffea 	bl	8000f14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f40:	480c      	ldr	r0, [pc, #48]	@ (8000f74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f42:	490d      	ldr	r1, [pc, #52]	@ (8000f78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f44:	4a0d      	ldr	r2, [pc, #52]	@ (8000f7c <LoopForever+0xe>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0a      	ldr	r2, [pc, #40]	@ (8000f80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f58:	4c0a      	ldr	r4, [pc, #40]	@ (8000f84 <LoopForever+0x16>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f66:	f007 fe1d 	bl	8008ba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f6a:	f7ff fce5 	bl	8000938 <main>

08000f6e <LoopForever>:

LoopForever:
    b LoopForever
 8000f6e:	e7fe      	b.n	8000f6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000f7c:	0800981c 	.word	0x0800981c
  ldr r2, =_sbss
 8000f80:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000f84:	2000237c 	.word	0x2000237c

08000f88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC1_2_IRQHandler>

08000f8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f001 fc1d 	bl	80027d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	f000 f80e 	bl	8000fbc <HAL_InitTick>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d002      	beq.n	8000fac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	71fb      	strb	r3, [r7, #7]
 8000faa:	e001      	b.n	8000fb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fac:	f7ff fdf2 	bl	8000b94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fc8:	4b17      	ldr	r3, [pc, #92]	@ (8001028 <HAL_InitTick+0x6c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d023      	beq.n	8001018 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fd0:	4b16      	ldr	r3, [pc, #88]	@ (800102c <HAL_InitTick+0x70>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b14      	ldr	r3, [pc, #80]	@ (8001028 <HAL_InitTick+0x6c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 fc29 	bl	800283e <HAL_SYSTICK_Config>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10f      	bne.n	8001012 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d809      	bhi.n	800100c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f001 fbf3 	bl	80027ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001004:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <HAL_InitTick+0x74>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	e007      	b.n	800101c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	73fb      	strb	r3, [r7, #15]
 8001010:	e004      	b.n	800101c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	73fb      	strb	r3, [r7, #15]
 8001016:	e001      	b.n	800101c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000008 	.word	0x20000008
 800102c:	20000000 	.word	0x20000000
 8001030:	20000004 	.word	0x20000004

08001034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_IncTick+0x20>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <HAL_IncTick+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	@ (8001058 <HAL_IncTick+0x24>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008
 8001058:	20000924 	.word	0x20000924

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	@ (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000924 	.word	0x20000924

08001074 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	431a      	orrs	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	609a      	str	r2, [r3, #8]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	609a      	str	r2, [r3, #8]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010dc:	b480      	push	{r7}
 80010de:	b087      	sub	sp, #28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
 80010e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	3360      	adds	r3, #96	@ 0x60
 80010ee:	461a      	mov	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <LL_ADC_SetOffset+0x44>)
 80010fe:	4013      	ands	r3, r2
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	430a      	orrs	r2, r1
 800110a:	4313      	orrs	r3, r2
 800110c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001114:	bf00      	nop
 8001116:	371c      	adds	r7, #28
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	03fff000 	.word	0x03fff000

08001124 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3360      	adds	r3, #96	@ 0x60
 8001132:	461a      	mov	r2, r3
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001144:	4618      	mov	r0, r3
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001150:	b480      	push	{r7}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3360      	adds	r3, #96	@ 0x60
 8001160:	461a      	mov	r2, r3
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	431a      	orrs	r2, r3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800117a:	bf00      	nop
 800117c:	371c      	adds	r7, #28
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800119a:	2301      	movs	r3, #1
 800119c:	e000      	b.n	80011a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b087      	sub	sp, #28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	3330      	adds	r3, #48	@ 0x30
 80011bc:	461a      	mov	r2, r3
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	f003 030c 	and.w	r3, r3, #12
 80011c8:	4413      	add	r3, r2
 80011ca:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	f003 031f 	and.w	r3, r3, #31
 80011d6:	211f      	movs	r1, #31
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	401a      	ands	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	0e9b      	lsrs	r3, r3, #26
 80011e4:	f003 011f 	and.w	r1, r3, #31
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	f003 031f 	and.w	r3, r3, #31
 80011ee:	fa01 f303 	lsl.w	r3, r1, r3
 80011f2:	431a      	orrs	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011f8:	bf00      	nop
 80011fa:	371c      	adds	r7, #28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3314      	adds	r3, #20
 8001214:	461a      	mov	r2, r3
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	0e5b      	lsrs	r3, r3, #25
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	4413      	add	r3, r2
 8001222:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	0d1b      	lsrs	r3, r3, #20
 800122c:	f003 031f 	and.w	r3, r3, #31
 8001230:	2107      	movs	r1, #7
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	401a      	ands	r2, r3
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	0d1b      	lsrs	r3, r3, #20
 800123e:	f003 031f 	and.w	r3, r3, #31
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	fa01 f303 	lsl.w	r3, r1, r3
 8001248:	431a      	orrs	r2, r3
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800124e:	bf00      	nop
 8001250:	371c      	adds	r7, #28
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001274:	43db      	mvns	r3, r3
 8001276:	401a      	ands	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f003 0318 	and.w	r3, r3, #24
 800127e:	4908      	ldr	r1, [pc, #32]	@ (80012a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001280:	40d9      	lsrs	r1, r3
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	400b      	ands	r3, r1
 8001286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800128a:	431a      	orrs	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001292:	bf00      	nop
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	0007ffff 	.word	0x0007ffff

080012a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 031f 	and.w	r3, r3, #31
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80012d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	6093      	str	r3, [r2, #8]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80012f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80012f8:	d101      	bne.n	80012fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800131c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001320:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001344:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001348:	d101      	bne.n	800134e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800136c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001370:	f043 0201 	orr.w	r2, r3, #1
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001394:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001398:	f043 0202 	orr.w	r2, r3, #2
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d101      	bne.n	80013c4 <LL_ADC_IsEnabled+0x18>
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <LL_ADC_IsEnabled+0x1a>
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d101      	bne.n	80013ea <LL_ADC_IsDisableOngoing+0x18>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <LL_ADC_IsDisableOngoing+0x1a>
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001408:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800140c:	f043 0204 	orr.w	r2, r3, #4
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b04      	cmp	r3, #4
 8001432:	d101      	bne.n	8001438 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 0308 	and.w	r3, r3, #8
 8001456:	2b08      	cmp	r3, #8
 8001458:	d101      	bne.n	800145e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b089      	sub	sp, #36	@ 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e130      	b.n	80016e8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001490:	2b00      	cmp	r3, #0
 8001492:	d109      	bne.n	80014a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff f8af 	bl	80005f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff19 	bl	80012e4 <LL_ADC_IsDeepPowerDownEnabled>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d004      	beq.n	80014c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff feff 	bl	80012c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff34 	bl	8001334 <LL_ADC_IsInternalRegulatorEnabled>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d115      	bne.n	80014fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ff18 	bl	800130c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014dc:	4b84      	ldr	r3, [pc, #528]	@ (80016f0 <HAL_ADC_Init+0x284>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	099b      	lsrs	r3, r3, #6
 80014e2:	4a84      	ldr	r2, [pc, #528]	@ (80016f4 <HAL_ADC_Init+0x288>)
 80014e4:	fba2 2303 	umull	r2, r3, r2, r3
 80014e8:	099b      	lsrs	r3, r3, #6
 80014ea:	3301      	adds	r3, #1
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014f0:	e002      	b.n	80014f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f9      	bne.n	80014f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff ff16 	bl	8001334 <LL_ADC_IsInternalRegulatorEnabled>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10d      	bne.n	800152a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001512:	f043 0210 	orr.w	r2, r3, #16
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151e:	f043 0201 	orr.w	r2, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ff76 	bl	8001420 <LL_ADC_REG_IsConversionOngoing>
 8001534:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800153a:	f003 0310 	and.w	r3, r3, #16
 800153e:	2b00      	cmp	r3, #0
 8001540:	f040 80c9 	bne.w	80016d6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	2b00      	cmp	r3, #0
 8001548:	f040 80c5 	bne.w	80016d6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001550:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001554:	f043 0202 	orr.w	r2, r3, #2
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff23 	bl	80013ac <LL_ADC_IsEnabled>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d115      	bne.n	8001598 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800156c:	4862      	ldr	r0, [pc, #392]	@ (80016f8 <HAL_ADC_Init+0x28c>)
 800156e:	f7ff ff1d 	bl	80013ac <LL_ADC_IsEnabled>
 8001572:	4604      	mov	r4, r0
 8001574:	4861      	ldr	r0, [pc, #388]	@ (80016fc <HAL_ADC_Init+0x290>)
 8001576:	f7ff ff19 	bl	80013ac <LL_ADC_IsEnabled>
 800157a:	4603      	mov	r3, r0
 800157c:	431c      	orrs	r4, r3
 800157e:	4860      	ldr	r0, [pc, #384]	@ (8001700 <HAL_ADC_Init+0x294>)
 8001580:	f7ff ff14 	bl	80013ac <LL_ADC_IsEnabled>
 8001584:	4603      	mov	r3, r0
 8001586:	4323      	orrs	r3, r4
 8001588:	2b00      	cmp	r3, #0
 800158a:	d105      	bne.n	8001598 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	4619      	mov	r1, r3
 8001592:	485c      	ldr	r0, [pc, #368]	@ (8001704 <HAL_ADC_Init+0x298>)
 8001594:	f7ff fd6e 	bl	8001074 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	7e5b      	ldrb	r3, [r3, #25]
 800159c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015a2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80015a8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80015ae:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d106      	bne.n	80015d4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ca:	3b01      	subs	r3, #1
 80015cc:	045b      	lsls	r3, r3, #17
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d009      	beq.n	80015f0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	4b44      	ldr	r3, [pc, #272]	@ (8001708 <HAL_ADC_Init+0x29c>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	69b9      	ldr	r1, [r7, #24]
 8001600:	430b      	orrs	r3, r1
 8001602:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff1c 	bl	8001446 <LL_ADC_INJ_IsConversionOngoing>
 800160e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d13d      	bne.n	8001692 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d13a      	bne.n	8001692 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001620:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001628:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001638:	f023 0302 	bic.w	r3, r3, #2
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	69b9      	ldr	r1, [r7, #24]
 8001642:	430b      	orrs	r3, r1
 8001644:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800164c:	2b01      	cmp	r3, #1
 800164e:	d118      	bne.n	8001682 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800165a:	f023 0304 	bic.w	r3, r3, #4
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001666:	4311      	orrs	r1, r2
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800166c:	4311      	orrs	r1, r2
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001672:	430a      	orrs	r2, r1
 8001674:	431a      	orrs	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	611a      	str	r2, [r3, #16]
 8001680:	e007      	b.n	8001692 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	691a      	ldr	r2, [r3, #16]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0201 	bic.w	r2, r2, #1
 8001690:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d10c      	bne.n	80016b4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a0:	f023 010f 	bic.w	r1, r3, #15
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	1e5a      	subs	r2, r3, #1
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80016b2:	e007      	b.n	80016c4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 020f 	bic.w	r2, r2, #15
 80016c2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c8:	f023 0303 	bic.w	r3, r3, #3
 80016cc:	f043 0201 	orr.w	r2, r3, #1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80016d4:	e007      	b.n	80016e6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016da:	f043 0210 	orr.w	r2, r3, #16
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80016e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3724      	adds	r7, #36	@ 0x24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd90      	pop	{r4, r7, pc}
 80016f0:	20000000 	.word	0x20000000
 80016f4:	053e2d63 	.word	0x053e2d63
 80016f8:	50040000 	.word	0x50040000
 80016fc:	50040100 	.word	0x50040100
 8001700:	50040200 	.word	0x50040200
 8001704:	50040300 	.word	0x50040300
 8001708:	fff0c007 	.word	0xfff0c007

0800170c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001718:	4853      	ldr	r0, [pc, #332]	@ (8001868 <HAL_ADC_Start_DMA+0x15c>)
 800171a:	f7ff fdc3 	bl	80012a4 <LL_ADC_GetMultimode>
 800171e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fe7b 	bl	8001420 <LL_ADC_REG_IsConversionOngoing>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	f040 8093 	bne.w	8001858 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001738:	2b01      	cmp	r3, #1
 800173a:	d101      	bne.n	8001740 <HAL_ADC_Start_DMA+0x34>
 800173c:	2302      	movs	r3, #2
 800173e:	e08e      	b.n	800185e <HAL_ADC_Start_DMA+0x152>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a47      	ldr	r2, [pc, #284]	@ (800186c <HAL_ADC_Start_DMA+0x160>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d008      	beq.n	8001764 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	2b05      	cmp	r3, #5
 800175c:	d002      	beq.n	8001764 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	2b09      	cmp	r3, #9
 8001762:	d172      	bne.n	800184a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f000 fc89 	bl	800207c <ADC_Enable>
 800176a:	4603      	mov	r3, r0
 800176c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800176e:	7dfb      	ldrb	r3, [r7, #23]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d165      	bne.n	8001840 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001778:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800177c:	f023 0301 	bic.w	r3, r3, #1
 8001780:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a38      	ldr	r2, [pc, #224]	@ (8001870 <HAL_ADC_Start_DMA+0x164>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d002      	beq.n	8001798 <HAL_ADC_Start_DMA+0x8c>
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	e000      	b.n	800179a <HAL_ADC_Start_DMA+0x8e>
 8001798:	4b36      	ldr	r3, [pc, #216]	@ (8001874 <HAL_ADC_Start_DMA+0x168>)
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	6812      	ldr	r2, [r2, #0]
 800179e:	4293      	cmp	r3, r2
 80017a0:	d002      	beq.n	80017a8 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d105      	bne.n	80017b4 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d006      	beq.n	80017ce <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c4:	f023 0206 	bic.w	r2, r3, #6
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80017cc:	e002      	b.n	80017d4 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d8:	4a27      	ldr	r2, [pc, #156]	@ (8001878 <HAL_ADC_Start_DMA+0x16c>)
 80017da:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e0:	4a26      	ldr	r2, [pc, #152]	@ (800187c <HAL_ADC_Start_DMA+0x170>)
 80017e2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e8:	4a25      	ldr	r2, [pc, #148]	@ (8001880 <HAL_ADC_Start_DMA+0x174>)
 80017ea:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	221c      	movs	r2, #28
 80017f2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 0210 	orr.w	r2, r2, #16
 800180a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0201 	orr.w	r2, r2, #1
 800181a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3340      	adds	r3, #64	@ 0x40
 8001826:	4619      	mov	r1, r3
 8001828:	68ba      	ldr	r2, [r7, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f001 f8cc 	bl	80029c8 <HAL_DMA_Start_IT>
 8001830:	4603      	mov	r3, r0
 8001832:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fddd 	bl	80013f8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800183e:	e00d      	b.n	800185c <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8001848:	e008      	b.n	800185c <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001856:	e001      	b.n	800185c <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001858:	2302      	movs	r3, #2
 800185a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800185c:	7dfb      	ldrb	r3, [r7, #23]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	50040300 	.word	0x50040300
 800186c:	50040200 	.word	0x50040200
 8001870:	50040100 	.word	0x50040100
 8001874:	50040000 	.word	0x50040000
 8001878:	08002247 	.word	0x08002247
 800187c:	0800231f 	.word	0x0800231f
 8001880:	0800233b 	.word	0x0800233b

08001884 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b0b6      	sub	sp, #216	@ 0xd8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d101      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x22>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e3c9      	b.n	800204e <HAL_ADC_ConfigChannel+0x7b6>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fdaa 	bl	8001420 <LL_ADC_REG_IsConversionOngoing>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f040 83aa 	bne.w	8002028 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d824      	bhi.n	800192e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	3b02      	subs	r3, #2
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d81b      	bhi.n	8001926 <HAL_ADC_ConfigChannel+0x8e>
 80018ee:	a201      	add	r2, pc, #4	@ (adr r2, 80018f4 <HAL_ADC_ConfigChannel+0x5c>)
 80018f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f4:	08001905 	.word	0x08001905
 80018f8:	0800190d 	.word	0x0800190d
 80018fc:	08001915 	.word	0x08001915
 8001900:	0800191d 	.word	0x0800191d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001904:	230c      	movs	r3, #12
 8001906:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800190a:	e010      	b.n	800192e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800190c:	2312      	movs	r3, #18
 800190e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001912:	e00c      	b.n	800192e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001914:	2318      	movs	r3, #24
 8001916:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800191a:	e008      	b.n	800192e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800191c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001920:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001924:	e003      	b.n	800192e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001926:	2306      	movs	r3, #6
 8001928:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800192c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800193c:	f7ff fc36 	bl	80011ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fd6b 	bl	8001420 <LL_ADC_REG_IsConversionOngoing>
 800194a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fd77 	bl	8001446 <LL_ADC_INJ_IsConversionOngoing>
 8001958:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800195c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001960:	2b00      	cmp	r3, #0
 8001962:	f040 81a4 	bne.w	8001cae <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001966:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800196a:	2b00      	cmp	r3, #0
 800196c:	f040 819f 	bne.w	8001cae <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6818      	ldr	r0, [r3, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	6819      	ldr	r1, [r3, #0]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	461a      	mov	r2, r3
 800197e:	f7ff fc41 	bl	8001204 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	08db      	lsrs	r3, r3, #3
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d00a      	beq.n	80019ba <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	6919      	ldr	r1, [r3, #16]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80019b4:	f7ff fb92 	bl	80010dc <LL_ADC_SetOffset>
 80019b8:	e179      	b.n	8001cae <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2100      	movs	r1, #0
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fbaf 	bl	8001124 <LL_ADC_GetOffsetChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10a      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x14e>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fba4 	bl	8001124 <LL_ADC_GetOffsetChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	0e9b      	lsrs	r3, r3, #26
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	e01e      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x18c>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2100      	movs	r1, #0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fb99 	bl	8001124 <LL_ADC_GetOffsetChannel>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80019fc:	fa93 f3a3 	rbit	r3, r3
 8001a00:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001a14:	2320      	movs	r3, #32
 8001a16:	e004      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001a18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a1c:	fab3 f383 	clz	r3, r3
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d105      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x1a4>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0e9b      	lsrs	r3, r3, #26
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	e018      	b.n	8001a6e <HAL_ADC_ConfigChannel+0x1d6>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a48:	fa93 f3a3 	rbit	r3, r3
 8001a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001a50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001a58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001a60:	2320      	movs	r3, #32
 8001a62:	e004      	b.n	8001a6e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001a64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a68:	fab3 f383 	clz	r3, r3
 8001a6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d106      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fb68 	bl	8001150 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2101      	movs	r1, #1
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fb4c 	bl	8001124 <LL_ADC_GetOffsetChannel>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10a      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x214>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fb41 	bl	8001124 <LL_ADC_GetOffsetChannel>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	0e9b      	lsrs	r3, r3, #26
 8001aa6:	f003 021f 	and.w	r2, r3, #31
 8001aaa:	e01e      	b.n	8001aea <HAL_ADC_ConfigChannel+0x252>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fb36 	bl	8001124 <LL_ADC_GetOffsetChannel>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001aca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ace:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001ad2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001ada:	2320      	movs	r3, #32
 8001adc:	e004      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001ade:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ae2:	fab3 f383 	clz	r3, r3
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d105      	bne.n	8001b02 <HAL_ADC_ConfigChannel+0x26a>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	0e9b      	lsrs	r3, r3, #26
 8001afc:	f003 031f 	and.w	r3, r3, #31
 8001b00:	e018      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x29c>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b0e:	fa93 f3a3 	rbit	r3, r3
 8001b12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001b16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b1a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001b1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001b26:	2320      	movs	r3, #32
 8001b28:	e004      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001b2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d106      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2101      	movs	r1, #1
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fb05 	bl	8001150 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fae9 	bl	8001124 <LL_ADC_GetOffsetChannel>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10a      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x2da>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2102      	movs	r1, #2
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fade 	bl	8001124 <LL_ADC_GetOffsetChannel>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	0e9b      	lsrs	r3, r3, #26
 8001b6c:	f003 021f 	and.w	r2, r3, #31
 8001b70:	e01e      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x318>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2102      	movs	r1, #2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fad3 	bl	8001124 <LL_ADC_GetOffsetChannel>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b88:	fa93 f3a3 	rbit	r3, r3
 8001b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001ba0:	2320      	movs	r3, #32
 8001ba2:	e004      	b.n	8001bae <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ba8:	fab3 f383 	clz	r3, r3
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d105      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x330>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	0e9b      	lsrs	r3, r3, #26
 8001bc2:	f003 031f 	and.w	r3, r3, #31
 8001bc6:	e014      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x35a>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001bd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001bd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001bdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001be4:	2320      	movs	r3, #32
 8001be6:	e004      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001be8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001bec:	fab3 f383 	clz	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d106      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2102      	movs	r1, #2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff faa6 	bl	8001150 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2103      	movs	r1, #3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fa8a 	bl	8001124 <LL_ADC_GetOffsetChannel>
 8001c10:	4603      	mov	r3, r0
 8001c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10a      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x398>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2103      	movs	r1, #3
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fa7f 	bl	8001124 <LL_ADC_GetOffsetChannel>
 8001c26:	4603      	mov	r3, r0
 8001c28:	0e9b      	lsrs	r3, r3, #26
 8001c2a:	f003 021f 	and.w	r2, r3, #31
 8001c2e:	e017      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x3c8>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2103      	movs	r1, #3
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fa74 	bl	8001124 <LL_ADC_GetOffsetChannel>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001c48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c4a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001c4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001c52:	2320      	movs	r3, #32
 8001c54:	e003      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001c56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c58:	fab3 f383 	clz	r3, r3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d105      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x3e0>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	0e9b      	lsrs	r3, r3, #26
 8001c72:	f003 031f 	and.w	r3, r3, #31
 8001c76:	e011      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x404>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c80:	fa93 f3a3 	rbit	r3, r3
 8001c84:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001c86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c88:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001c8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001c90:	2320      	movs	r3, #32
 8001c92:	e003      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001c94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c96:	fab3 f383 	clz	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d106      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2103      	movs	r1, #3
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fa51 	bl	8001150 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fb7a 	bl	80013ac <LL_ADC_IsEnabled>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f040 8140 	bne.w	8001f40 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6818      	ldr	r0, [r3, #0]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	6819      	ldr	r1, [r3, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	f7ff fac5 	bl	800125c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	4a8f      	ldr	r2, [pc, #572]	@ (8001f14 <HAL_ADC_ConfigChannel+0x67c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	f040 8131 	bne.w	8001f40 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10b      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x46e>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	0e9b      	lsrs	r3, r3, #26
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	2b09      	cmp	r3, #9
 8001cfc:	bf94      	ite	ls
 8001cfe:	2301      	movls	r3, #1
 8001d00:	2300      	movhi	r3, #0
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	e019      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x4a2>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d0e:	fa93 f3a3 	rbit	r3, r3
 8001d12:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d16:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001d18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001d1e:	2320      	movs	r3, #32
 8001d20:	e003      	b.n	8001d2a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001d22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d24:	fab3 f383 	clz	r3, r3
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	2b09      	cmp	r3, #9
 8001d32:	bf94      	ite	ls
 8001d34:	2301      	movls	r3, #1
 8001d36:	2300      	movhi	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d079      	beq.n	8001e32 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d107      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x4c2>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	0e9b      	lsrs	r3, r3, #26
 8001d50:	3301      	adds	r3, #1
 8001d52:	069b      	lsls	r3, r3, #26
 8001d54:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d58:	e015      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x4ee>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001d68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d6a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001d6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001d72:	2320      	movs	r3, #32
 8001d74:	e003      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001d76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d78:	fab3 f383 	clz	r3, r3
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	069b      	lsls	r3, r3, #26
 8001d82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x50e>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	0e9b      	lsrs	r3, r3, #26
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f003 031f 	and.w	r3, r3, #31
 8001d9e:	2101      	movs	r1, #1
 8001da0:	fa01 f303 	lsl.w	r3, r1, r3
 8001da4:	e017      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x53e>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001db6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001db8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	e003      	b.n	8001dca <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001dc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dc4:	fab3 f383 	clz	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	3301      	adds	r3, #1
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd6:	ea42 0103 	orr.w	r1, r2, r3
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10a      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x564>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	0e9b      	lsrs	r3, r3, #26
 8001dec:	3301      	adds	r3, #1
 8001dee:	f003 021f 	and.w	r2, r3, #31
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	051b      	lsls	r3, r3, #20
 8001dfa:	e018      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x596>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e04:	fa93 f3a3 	rbit	r3, r3
 8001e08:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001e14:	2320      	movs	r3, #32
 8001e16:	e003      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e1a:	fab3 f383 	clz	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	3301      	adds	r3, #1
 8001e22:	f003 021f 	and.w	r2, r3, #31
 8001e26:	4613      	mov	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4413      	add	r3, r2
 8001e2c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e2e:	430b      	orrs	r3, r1
 8001e30:	e081      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d107      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x5b6>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	0e9b      	lsrs	r3, r3, #26
 8001e44:	3301      	adds	r3, #1
 8001e46:	069b      	lsls	r3, r3, #26
 8001e48:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e4c:	e015      	b.n	8001e7a <HAL_ADC_ConfigChannel+0x5e2>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001e66:	2320      	movs	r3, #32
 8001e68:	e003      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	3301      	adds	r3, #1
 8001e74:	069b      	lsls	r3, r3, #26
 8001e76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d109      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x602>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	0e9b      	lsrs	r3, r3, #26
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	2101      	movs	r1, #1
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	e017      	b.n	8001eca <HAL_ADC_ConfigChannel+0x632>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	61bb      	str	r3, [r7, #24]
  return result;
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001eb2:	2320      	movs	r3, #32
 8001eb4:	e003      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	fab3 f383 	clz	r3, r3
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	ea42 0103 	orr.w	r1, r2, r3
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10d      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x65e>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	0e9b      	lsrs	r3, r3, #26
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	f003 021f 	and.w	r2, r3, #31
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	3b1e      	subs	r3, #30
 8001eee:	051b      	lsls	r3, r3, #20
 8001ef0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ef4:	e01e      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x69c>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	60fb      	str	r3, [r7, #12]
  return result;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d104      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001f0e:	2320      	movs	r3, #32
 8001f10:	e006      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x688>
 8001f12:	bf00      	nop
 8001f14:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fab3 f383 	clz	r3, r3
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	3301      	adds	r3, #1
 8001f22:	f003 021f 	and.w	r2, r3, #31
 8001f26:	4613      	mov	r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3b1e      	subs	r3, #30
 8001f2e:	051b      	lsls	r3, r3, #20
 8001f30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f34:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f7ff f962 	bl	8001204 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b44      	ldr	r3, [pc, #272]	@ (8002058 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d07a      	beq.n	8002042 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f4c:	4843      	ldr	r0, [pc, #268]	@ (800205c <HAL_ADC_ConfigChannel+0x7c4>)
 8001f4e:	f7ff f8b7 	bl	80010c0 <LL_ADC_GetCommonPathInternalCh>
 8001f52:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a41      	ldr	r2, [pc, #260]	@ (8002060 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d12c      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d126      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a3c      	ldr	r2, [pc, #240]	@ (8002064 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d004      	beq.n	8001f80 <HAL_ADC_ConfigChannel+0x6e8>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a3b      	ldr	r2, [pc, #236]	@ (8002068 <HAL_ADC_ConfigChannel+0x7d0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d15d      	bne.n	800203c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4834      	ldr	r0, [pc, #208]	@ (800205c <HAL_ADC_ConfigChannel+0x7c4>)
 8001f8c:	f7ff f885 	bl	800109a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f90:	4b36      	ldr	r3, [pc, #216]	@ (800206c <HAL_ADC_ConfigChannel+0x7d4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	099b      	lsrs	r3, r3, #6
 8001f96:	4a36      	ldr	r2, [pc, #216]	@ (8002070 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f98:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9c:	099b      	lsrs	r3, r3, #6
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001faa:	e002      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f9      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fb8:	e040      	b.n	800203c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a2d      	ldr	r2, [pc, #180]	@ (8002074 <HAL_ADC_ConfigChannel+0x7dc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d118      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d112      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a23      	ldr	r2, [pc, #140]	@ (8002064 <HAL_ADC_ConfigChannel+0x7cc>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d004      	beq.n	8001fe4 <HAL_ADC_ConfigChannel+0x74c>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a22      	ldr	r2, [pc, #136]	@ (8002068 <HAL_ADC_ConfigChannel+0x7d0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d12d      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fe4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fe8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fec:	4619      	mov	r1, r3
 8001fee:	481b      	ldr	r0, [pc, #108]	@ (800205c <HAL_ADC_ConfigChannel+0x7c4>)
 8001ff0:	f7ff f853 	bl	800109a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ff4:	e024      	b.n	8002040 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8002078 <HAL_ADC_ConfigChannel+0x7e0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d120      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002000:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002004:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d11a      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a14      	ldr	r2, [pc, #80]	@ (8002064 <HAL_ADC_ConfigChannel+0x7cc>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d115      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002016:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800201a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800201e:	4619      	mov	r1, r3
 8002020:	480e      	ldr	r0, [pc, #56]	@ (800205c <HAL_ADC_ConfigChannel+0x7c4>)
 8002022:	f7ff f83a 	bl	800109a <LL_ADC_SetCommonPathInternalCh>
 8002026:	e00c      	b.n	8002042 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800202c:	f043 0220 	orr.w	r2, r3, #32
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800203a:	e002      	b.n	8002042 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800203c:	bf00      	nop
 800203e:	e000      	b.n	8002042 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002040:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800204a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800204e:	4618      	mov	r0, r3
 8002050:	37d8      	adds	r7, #216	@ 0xd8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	80080000 	.word	0x80080000
 800205c:	50040300 	.word	0x50040300
 8002060:	c7520000 	.word	0xc7520000
 8002064:	50040000 	.word	0x50040000
 8002068:	50040200 	.word	0x50040200
 800206c:	20000000 	.word	0x20000000
 8002070:	053e2d63 	.word	0x053e2d63
 8002074:	cb840000 	.word	0xcb840000
 8002078:	80000001 	.word	0x80000001

0800207c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff f98d 	bl	80013ac <LL_ADC_IsEnabled>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d169      	bne.n	800216c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	4b36      	ldr	r3, [pc, #216]	@ (8002178 <ADC_Enable+0xfc>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00d      	beq.n	80020c2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020aa:	f043 0210 	orr.w	r2, r3, #16
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b6:	f043 0201 	orr.w	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e055      	b.n	800216e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff f948 	bl	800135c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80020cc:	482b      	ldr	r0, [pc, #172]	@ (800217c <ADC_Enable+0x100>)
 80020ce:	f7fe fff7 	bl	80010c0 <LL_ADC_GetCommonPathInternalCh>
 80020d2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80020d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d013      	beq.n	8002104 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020dc:	4b28      	ldr	r3, [pc, #160]	@ (8002180 <ADC_Enable+0x104>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	099b      	lsrs	r3, r3, #6
 80020e2:	4a28      	ldr	r2, [pc, #160]	@ (8002184 <ADC_Enable+0x108>)
 80020e4:	fba2 2303 	umull	r2, r3, r2, r3
 80020e8:	099b      	lsrs	r3, r3, #6
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80020f6:	e002      	b.n	80020fe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f9      	bne.n	80020f8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002104:	f7fe ffaa 	bl	800105c <HAL_GetTick>
 8002108:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800210a:	e028      	b.n	800215e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff f94b 	bl	80013ac <LL_ADC_IsEnabled>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d104      	bne.n	8002126 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff f91b 	bl	800135c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002126:	f7fe ff99 	bl	800105c <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d914      	bls.n	800215e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b01      	cmp	r3, #1
 8002140:	d00d      	beq.n	800215e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002146:	f043 0210 	orr.w	r2, r3, #16
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002152:	f043 0201 	orr.w	r2, r3, #1
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e007      	b.n	800216e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b01      	cmp	r3, #1
 800216a:	d1cf      	bne.n	800210c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	8000003f 	.word	0x8000003f
 800217c:	50040300 	.word	0x50040300
 8002180:	20000000 	.word	0x20000000
 8002184:	053e2d63 	.word	0x053e2d63

08002188 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff f91c 	bl	80013d2 <LL_ADC_IsDisableOngoing>
 800219a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff f903 	bl	80013ac <LL_ADC_IsEnabled>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d047      	beq.n	800223c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d144      	bne.n	800223c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 030d 	and.w	r3, r3, #13
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d10c      	bne.n	80021da <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff f8dd 	bl	8001384 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2203      	movs	r2, #3
 80021d0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021d2:	f7fe ff43 	bl	800105c <HAL_GetTick>
 80021d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80021d8:	e029      	b.n	800222e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021de:	f043 0210 	orr.w	r2, r3, #16
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ea:	f043 0201 	orr.w	r2, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e023      	b.n	800223e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021f6:	f7fe ff31 	bl	800105c <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d914      	bls.n	800222e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00d      	beq.n	800222e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002216:	f043 0210 	orr.w	r2, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002222:	f043 0201 	orr.w	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e007      	b.n	800223e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1dc      	bne.n	80021f6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002252:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002258:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800225c:	2b00      	cmp	r3, #0
 800225e:	d14b      	bne.n	80022f8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002264:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b00      	cmp	r3, #0
 8002278:	d021      	beq.n	80022be <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe ff81 	bl	8001186 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d032      	beq.n	80022f0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d12b      	bne.n	80022f0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800229c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d11f      	bne.n	80022f0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b4:	f043 0201 	orr.w	r2, r3, #1
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80022bc:	e018      	b.n	80022f0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d111      	bne.n	80022f0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d105      	bne.n	80022f0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e8:	f043 0201 	orr.w	r2, r3, #1
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f7fe fa23 	bl	800073c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022f6:	e00e      	b.n	8002316 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f7ff fabd 	bl	8001884 <HAL_ADC_ErrorCallback>
}
 800230a:	e004      	b.n	8002316 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	4798      	blx	r3
}
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f7fe fa17 	bl	8000760 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b084      	sub	sp, #16
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002346:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002358:	f043 0204 	orr.w	r2, r3, #4
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f7ff fa8f 	bl	8001884 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <LL_ADC_IsEnabled>:
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <LL_ADC_IsEnabled+0x18>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <LL_ADC_IsEnabled+0x1a>
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_ADC_StartCalibration>:
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80023a6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	609a      	str	r2, [r3, #8]
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <LL_ADC_IsCalibrationOnGoing>:
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80023d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80023da:	d101      	bne.n	80023e0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80023dc:	2301      	movs	r3, #1
 80023de:	e000      	b.n	80023e2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <LL_ADC_REG_IsConversionOngoing>:
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d101      	bne.n	8002406 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_ADCEx_Calibration_Start+0x1c>
 800242c:	2302      	movs	r3, #2
 800242e:	e04d      	b.n	80024cc <HAL_ADCEx_Calibration_Start+0xb8>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff fea5 	bl	8002188 <ADC_Disable>
 800243e:	4603      	mov	r3, r0
 8002440:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d136      	bne.n	80024b6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800244c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002450:	f023 0302 	bic.w	r3, r3, #2
 8002454:	f043 0202 	orr.w	r2, r3, #2
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6839      	ldr	r1, [r7, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff96 	bl	8002394 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002468:	e014      	b.n	8002494 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	3301      	adds	r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002476:	d30d      	bcc.n	8002494 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247c:	f023 0312 	bic.w	r3, r3, #18
 8002480:	f043 0210 	orr.w	r2, r3, #16
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e01b      	b.n	80024cc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ff94 	bl	80023c6 <LL_ADC_IsCalibrationOnGoing>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1e2      	bne.n	800246a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a8:	f023 0303 	bic.w	r3, r3, #3
 80024ac:	f043 0201 	orr.w	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80024b4:	e005      	b.n	80024c2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ba:	f043 0210 	orr.w	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80024d4:	b590      	push	{r4, r7, lr}
 80024d6:	b09f      	sub	sp, #124	@ 0x7c
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e093      	b.n	800261a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80024fa:	2300      	movs	r3, #0
 80024fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80024fe:	2300      	movs	r3, #0
 8002500:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a47      	ldr	r2, [pc, #284]	@ (8002624 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d102      	bne.n	8002512 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800250c:	4b46      	ldr	r3, [pc, #280]	@ (8002628 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	e001      	b.n	8002516 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002512:	2300      	movs	r3, #0
 8002514:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10b      	bne.n	8002534 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002520:	f043 0220 	orr.w	r2, r3, #32
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e072      	b.n	800261a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff ff59 	bl	80023ee <LL_ADC_REG_IsConversionOngoing>
 800253c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff ff53 	bl	80023ee <LL_ADC_REG_IsConversionOngoing>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d154      	bne.n	80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800254e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002550:	2b00      	cmp	r3, #0
 8002552:	d151      	bne.n	80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002554:	4b35      	ldr	r3, [pc, #212]	@ (800262c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002556:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d02c      	beq.n	80025ba <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	6859      	ldr	r1, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002572:	035b      	lsls	r3, r3, #13
 8002574:	430b      	orrs	r3, r1
 8002576:	431a      	orrs	r2, r3
 8002578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800257a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800257c:	4829      	ldr	r0, [pc, #164]	@ (8002624 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800257e:	f7ff fef6 	bl	800236e <LL_ADC_IsEnabled>
 8002582:	4604      	mov	r4, r0
 8002584:	4828      	ldr	r0, [pc, #160]	@ (8002628 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002586:	f7ff fef2 	bl	800236e <LL_ADC_IsEnabled>
 800258a:	4603      	mov	r3, r0
 800258c:	431c      	orrs	r4, r3
 800258e:	4828      	ldr	r0, [pc, #160]	@ (8002630 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002590:	f7ff feed 	bl	800236e <LL_ADC_IsEnabled>
 8002594:	4603      	mov	r3, r0
 8002596:	4323      	orrs	r3, r4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d137      	bne.n	800260c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800259c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80025a4:	f023 030f 	bic.w	r3, r3, #15
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	6811      	ldr	r1, [r2, #0]
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	6892      	ldr	r2, [r2, #8]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	431a      	orrs	r2, r3
 80025b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025b6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025b8:	e028      	b.n	800260c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025c4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025c6:	4817      	ldr	r0, [pc, #92]	@ (8002624 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80025c8:	f7ff fed1 	bl	800236e <LL_ADC_IsEnabled>
 80025cc:	4604      	mov	r4, r0
 80025ce:	4816      	ldr	r0, [pc, #88]	@ (8002628 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80025d0:	f7ff fecd 	bl	800236e <LL_ADC_IsEnabled>
 80025d4:	4603      	mov	r3, r0
 80025d6:	431c      	orrs	r4, r3
 80025d8:	4815      	ldr	r0, [pc, #84]	@ (8002630 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80025da:	f7ff fec8 	bl	800236e <LL_ADC_IsEnabled>
 80025de:	4603      	mov	r3, r0
 80025e0:	4323      	orrs	r3, r4
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d112      	bne.n	800260c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80025ee:	f023 030f 	bic.w	r3, r3, #15
 80025f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80025f4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025f6:	e009      	b.n	800260c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025fc:	f043 0220 	orr.w	r2, r3, #32
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800260a:	e000      	b.n	800260e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800260c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002616:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800261a:	4618      	mov	r0, r3
 800261c:	377c      	adds	r7, #124	@ 0x7c
 800261e:	46bd      	mov	sp, r7
 8002620:	bd90      	pop	{r4, r7, pc}
 8002622:	bf00      	nop
 8002624:	50040000 	.word	0x50040000
 8002628:	50040100 	.word	0x50040100
 800262c:	50040300 	.word	0x50040300
 8002630:	50040200 	.word	0x50040200

08002634 <__NVIC_SetPriorityGrouping>:
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002644:	4b0c      	ldr	r3, [pc, #48]	@ (8002678 <__NVIC_SetPriorityGrouping+0x44>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002650:	4013      	ands	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800265c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002666:	4a04      	ldr	r2, [pc, #16]	@ (8002678 <__NVIC_SetPriorityGrouping+0x44>)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	60d3      	str	r3, [r2, #12]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <__NVIC_GetPriorityGrouping>:
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002680:	4b04      	ldr	r3, [pc, #16]	@ (8002694 <__NVIC_GetPriorityGrouping+0x18>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	0a1b      	lsrs	r3, r3, #8
 8002686:	f003 0307 	and.w	r3, r3, #7
}
 800268a:	4618      	mov	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <__NVIC_EnableIRQ>:
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	db0b      	blt.n	80026c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	f003 021f 	and.w	r2, r3, #31
 80026b0:	4907      	ldr	r1, [pc, #28]	@ (80026d0 <__NVIC_EnableIRQ+0x38>)
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	2001      	movs	r0, #1
 80026ba:	fa00 f202 	lsl.w	r2, r0, r2
 80026be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	e000e100 	.word	0xe000e100

080026d4 <__NVIC_SetPriority>:
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	6039      	str	r1, [r7, #0]
 80026de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	db0a      	blt.n	80026fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	490c      	ldr	r1, [pc, #48]	@ (8002720 <__NVIC_SetPriority+0x4c>)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	0112      	lsls	r2, r2, #4
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	440b      	add	r3, r1
 80026f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80026fc:	e00a      	b.n	8002714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	b2da      	uxtb	r2, r3
 8002702:	4908      	ldr	r1, [pc, #32]	@ (8002724 <__NVIC_SetPriority+0x50>)
 8002704:	79fb      	ldrb	r3, [r7, #7]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	3b04      	subs	r3, #4
 800270c:	0112      	lsls	r2, r2, #4
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	440b      	add	r3, r1
 8002712:	761a      	strb	r2, [r3, #24]
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000e100 	.word	0xe000e100
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <NVIC_EncodePriority>:
{
 8002728:	b480      	push	{r7}
 800272a:	b089      	sub	sp, #36	@ 0x24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f1c3 0307 	rsb	r3, r3, #7
 8002742:	2b04      	cmp	r3, #4
 8002744:	bf28      	it	cs
 8002746:	2304      	movcs	r3, #4
 8002748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3304      	adds	r3, #4
 800274e:	2b06      	cmp	r3, #6
 8002750:	d902      	bls.n	8002758 <NVIC_EncodePriority+0x30>
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3b03      	subs	r3, #3
 8002756:	e000      	b.n	800275a <NVIC_EncodePriority+0x32>
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800275c:	f04f 32ff 	mov.w	r2, #4294967295
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43da      	mvns	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	401a      	ands	r2, r3
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002770:	f04f 31ff 	mov.w	r1, #4294967295
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	fa01 f303 	lsl.w	r3, r1, r3
 800277a:	43d9      	mvns	r1, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002780:	4313      	orrs	r3, r2
}
 8002782:	4618      	mov	r0, r3
 8002784:	3724      	adds	r7, #36	@ 0x24
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
	...

08002790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3b01      	subs	r3, #1
 800279c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027a0:	d301      	bcc.n	80027a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027a2:	2301      	movs	r3, #1
 80027a4:	e00f      	b.n	80027c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027a6:	4a0a      	ldr	r2, [pc, #40]	@ (80027d0 <SysTick_Config+0x40>)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ae:	210f      	movs	r1, #15
 80027b0:	f04f 30ff 	mov.w	r0, #4294967295
 80027b4:	f7ff ff8e 	bl	80026d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b8:	4b05      	ldr	r3, [pc, #20]	@ (80027d0 <SysTick_Config+0x40>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027be:	4b04      	ldr	r3, [pc, #16]	@ (80027d0 <SysTick_Config+0x40>)
 80027c0:	2207      	movs	r2, #7
 80027c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	e000e010 	.word	0xe000e010

080027d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff ff29 	bl	8002634 <__NVIC_SetPriorityGrouping>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b086      	sub	sp, #24
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	4603      	mov	r3, r0
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027fc:	f7ff ff3e 	bl	800267c <__NVIC_GetPriorityGrouping>
 8002800:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	6978      	ldr	r0, [r7, #20]
 8002808:	f7ff ff8e 	bl	8002728 <NVIC_EncodePriority>
 800280c:	4602      	mov	r2, r0
 800280e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff5d 	bl	80026d4 <__NVIC_SetPriority>
}
 800281a:	bf00      	nop
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800282c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff31 	bl	8002698 <__NVIC_EnableIRQ>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff ffa2 	bl	8002790 <SysTick_Config>
 800284c:	4603      	mov	r3, r0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e098      	b.n	800299c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	4b4d      	ldr	r3, [pc, #308]	@ (80029a8 <HAL_DMA_Init+0x150>)
 8002872:	429a      	cmp	r2, r3
 8002874:	d80f      	bhi.n	8002896 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	4b4b      	ldr	r3, [pc, #300]	@ (80029ac <HAL_DMA_Init+0x154>)
 800287e:	4413      	add	r3, r2
 8002880:	4a4b      	ldr	r2, [pc, #300]	@ (80029b0 <HAL_DMA_Init+0x158>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	091b      	lsrs	r3, r3, #4
 8002888:	009a      	lsls	r2, r3, #2
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a48      	ldr	r2, [pc, #288]	@ (80029b4 <HAL_DMA_Init+0x15c>)
 8002892:	641a      	str	r2, [r3, #64]	@ 0x40
 8002894:	e00e      	b.n	80028b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	4b46      	ldr	r3, [pc, #280]	@ (80029b8 <HAL_DMA_Init+0x160>)
 800289e:	4413      	add	r3, r2
 80028a0:	4a43      	ldr	r2, [pc, #268]	@ (80029b0 <HAL_DMA_Init+0x158>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	091b      	lsrs	r3, r3, #4
 80028a8:	009a      	lsls	r2, r3, #2
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a42      	ldr	r2, [pc, #264]	@ (80029bc <HAL_DMA_Init+0x164>)
 80028b2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80028ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80028d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800290e:	d039      	beq.n	8002984 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	4a27      	ldr	r2, [pc, #156]	@ (80029b4 <HAL_DMA_Init+0x15c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d11a      	bne.n	8002950 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800291a:	4b29      	ldr	r3, [pc, #164]	@ (80029c0 <HAL_DMA_Init+0x168>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002922:	f003 031c 	and.w	r3, r3, #28
 8002926:	210f      	movs	r1, #15
 8002928:	fa01 f303 	lsl.w	r3, r1, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	4924      	ldr	r1, [pc, #144]	@ (80029c0 <HAL_DMA_Init+0x168>)
 8002930:	4013      	ands	r3, r2
 8002932:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002934:	4b22      	ldr	r3, [pc, #136]	@ (80029c0 <HAL_DMA_Init+0x168>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6859      	ldr	r1, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002940:	f003 031c 	and.w	r3, r3, #28
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	491d      	ldr	r1, [pc, #116]	@ (80029c0 <HAL_DMA_Init+0x168>)
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]
 800294e:	e019      	b.n	8002984 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002950:	4b1c      	ldr	r3, [pc, #112]	@ (80029c4 <HAL_DMA_Init+0x16c>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002958:	f003 031c 	and.w	r3, r3, #28
 800295c:	210f      	movs	r1, #15
 800295e:	fa01 f303 	lsl.w	r3, r1, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	4917      	ldr	r1, [pc, #92]	@ (80029c4 <HAL_DMA_Init+0x16c>)
 8002966:	4013      	ands	r3, r2
 8002968:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800296a:	4b16      	ldr	r3, [pc, #88]	@ (80029c4 <HAL_DMA_Init+0x16c>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6859      	ldr	r1, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002976:	f003 031c 	and.w	r3, r3, #28
 800297a:	fa01 f303 	lsl.w	r3, r1, r3
 800297e:	4911      	ldr	r1, [pc, #68]	@ (80029c4 <HAL_DMA_Init+0x16c>)
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	40020407 	.word	0x40020407
 80029ac:	bffdfff8 	.word	0xbffdfff8
 80029b0:	cccccccd 	.word	0xcccccccd
 80029b4:	40020000 	.word	0x40020000
 80029b8:	bffdfbf8 	.word	0xbffdfbf8
 80029bc:	40020400 	.word	0x40020400
 80029c0:	400200a8 	.word	0x400200a8
 80029c4:	400204a8 	.word	0x400204a8

080029c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_DMA_Start_IT+0x20>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e04b      	b.n	8002a80 <HAL_DMA_Start_IT+0xb8>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d13a      	bne.n	8002a72 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0201 	bic.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	68b9      	ldr	r1, [r7, #8]
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 f8e0 	bl	8002be6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d008      	beq.n	8002a40 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 020e 	orr.w	r2, r2, #14
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	e00f      	b.n	8002a60 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0204 	bic.w	r2, r2, #4
 8002a4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 020a 	orr.w	r2, r2, #10
 8002a5e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	e005      	b.n	8002a7e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa4:	f003 031c 	and.w	r3, r3, #28
 8002aa8:	2204      	movs	r2, #4
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d026      	beq.n	8002b02 <HAL_DMA_IRQHandler+0x7a>
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d021      	beq.n	8002b02 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d107      	bne.n	8002adc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0204 	bic.w	r2, r2, #4
 8002ada:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae0:	f003 021c 	and.w	r2, r3, #28
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	2104      	movs	r1, #4
 8002aea:	fa01 f202 	lsl.w	r2, r1, r2
 8002aee:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d071      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002b00:	e06c      	b.n	8002bdc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b06:	f003 031c 	and.w	r3, r3, #28
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d02e      	beq.n	8002b74 <HAL_DMA_IRQHandler+0xec>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d029      	beq.n	8002b74 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10b      	bne.n	8002b46 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 020a 	bic.w	r2, r2, #10
 8002b3c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4a:	f003 021c 	and.w	r2, r3, #28
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	2102      	movs	r1, #2
 8002b54:	fa01 f202 	lsl.w	r2, r1, r2
 8002b58:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d038      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002b72:	e033      	b.n	8002bdc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b78:	f003 031c 	and.w	r3, r3, #28
 8002b7c:	2208      	movs	r2, #8
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d02a      	beq.n	8002bde <HAL_DMA_IRQHandler+0x156>
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d025      	beq.n	8002bde <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 020e 	bic.w	r2, r2, #14
 8002ba0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba6:	f003 021c 	and.w	r2, r3, #28
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	2101      	movs	r1, #1
 8002bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d004      	beq.n	8002bde <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
}
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b085      	sub	sp, #20
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf8:	f003 021c 	and.w	r2, r3, #28
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c00:	2101      	movs	r1, #1
 8002c02:	fa01 f202 	lsl.w	r2, r1, r2
 8002c06:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2b10      	cmp	r3, #16
 8002c16:	d108      	bne.n	8002c2a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c28:	e007      	b.n	8002c3a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	60da      	str	r2, [r3, #12]
}
 8002c3a:	bf00      	nop
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
	...

08002c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c56:	e17f      	b.n	8002f58 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	4013      	ands	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 8171 	beq.w	8002f52 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d005      	beq.n	8002c88 <HAL_GPIO_Init+0x40>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d130      	bne.n	8002cea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	2203      	movs	r2, #3
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	091b      	lsrs	r3, r3, #4
 8002cd4:	f003 0201 	and.w	r2, r3, #1
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d118      	bne.n	8002d28 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	08db      	lsrs	r3, r3, #3
 8002d12:	f003 0201 	and.w	r2, r3, #1
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d017      	beq.n	8002d64 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	2203      	movs	r2, #3
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d123      	bne.n	8002db8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	08da      	lsrs	r2, r3, #3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3208      	adds	r2, #8
 8002d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	220f      	movs	r2, #15
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	08da      	lsrs	r2, r3, #3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3208      	adds	r2, #8
 8002db2:	6939      	ldr	r1, [r7, #16]
 8002db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 0203 	and.w	r2, r3, #3
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80ac 	beq.w	8002f52 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dfa:	4b5f      	ldr	r3, [pc, #380]	@ (8002f78 <HAL_GPIO_Init+0x330>)
 8002dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dfe:	4a5e      	ldr	r2, [pc, #376]	@ (8002f78 <HAL_GPIO_Init+0x330>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e06:	4b5c      	ldr	r3, [pc, #368]	@ (8002f78 <HAL_GPIO_Init+0x330>)
 8002e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e12:	4a5a      	ldr	r2, [pc, #360]	@ (8002f7c <HAL_GPIO_Init+0x334>)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	3302      	adds	r3, #2
 8002e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	220f      	movs	r2, #15
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4013      	ands	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e3c:	d025      	beq.n	8002e8a <HAL_GPIO_Init+0x242>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a4f      	ldr	r2, [pc, #316]	@ (8002f80 <HAL_GPIO_Init+0x338>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01f      	beq.n	8002e86 <HAL_GPIO_Init+0x23e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a4e      	ldr	r2, [pc, #312]	@ (8002f84 <HAL_GPIO_Init+0x33c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d019      	beq.n	8002e82 <HAL_GPIO_Init+0x23a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a4d      	ldr	r2, [pc, #308]	@ (8002f88 <HAL_GPIO_Init+0x340>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <HAL_GPIO_Init+0x236>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a4c      	ldr	r2, [pc, #304]	@ (8002f8c <HAL_GPIO_Init+0x344>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00d      	beq.n	8002e7a <HAL_GPIO_Init+0x232>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a4b      	ldr	r2, [pc, #300]	@ (8002f90 <HAL_GPIO_Init+0x348>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d007      	beq.n	8002e76 <HAL_GPIO_Init+0x22e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a4a      	ldr	r2, [pc, #296]	@ (8002f94 <HAL_GPIO_Init+0x34c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <HAL_GPIO_Init+0x22a>
 8002e6e:	2306      	movs	r3, #6
 8002e70:	e00c      	b.n	8002e8c <HAL_GPIO_Init+0x244>
 8002e72:	2307      	movs	r3, #7
 8002e74:	e00a      	b.n	8002e8c <HAL_GPIO_Init+0x244>
 8002e76:	2305      	movs	r3, #5
 8002e78:	e008      	b.n	8002e8c <HAL_GPIO_Init+0x244>
 8002e7a:	2304      	movs	r3, #4
 8002e7c:	e006      	b.n	8002e8c <HAL_GPIO_Init+0x244>
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e004      	b.n	8002e8c <HAL_GPIO_Init+0x244>
 8002e82:	2302      	movs	r3, #2
 8002e84:	e002      	b.n	8002e8c <HAL_GPIO_Init+0x244>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <HAL_GPIO_Init+0x244>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	f002 0203 	and.w	r2, r2, #3
 8002e92:	0092      	lsls	r2, r2, #2
 8002e94:	4093      	lsls	r3, r2
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e9c:	4937      	ldr	r1, [pc, #220]	@ (8002f7c <HAL_GPIO_Init+0x334>)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	089b      	lsrs	r3, r3, #2
 8002ea2:	3302      	adds	r3, #2
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8002f98 <HAL_GPIO_Init+0x350>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ece:	4a32      	ldr	r2, [pc, #200]	@ (8002f98 <HAL_GPIO_Init+0x350>)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ed4:	4b30      	ldr	r3, [pc, #192]	@ (8002f98 <HAL_GPIO_Init+0x350>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	43db      	mvns	r3, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ef8:	4a27      	ldr	r2, [pc, #156]	@ (8002f98 <HAL_GPIO_Init+0x350>)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002efe:	4b26      	ldr	r3, [pc, #152]	@ (8002f98 <HAL_GPIO_Init+0x350>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f22:	4a1d      	ldr	r2, [pc, #116]	@ (8002f98 <HAL_GPIO_Init+0x350>)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f28:	4b1b      	ldr	r3, [pc, #108]	@ (8002f98 <HAL_GPIO_Init+0x350>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4013      	ands	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f4c:	4a12      	ldr	r2, [pc, #72]	@ (8002f98 <HAL_GPIO_Init+0x350>)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	3301      	adds	r3, #1
 8002f56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f47f ae78 	bne.w	8002c58 <HAL_GPIO_Init+0x10>
  }
}
 8002f68:	bf00      	nop
 8002f6a:	bf00      	nop
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40010000 	.word	0x40010000
 8002f80:	48000400 	.word	0x48000400
 8002f84:	48000800 	.word	0x48000800
 8002f88:	48000c00 	.word	0x48000c00
 8002f8c:	48001000 	.word	0x48001000
 8002f90:	48001400 	.word	0x48001400
 8002f94:	48001800 	.word	0x48001800
 8002f98:	40010400 	.word	0x40010400

08002f9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fa6:	4b08      	ldr	r3, [pc, #32]	@ (8002fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d006      	beq.n	8002fc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fb2:	4a05      	ldr	r2, [pc, #20]	@ (8002fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
 8002fb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 f806 	bl	8002fcc <HAL_GPIO_EXTI_Callback>
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40010400 	.word	0x40010400

08002fcc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fe8:	4b05      	ldr	r3, [pc, #20]	@ (8003000 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a04      	ldr	r2, [pc, #16]	@ (8003000 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ff2:	6013      	str	r3, [r2, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40007000 	.word	0x40007000

08003004 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003008:	4b04      	ldr	r3, [pc, #16]	@ (800301c <HAL_PWREx_GetVoltageRange+0x18>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40007000 	.word	0x40007000

08003020 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800302e:	d130      	bne.n	8003092 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003030:	4b23      	ldr	r3, [pc, #140]	@ (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003038:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800303c:	d038      	beq.n	80030b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800303e:	4b20      	ldr	r3, [pc, #128]	@ (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003046:	4a1e      	ldr	r2, [pc, #120]	@ (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003048:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800304c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800304e:	4b1d      	ldr	r3, [pc, #116]	@ (80030c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2232      	movs	r2, #50	@ 0x32
 8003054:	fb02 f303 	mul.w	r3, r2, r3
 8003058:	4a1b      	ldr	r2, [pc, #108]	@ (80030c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800305a:	fba2 2303 	umull	r2, r3, r2, r3
 800305e:	0c9b      	lsrs	r3, r3, #18
 8003060:	3301      	adds	r3, #1
 8003062:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003064:	e002      	b.n	800306c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	3b01      	subs	r3, #1
 800306a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800306c:	4b14      	ldr	r3, [pc, #80]	@ (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003078:	d102      	bne.n	8003080 <HAL_PWREx_ControlVoltageScaling+0x60>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1f2      	bne.n	8003066 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003080:	4b0f      	ldr	r3, [pc, #60]	@ (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003088:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800308c:	d110      	bne.n	80030b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e00f      	b.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003092:	4b0b      	ldr	r3, [pc, #44]	@ (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800309a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800309e:	d007      	beq.n	80030b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030a0:	4b07      	ldr	r3, [pc, #28]	@ (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030a8:	4a05      	ldr	r2, [pc, #20]	@ (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40007000 	.word	0x40007000
 80030c4:	20000000 	.word	0x20000000
 80030c8:	431bde83 	.word	0x431bde83

080030cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e3ca      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030de:	4b97      	ldr	r3, [pc, #604]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
 80030e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030e8:	4b94      	ldr	r3, [pc, #592]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 80e4 	beq.w	80032c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d007      	beq.n	8003116 <HAL_RCC_OscConfig+0x4a>
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	2b0c      	cmp	r3, #12
 800310a:	f040 808b 	bne.w	8003224 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b01      	cmp	r3, #1
 8003112:	f040 8087 	bne.w	8003224 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003116:	4b89      	ldr	r3, [pc, #548]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <HAL_RCC_OscConfig+0x62>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e3a2      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1a      	ldr	r2, [r3, #32]
 8003132:	4b82      	ldr	r3, [pc, #520]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d004      	beq.n	8003148 <HAL_RCC_OscConfig+0x7c>
 800313e:	4b7f      	ldr	r3, [pc, #508]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003146:	e005      	b.n	8003154 <HAL_RCC_OscConfig+0x88>
 8003148:	4b7c      	ldr	r3, [pc, #496]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 800314a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003154:	4293      	cmp	r3, r2
 8003156:	d223      	bcs.n	80031a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fd55 	bl	8003c0c <RCC_SetFlashLatencyFromMSIRange>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e383      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800316c:	4b73      	ldr	r3, [pc, #460]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a72      	ldr	r2, [pc, #456]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 8003172:	f043 0308 	orr.w	r3, r3, #8
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	4b70      	ldr	r3, [pc, #448]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	496d      	ldr	r1, [pc, #436]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800318a:	4b6c      	ldr	r3, [pc, #432]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	4968      	ldr	r1, [pc, #416]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 800319a:	4313      	orrs	r3, r2
 800319c:	604b      	str	r3, [r1, #4]
 800319e:	e025      	b.n	80031ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031a0:	4b66      	ldr	r3, [pc, #408]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a65      	ldr	r2, [pc, #404]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 80031a6:	f043 0308 	orr.w	r3, r3, #8
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	4b63      	ldr	r3, [pc, #396]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	4960      	ldr	r1, [pc, #384]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031be:	4b5f      	ldr	r3, [pc, #380]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	495b      	ldr	r1, [pc, #364]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d109      	bne.n	80031ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fd15 	bl	8003c0c <RCC_SetFlashLatencyFromMSIRange>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e343      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031ec:	f000 fc4a 	bl	8003a84 <HAL_RCC_GetSysClockFreq>
 80031f0:	4602      	mov	r2, r0
 80031f2:	4b52      	ldr	r3, [pc, #328]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	f003 030f 	and.w	r3, r3, #15
 80031fc:	4950      	ldr	r1, [pc, #320]	@ (8003340 <HAL_RCC_OscConfig+0x274>)
 80031fe:	5ccb      	ldrb	r3, [r1, r3]
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
 8003208:	4a4e      	ldr	r2, [pc, #312]	@ (8003344 <HAL_RCC_OscConfig+0x278>)
 800320a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800320c:	4b4e      	ldr	r3, [pc, #312]	@ (8003348 <HAL_RCC_OscConfig+0x27c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f7fd fed3 	bl	8000fbc <HAL_InitTick>
 8003216:	4603      	mov	r3, r0
 8003218:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d052      	beq.n	80032c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	e327      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d032      	beq.n	8003292 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800322c:	4b43      	ldr	r3, [pc, #268]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a42      	ldr	r2, [pc, #264]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 8003232:	f043 0301 	orr.w	r3, r3, #1
 8003236:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003238:	f7fd ff10 	bl	800105c <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003240:	f7fd ff0c 	bl	800105c <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e310      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003252:	4b3a      	ldr	r3, [pc, #232]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800325e:	4b37      	ldr	r3, [pc, #220]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a36      	ldr	r2, [pc, #216]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 8003264:	f043 0308 	orr.w	r3, r3, #8
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	4b34      	ldr	r3, [pc, #208]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	4931      	ldr	r1, [pc, #196]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 8003278:	4313      	orrs	r3, r2
 800327a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800327c:	4b2f      	ldr	r3, [pc, #188]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	492c      	ldr	r1, [pc, #176]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 800328c:	4313      	orrs	r3, r2
 800328e:	604b      	str	r3, [r1, #4]
 8003290:	e01a      	b.n	80032c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003292:	4b2a      	ldr	r3, [pc, #168]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a29      	ldr	r2, [pc, #164]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 8003298:	f023 0301 	bic.w	r3, r3, #1
 800329c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800329e:	f7fd fedd 	bl	800105c <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032a6:	f7fd fed9 	bl	800105c <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e2dd      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032b8:	4b20      	ldr	r3, [pc, #128]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1f0      	bne.n	80032a6 <HAL_RCC_OscConfig+0x1da>
 80032c4:	e000      	b.n	80032c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d074      	beq.n	80033be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d005      	beq.n	80032e6 <HAL_RCC_OscConfig+0x21a>
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	2b0c      	cmp	r3, #12
 80032de:	d10e      	bne.n	80032fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d10b      	bne.n	80032fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e6:	4b15      	ldr	r3, [pc, #84]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d064      	beq.n	80033bc <HAL_RCC_OscConfig+0x2f0>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d160      	bne.n	80033bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e2ba      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003306:	d106      	bne.n	8003316 <HAL_RCC_OscConfig+0x24a>
 8003308:	4b0c      	ldr	r3, [pc, #48]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a0b      	ldr	r2, [pc, #44]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 800330e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	e026      	b.n	8003364 <HAL_RCC_OscConfig+0x298>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800331e:	d115      	bne.n	800334c <HAL_RCC_OscConfig+0x280>
 8003320:	4b06      	ldr	r3, [pc, #24]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a05      	ldr	r2, [pc, #20]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 8003326:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800332a:	6013      	str	r3, [r2, #0]
 800332c:	4b03      	ldr	r3, [pc, #12]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a02      	ldr	r2, [pc, #8]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 8003332:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	e014      	b.n	8003364 <HAL_RCC_OscConfig+0x298>
 800333a:	bf00      	nop
 800333c:	40021000 	.word	0x40021000
 8003340:	08009790 	.word	0x08009790
 8003344:	20000000 	.word	0x20000000
 8003348:	20000004 	.word	0x20000004
 800334c:	4ba0      	ldr	r3, [pc, #640]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a9f      	ldr	r2, [pc, #636]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 8003352:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	4b9d      	ldr	r3, [pc, #628]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a9c      	ldr	r2, [pc, #624]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 800335e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d013      	beq.n	8003394 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fd fe76 	bl	800105c <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003374:	f7fd fe72 	bl	800105c <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b64      	cmp	r3, #100	@ 0x64
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e276      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003386:	4b92      	ldr	r3, [pc, #584]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0x2a8>
 8003392:	e014      	b.n	80033be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7fd fe62 	bl	800105c <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800339c:	f7fd fe5e 	bl	800105c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b64      	cmp	r3, #100	@ 0x64
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e262      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ae:	4b88      	ldr	r3, [pc, #544]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0x2d0>
 80033ba:	e000      	b.n	80033be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d060      	beq.n	800348c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d005      	beq.n	80033dc <HAL_RCC_OscConfig+0x310>
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	2b0c      	cmp	r3, #12
 80033d4:	d119      	bne.n	800340a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d116      	bne.n	800340a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033dc:	4b7c      	ldr	r3, [pc, #496]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <HAL_RCC_OscConfig+0x328>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e23f      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f4:	4b76      	ldr	r3, [pc, #472]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	061b      	lsls	r3, r3, #24
 8003402:	4973      	ldr	r1, [pc, #460]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 8003404:	4313      	orrs	r3, r2
 8003406:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003408:	e040      	b.n	800348c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d023      	beq.n	800345a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003412:	4b6f      	ldr	r3, [pc, #444]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a6e      	ldr	r2, [pc, #440]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 8003418:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800341c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341e:	f7fd fe1d 	bl	800105c <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003426:	f7fd fe19 	bl	800105c <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e21d      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003438:	4b65      	ldr	r3, [pc, #404]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0f0      	beq.n	8003426 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003444:	4b62      	ldr	r3, [pc, #392]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	061b      	lsls	r3, r3, #24
 8003452:	495f      	ldr	r1, [pc, #380]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]
 8003458:	e018      	b.n	800348c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345a:	4b5d      	ldr	r3, [pc, #372]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a5c      	ldr	r2, [pc, #368]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 8003460:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003466:	f7fd fdf9 	bl	800105c <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800346e:	f7fd fdf5 	bl	800105c <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e1f9      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003480:	4b53      	ldr	r3, [pc, #332]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1f0      	bne.n	800346e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d03c      	beq.n	8003512 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01c      	beq.n	80034da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034a0:	4b4b      	ldr	r3, [pc, #300]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 80034a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034a6:	4a4a      	ldr	r2, [pc, #296]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b0:	f7fd fdd4 	bl	800105c <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b8:	f7fd fdd0 	bl	800105c <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e1d4      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034ca:	4b41      	ldr	r3, [pc, #260]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 80034cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0ef      	beq.n	80034b8 <HAL_RCC_OscConfig+0x3ec>
 80034d8:	e01b      	b.n	8003512 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034da:	4b3d      	ldr	r3, [pc, #244]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 80034dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034e0:	4a3b      	ldr	r2, [pc, #236]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 80034e2:	f023 0301 	bic.w	r3, r3, #1
 80034e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ea:	f7fd fdb7 	bl	800105c <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f2:	f7fd fdb3 	bl	800105c <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e1b7      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003504:	4b32      	ldr	r3, [pc, #200]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 8003506:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1ef      	bne.n	80034f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 80a6 	beq.w	800366c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003520:	2300      	movs	r3, #0
 8003522:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003524:	4b2a      	ldr	r3, [pc, #168]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 8003526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10d      	bne.n	800354c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003530:	4b27      	ldr	r3, [pc, #156]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 8003532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003534:	4a26      	ldr	r2, [pc, #152]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 8003536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800353a:	6593      	str	r3, [r2, #88]	@ 0x58
 800353c:	4b24      	ldr	r3, [pc, #144]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 800353e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003548:	2301      	movs	r3, #1
 800354a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800354c:	4b21      	ldr	r3, [pc, #132]	@ (80035d4 <HAL_RCC_OscConfig+0x508>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003554:	2b00      	cmp	r3, #0
 8003556:	d118      	bne.n	800358a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003558:	4b1e      	ldr	r3, [pc, #120]	@ (80035d4 <HAL_RCC_OscConfig+0x508>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1d      	ldr	r2, [pc, #116]	@ (80035d4 <HAL_RCC_OscConfig+0x508>)
 800355e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003562:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003564:	f7fd fd7a 	bl	800105c <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800356c:	f7fd fd76 	bl	800105c <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e17a      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800357e:	4b15      	ldr	r3, [pc, #84]	@ (80035d4 <HAL_RCC_OscConfig+0x508>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f0      	beq.n	800356c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d108      	bne.n	80035a4 <HAL_RCC_OscConfig+0x4d8>
 8003592:	4b0f      	ldr	r3, [pc, #60]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 8003594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003598:	4a0d      	ldr	r2, [pc, #52]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035a2:	e029      	b.n	80035f8 <HAL_RCC_OscConfig+0x52c>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b05      	cmp	r3, #5
 80035aa:	d115      	bne.n	80035d8 <HAL_RCC_OscConfig+0x50c>
 80035ac:	4b08      	ldr	r3, [pc, #32]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 80035ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b2:	4a07      	ldr	r2, [pc, #28]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 80035b4:	f043 0304 	orr.w	r3, r3, #4
 80035b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035bc:	4b04      	ldr	r3, [pc, #16]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c2:	4a03      	ldr	r2, [pc, #12]	@ (80035d0 <HAL_RCC_OscConfig+0x504>)
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035cc:	e014      	b.n	80035f8 <HAL_RCC_OscConfig+0x52c>
 80035ce:	bf00      	nop
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40007000 	.word	0x40007000
 80035d8:	4b9c      	ldr	r3, [pc, #624]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035de:	4a9b      	ldr	r2, [pc, #620]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035e8:	4b98      	ldr	r3, [pc, #608]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ee:	4a97      	ldr	r2, [pc, #604]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 80035f0:	f023 0304 	bic.w	r3, r3, #4
 80035f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d016      	beq.n	800362e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003600:	f7fd fd2c 	bl	800105c <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003606:	e00a      	b.n	800361e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003608:	f7fd fd28 	bl	800105c <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e12a      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800361e:	4b8b      	ldr	r3, [pc, #556]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 8003620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0ed      	beq.n	8003608 <HAL_RCC_OscConfig+0x53c>
 800362c:	e015      	b.n	800365a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362e:	f7fd fd15 	bl	800105c <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003634:	e00a      	b.n	800364c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003636:	f7fd fd11 	bl	800105c <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003644:	4293      	cmp	r3, r2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e113      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800364c:	4b7f      	ldr	r3, [pc, #508]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 800364e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1ed      	bne.n	8003636 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800365a:	7ffb      	ldrb	r3, [r7, #31]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d105      	bne.n	800366c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003660:	4b7a      	ldr	r3, [pc, #488]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 8003662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003664:	4a79      	ldr	r2, [pc, #484]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 8003666:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800366a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 80fe 	beq.w	8003872 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367a:	2b02      	cmp	r3, #2
 800367c:	f040 80d0 	bne.w	8003820 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003680:	4b72      	ldr	r3, [pc, #456]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f003 0203 	and.w	r2, r3, #3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003690:	429a      	cmp	r2, r3
 8003692:	d130      	bne.n	80036f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369e:	3b01      	subs	r3, #1
 80036a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d127      	bne.n	80036f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d11f      	bne.n	80036f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036c0:	2a07      	cmp	r2, #7
 80036c2:	bf14      	ite	ne
 80036c4:	2201      	movne	r2, #1
 80036c6:	2200      	moveq	r2, #0
 80036c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d113      	bne.n	80036f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d8:	085b      	lsrs	r3, r3, #1
 80036da:	3b01      	subs	r3, #1
 80036dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80036de:	429a      	cmp	r2, r3
 80036e0:	d109      	bne.n	80036f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ec:	085b      	lsrs	r3, r3, #1
 80036ee:	3b01      	subs	r3, #1
 80036f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d06e      	beq.n	80037d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	2b0c      	cmp	r3, #12
 80036fa:	d069      	beq.n	80037d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036fc:	4b53      	ldr	r3, [pc, #332]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d105      	bne.n	8003714 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003708:	4b50      	ldr	r3, [pc, #320]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0ad      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003718:	4b4c      	ldr	r3, [pc, #304]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a4b      	ldr	r2, [pc, #300]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 800371e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003722:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003724:	f7fd fc9a 	bl	800105c <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372c:	f7fd fc96 	bl	800105c <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e09a      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800373e:	4b43      	ldr	r3, [pc, #268]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800374a:	4b40      	ldr	r3, [pc, #256]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	4b40      	ldr	r3, [pc, #256]	@ (8003850 <HAL_RCC_OscConfig+0x784>)
 8003750:	4013      	ands	r3, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800375a:	3a01      	subs	r2, #1
 800375c:	0112      	lsls	r2, r2, #4
 800375e:	4311      	orrs	r1, r2
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003764:	0212      	lsls	r2, r2, #8
 8003766:	4311      	orrs	r1, r2
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800376c:	0852      	lsrs	r2, r2, #1
 800376e:	3a01      	subs	r2, #1
 8003770:	0552      	lsls	r2, r2, #21
 8003772:	4311      	orrs	r1, r2
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003778:	0852      	lsrs	r2, r2, #1
 800377a:	3a01      	subs	r2, #1
 800377c:	0652      	lsls	r2, r2, #25
 800377e:	4311      	orrs	r1, r2
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003784:	0912      	lsrs	r2, r2, #4
 8003786:	0452      	lsls	r2, r2, #17
 8003788:	430a      	orrs	r2, r1
 800378a:	4930      	ldr	r1, [pc, #192]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 800378c:	4313      	orrs	r3, r2
 800378e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003790:	4b2e      	ldr	r3, [pc, #184]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a2d      	ldr	r2, [pc, #180]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 8003796:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800379a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800379c:	4b2b      	ldr	r3, [pc, #172]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	4a2a      	ldr	r2, [pc, #168]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 80037a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037a8:	f7fd fc58 	bl	800105c <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b0:	f7fd fc54 	bl	800105c <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e058      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c2:	4b22      	ldr	r3, [pc, #136]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037ce:	e050      	b.n	8003872 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e04f      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d4:	4b1d      	ldr	r3, [pc, #116]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d148      	bne.n	8003872 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037e0:	4b1a      	ldr	r3, [pc, #104]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a19      	ldr	r2, [pc, #100]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 80037e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037ec:	4b17      	ldr	r3, [pc, #92]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4a16      	ldr	r2, [pc, #88]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 80037f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037f8:	f7fd fc30 	bl	800105c <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003800:	f7fd fc2c 	bl	800105c <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e030      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003812:	4b0e      	ldr	r3, [pc, #56]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0f0      	beq.n	8003800 <HAL_RCC_OscConfig+0x734>
 800381e:	e028      	b.n	8003872 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	2b0c      	cmp	r3, #12
 8003824:	d023      	beq.n	800386e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003826:	4b09      	ldr	r3, [pc, #36]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a08      	ldr	r2, [pc, #32]	@ (800384c <HAL_RCC_OscConfig+0x780>)
 800382c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003832:	f7fd fc13 	bl	800105c <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003838:	e00c      	b.n	8003854 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383a:	f7fd fc0f 	bl	800105c <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d905      	bls.n	8003854 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e013      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
 800384c:	40021000 	.word	0x40021000
 8003850:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003854:	4b09      	ldr	r3, [pc, #36]	@ (800387c <HAL_RCC_OscConfig+0x7b0>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1ec      	bne.n	800383a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003860:	4b06      	ldr	r3, [pc, #24]	@ (800387c <HAL_RCC_OscConfig+0x7b0>)
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	4905      	ldr	r1, [pc, #20]	@ (800387c <HAL_RCC_OscConfig+0x7b0>)
 8003866:	4b06      	ldr	r3, [pc, #24]	@ (8003880 <HAL_RCC_OscConfig+0x7b4>)
 8003868:	4013      	ands	r3, r2
 800386a:	60cb      	str	r3, [r1, #12]
 800386c:	e001      	b.n	8003872 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3720      	adds	r7, #32
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40021000 	.word	0x40021000
 8003880:	feeefffc 	.word	0xfeeefffc

08003884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0e7      	b.n	8003a68 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003898:	4b75      	ldr	r3, [pc, #468]	@ (8003a70 <HAL_RCC_ClockConfig+0x1ec>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d910      	bls.n	80038c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a6:	4b72      	ldr	r3, [pc, #456]	@ (8003a70 <HAL_RCC_ClockConfig+0x1ec>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f023 0207 	bic.w	r2, r3, #7
 80038ae:	4970      	ldr	r1, [pc, #448]	@ (8003a70 <HAL_RCC_ClockConfig+0x1ec>)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b6:	4b6e      	ldr	r3, [pc, #440]	@ (8003a70 <HAL_RCC_ClockConfig+0x1ec>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d001      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0cf      	b.n	8003a68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d010      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	4b66      	ldr	r3, [pc, #408]	@ (8003a74 <HAL_RCC_ClockConfig+0x1f0>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d908      	bls.n	80038f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e4:	4b63      	ldr	r3, [pc, #396]	@ (8003a74 <HAL_RCC_ClockConfig+0x1f0>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4960      	ldr	r1, [pc, #384]	@ (8003a74 <HAL_RCC_ClockConfig+0x1f0>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d04c      	beq.n	800399c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b03      	cmp	r3, #3
 8003908:	d107      	bne.n	800391a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800390a:	4b5a      	ldr	r3, [pc, #360]	@ (8003a74 <HAL_RCC_ClockConfig+0x1f0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d121      	bne.n	800395a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e0a6      	b.n	8003a68 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d107      	bne.n	8003932 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003922:	4b54      	ldr	r3, [pc, #336]	@ (8003a74 <HAL_RCC_ClockConfig+0x1f0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d115      	bne.n	800395a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e09a      	b.n	8003a68 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d107      	bne.n	800394a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800393a:	4b4e      	ldr	r3, [pc, #312]	@ (8003a74 <HAL_RCC_ClockConfig+0x1f0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d109      	bne.n	800395a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e08e      	b.n	8003a68 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800394a:	4b4a      	ldr	r3, [pc, #296]	@ (8003a74 <HAL_RCC_ClockConfig+0x1f0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e086      	b.n	8003a68 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800395a:	4b46      	ldr	r3, [pc, #280]	@ (8003a74 <HAL_RCC_ClockConfig+0x1f0>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f023 0203 	bic.w	r2, r3, #3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4943      	ldr	r1, [pc, #268]	@ (8003a74 <HAL_RCC_ClockConfig+0x1f0>)
 8003968:	4313      	orrs	r3, r2
 800396a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800396c:	f7fd fb76 	bl	800105c <HAL_GetTick>
 8003970:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	e00a      	b.n	800398a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003974:	f7fd fb72 	bl	800105c <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e06e      	b.n	8003a68 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398a:	4b3a      	ldr	r3, [pc, #232]	@ (8003a74 <HAL_RCC_ClockConfig+0x1f0>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 020c 	and.w	r2, r3, #12
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	429a      	cmp	r2, r3
 800399a:	d1eb      	bne.n	8003974 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d010      	beq.n	80039ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	4b31      	ldr	r3, [pc, #196]	@ (8003a74 <HAL_RCC_ClockConfig+0x1f0>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d208      	bcs.n	80039ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003a74 <HAL_RCC_ClockConfig+0x1f0>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	492b      	ldr	r1, [pc, #172]	@ (8003a74 <HAL_RCC_ClockConfig+0x1f0>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039ca:	4b29      	ldr	r3, [pc, #164]	@ (8003a70 <HAL_RCC_ClockConfig+0x1ec>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d210      	bcs.n	80039fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d8:	4b25      	ldr	r3, [pc, #148]	@ (8003a70 <HAL_RCC_ClockConfig+0x1ec>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f023 0207 	bic.w	r2, r3, #7
 80039e0:	4923      	ldr	r1, [pc, #140]	@ (8003a70 <HAL_RCC_ClockConfig+0x1ec>)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e8:	4b21      	ldr	r3, [pc, #132]	@ (8003a70 <HAL_RCC_ClockConfig+0x1ec>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d001      	beq.n	80039fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e036      	b.n	8003a68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d008      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a06:	4b1b      	ldr	r3, [pc, #108]	@ (8003a74 <HAL_RCC_ClockConfig+0x1f0>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	4918      	ldr	r1, [pc, #96]	@ (8003a74 <HAL_RCC_ClockConfig+0x1f0>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d009      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a24:	4b13      	ldr	r3, [pc, #76]	@ (8003a74 <HAL_RCC_ClockConfig+0x1f0>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4910      	ldr	r1, [pc, #64]	@ (8003a74 <HAL_RCC_ClockConfig+0x1f0>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a38:	f000 f824 	bl	8003a84 <HAL_RCC_GetSysClockFreq>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a74 <HAL_RCC_ClockConfig+0x1f0>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	f003 030f 	and.w	r3, r3, #15
 8003a48:	490b      	ldr	r1, [pc, #44]	@ (8003a78 <HAL_RCC_ClockConfig+0x1f4>)
 8003a4a:	5ccb      	ldrb	r3, [r1, r3]
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	fa22 f303 	lsr.w	r3, r2, r3
 8003a54:	4a09      	ldr	r2, [pc, #36]	@ (8003a7c <HAL_RCC_ClockConfig+0x1f8>)
 8003a56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a58:	4b09      	ldr	r3, [pc, #36]	@ (8003a80 <HAL_RCC_ClockConfig+0x1fc>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fd faad 	bl	8000fbc <HAL_InitTick>
 8003a62:	4603      	mov	r3, r0
 8003a64:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a66:	7afb      	ldrb	r3, [r7, #11]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40022000 	.word	0x40022000
 8003a74:	40021000 	.word	0x40021000
 8003a78:	08009790 	.word	0x08009790
 8003a7c:	20000000 	.word	0x20000000
 8003a80:	20000004 	.word	0x20000004

08003a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b089      	sub	sp, #36	@ 0x24
 8003a88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61fb      	str	r3, [r7, #28]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a92:	4b3e      	ldr	r3, [pc, #248]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x34>
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	2b0c      	cmp	r3, #12
 8003ab0:	d121      	bne.n	8003af6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d11e      	bne.n	8003af6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ab8:	4b34      	ldr	r3, [pc, #208]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d107      	bne.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ac4:	4b31      	ldr	r3, [pc, #196]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aca:	0a1b      	lsrs	r3, r3, #8
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	61fb      	str	r3, [r7, #28]
 8003ad2:	e005      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ad4:	4b2d      	ldr	r3, [pc, #180]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10d      	bne.n	8003b0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003af4:	e00a      	b.n	8003b0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d102      	bne.n	8003b02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003afc:	4b25      	ldr	r3, [pc, #148]	@ (8003b94 <HAL_RCC_GetSysClockFreq+0x110>)
 8003afe:	61bb      	str	r3, [r7, #24]
 8003b00:	e004      	b.n	8003b0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d101      	bne.n	8003b0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b08:	4b23      	ldr	r3, [pc, #140]	@ (8003b98 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	2b0c      	cmp	r3, #12
 8003b10:	d134      	bne.n	8003b7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b12:	4b1e      	ldr	r3, [pc, #120]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d003      	beq.n	8003b2a <HAL_RCC_GetSysClockFreq+0xa6>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d003      	beq.n	8003b30 <HAL_RCC_GetSysClockFreq+0xac>
 8003b28:	e005      	b.n	8003b36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8003b94 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b2c:	617b      	str	r3, [r7, #20]
      break;
 8003b2e:	e005      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b30:	4b19      	ldr	r3, [pc, #100]	@ (8003b98 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b32:	617b      	str	r3, [r7, #20]
      break;
 8003b34:	e002      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	617b      	str	r3, [r7, #20]
      break;
 8003b3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b3c:	4b13      	ldr	r3, [pc, #76]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	3301      	adds	r3, #1
 8003b48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b4a:	4b10      	ldr	r3, [pc, #64]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	0a1b      	lsrs	r3, r3, #8
 8003b50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	fb03 f202 	mul.w	r2, r3, r2
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b62:	4b0a      	ldr	r3, [pc, #40]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	0e5b      	lsrs	r3, r3, #25
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b7c:	69bb      	ldr	r3, [r7, #24]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3724      	adds	r7, #36	@ 0x24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	080097a8 	.word	0x080097a8
 8003b94:	00f42400 	.word	0x00f42400
 8003b98:	007a1200 	.word	0x007a1200

08003b9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba0:	4b03      	ldr	r3, [pc, #12]	@ (8003bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	20000000 	.word	0x20000000

08003bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bb8:	f7ff fff0 	bl	8003b9c <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b06      	ldr	r3, [pc, #24]	@ (8003bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	0a1b      	lsrs	r3, r3, #8
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4904      	ldr	r1, [pc, #16]	@ (8003bdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	080097a0 	.word	0x080097a0

08003be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003be4:	f7ff ffda 	bl	8003b9c <HAL_RCC_GetHCLKFreq>
 8003be8:	4602      	mov	r2, r0
 8003bea:	4b06      	ldr	r3, [pc, #24]	@ (8003c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	0adb      	lsrs	r3, r3, #11
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	4904      	ldr	r1, [pc, #16]	@ (8003c08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bf6:	5ccb      	ldrb	r3, [r1, r3]
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40021000 	.word	0x40021000
 8003c08:	080097a0 	.word	0x080097a0

08003c0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c14:	2300      	movs	r3, #0
 8003c16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c18:	4b2a      	ldr	r3, [pc, #168]	@ (8003cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c24:	f7ff f9ee 	bl	8003004 <HAL_PWREx_GetVoltageRange>
 8003c28:	6178      	str	r0, [r7, #20]
 8003c2a:	e014      	b.n	8003c56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c2c:	4b25      	ldr	r3, [pc, #148]	@ (8003cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c30:	4a24      	ldr	r2, [pc, #144]	@ (8003cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c36:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c38:	4b22      	ldr	r3, [pc, #136]	@ (8003cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c44:	f7ff f9de 	bl	8003004 <HAL_PWREx_GetVoltageRange>
 8003c48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4e:	4a1d      	ldr	r2, [pc, #116]	@ (8003cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c54:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c5c:	d10b      	bne.n	8003c76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b80      	cmp	r3, #128	@ 0x80
 8003c62:	d919      	bls.n	8003c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2ba0      	cmp	r3, #160	@ 0xa0
 8003c68:	d902      	bls.n	8003c70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	e013      	b.n	8003c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c70:	2301      	movs	r3, #1
 8003c72:	613b      	str	r3, [r7, #16]
 8003c74:	e010      	b.n	8003c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b80      	cmp	r3, #128	@ 0x80
 8003c7a:	d902      	bls.n	8003c82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	e00a      	b.n	8003c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b80      	cmp	r3, #128	@ 0x80
 8003c86:	d102      	bne.n	8003c8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c88:	2302      	movs	r3, #2
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	e004      	b.n	8003c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b70      	cmp	r3, #112	@ 0x70
 8003c92:	d101      	bne.n	8003c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c94:	2301      	movs	r3, #1
 8003c96:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c98:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f023 0207 	bic.w	r2, r3, #7
 8003ca0:	4909      	ldr	r1, [pc, #36]	@ (8003cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ca8:	4b07      	ldr	r3, [pc, #28]	@ (8003cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d001      	beq.n	8003cba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	40022000 	.word	0x40022000

08003ccc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cd8:	2300      	movs	r3, #0
 8003cda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d041      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cf0:	d02a      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003cf2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cf6:	d824      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cf8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cfc:	d008      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003cfe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d02:	d81e      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d0c:	d010      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d0e:	e018      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d10:	4b86      	ldr	r3, [pc, #536]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	4a85      	ldr	r2, [pc, #532]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d1a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d1c:	e015      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3304      	adds	r3, #4
 8003d22:	2100      	movs	r1, #0
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 facb 	bl	80042c0 <RCCEx_PLLSAI1_Config>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d2e:	e00c      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3320      	adds	r3, #32
 8003d34:	2100      	movs	r1, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fbb6 	bl	80044a8 <RCCEx_PLLSAI2_Config>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d40:	e003      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	74fb      	strb	r3, [r7, #19]
      break;
 8003d46:	e000      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d4a:	7cfb      	ldrb	r3, [r7, #19]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10b      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d50:	4b76      	ldr	r3, [pc, #472]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d56:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d5e:	4973      	ldr	r1, [pc, #460]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d66:	e001      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d68:	7cfb      	ldrb	r3, [r7, #19]
 8003d6a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d041      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d80:	d02a      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003d82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d86:	d824      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d8c:	d008      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d92:	d81e      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00a      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d9c:	d010      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d9e:	e018      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003da0:	4b62      	ldr	r3, [pc, #392]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	4a61      	ldr	r2, [pc, #388]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003daa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003dac:	e015      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3304      	adds	r3, #4
 8003db2:	2100      	movs	r1, #0
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fa83 	bl	80042c0 <RCCEx_PLLSAI1_Config>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003dbe:	e00c      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3320      	adds	r3, #32
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fb6e 	bl	80044a8 <RCCEx_PLLSAI2_Config>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003dd0:	e003      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	74fb      	strb	r3, [r7, #19]
      break;
 8003dd6:	e000      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dda:	7cfb      	ldrb	r3, [r7, #19]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10b      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003de0:	4b52      	ldr	r3, [pc, #328]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dee:	494f      	ldr	r1, [pc, #316]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003df6:	e001      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df8:	7cfb      	ldrb	r3, [r7, #19]
 8003dfa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 80a0 	beq.w	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e0e:	4b47      	ldr	r3, [pc, #284]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00d      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e24:	4b41      	ldr	r3, [pc, #260]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e28:	4a40      	ldr	r2, [pc, #256]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e30:	4b3e      	ldr	r3, [pc, #248]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e38:	60bb      	str	r3, [r7, #8]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e40:	4b3b      	ldr	r3, [pc, #236]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a3a      	ldr	r2, [pc, #232]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e4c:	f7fd f906 	bl	800105c <HAL_GetTick>
 8003e50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e52:	e009      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e54:	f7fd f902 	bl	800105c <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d902      	bls.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	74fb      	strb	r3, [r7, #19]
        break;
 8003e66:	e005      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e68:	4b31      	ldr	r3, [pc, #196]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0ef      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e74:	7cfb      	ldrb	r3, [r7, #19]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d15c      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01f      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d019      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e98:	4b24      	ldr	r3, [pc, #144]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ea2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ea4:	4b21      	ldr	r3, [pc, #132]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eaa:	4a20      	ldr	r2, [pc, #128]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eba:	4a1c      	ldr	r2, [pc, #112]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ebc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ec0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ec4:	4a19      	ldr	r2, [pc, #100]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d016      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed6:	f7fd f8c1 	bl	800105c <HAL_GetTick>
 8003eda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003edc:	e00b      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ede:	f7fd f8bd 	bl	800105c <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d902      	bls.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ef4:	e006      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0ec      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003f04:	7cfb      	ldrb	r3, [r7, #19]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10c      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f0a:	4b08      	ldr	r3, [pc, #32]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f1a:	4904      	ldr	r1, [pc, #16]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f22:	e009      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f24:	7cfb      	ldrb	r3, [r7, #19]
 8003f26:	74bb      	strb	r3, [r7, #18]
 8003f28:	e006      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f2a:	bf00      	nop
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f34:	7cfb      	ldrb	r3, [r7, #19]
 8003f36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f38:	7c7b      	ldrb	r3, [r7, #17]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d105      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f3e:	4b9e      	ldr	r3, [pc, #632]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f42:	4a9d      	ldr	r2, [pc, #628]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f48:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f56:	4b98      	ldr	r3, [pc, #608]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5c:	f023 0203 	bic.w	r2, r3, #3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f64:	4994      	ldr	r1, [pc, #592]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f78:	4b8f      	ldr	r3, [pc, #572]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7e:	f023 020c 	bic.w	r2, r3, #12
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f86:	498c      	ldr	r1, [pc, #560]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f9a:	4b87      	ldr	r3, [pc, #540]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa8:	4983      	ldr	r1, [pc, #524]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fbc:	4b7e      	ldr	r3, [pc, #504]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fca:	497b      	ldr	r1, [pc, #492]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0310 	and.w	r3, r3, #16
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fde:	4b76      	ldr	r3, [pc, #472]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fec:	4972      	ldr	r1, [pc, #456]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0320 	and.w	r3, r3, #32
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004000:	4b6d      	ldr	r3, [pc, #436]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004006:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800400e:	496a      	ldr	r1, [pc, #424]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004022:	4b65      	ldr	r3, [pc, #404]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004028:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004030:	4961      	ldr	r1, [pc, #388]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004044:	4b5c      	ldr	r3, [pc, #368]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800404a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004052:	4959      	ldr	r1, [pc, #356]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004066:	4b54      	ldr	r3, [pc, #336]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800406c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004074:	4950      	ldr	r1, [pc, #320]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004088:	4b4b      	ldr	r3, [pc, #300]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004096:	4948      	ldr	r1, [pc, #288]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040aa:	4b43      	ldr	r3, [pc, #268]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b8:	493f      	ldr	r1, [pc, #252]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d028      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040cc:	4b3a      	ldr	r3, [pc, #232]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040da:	4937      	ldr	r1, [pc, #220]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040ea:	d106      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040ec:	4b32      	ldr	r3, [pc, #200]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	4a31      	ldr	r2, [pc, #196]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040f6:	60d3      	str	r3, [r2, #12]
 80040f8:	e011      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004102:	d10c      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3304      	adds	r3, #4
 8004108:	2101      	movs	r1, #1
 800410a:	4618      	mov	r0, r3
 800410c:	f000 f8d8 	bl	80042c0 <RCCEx_PLLSAI1_Config>
 8004110:	4603      	mov	r3, r0
 8004112:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004114:	7cfb      	ldrb	r3, [r7, #19]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800411a:	7cfb      	ldrb	r3, [r7, #19]
 800411c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d028      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800412a:	4b23      	ldr	r3, [pc, #140]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004130:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004138:	491f      	ldr	r1, [pc, #124]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004144:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004148:	d106      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800414a:	4b1b      	ldr	r3, [pc, #108]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	4a1a      	ldr	r2, [pc, #104]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004150:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004154:	60d3      	str	r3, [r2, #12]
 8004156:	e011      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800415c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004160:	d10c      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3304      	adds	r3, #4
 8004166:	2101      	movs	r1, #1
 8004168:	4618      	mov	r0, r3
 800416a:	f000 f8a9 	bl	80042c0 <RCCEx_PLLSAI1_Config>
 800416e:	4603      	mov	r3, r0
 8004170:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004172:	7cfb      	ldrb	r3, [r7, #19]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004178:	7cfb      	ldrb	r3, [r7, #19]
 800417a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d02b      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004188:	4b0b      	ldr	r3, [pc, #44]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800418e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004196:	4908      	ldr	r1, [pc, #32]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041a6:	d109      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a8:	4b03      	ldr	r3, [pc, #12]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4a02      	ldr	r2, [pc, #8]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041b2:	60d3      	str	r3, [r2, #12]
 80041b4:	e014      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80041b6:	bf00      	nop
 80041b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041c4:	d10c      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3304      	adds	r3, #4
 80041ca:	2101      	movs	r1, #1
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 f877 	bl	80042c0 <RCCEx_PLLSAI1_Config>
 80041d2:	4603      	mov	r3, r0
 80041d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041d6:	7cfb      	ldrb	r3, [r7, #19]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80041dc:	7cfb      	ldrb	r3, [r7, #19]
 80041de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d02f      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041ec:	4b2b      	ldr	r3, [pc, #172]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041fa:	4928      	ldr	r1, [pc, #160]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004206:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800420a:	d10d      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3304      	adds	r3, #4
 8004210:	2102      	movs	r1, #2
 8004212:	4618      	mov	r0, r3
 8004214:	f000 f854 	bl	80042c0 <RCCEx_PLLSAI1_Config>
 8004218:	4603      	mov	r3, r0
 800421a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800421c:	7cfb      	ldrb	r3, [r7, #19]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d014      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004222:	7cfb      	ldrb	r3, [r7, #19]
 8004224:	74bb      	strb	r3, [r7, #18]
 8004226:	e011      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800422c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004230:	d10c      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3320      	adds	r3, #32
 8004236:	2102      	movs	r1, #2
 8004238:	4618      	mov	r0, r3
 800423a:	f000 f935 	bl	80044a8 <RCCEx_PLLSAI2_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004242:	7cfb      	ldrb	r3, [r7, #19]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004248:	7cfb      	ldrb	r3, [r7, #19]
 800424a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00a      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004258:	4b10      	ldr	r3, [pc, #64]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004266:	490d      	ldr	r1, [pc, #52]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00b      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800427a:	4b08      	ldr	r3, [pc, #32]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800427c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004280:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800428a:	4904      	ldr	r1, [pc, #16]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004292:	7cbb      	ldrb	r3, [r7, #18]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40021000 	.word	0x40021000

080042a0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80042a4:	4b05      	ldr	r3, [pc, #20]	@ (80042bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a04      	ldr	r2, [pc, #16]	@ (80042bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80042aa:	f043 0304 	orr.w	r3, r3, #4
 80042ae:	6013      	str	r3, [r2, #0]
}
 80042b0:	bf00      	nop
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40021000 	.word	0x40021000

080042c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042ce:	4b75      	ldr	r3, [pc, #468]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d018      	beq.n	800430c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80042da:	4b72      	ldr	r3, [pc, #456]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f003 0203 	and.w	r2, r3, #3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d10d      	bne.n	8004306 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
       ||
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80042f2:	4b6c      	ldr	r3, [pc, #432]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	091b      	lsrs	r3, r3, #4
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
       ||
 8004302:	429a      	cmp	r2, r3
 8004304:	d047      	beq.n	8004396 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	73fb      	strb	r3, [r7, #15]
 800430a:	e044      	b.n	8004396 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b03      	cmp	r3, #3
 8004312:	d018      	beq.n	8004346 <RCCEx_PLLSAI1_Config+0x86>
 8004314:	2b03      	cmp	r3, #3
 8004316:	d825      	bhi.n	8004364 <RCCEx_PLLSAI1_Config+0xa4>
 8004318:	2b01      	cmp	r3, #1
 800431a:	d002      	beq.n	8004322 <RCCEx_PLLSAI1_Config+0x62>
 800431c:	2b02      	cmp	r3, #2
 800431e:	d009      	beq.n	8004334 <RCCEx_PLLSAI1_Config+0x74>
 8004320:	e020      	b.n	8004364 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004322:	4b60      	ldr	r3, [pc, #384]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d11d      	bne.n	800436a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004332:	e01a      	b.n	800436a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004334:	4b5b      	ldr	r3, [pc, #364]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800433c:	2b00      	cmp	r3, #0
 800433e:	d116      	bne.n	800436e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004344:	e013      	b.n	800436e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004346:	4b57      	ldr	r3, [pc, #348]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10f      	bne.n	8004372 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004352:	4b54      	ldr	r3, [pc, #336]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d109      	bne.n	8004372 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004362:	e006      	b.n	8004372 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	73fb      	strb	r3, [r7, #15]
      break;
 8004368:	e004      	b.n	8004374 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800436a:	bf00      	nop
 800436c:	e002      	b.n	8004374 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800436e:	bf00      	nop
 8004370:	e000      	b.n	8004374 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004372:	bf00      	nop
    }

    if(status == HAL_OK)
 8004374:	7bfb      	ldrb	r3, [r7, #15]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10d      	bne.n	8004396 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800437a:	4b4a      	ldr	r3, [pc, #296]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6819      	ldr	r1, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	3b01      	subs	r3, #1
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	430b      	orrs	r3, r1
 8004390:	4944      	ldr	r1, [pc, #272]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004392:	4313      	orrs	r3, r2
 8004394:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004396:	7bfb      	ldrb	r3, [r7, #15]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d17d      	bne.n	8004498 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800439c:	4b41      	ldr	r3, [pc, #260]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a40      	ldr	r2, [pc, #256]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a8:	f7fc fe58 	bl	800105c <HAL_GetTick>
 80043ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043ae:	e009      	b.n	80043c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043b0:	f7fc fe54 	bl	800105c <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d902      	bls.n	80043c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	73fb      	strb	r3, [r7, #15]
        break;
 80043c2:	e005      	b.n	80043d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043c4:	4b37      	ldr	r3, [pc, #220]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1ef      	bne.n	80043b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d160      	bne.n	8004498 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d111      	bne.n	8004400 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043dc:	4b31      	ldr	r3, [pc, #196]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80043e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6892      	ldr	r2, [r2, #8]
 80043ec:	0211      	lsls	r1, r2, #8
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	68d2      	ldr	r2, [r2, #12]
 80043f2:	0912      	lsrs	r2, r2, #4
 80043f4:	0452      	lsls	r2, r2, #17
 80043f6:	430a      	orrs	r2, r1
 80043f8:	492a      	ldr	r1, [pc, #168]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	610b      	str	r3, [r1, #16]
 80043fe:	e027      	b.n	8004450 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d112      	bne.n	800442c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004406:	4b27      	ldr	r3, [pc, #156]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800440e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6892      	ldr	r2, [r2, #8]
 8004416:	0211      	lsls	r1, r2, #8
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6912      	ldr	r2, [r2, #16]
 800441c:	0852      	lsrs	r2, r2, #1
 800441e:	3a01      	subs	r2, #1
 8004420:	0552      	lsls	r2, r2, #21
 8004422:	430a      	orrs	r2, r1
 8004424:	491f      	ldr	r1, [pc, #124]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004426:	4313      	orrs	r3, r2
 8004428:	610b      	str	r3, [r1, #16]
 800442a:	e011      	b.n	8004450 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800442c:	4b1d      	ldr	r3, [pc, #116]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004434:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6892      	ldr	r2, [r2, #8]
 800443c:	0211      	lsls	r1, r2, #8
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6952      	ldr	r2, [r2, #20]
 8004442:	0852      	lsrs	r2, r2, #1
 8004444:	3a01      	subs	r2, #1
 8004446:	0652      	lsls	r2, r2, #25
 8004448:	430a      	orrs	r2, r1
 800444a:	4916      	ldr	r1, [pc, #88]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800444c:	4313      	orrs	r3, r2
 800444e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004450:	4b14      	ldr	r3, [pc, #80]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a13      	ldr	r2, [pc, #76]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004456:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800445a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445c:	f7fc fdfe 	bl	800105c <HAL_GetTick>
 8004460:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004462:	e009      	b.n	8004478 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004464:	f7fc fdfa 	bl	800105c <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d902      	bls.n	8004478 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	73fb      	strb	r3, [r7, #15]
          break;
 8004476:	e005      	b.n	8004484 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004478:	4b0a      	ldr	r3, [pc, #40]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0ef      	beq.n	8004464 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800448a:	4b06      	ldr	r3, [pc, #24]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800448c:	691a      	ldr	r2, [r3, #16]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	4904      	ldr	r1, [pc, #16]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004494:	4313      	orrs	r3, r2
 8004496:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004498:	7bfb      	ldrb	r3, [r7, #15]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40021000 	.word	0x40021000

080044a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044b6:	4b6a      	ldr	r3, [pc, #424]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d018      	beq.n	80044f4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80044c2:	4b67      	ldr	r3, [pc, #412]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f003 0203 	and.w	r2, r3, #3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d10d      	bne.n	80044ee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
       ||
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d009      	beq.n	80044ee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80044da:	4b61      	ldr	r3, [pc, #388]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	091b      	lsrs	r3, r3, #4
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
       ||
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d047      	beq.n	800457e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	73fb      	strb	r3, [r7, #15]
 80044f2:	e044      	b.n	800457e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d018      	beq.n	800452e <RCCEx_PLLSAI2_Config+0x86>
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d825      	bhi.n	800454c <RCCEx_PLLSAI2_Config+0xa4>
 8004500:	2b01      	cmp	r3, #1
 8004502:	d002      	beq.n	800450a <RCCEx_PLLSAI2_Config+0x62>
 8004504:	2b02      	cmp	r3, #2
 8004506:	d009      	beq.n	800451c <RCCEx_PLLSAI2_Config+0x74>
 8004508:	e020      	b.n	800454c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800450a:	4b55      	ldr	r3, [pc, #340]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d11d      	bne.n	8004552 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800451a:	e01a      	b.n	8004552 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800451c:	4b50      	ldr	r3, [pc, #320]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004524:	2b00      	cmp	r3, #0
 8004526:	d116      	bne.n	8004556 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800452c:	e013      	b.n	8004556 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800452e:	4b4c      	ldr	r3, [pc, #304]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10f      	bne.n	800455a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800453a:	4b49      	ldr	r3, [pc, #292]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d109      	bne.n	800455a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800454a:	e006      	b.n	800455a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	73fb      	strb	r3, [r7, #15]
      break;
 8004550:	e004      	b.n	800455c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004552:	bf00      	nop
 8004554:	e002      	b.n	800455c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004556:	bf00      	nop
 8004558:	e000      	b.n	800455c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800455a:	bf00      	nop
    }

    if(status == HAL_OK)
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10d      	bne.n	800457e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004562:	4b3f      	ldr	r3, [pc, #252]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6819      	ldr	r1, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	3b01      	subs	r3, #1
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	430b      	orrs	r3, r1
 8004578:	4939      	ldr	r1, [pc, #228]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 800457a:	4313      	orrs	r3, r2
 800457c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800457e:	7bfb      	ldrb	r3, [r7, #15]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d167      	bne.n	8004654 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004584:	4b36      	ldr	r3, [pc, #216]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a35      	ldr	r2, [pc, #212]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 800458a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800458e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004590:	f7fc fd64 	bl	800105c <HAL_GetTick>
 8004594:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004596:	e009      	b.n	80045ac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004598:	f7fc fd60 	bl	800105c <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d902      	bls.n	80045ac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	73fb      	strb	r3, [r7, #15]
        break;
 80045aa:	e005      	b.n	80045b8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045ac:	4b2c      	ldr	r3, [pc, #176]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1ef      	bne.n	8004598 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d14a      	bne.n	8004654 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d111      	bne.n	80045e8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045c4:	4b26      	ldr	r3, [pc, #152]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80045cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6892      	ldr	r2, [r2, #8]
 80045d4:	0211      	lsls	r1, r2, #8
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	68d2      	ldr	r2, [r2, #12]
 80045da:	0912      	lsrs	r2, r2, #4
 80045dc:	0452      	lsls	r2, r2, #17
 80045de:	430a      	orrs	r2, r1
 80045e0:	491f      	ldr	r1, [pc, #124]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	614b      	str	r3, [r1, #20]
 80045e6:	e011      	b.n	800460c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80045f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6892      	ldr	r2, [r2, #8]
 80045f8:	0211      	lsls	r1, r2, #8
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6912      	ldr	r2, [r2, #16]
 80045fe:	0852      	lsrs	r2, r2, #1
 8004600:	3a01      	subs	r2, #1
 8004602:	0652      	lsls	r2, r2, #25
 8004604:	430a      	orrs	r2, r1
 8004606:	4916      	ldr	r1, [pc, #88]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004608:	4313      	orrs	r3, r2
 800460a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800460c:	4b14      	ldr	r3, [pc, #80]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a13      	ldr	r2, [pc, #76]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004616:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004618:	f7fc fd20 	bl	800105c <HAL_GetTick>
 800461c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800461e:	e009      	b.n	8004634 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004620:	f7fc fd1c 	bl	800105c <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d902      	bls.n	8004634 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	73fb      	strb	r3, [r7, #15]
          break;
 8004632:	e005      	b.n	8004640 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004634:	4b0a      	ldr	r3, [pc, #40]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0ef      	beq.n	8004620 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004640:	7bfb      	ldrb	r3, [r7, #15]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d106      	bne.n	8004654 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004646:	4b06      	ldr	r3, [pc, #24]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004648:	695a      	ldr	r2, [r3, #20]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	4904      	ldr	r1, [pc, #16]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004650:	4313      	orrs	r3, r2
 8004652:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004654:	7bfb      	ldrb	r3, [r7, #15]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40021000 	.word	0x40021000

08004664 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e049      	b.n	800470a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7fc f8e4 	bl	8000858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3304      	adds	r3, #4
 80046a0:	4619      	mov	r1, r3
 80046a2:	4610      	mov	r0, r2
 80046a4:	f000 f970 	bl	8004988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b01      	cmp	r3, #1
 8004726:	d001      	beq.n	800472c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e04f      	b.n	80047cc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a23      	ldr	r2, [pc, #140]	@ (80047d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d01d      	beq.n	800478a <HAL_TIM_Base_Start_IT+0x76>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004756:	d018      	beq.n	800478a <HAL_TIM_Base_Start_IT+0x76>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a1f      	ldr	r2, [pc, #124]	@ (80047dc <HAL_TIM_Base_Start_IT+0xc8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d013      	beq.n	800478a <HAL_TIM_Base_Start_IT+0x76>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1e      	ldr	r2, [pc, #120]	@ (80047e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d00e      	beq.n	800478a <HAL_TIM_Base_Start_IT+0x76>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a1c      	ldr	r2, [pc, #112]	@ (80047e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d009      	beq.n	800478a <HAL_TIM_Base_Start_IT+0x76>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a1b      	ldr	r2, [pc, #108]	@ (80047e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d004      	beq.n	800478a <HAL_TIM_Base_Start_IT+0x76>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a19      	ldr	r2, [pc, #100]	@ (80047ec <HAL_TIM_Base_Start_IT+0xd8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d115      	bne.n	80047b6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	4b17      	ldr	r3, [pc, #92]	@ (80047f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004792:	4013      	ands	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2b06      	cmp	r3, #6
 800479a:	d015      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0xb4>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a2:	d011      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b4:	e008      	b.n	80047c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0201 	orr.w	r2, r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	e000      	b.n	80047ca <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	40012c00 	.word	0x40012c00
 80047dc:	40000400 	.word	0x40000400
 80047e0:	40000800 	.word	0x40000800
 80047e4:	40000c00 	.word	0x40000c00
 80047e8:	40013400 	.word	0x40013400
 80047ec:	40014000 	.word	0x40014000
 80047f0:	00010007 	.word	0x00010007

080047f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <HAL_TIM_ConfigClockSource+0x1c>
 800480c:	2302      	movs	r3, #2
 800480e:	e0b6      	b.n	800497e <HAL_TIM_ConfigClockSource+0x18a>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800482e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800483a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800484c:	d03e      	beq.n	80048cc <HAL_TIM_ConfigClockSource+0xd8>
 800484e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004852:	f200 8087 	bhi.w	8004964 <HAL_TIM_ConfigClockSource+0x170>
 8004856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800485a:	f000 8086 	beq.w	800496a <HAL_TIM_ConfigClockSource+0x176>
 800485e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004862:	d87f      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x170>
 8004864:	2b70      	cmp	r3, #112	@ 0x70
 8004866:	d01a      	beq.n	800489e <HAL_TIM_ConfigClockSource+0xaa>
 8004868:	2b70      	cmp	r3, #112	@ 0x70
 800486a:	d87b      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x170>
 800486c:	2b60      	cmp	r3, #96	@ 0x60
 800486e:	d050      	beq.n	8004912 <HAL_TIM_ConfigClockSource+0x11e>
 8004870:	2b60      	cmp	r3, #96	@ 0x60
 8004872:	d877      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x170>
 8004874:	2b50      	cmp	r3, #80	@ 0x50
 8004876:	d03c      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0xfe>
 8004878:	2b50      	cmp	r3, #80	@ 0x50
 800487a:	d873      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x170>
 800487c:	2b40      	cmp	r3, #64	@ 0x40
 800487e:	d058      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x13e>
 8004880:	2b40      	cmp	r3, #64	@ 0x40
 8004882:	d86f      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x170>
 8004884:	2b30      	cmp	r3, #48	@ 0x30
 8004886:	d064      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x15e>
 8004888:	2b30      	cmp	r3, #48	@ 0x30
 800488a:	d86b      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x170>
 800488c:	2b20      	cmp	r3, #32
 800488e:	d060      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x15e>
 8004890:	2b20      	cmp	r3, #32
 8004892:	d867      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x170>
 8004894:	2b00      	cmp	r3, #0
 8004896:	d05c      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x15e>
 8004898:	2b10      	cmp	r3, #16
 800489a:	d05a      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x15e>
 800489c:	e062      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048ae:	f000 f98b 	bl	8004bc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	609a      	str	r2, [r3, #8]
      break;
 80048ca:	e04f      	b.n	800496c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048dc:	f000 f974 	bl	8004bc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048ee:	609a      	str	r2, [r3, #8]
      break;
 80048f0:	e03c      	b.n	800496c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048fe:	461a      	mov	r2, r3
 8004900:	f000 f8e8 	bl	8004ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2150      	movs	r1, #80	@ 0x50
 800490a:	4618      	mov	r0, r3
 800490c:	f000 f941 	bl	8004b92 <TIM_ITRx_SetConfig>
      break;
 8004910:	e02c      	b.n	800496c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800491e:	461a      	mov	r2, r3
 8004920:	f000 f907 	bl	8004b32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2160      	movs	r1, #96	@ 0x60
 800492a:	4618      	mov	r0, r3
 800492c:	f000 f931 	bl	8004b92 <TIM_ITRx_SetConfig>
      break;
 8004930:	e01c      	b.n	800496c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800493e:	461a      	mov	r2, r3
 8004940:	f000 f8c8 	bl	8004ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2140      	movs	r1, #64	@ 0x40
 800494a:	4618      	mov	r0, r3
 800494c:	f000 f921 	bl	8004b92 <TIM_ITRx_SetConfig>
      break;
 8004950:	e00c      	b.n	800496c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4619      	mov	r1, r3
 800495c:	4610      	mov	r0, r2
 800495e:	f000 f918 	bl	8004b92 <TIM_ITRx_SetConfig>
      break;
 8004962:	e003      	b.n	800496c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	73fb      	strb	r3, [r7, #15]
      break;
 8004968:	e000      	b.n	800496c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800496a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800497c:	7bfb      	ldrb	r3, [r7, #15]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a46      	ldr	r2, [pc, #280]	@ (8004ab4 <TIM_Base_SetConfig+0x12c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d013      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049a6:	d00f      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a43      	ldr	r2, [pc, #268]	@ (8004ab8 <TIM_Base_SetConfig+0x130>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00b      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a42      	ldr	r2, [pc, #264]	@ (8004abc <TIM_Base_SetConfig+0x134>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d007      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a41      	ldr	r2, [pc, #260]	@ (8004ac0 <TIM_Base_SetConfig+0x138>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a40      	ldr	r2, [pc, #256]	@ (8004ac4 <TIM_Base_SetConfig+0x13c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d108      	bne.n	80049da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a35      	ldr	r2, [pc, #212]	@ (8004ab4 <TIM_Base_SetConfig+0x12c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d01f      	beq.n	8004a22 <TIM_Base_SetConfig+0x9a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049e8:	d01b      	beq.n	8004a22 <TIM_Base_SetConfig+0x9a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a32      	ldr	r2, [pc, #200]	@ (8004ab8 <TIM_Base_SetConfig+0x130>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d017      	beq.n	8004a22 <TIM_Base_SetConfig+0x9a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a31      	ldr	r2, [pc, #196]	@ (8004abc <TIM_Base_SetConfig+0x134>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d013      	beq.n	8004a22 <TIM_Base_SetConfig+0x9a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a30      	ldr	r2, [pc, #192]	@ (8004ac0 <TIM_Base_SetConfig+0x138>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00f      	beq.n	8004a22 <TIM_Base_SetConfig+0x9a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a2f      	ldr	r2, [pc, #188]	@ (8004ac4 <TIM_Base_SetConfig+0x13c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00b      	beq.n	8004a22 <TIM_Base_SetConfig+0x9a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a2e      	ldr	r2, [pc, #184]	@ (8004ac8 <TIM_Base_SetConfig+0x140>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d007      	beq.n	8004a22 <TIM_Base_SetConfig+0x9a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a2d      	ldr	r2, [pc, #180]	@ (8004acc <TIM_Base_SetConfig+0x144>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d003      	beq.n	8004a22 <TIM_Base_SetConfig+0x9a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a2c      	ldr	r2, [pc, #176]	@ (8004ad0 <TIM_Base_SetConfig+0x148>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d108      	bne.n	8004a34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a16      	ldr	r2, [pc, #88]	@ (8004ab4 <TIM_Base_SetConfig+0x12c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00f      	beq.n	8004a80 <TIM_Base_SetConfig+0xf8>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a18      	ldr	r2, [pc, #96]	@ (8004ac4 <TIM_Base_SetConfig+0x13c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00b      	beq.n	8004a80 <TIM_Base_SetConfig+0xf8>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a17      	ldr	r2, [pc, #92]	@ (8004ac8 <TIM_Base_SetConfig+0x140>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d007      	beq.n	8004a80 <TIM_Base_SetConfig+0xf8>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a16      	ldr	r2, [pc, #88]	@ (8004acc <TIM_Base_SetConfig+0x144>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_Base_SetConfig+0xf8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a15      	ldr	r2, [pc, #84]	@ (8004ad0 <TIM_Base_SetConfig+0x148>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d103      	bne.n	8004a88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d105      	bne.n	8004aa6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f023 0201 	bic.w	r2, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	611a      	str	r2, [r3, #16]
  }
}
 8004aa6:	bf00      	nop
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40012c00 	.word	0x40012c00
 8004ab8:	40000400 	.word	0x40000400
 8004abc:	40000800 	.word	0x40000800
 8004ac0:	40000c00 	.word	0x40000c00
 8004ac4:	40013400 	.word	0x40013400
 8004ac8:	40014000 	.word	0x40014000
 8004acc:	40014400 	.word	0x40014400
 8004ad0:	40014800 	.word	0x40014800

08004ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	f023 0201 	bic.w	r2, r3, #1
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f023 030a 	bic.w	r3, r3, #10
 8004b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	621a      	str	r2, [r3, #32]
}
 8004b26:	bf00      	nop
 8004b28:	371c      	adds	r7, #28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b087      	sub	sp, #28
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	60f8      	str	r0, [r7, #12]
 8004b3a:	60b9      	str	r1, [r7, #8]
 8004b3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	f023 0210 	bic.w	r2, r3, #16
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	031b      	lsls	r3, r3, #12
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	621a      	str	r2, [r3, #32]
}
 8004b86:	bf00      	nop
 8004b88:	371c      	adds	r7, #28
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b085      	sub	sp, #20
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
 8004b9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f043 0307 	orr.w	r3, r3, #7
 8004bb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	609a      	str	r2, [r3, #8]
}
 8004bbc:	bf00      	nop
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004be2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	021a      	lsls	r2, r3, #8
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	431a      	orrs	r2, r3
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	609a      	str	r2, [r3, #8]
}
 8004bfc:	bf00      	nop
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e068      	b.n	8004cf2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a2e      	ldr	r2, [pc, #184]	@ (8004d00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d004      	beq.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a2d      	ldr	r2, [pc, #180]	@ (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d108      	bne.n	8004c66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004c5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1e      	ldr	r2, [pc, #120]	@ (8004d00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d01d      	beq.n	8004cc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c92:	d018      	beq.n	8004cc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a1b      	ldr	r2, [pc, #108]	@ (8004d08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d013      	beq.n	8004cc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8004d0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d00e      	beq.n	8004cc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a18      	ldr	r2, [pc, #96]	@ (8004d10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d009      	beq.n	8004cc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a13      	ldr	r2, [pc, #76]	@ (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d004      	beq.n	8004cc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a14      	ldr	r2, [pc, #80]	@ (8004d14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d10c      	bne.n	8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ccc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40012c00 	.word	0x40012c00
 8004d04:	40013400 	.word	0x40013400
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	40000800 	.word	0x40000800
 8004d10:	40000c00 	.word	0x40000c00
 8004d14:	40014000 	.word	0x40014000

08004d18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e040      	b.n	8004dac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7fb ff52 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2224      	movs	r2, #36	@ 0x24
 8004d44:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0201 	bic.w	r2, r2, #1
 8004d54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fb6a 	bl	8005438 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f8af 	bl	8004ec8 <UART_SetConfig>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d101      	bne.n	8004d74 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e01b      	b.n	8004dac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689a      	ldr	r2, [r3, #8]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fbe9 	bl	800557c <UART_CheckIdleState>
 8004daa:	4603      	mov	r3, r0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08a      	sub	sp, #40	@ 0x28
 8004db8:	af02      	add	r7, sp, #8
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	603b      	str	r3, [r7, #0]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d177      	bne.n	8004ebc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <HAL_UART_Transmit+0x24>
 8004dd2:	88fb      	ldrh	r3, [r7, #6]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e070      	b.n	8004ebe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2221      	movs	r2, #33	@ 0x21
 8004de8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dea:	f7fc f937 	bl	800105c <HAL_GetTick>
 8004dee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	88fa      	ldrh	r2, [r7, #6]
 8004df4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	88fa      	ldrh	r2, [r7, #6]
 8004dfc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e08:	d108      	bne.n	8004e1c <HAL_UART_Transmit+0x68>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d104      	bne.n	8004e1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004e12:	2300      	movs	r3, #0
 8004e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	61bb      	str	r3, [r7, #24]
 8004e1a:	e003      	b.n	8004e24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e20:	2300      	movs	r3, #0
 8004e22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e24:	e02f      	b.n	8004e86 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	2180      	movs	r1, #128	@ 0x80
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 fc4b 	bl	80056cc <UART_WaitOnFlagUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d004      	beq.n	8004e46 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e03b      	b.n	8004ebe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10b      	bne.n	8004e64 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	881a      	ldrh	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e58:	b292      	uxth	r2, r2
 8004e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	3302      	adds	r3, #2
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	e007      	b.n	8004e74 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	781a      	ldrb	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	3301      	adds	r3, #1
 8004e72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1c9      	bne.n	8004e26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2140      	movs	r1, #64	@ 0x40
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 fc15 	bl	80056cc <UART_WaitOnFlagUntilTimeout>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d004      	beq.n	8004eb2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e005      	b.n	8004ebe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	e000      	b.n	8004ebe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004ebc:	2302      	movs	r3, #2
  }
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3720      	adds	r7, #32
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ecc:	b08a      	sub	sp, #40	@ 0x28
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	4ba4      	ldr	r3, [pc, #656]	@ (8005188 <UART_SetConfig+0x2c0>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	6812      	ldr	r2, [r2, #0]
 8004efe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f00:	430b      	orrs	r3, r1
 8004f02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a99      	ldr	r2, [pc, #612]	@ (800518c <UART_SetConfig+0x2c4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d004      	beq.n	8004f34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f30:	4313      	orrs	r3, r2
 8004f32:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f44:	430a      	orrs	r2, r1
 8004f46:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a90      	ldr	r2, [pc, #576]	@ (8005190 <UART_SetConfig+0x2c8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d126      	bne.n	8004fa0 <UART_SetConfig+0xd8>
 8004f52:	4b90      	ldr	r3, [pc, #576]	@ (8005194 <UART_SetConfig+0x2cc>)
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d81b      	bhi.n	8004f98 <UART_SetConfig+0xd0>
 8004f60:	a201      	add	r2, pc, #4	@ (adr r2, 8004f68 <UART_SetConfig+0xa0>)
 8004f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f66:	bf00      	nop
 8004f68:	08004f79 	.word	0x08004f79
 8004f6c:	08004f89 	.word	0x08004f89
 8004f70:	08004f81 	.word	0x08004f81
 8004f74:	08004f91 	.word	0x08004f91
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f7e:	e116      	b.n	80051ae <UART_SetConfig+0x2e6>
 8004f80:	2302      	movs	r3, #2
 8004f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f86:	e112      	b.n	80051ae <UART_SetConfig+0x2e6>
 8004f88:	2304      	movs	r3, #4
 8004f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f8e:	e10e      	b.n	80051ae <UART_SetConfig+0x2e6>
 8004f90:	2308      	movs	r3, #8
 8004f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f96:	e10a      	b.n	80051ae <UART_SetConfig+0x2e6>
 8004f98:	2310      	movs	r3, #16
 8004f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f9e:	e106      	b.n	80051ae <UART_SetConfig+0x2e6>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a7c      	ldr	r2, [pc, #496]	@ (8005198 <UART_SetConfig+0x2d0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d138      	bne.n	800501c <UART_SetConfig+0x154>
 8004faa:	4b7a      	ldr	r3, [pc, #488]	@ (8005194 <UART_SetConfig+0x2cc>)
 8004fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb0:	f003 030c 	and.w	r3, r3, #12
 8004fb4:	2b0c      	cmp	r3, #12
 8004fb6:	d82d      	bhi.n	8005014 <UART_SetConfig+0x14c>
 8004fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc0 <UART_SetConfig+0xf8>)
 8004fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbe:	bf00      	nop
 8004fc0:	08004ff5 	.word	0x08004ff5
 8004fc4:	08005015 	.word	0x08005015
 8004fc8:	08005015 	.word	0x08005015
 8004fcc:	08005015 	.word	0x08005015
 8004fd0:	08005005 	.word	0x08005005
 8004fd4:	08005015 	.word	0x08005015
 8004fd8:	08005015 	.word	0x08005015
 8004fdc:	08005015 	.word	0x08005015
 8004fe0:	08004ffd 	.word	0x08004ffd
 8004fe4:	08005015 	.word	0x08005015
 8004fe8:	08005015 	.word	0x08005015
 8004fec:	08005015 	.word	0x08005015
 8004ff0:	0800500d 	.word	0x0800500d
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ffa:	e0d8      	b.n	80051ae <UART_SetConfig+0x2e6>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005002:	e0d4      	b.n	80051ae <UART_SetConfig+0x2e6>
 8005004:	2304      	movs	r3, #4
 8005006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800500a:	e0d0      	b.n	80051ae <UART_SetConfig+0x2e6>
 800500c:	2308      	movs	r3, #8
 800500e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005012:	e0cc      	b.n	80051ae <UART_SetConfig+0x2e6>
 8005014:	2310      	movs	r3, #16
 8005016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800501a:	e0c8      	b.n	80051ae <UART_SetConfig+0x2e6>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a5e      	ldr	r2, [pc, #376]	@ (800519c <UART_SetConfig+0x2d4>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d125      	bne.n	8005072 <UART_SetConfig+0x1aa>
 8005026:	4b5b      	ldr	r3, [pc, #364]	@ (8005194 <UART_SetConfig+0x2cc>)
 8005028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800502c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005030:	2b30      	cmp	r3, #48	@ 0x30
 8005032:	d016      	beq.n	8005062 <UART_SetConfig+0x19a>
 8005034:	2b30      	cmp	r3, #48	@ 0x30
 8005036:	d818      	bhi.n	800506a <UART_SetConfig+0x1a2>
 8005038:	2b20      	cmp	r3, #32
 800503a:	d00a      	beq.n	8005052 <UART_SetConfig+0x18a>
 800503c:	2b20      	cmp	r3, #32
 800503e:	d814      	bhi.n	800506a <UART_SetConfig+0x1a2>
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <UART_SetConfig+0x182>
 8005044:	2b10      	cmp	r3, #16
 8005046:	d008      	beq.n	800505a <UART_SetConfig+0x192>
 8005048:	e00f      	b.n	800506a <UART_SetConfig+0x1a2>
 800504a:	2300      	movs	r3, #0
 800504c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005050:	e0ad      	b.n	80051ae <UART_SetConfig+0x2e6>
 8005052:	2302      	movs	r3, #2
 8005054:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005058:	e0a9      	b.n	80051ae <UART_SetConfig+0x2e6>
 800505a:	2304      	movs	r3, #4
 800505c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005060:	e0a5      	b.n	80051ae <UART_SetConfig+0x2e6>
 8005062:	2308      	movs	r3, #8
 8005064:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005068:	e0a1      	b.n	80051ae <UART_SetConfig+0x2e6>
 800506a:	2310      	movs	r3, #16
 800506c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005070:	e09d      	b.n	80051ae <UART_SetConfig+0x2e6>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a4a      	ldr	r2, [pc, #296]	@ (80051a0 <UART_SetConfig+0x2d8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d125      	bne.n	80050c8 <UART_SetConfig+0x200>
 800507c:	4b45      	ldr	r3, [pc, #276]	@ (8005194 <UART_SetConfig+0x2cc>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005082:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005086:	2bc0      	cmp	r3, #192	@ 0xc0
 8005088:	d016      	beq.n	80050b8 <UART_SetConfig+0x1f0>
 800508a:	2bc0      	cmp	r3, #192	@ 0xc0
 800508c:	d818      	bhi.n	80050c0 <UART_SetConfig+0x1f8>
 800508e:	2b80      	cmp	r3, #128	@ 0x80
 8005090:	d00a      	beq.n	80050a8 <UART_SetConfig+0x1e0>
 8005092:	2b80      	cmp	r3, #128	@ 0x80
 8005094:	d814      	bhi.n	80050c0 <UART_SetConfig+0x1f8>
 8005096:	2b00      	cmp	r3, #0
 8005098:	d002      	beq.n	80050a0 <UART_SetConfig+0x1d8>
 800509a:	2b40      	cmp	r3, #64	@ 0x40
 800509c:	d008      	beq.n	80050b0 <UART_SetConfig+0x1e8>
 800509e:	e00f      	b.n	80050c0 <UART_SetConfig+0x1f8>
 80050a0:	2300      	movs	r3, #0
 80050a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050a6:	e082      	b.n	80051ae <UART_SetConfig+0x2e6>
 80050a8:	2302      	movs	r3, #2
 80050aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ae:	e07e      	b.n	80051ae <UART_SetConfig+0x2e6>
 80050b0:	2304      	movs	r3, #4
 80050b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050b6:	e07a      	b.n	80051ae <UART_SetConfig+0x2e6>
 80050b8:	2308      	movs	r3, #8
 80050ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050be:	e076      	b.n	80051ae <UART_SetConfig+0x2e6>
 80050c0:	2310      	movs	r3, #16
 80050c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050c6:	e072      	b.n	80051ae <UART_SetConfig+0x2e6>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a35      	ldr	r2, [pc, #212]	@ (80051a4 <UART_SetConfig+0x2dc>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d12a      	bne.n	8005128 <UART_SetConfig+0x260>
 80050d2:	4b30      	ldr	r3, [pc, #192]	@ (8005194 <UART_SetConfig+0x2cc>)
 80050d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050e0:	d01a      	beq.n	8005118 <UART_SetConfig+0x250>
 80050e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050e6:	d81b      	bhi.n	8005120 <UART_SetConfig+0x258>
 80050e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050ec:	d00c      	beq.n	8005108 <UART_SetConfig+0x240>
 80050ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050f2:	d815      	bhi.n	8005120 <UART_SetConfig+0x258>
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <UART_SetConfig+0x238>
 80050f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050fc:	d008      	beq.n	8005110 <UART_SetConfig+0x248>
 80050fe:	e00f      	b.n	8005120 <UART_SetConfig+0x258>
 8005100:	2300      	movs	r3, #0
 8005102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005106:	e052      	b.n	80051ae <UART_SetConfig+0x2e6>
 8005108:	2302      	movs	r3, #2
 800510a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800510e:	e04e      	b.n	80051ae <UART_SetConfig+0x2e6>
 8005110:	2304      	movs	r3, #4
 8005112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005116:	e04a      	b.n	80051ae <UART_SetConfig+0x2e6>
 8005118:	2308      	movs	r3, #8
 800511a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800511e:	e046      	b.n	80051ae <UART_SetConfig+0x2e6>
 8005120:	2310      	movs	r3, #16
 8005122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005126:	e042      	b.n	80051ae <UART_SetConfig+0x2e6>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a17      	ldr	r2, [pc, #92]	@ (800518c <UART_SetConfig+0x2c4>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d13a      	bne.n	80051a8 <UART_SetConfig+0x2e0>
 8005132:	4b18      	ldr	r3, [pc, #96]	@ (8005194 <UART_SetConfig+0x2cc>)
 8005134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005138:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800513c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005140:	d01a      	beq.n	8005178 <UART_SetConfig+0x2b0>
 8005142:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005146:	d81b      	bhi.n	8005180 <UART_SetConfig+0x2b8>
 8005148:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800514c:	d00c      	beq.n	8005168 <UART_SetConfig+0x2a0>
 800514e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005152:	d815      	bhi.n	8005180 <UART_SetConfig+0x2b8>
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <UART_SetConfig+0x298>
 8005158:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800515c:	d008      	beq.n	8005170 <UART_SetConfig+0x2a8>
 800515e:	e00f      	b.n	8005180 <UART_SetConfig+0x2b8>
 8005160:	2300      	movs	r3, #0
 8005162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005166:	e022      	b.n	80051ae <UART_SetConfig+0x2e6>
 8005168:	2302      	movs	r3, #2
 800516a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800516e:	e01e      	b.n	80051ae <UART_SetConfig+0x2e6>
 8005170:	2304      	movs	r3, #4
 8005172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005176:	e01a      	b.n	80051ae <UART_SetConfig+0x2e6>
 8005178:	2308      	movs	r3, #8
 800517a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800517e:	e016      	b.n	80051ae <UART_SetConfig+0x2e6>
 8005180:	2310      	movs	r3, #16
 8005182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005186:	e012      	b.n	80051ae <UART_SetConfig+0x2e6>
 8005188:	efff69f3 	.word	0xefff69f3
 800518c:	40008000 	.word	0x40008000
 8005190:	40013800 	.word	0x40013800
 8005194:	40021000 	.word	0x40021000
 8005198:	40004400 	.word	0x40004400
 800519c:	40004800 	.word	0x40004800
 80051a0:	40004c00 	.word	0x40004c00
 80051a4:	40005000 	.word	0x40005000
 80051a8:	2310      	movs	r3, #16
 80051aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a9f      	ldr	r2, [pc, #636]	@ (8005430 <UART_SetConfig+0x568>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d17a      	bne.n	80052ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d824      	bhi.n	800520a <UART_SetConfig+0x342>
 80051c0:	a201      	add	r2, pc, #4	@ (adr r2, 80051c8 <UART_SetConfig+0x300>)
 80051c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c6:	bf00      	nop
 80051c8:	080051ed 	.word	0x080051ed
 80051cc:	0800520b 	.word	0x0800520b
 80051d0:	080051f5 	.word	0x080051f5
 80051d4:	0800520b 	.word	0x0800520b
 80051d8:	080051fb 	.word	0x080051fb
 80051dc:	0800520b 	.word	0x0800520b
 80051e0:	0800520b 	.word	0x0800520b
 80051e4:	0800520b 	.word	0x0800520b
 80051e8:	08005203 	.word	0x08005203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051ec:	f7fe fce2 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 80051f0:	61f8      	str	r0, [r7, #28]
        break;
 80051f2:	e010      	b.n	8005216 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051f4:	4b8f      	ldr	r3, [pc, #572]	@ (8005434 <UART_SetConfig+0x56c>)
 80051f6:	61fb      	str	r3, [r7, #28]
        break;
 80051f8:	e00d      	b.n	8005216 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051fa:	f7fe fc43 	bl	8003a84 <HAL_RCC_GetSysClockFreq>
 80051fe:	61f8      	str	r0, [r7, #28]
        break;
 8005200:	e009      	b.n	8005216 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005206:	61fb      	str	r3, [r7, #28]
        break;
 8005208:	e005      	b.n	8005216 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800520a:	2300      	movs	r3, #0
 800520c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005214:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 80fb 	beq.w	8005414 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	4613      	mov	r3, r2
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	4413      	add	r3, r2
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	429a      	cmp	r2, r3
 800522c:	d305      	bcc.n	800523a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005234:	69fa      	ldr	r2, [r7, #28]
 8005236:	429a      	cmp	r2, r3
 8005238:	d903      	bls.n	8005242 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005240:	e0e8      	b.n	8005414 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	2200      	movs	r2, #0
 8005246:	461c      	mov	r4, r3
 8005248:	4615      	mov	r5, r2
 800524a:	f04f 0200 	mov.w	r2, #0
 800524e:	f04f 0300 	mov.w	r3, #0
 8005252:	022b      	lsls	r3, r5, #8
 8005254:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005258:	0222      	lsls	r2, r4, #8
 800525a:	68f9      	ldr	r1, [r7, #12]
 800525c:	6849      	ldr	r1, [r1, #4]
 800525e:	0849      	lsrs	r1, r1, #1
 8005260:	2000      	movs	r0, #0
 8005262:	4688      	mov	r8, r1
 8005264:	4681      	mov	r9, r0
 8005266:	eb12 0a08 	adds.w	sl, r2, r8
 800526a:	eb43 0b09 	adc.w	fp, r3, r9
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	603b      	str	r3, [r7, #0]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800527c:	4650      	mov	r0, sl
 800527e:	4659      	mov	r1, fp
 8005280:	f7fa fff6 	bl	8000270 <__aeabi_uldivmod>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4613      	mov	r3, r2
 800528a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005292:	d308      	bcc.n	80052a6 <UART_SetConfig+0x3de>
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800529a:	d204      	bcs.n	80052a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	60da      	str	r2, [r3, #12]
 80052a4:	e0b6      	b.n	8005414 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80052ac:	e0b2      	b.n	8005414 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052b6:	d15e      	bne.n	8005376 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80052b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d828      	bhi.n	8005312 <UART_SetConfig+0x44a>
 80052c0:	a201      	add	r2, pc, #4	@ (adr r2, 80052c8 <UART_SetConfig+0x400>)
 80052c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c6:	bf00      	nop
 80052c8:	080052ed 	.word	0x080052ed
 80052cc:	080052f5 	.word	0x080052f5
 80052d0:	080052fd 	.word	0x080052fd
 80052d4:	08005313 	.word	0x08005313
 80052d8:	08005303 	.word	0x08005303
 80052dc:	08005313 	.word	0x08005313
 80052e0:	08005313 	.word	0x08005313
 80052e4:	08005313 	.word	0x08005313
 80052e8:	0800530b 	.word	0x0800530b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052ec:	f7fe fc62 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 80052f0:	61f8      	str	r0, [r7, #28]
        break;
 80052f2:	e014      	b.n	800531e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052f4:	f7fe fc74 	bl	8003be0 <HAL_RCC_GetPCLK2Freq>
 80052f8:	61f8      	str	r0, [r7, #28]
        break;
 80052fa:	e010      	b.n	800531e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052fc:	4b4d      	ldr	r3, [pc, #308]	@ (8005434 <UART_SetConfig+0x56c>)
 80052fe:	61fb      	str	r3, [r7, #28]
        break;
 8005300:	e00d      	b.n	800531e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005302:	f7fe fbbf 	bl	8003a84 <HAL_RCC_GetSysClockFreq>
 8005306:	61f8      	str	r0, [r7, #28]
        break;
 8005308:	e009      	b.n	800531e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800530a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800530e:	61fb      	str	r3, [r7, #28]
        break;
 8005310:	e005      	b.n	800531e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800531c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d077      	beq.n	8005414 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	005a      	lsls	r2, r3, #1
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	085b      	lsrs	r3, r3, #1
 800532e:	441a      	add	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	fbb2 f3f3 	udiv	r3, r2, r3
 8005338:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	2b0f      	cmp	r3, #15
 800533e:	d916      	bls.n	800536e <UART_SetConfig+0x4a6>
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005346:	d212      	bcs.n	800536e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	b29b      	uxth	r3, r3
 800534c:	f023 030f 	bic.w	r3, r3, #15
 8005350:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	085b      	lsrs	r3, r3, #1
 8005356:	b29b      	uxth	r3, r3
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	b29a      	uxth	r2, r3
 800535e:	8afb      	ldrh	r3, [r7, #22]
 8005360:	4313      	orrs	r3, r2
 8005362:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	8afa      	ldrh	r2, [r7, #22]
 800536a:	60da      	str	r2, [r3, #12]
 800536c:	e052      	b.n	8005414 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005374:	e04e      	b.n	8005414 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005376:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800537a:	2b08      	cmp	r3, #8
 800537c:	d827      	bhi.n	80053ce <UART_SetConfig+0x506>
 800537e:	a201      	add	r2, pc, #4	@ (adr r2, 8005384 <UART_SetConfig+0x4bc>)
 8005380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005384:	080053a9 	.word	0x080053a9
 8005388:	080053b1 	.word	0x080053b1
 800538c:	080053b9 	.word	0x080053b9
 8005390:	080053cf 	.word	0x080053cf
 8005394:	080053bf 	.word	0x080053bf
 8005398:	080053cf 	.word	0x080053cf
 800539c:	080053cf 	.word	0x080053cf
 80053a0:	080053cf 	.word	0x080053cf
 80053a4:	080053c7 	.word	0x080053c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053a8:	f7fe fc04 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 80053ac:	61f8      	str	r0, [r7, #28]
        break;
 80053ae:	e014      	b.n	80053da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053b0:	f7fe fc16 	bl	8003be0 <HAL_RCC_GetPCLK2Freq>
 80053b4:	61f8      	str	r0, [r7, #28]
        break;
 80053b6:	e010      	b.n	80053da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005434 <UART_SetConfig+0x56c>)
 80053ba:	61fb      	str	r3, [r7, #28]
        break;
 80053bc:	e00d      	b.n	80053da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053be:	f7fe fb61 	bl	8003a84 <HAL_RCC_GetSysClockFreq>
 80053c2:	61f8      	str	r0, [r7, #28]
        break;
 80053c4:	e009      	b.n	80053da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053ca:	61fb      	str	r3, [r7, #28]
        break;
 80053cc:	e005      	b.n	80053da <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80053d8:	bf00      	nop
    }

    if (pclk != 0U)
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d019      	beq.n	8005414 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	085a      	lsrs	r2, r3, #1
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	441a      	add	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	2b0f      	cmp	r3, #15
 80053f8:	d909      	bls.n	800540e <UART_SetConfig+0x546>
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005400:	d205      	bcs.n	800540e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	b29a      	uxth	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60da      	str	r2, [r3, #12]
 800540c:	e002      	b.n	8005414 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005420:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005424:	4618      	mov	r0, r3
 8005426:	3728      	adds	r7, #40	@ 0x28
 8005428:	46bd      	mov	sp, r7
 800542a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800542e:	bf00      	nop
 8005430:	40008000 	.word	0x40008000
 8005434:	00f42400 	.word	0x00f42400

08005438 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005444:	f003 0308 	and.w	r3, r3, #8
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054aa:	f003 0304 	and.w	r3, r3, #4
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054cc:	f003 0310 	and.w	r3, r3, #16
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00a      	beq.n	80054ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01a      	beq.n	800554e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005536:	d10a      	bne.n	800554e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	605a      	str	r2, [r3, #4]
  }
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b098      	sub	sp, #96	@ 0x60
 8005580:	af02      	add	r7, sp, #8
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800558c:	f7fb fd66 	bl	800105c <HAL_GetTick>
 8005590:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0308 	and.w	r3, r3, #8
 800559c:	2b08      	cmp	r3, #8
 800559e:	d12e      	bne.n	80055fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055a8:	2200      	movs	r2, #0
 80055aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f88c 	bl	80056cc <UART_WaitOnFlagUntilTimeout>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d021      	beq.n	80055fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c2:	e853 3f00 	ldrex	r3, [r3]
 80055c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	461a      	mov	r2, r3
 80055d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80055da:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055e0:	e841 2300 	strex	r3, r2, [r1]
 80055e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1e6      	bne.n	80055ba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2220      	movs	r2, #32
 80055f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e062      	b.n	80056c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b04      	cmp	r3, #4
 800560a:	d149      	bne.n	80056a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800560c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005614:	2200      	movs	r2, #0
 8005616:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f856 	bl	80056cc <UART_WaitOnFlagUntilTimeout>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d03c      	beq.n	80056a0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562e:	e853 3f00 	ldrex	r3, [r3]
 8005632:	623b      	str	r3, [r7, #32]
   return(result);
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800563a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	461a      	mov	r2, r3
 8005642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005644:	633b      	str	r3, [r7, #48]	@ 0x30
 8005646:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005648:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800564a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800564c:	e841 2300 	strex	r3, r2, [r1]
 8005650:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1e6      	bne.n	8005626 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3308      	adds	r3, #8
 800565e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	e853 3f00 	ldrex	r3, [r3]
 8005666:	60fb      	str	r3, [r7, #12]
   return(result);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0301 	bic.w	r3, r3, #1
 800566e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3308      	adds	r3, #8
 8005676:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005678:	61fa      	str	r2, [r7, #28]
 800567a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567c:	69b9      	ldr	r1, [r7, #24]
 800567e:	69fa      	ldr	r2, [r7, #28]
 8005680:	e841 2300 	strex	r3, r2, [r1]
 8005684:	617b      	str	r3, [r7, #20]
   return(result);
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1e5      	bne.n	8005658 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2220      	movs	r2, #32
 8005690:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e011      	b.n	80056c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2220      	movs	r2, #32
 80056a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2220      	movs	r2, #32
 80056aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3758      	adds	r7, #88	@ 0x58
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	603b      	str	r3, [r7, #0]
 80056d8:	4613      	mov	r3, r2
 80056da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056dc:	e04f      	b.n	800577e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e4:	d04b      	beq.n	800577e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e6:	f7fb fcb9 	bl	800105c <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d302      	bcc.n	80056fc <UART_WaitOnFlagUntilTimeout+0x30>
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e04e      	b.n	800579e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0304 	and.w	r3, r3, #4
 800570a:	2b00      	cmp	r3, #0
 800570c:	d037      	beq.n	800577e <UART_WaitOnFlagUntilTimeout+0xb2>
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b80      	cmp	r3, #128	@ 0x80
 8005712:	d034      	beq.n	800577e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2b40      	cmp	r3, #64	@ 0x40
 8005718:	d031      	beq.n	800577e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b08      	cmp	r3, #8
 8005726:	d110      	bne.n	800574a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2208      	movs	r2, #8
 800572e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 f838 	bl	80057a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2208      	movs	r2, #8
 800573a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e029      	b.n	800579e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005754:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005758:	d111      	bne.n	800577e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005762:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 f81e 	bl	80057a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2220      	movs	r2, #32
 800576e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e00f      	b.n	800579e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69da      	ldr	r2, [r3, #28]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	4013      	ands	r3, r2
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	429a      	cmp	r2, r3
 800578c:	bf0c      	ite	eq
 800578e:	2301      	moveq	r3, #1
 8005790:	2300      	movne	r3, #0
 8005792:	b2db      	uxtb	r3, r3
 8005794:	461a      	mov	r2, r3
 8005796:	79fb      	ldrb	r3, [r7, #7]
 8005798:	429a      	cmp	r2, r3
 800579a:	d0a0      	beq.n	80056de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b095      	sub	sp, #84	@ 0x54
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	461a      	mov	r2, r3
 80057ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80057ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e6      	bne.n	80057ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3308      	adds	r3, #8
 80057e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	f023 0301 	bic.w	r3, r3, #1
 80057f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3308      	adds	r3, #8
 80057fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005800:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005802:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e5      	bne.n	80057e0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005818:	2b01      	cmp	r3, #1
 800581a:	d118      	bne.n	800584e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	60bb      	str	r3, [r7, #8]
   return(result);
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	f023 0310 	bic.w	r3, r3, #16
 8005830:	647b      	str	r3, [r7, #68]	@ 0x44
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	461a      	mov	r2, r3
 8005838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800583a:	61bb      	str	r3, [r7, #24]
 800583c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	6979      	ldr	r1, [r7, #20]
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	613b      	str	r3, [r7, #16]
   return(result);
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e6      	bne.n	800581c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2220      	movs	r2, #32
 8005852:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005862:	bf00      	nop
 8005864:	3754      	adds	r7, #84	@ 0x54
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
	...

08005870 <__NVIC_SetPriority>:
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	4603      	mov	r3, r0
 8005878:	6039      	str	r1, [r7, #0]
 800587a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800587c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005880:	2b00      	cmp	r3, #0
 8005882:	db0a      	blt.n	800589a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	b2da      	uxtb	r2, r3
 8005888:	490c      	ldr	r1, [pc, #48]	@ (80058bc <__NVIC_SetPriority+0x4c>)
 800588a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800588e:	0112      	lsls	r2, r2, #4
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	440b      	add	r3, r1
 8005894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005898:	e00a      	b.n	80058b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	b2da      	uxtb	r2, r3
 800589e:	4908      	ldr	r1, [pc, #32]	@ (80058c0 <__NVIC_SetPriority+0x50>)
 80058a0:	79fb      	ldrb	r3, [r7, #7]
 80058a2:	f003 030f 	and.w	r3, r3, #15
 80058a6:	3b04      	subs	r3, #4
 80058a8:	0112      	lsls	r2, r2, #4
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	440b      	add	r3, r1
 80058ae:	761a      	strb	r2, [r3, #24]
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	e000e100 	.word	0xe000e100
 80058c0:	e000ed00 	.word	0xe000ed00

080058c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80058c4:	b580      	push	{r7, lr}
 80058c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80058c8:	2100      	movs	r1, #0
 80058ca:	f06f 0004 	mvn.w	r0, #4
 80058ce:	f7ff ffcf 	bl	8005870 <__NVIC_SetPriority>
#endif
}
 80058d2:	bf00      	nop
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058de:	f3ef 8305 	mrs	r3, IPSR
 80058e2:	603b      	str	r3, [r7, #0]
  return(result);
 80058e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80058ea:	f06f 0305 	mvn.w	r3, #5
 80058ee:	607b      	str	r3, [r7, #4]
 80058f0:	e00c      	b.n	800590c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80058f2:	4b0a      	ldr	r3, [pc, #40]	@ (800591c <osKernelInitialize+0x44>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d105      	bne.n	8005906 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80058fa:	4b08      	ldr	r3, [pc, #32]	@ (800591c <osKernelInitialize+0x44>)
 80058fc:	2201      	movs	r2, #1
 80058fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005900:	2300      	movs	r3, #0
 8005902:	607b      	str	r3, [r7, #4]
 8005904:	e002      	b.n	800590c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005906:	f04f 33ff 	mov.w	r3, #4294967295
 800590a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800590c:	687b      	ldr	r3, [r7, #4]
}
 800590e:	4618      	mov	r0, r3
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	20000928 	.word	0x20000928

08005920 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005926:	f3ef 8305 	mrs	r3, IPSR
 800592a:	603b      	str	r3, [r7, #0]
  return(result);
 800592c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005932:	f06f 0305 	mvn.w	r3, #5
 8005936:	607b      	str	r3, [r7, #4]
 8005938:	e010      	b.n	800595c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800593a:	4b0b      	ldr	r3, [pc, #44]	@ (8005968 <osKernelStart+0x48>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d109      	bne.n	8005956 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005942:	f7ff ffbf 	bl	80058c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005946:	4b08      	ldr	r3, [pc, #32]	@ (8005968 <osKernelStart+0x48>)
 8005948:	2202      	movs	r2, #2
 800594a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800594c:	f001 f9fa 	bl	8006d44 <vTaskStartScheduler>
      stat = osOK;
 8005950:	2300      	movs	r3, #0
 8005952:	607b      	str	r3, [r7, #4]
 8005954:	e002      	b.n	800595c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005956:	f04f 33ff 	mov.w	r3, #4294967295
 800595a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800595c:	687b      	ldr	r3, [r7, #4]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	20000928 	.word	0x20000928

0800596c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800596c:	b580      	push	{r7, lr}
 800596e:	b08e      	sub	sp, #56	@ 0x38
 8005970:	af04      	add	r7, sp, #16
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005978:	2300      	movs	r3, #0
 800597a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800597c:	f3ef 8305 	mrs	r3, IPSR
 8005980:	617b      	str	r3, [r7, #20]
  return(result);
 8005982:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005984:	2b00      	cmp	r3, #0
 8005986:	d17e      	bne.n	8005a86 <osThreadNew+0x11a>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d07b      	beq.n	8005a86 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800598e:	2380      	movs	r3, #128	@ 0x80
 8005990:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005992:	2318      	movs	r3, #24
 8005994:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005996:	2300      	movs	r3, #0
 8005998:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800599a:	f04f 33ff 	mov.w	r3, #4294967295
 800599e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d045      	beq.n	8005a32 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d002      	beq.n	80059b4 <osThreadNew+0x48>
        name = attr->name;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d008      	beq.n	80059da <osThreadNew+0x6e>
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	2b38      	cmp	r3, #56	@ 0x38
 80059cc:	d805      	bhi.n	80059da <osThreadNew+0x6e>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <osThreadNew+0x72>
        return (NULL);
 80059da:	2300      	movs	r3, #0
 80059dc:	e054      	b.n	8005a88 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	089b      	lsrs	r3, r3, #2
 80059ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00e      	beq.n	8005a14 <osThreadNew+0xa8>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	2b5b      	cmp	r3, #91	@ 0x5b
 80059fc:	d90a      	bls.n	8005a14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d006      	beq.n	8005a14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <osThreadNew+0xa8>
        mem = 1;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	61bb      	str	r3, [r7, #24]
 8005a12:	e010      	b.n	8005a36 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10c      	bne.n	8005a36 <osThreadNew+0xca>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d108      	bne.n	8005a36 <osThreadNew+0xca>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d104      	bne.n	8005a36 <osThreadNew+0xca>
          mem = 0;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	61bb      	str	r3, [r7, #24]
 8005a30:	e001      	b.n	8005a36 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005a32:	2300      	movs	r3, #0
 8005a34:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d110      	bne.n	8005a5e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a44:	9202      	str	r2, [sp, #8]
 8005a46:	9301      	str	r3, [sp, #4]
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	6a3a      	ldr	r2, [r7, #32]
 8005a50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 ff9a 	bl	800698c <xTaskCreateStatic>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	613b      	str	r3, [r7, #16]
 8005a5c:	e013      	b.n	8005a86 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d110      	bne.n	8005a86 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	f107 0310 	add.w	r3, r7, #16
 8005a6c:	9301      	str	r3, [sp, #4]
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 ffe8 	bl	8006a4c <xTaskCreate>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d001      	beq.n	8005a86 <osThreadNew+0x11a>
            hTask = NULL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a86:	693b      	ldr	r3, [r7, #16]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3728      	adds	r7, #40	@ 0x28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a98:	f3ef 8305 	mrs	r3, IPSR
 8005a9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <osDelay+0x1c>
    stat = osErrorISR;
 8005aa4:	f06f 0305 	mvn.w	r3, #5
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	e007      	b.n	8005abc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <osDelay+0x2c>
      vTaskDelay(ticks);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f001 f90e 	bl	8006cd8 <vTaskDelay>
    }
  }

  return (stat);
 8005abc:	68fb      	ldr	r3, [r7, #12]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b08a      	sub	sp, #40	@ 0x28
 8005aca:	af02      	add	r7, sp, #8
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ad6:	f3ef 8305 	mrs	r3, IPSR
 8005ada:	613b      	str	r3, [r7, #16]
  return(result);
 8005adc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d175      	bne.n	8005bce <osSemaphoreNew+0x108>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d072      	beq.n	8005bce <osSemaphoreNew+0x108>
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d86e      	bhi.n	8005bce <osSemaphoreNew+0x108>
    mem = -1;
 8005af0:	f04f 33ff 	mov.w	r3, #4294967295
 8005af4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d015      	beq.n	8005b28 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d006      	beq.n	8005b12 <osSemaphoreNew+0x4c>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	2b4f      	cmp	r3, #79	@ 0x4f
 8005b0a:	d902      	bls.n	8005b12 <osSemaphoreNew+0x4c>
        mem = 1;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	61bb      	str	r3, [r7, #24]
 8005b10:	e00c      	b.n	8005b2c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d108      	bne.n	8005b2c <osSemaphoreNew+0x66>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d104      	bne.n	8005b2c <osSemaphoreNew+0x66>
          mem = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	61bb      	str	r3, [r7, #24]
 8005b26:	e001      	b.n	8005b2c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b32:	d04c      	beq.n	8005bce <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d128      	bne.n	8005b8c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d10a      	bne.n	8005b56 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2203      	movs	r2, #3
 8005b46:	9200      	str	r2, [sp, #0]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	2001      	movs	r0, #1
 8005b4e:	f000 f995 	bl	8005e7c <xQueueGenericCreateStatic>
 8005b52:	61f8      	str	r0, [r7, #28]
 8005b54:	e005      	b.n	8005b62 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005b56:	2203      	movs	r2, #3
 8005b58:	2100      	movs	r1, #0
 8005b5a:	2001      	movs	r0, #1
 8005b5c:	f000 fa0b 	bl	8005f76 <xQueueGenericCreate>
 8005b60:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d022      	beq.n	8005bae <osSemaphoreNew+0xe8>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d01f      	beq.n	8005bae <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005b6e:	2300      	movs	r3, #0
 8005b70:	2200      	movs	r2, #0
 8005b72:	2100      	movs	r1, #0
 8005b74:	69f8      	ldr	r0, [r7, #28]
 8005b76:	f000 facb 	bl	8006110 <xQueueGenericSend>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d016      	beq.n	8005bae <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005b80:	69f8      	ldr	r0, [r7, #28]
 8005b82:	f000 fd47 	bl	8006614 <vQueueDelete>
            hSemaphore = NULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	61fb      	str	r3, [r7, #28]
 8005b8a:	e010      	b.n	8005bae <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d108      	bne.n	8005ba4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	461a      	mov	r2, r3
 8005b98:	68b9      	ldr	r1, [r7, #8]
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 fa49 	bl	8006032 <xQueueCreateCountingSemaphoreStatic>
 8005ba0:	61f8      	str	r0, [r7, #28]
 8005ba2:	e004      	b.n	8005bae <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005ba4:	68b9      	ldr	r1, [r7, #8]
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 fa7c 	bl	80060a4 <xQueueCreateCountingSemaphore>
 8005bac:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00c      	beq.n	8005bce <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	e001      	b.n	8005bc6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005bc6:	6979      	ldr	r1, [r7, #20]
 8005bc8:	69f8      	ldr	r0, [r7, #28]
 8005bca:	f000 fe57 	bl	800687c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005bce:	69fb      	ldr	r3, [r7, #28]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3720      	adds	r7, #32
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4a07      	ldr	r2, [pc, #28]	@ (8005c04 <vApplicationGetIdleTaskMemory+0x2c>)
 8005be8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	4a06      	ldr	r2, [pc, #24]	@ (8005c08 <vApplicationGetIdleTaskMemory+0x30>)
 8005bee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2280      	movs	r2, #128	@ 0x80
 8005bf4:	601a      	str	r2, [r3, #0]
}
 8005bf6:	bf00      	nop
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	2000092c 	.word	0x2000092c
 8005c08:	20000988 	.word	0x20000988

08005c0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4a07      	ldr	r2, [pc, #28]	@ (8005c38 <vApplicationGetTimerTaskMemory+0x2c>)
 8005c1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	4a06      	ldr	r2, [pc, #24]	@ (8005c3c <vApplicationGetTimerTaskMemory+0x30>)
 8005c22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c2a:	601a      	str	r2, [r3, #0]
}
 8005c2c:	bf00      	nop
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	20000b88 	.word	0x20000b88
 8005c3c:	20000be4 	.word	0x20000be4

08005c40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f103 0208 	add.w	r2, r3, #8
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f04f 32ff 	mov.w	r2, #4294967295
 8005c58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f103 0208 	add.w	r2, r3, #8
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f103 0208 	add.w	r2, r3, #8
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c8e:	bf00      	nop
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b085      	sub	sp, #20
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	601a      	str	r2, [r3, #0]
}
 8005cd6:	bf00      	nop
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b085      	sub	sp, #20
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf8:	d103      	bne.n	8005d02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	e00c      	b.n	8005d1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3308      	adds	r3, #8
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	e002      	b.n	8005d10 <vListInsert+0x2e>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d2f6      	bcs.n	8005d0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	601a      	str	r2, [r3, #0]
}
 8005d48:	bf00      	nop
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	6892      	ldr	r2, [r2, #8]
 8005d6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6852      	ldr	r2, [r2, #4]
 8005d74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d103      	bne.n	8005d88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	1e5a      	subs	r2, r3, #1
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10b      	bne.n	8005dd4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005dce:	bf00      	nop
 8005dd0:	bf00      	nop
 8005dd2:	e7fd      	b.n	8005dd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005dd4:	f002 f970 	bl	80080b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de0:	68f9      	ldr	r1, [r7, #12]
 8005de2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005de4:	fb01 f303 	mul.w	r3, r1, r3
 8005de8:	441a      	add	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e04:	3b01      	subs	r3, #1
 8005e06:	68f9      	ldr	r1, [r7, #12]
 8005e08:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e0a:	fb01 f303 	mul.w	r3, r1, r3
 8005e0e:	441a      	add	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	22ff      	movs	r2, #255	@ 0xff
 8005e18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	22ff      	movs	r2, #255	@ 0xff
 8005e20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d114      	bne.n	8005e54 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d01a      	beq.n	8005e68 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3310      	adds	r3, #16
 8005e36:	4618      	mov	r0, r3
 8005e38:	f001 fa12 	bl	8007260 <xTaskRemoveFromEventList>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d012      	beq.n	8005e68 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e42:	4b0d      	ldr	r3, [pc, #52]	@ (8005e78 <xQueueGenericReset+0xd0>)
 8005e44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	e009      	b.n	8005e68 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	3310      	adds	r3, #16
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7ff fef1 	bl	8005c40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3324      	adds	r3, #36	@ 0x24
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7ff feec 	bl	8005c40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e68:	f002 f958 	bl	800811c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e6c:	2301      	movs	r3, #1
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	e000ed04 	.word	0xe000ed04

08005e7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b08e      	sub	sp, #56	@ 0x38
 8005e80:	af02      	add	r7, sp, #8
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10b      	bne.n	8005ea8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ea2:	bf00      	nop
 8005ea4:	bf00      	nop
 8005ea6:	e7fd      	b.n	8005ea4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10b      	bne.n	8005ec6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ec0:	bf00      	nop
 8005ec2:	bf00      	nop
 8005ec4:	e7fd      	b.n	8005ec2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <xQueueGenericCreateStatic+0x56>
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <xQueueGenericCreateStatic+0x5a>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e000      	b.n	8005ed8 <xQueueGenericCreateStatic+0x5c>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10b      	bne.n	8005ef4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	623b      	str	r3, [r7, #32]
}
 8005eee:	bf00      	nop
 8005ef0:	bf00      	nop
 8005ef2:	e7fd      	b.n	8005ef0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d102      	bne.n	8005f00 <xQueueGenericCreateStatic+0x84>
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <xQueueGenericCreateStatic+0x88>
 8005f00:	2301      	movs	r3, #1
 8005f02:	e000      	b.n	8005f06 <xQueueGenericCreateStatic+0x8a>
 8005f04:	2300      	movs	r3, #0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10b      	bne.n	8005f22 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	61fb      	str	r3, [r7, #28]
}
 8005f1c:	bf00      	nop
 8005f1e:	bf00      	nop
 8005f20:	e7fd      	b.n	8005f1e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f22:	2350      	movs	r3, #80	@ 0x50
 8005f24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2b50      	cmp	r3, #80	@ 0x50
 8005f2a:	d00b      	beq.n	8005f44 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	61bb      	str	r3, [r7, #24]
}
 8005f3e:	bf00      	nop
 8005f40:	bf00      	nop
 8005f42:	e7fd      	b.n	8005f40 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f44:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00d      	beq.n	8005f6c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f58:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	4613      	mov	r3, r2
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	68b9      	ldr	r1, [r7, #8]
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 f840 	bl	8005fec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3730      	adds	r7, #48	@ 0x30
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b08a      	sub	sp, #40	@ 0x28
 8005f7a:	af02      	add	r7, sp, #8
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	60b9      	str	r1, [r7, #8]
 8005f80:	4613      	mov	r3, r2
 8005f82:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10b      	bne.n	8005fa2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	613b      	str	r3, [r7, #16]
}
 8005f9c:	bf00      	nop
 8005f9e:	bf00      	nop
 8005fa0:	e7fd      	b.n	8005f9e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	fb02 f303 	mul.w	r3, r2, r3
 8005faa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	3350      	adds	r3, #80	@ 0x50
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f002 f9a3 	bl	80082fc <pvPortMalloc>
 8005fb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d011      	beq.n	8005fe2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	3350      	adds	r3, #80	@ 0x50
 8005fc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fd0:	79fa      	ldrb	r2, [r7, #7]
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	68b9      	ldr	r1, [r7, #8]
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f805 	bl	8005fec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005fe2:	69bb      	ldr	r3, [r7, #24]
	}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3720      	adds	r7, #32
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
 8005ff8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d103      	bne.n	8006008 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	e002      	b.n	800600e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800601a:	2101      	movs	r1, #1
 800601c:	69b8      	ldr	r0, [r7, #24]
 800601e:	f7ff fec3 	bl	8005da8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	78fa      	ldrb	r2, [r7, #3]
 8006026:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800602a:	bf00      	nop
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006032:	b580      	push	{r7, lr}
 8006034:	b08a      	sub	sp, #40	@ 0x28
 8006036:	af02      	add	r7, sp, #8
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10b      	bne.n	800605c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	61bb      	str	r3, [r7, #24]
}
 8006056:	bf00      	nop
 8006058:	bf00      	nop
 800605a:	e7fd      	b.n	8006058 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	429a      	cmp	r2, r3
 8006062:	d90b      	bls.n	800607c <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006068:	f383 8811 	msr	BASEPRI, r3
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	617b      	str	r3, [r7, #20]
}
 8006076:	bf00      	nop
 8006078:	bf00      	nop
 800607a:	e7fd      	b.n	8006078 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800607c:	2302      	movs	r3, #2
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	2100      	movs	r1, #0
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f7ff fef8 	bl	8005e7c <xQueueGenericCreateStatic>
 800608c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800609a:	69fb      	ldr	r3, [r7, #28]
	}
 800609c:	4618      	mov	r0, r3
 800609e:	3720      	adds	r7, #32
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10b      	bne.n	80060cc <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80060b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	613b      	str	r3, [r7, #16]
}
 80060c6:	bf00      	nop
 80060c8:	bf00      	nop
 80060ca:	e7fd      	b.n	80060c8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d90b      	bls.n	80060ec <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	60fb      	str	r3, [r7, #12]
}
 80060e6:	bf00      	nop
 80060e8:	bf00      	nop
 80060ea:	e7fd      	b.n	80060e8 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80060ec:	2202      	movs	r2, #2
 80060ee:	2100      	movs	r1, #0
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7ff ff40 	bl	8005f76 <xQueueGenericCreate>
 80060f6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d002      	beq.n	8006104 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006104:	697b      	ldr	r3, [r7, #20]
	}
 8006106:	4618      	mov	r0, r3
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08e      	sub	sp, #56	@ 0x38
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
 800611c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800611e:	2300      	movs	r3, #0
 8006120:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10b      	bne.n	8006144 <xQueueGenericSend+0x34>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800613e:	bf00      	nop
 8006140:	bf00      	nop
 8006142:	e7fd      	b.n	8006140 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d103      	bne.n	8006152 <xQueueGenericSend+0x42>
 800614a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <xQueueGenericSend+0x46>
 8006152:	2301      	movs	r3, #1
 8006154:	e000      	b.n	8006158 <xQueueGenericSend+0x48>
 8006156:	2300      	movs	r3, #0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10b      	bne.n	8006174 <xQueueGenericSend+0x64>
	__asm volatile
 800615c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800616e:	bf00      	nop
 8006170:	bf00      	nop
 8006172:	e7fd      	b.n	8006170 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	2b02      	cmp	r3, #2
 8006178:	d103      	bne.n	8006182 <xQueueGenericSend+0x72>
 800617a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800617e:	2b01      	cmp	r3, #1
 8006180:	d101      	bne.n	8006186 <xQueueGenericSend+0x76>
 8006182:	2301      	movs	r3, #1
 8006184:	e000      	b.n	8006188 <xQueueGenericSend+0x78>
 8006186:	2300      	movs	r3, #0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10b      	bne.n	80061a4 <xQueueGenericSend+0x94>
	__asm volatile
 800618c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	623b      	str	r3, [r7, #32]
}
 800619e:	bf00      	nop
 80061a0:	bf00      	nop
 80061a2:	e7fd      	b.n	80061a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061a4:	f001 fa1c 	bl	80075e0 <xTaskGetSchedulerState>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d102      	bne.n	80061b4 <xQueueGenericSend+0xa4>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <xQueueGenericSend+0xa8>
 80061b4:	2301      	movs	r3, #1
 80061b6:	e000      	b.n	80061ba <xQueueGenericSend+0xaa>
 80061b8:	2300      	movs	r3, #0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10b      	bne.n	80061d6 <xQueueGenericSend+0xc6>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	61fb      	str	r3, [r7, #28]
}
 80061d0:	bf00      	nop
 80061d2:	bf00      	nop
 80061d4:	e7fd      	b.n	80061d2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061d6:	f001 ff6f 	bl	80080b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d302      	bcc.n	80061ec <xQueueGenericSend+0xdc>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d129      	bne.n	8006240 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	68b9      	ldr	r1, [r7, #8]
 80061f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061f2:	f000 fa33 	bl	800665c <prvCopyDataToQueue>
 80061f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d010      	beq.n	8006222 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006202:	3324      	adds	r3, #36	@ 0x24
 8006204:	4618      	mov	r0, r3
 8006206:	f001 f82b 	bl	8007260 <xTaskRemoveFromEventList>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d013      	beq.n	8006238 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006210:	4b3f      	ldr	r3, [pc, #252]	@ (8006310 <xQueueGenericSend+0x200>)
 8006212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	e00a      	b.n	8006238 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006224:	2b00      	cmp	r3, #0
 8006226:	d007      	beq.n	8006238 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006228:	4b39      	ldr	r3, [pc, #228]	@ (8006310 <xQueueGenericSend+0x200>)
 800622a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800622e:	601a      	str	r2, [r3, #0]
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006238:	f001 ff70 	bl	800811c <vPortExitCritical>
				return pdPASS;
 800623c:	2301      	movs	r3, #1
 800623e:	e063      	b.n	8006308 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d103      	bne.n	800624e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006246:	f001 ff69 	bl	800811c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800624a:	2300      	movs	r3, #0
 800624c:	e05c      	b.n	8006308 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800624e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006250:	2b00      	cmp	r3, #0
 8006252:	d106      	bne.n	8006262 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006254:	f107 0314 	add.w	r3, r7, #20
 8006258:	4618      	mov	r0, r3
 800625a:	f001 f865 	bl	8007328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800625e:	2301      	movs	r3, #1
 8006260:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006262:	f001 ff5b 	bl	800811c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006266:	f000 fdd5 	bl	8006e14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800626a:	f001 ff25 	bl	80080b8 <vPortEnterCritical>
 800626e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006270:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006274:	b25b      	sxtb	r3, r3
 8006276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627a:	d103      	bne.n	8006284 <xQueueGenericSend+0x174>
 800627c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006286:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800628a:	b25b      	sxtb	r3, r3
 800628c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006290:	d103      	bne.n	800629a <xQueueGenericSend+0x18a>
 8006292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800629a:	f001 ff3f 	bl	800811c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800629e:	1d3a      	adds	r2, r7, #4
 80062a0:	f107 0314 	add.w	r3, r7, #20
 80062a4:	4611      	mov	r1, r2
 80062a6:	4618      	mov	r0, r3
 80062a8:	f001 f854 	bl	8007354 <xTaskCheckForTimeOut>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d124      	bne.n	80062fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062b4:	f000 faca 	bl	800684c <prvIsQueueFull>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d018      	beq.n	80062f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c0:	3310      	adds	r3, #16
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	4611      	mov	r1, r2
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 ff78 	bl	80071bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80062cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062ce:	f000 fa55 	bl	800677c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80062d2:	f000 fdad 	bl	8006e30 <xTaskResumeAll>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f47f af7c 	bne.w	80061d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80062de:	4b0c      	ldr	r3, [pc, #48]	@ (8006310 <xQueueGenericSend+0x200>)
 80062e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062e4:	601a      	str	r2, [r3, #0]
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	e772      	b.n	80061d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80062f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062f2:	f000 fa43 	bl	800677c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062f6:	f000 fd9b 	bl	8006e30 <xTaskResumeAll>
 80062fa:	e76c      	b.n	80061d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062fe:	f000 fa3d 	bl	800677c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006302:	f000 fd95 	bl	8006e30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006306:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006308:	4618      	mov	r0, r3
 800630a:	3738      	adds	r7, #56	@ 0x38
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	e000ed04 	.word	0xe000ed04

08006314 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b090      	sub	sp, #64	@ 0x40
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
 8006320:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10b      	bne.n	8006344 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800633e:	bf00      	nop
 8006340:	bf00      	nop
 8006342:	e7fd      	b.n	8006340 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d103      	bne.n	8006352 <xQueueGenericSendFromISR+0x3e>
 800634a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800634c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <xQueueGenericSendFromISR+0x42>
 8006352:	2301      	movs	r3, #1
 8006354:	e000      	b.n	8006358 <xQueueGenericSendFromISR+0x44>
 8006356:	2300      	movs	r3, #0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10b      	bne.n	8006374 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800635c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006360:	f383 8811 	msr	BASEPRI, r3
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800636e:	bf00      	nop
 8006370:	bf00      	nop
 8006372:	e7fd      	b.n	8006370 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b02      	cmp	r3, #2
 8006378:	d103      	bne.n	8006382 <xQueueGenericSendFromISR+0x6e>
 800637a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800637c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <xQueueGenericSendFromISR+0x72>
 8006382:	2301      	movs	r3, #1
 8006384:	e000      	b.n	8006388 <xQueueGenericSendFromISR+0x74>
 8006386:	2300      	movs	r3, #0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10b      	bne.n	80063a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800638c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006390:	f383 8811 	msr	BASEPRI, r3
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	623b      	str	r3, [r7, #32]
}
 800639e:	bf00      	nop
 80063a0:	bf00      	nop
 80063a2:	e7fd      	b.n	80063a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063a4:	f001 ff68 	bl	8008278 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063a8:	f3ef 8211 	mrs	r2, BASEPRI
 80063ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	61fa      	str	r2, [r7, #28]
 80063be:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063c0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063c2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d302      	bcc.n	80063d6 <xQueueGenericSendFromISR+0xc2>
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d12f      	bne.n	8006436 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80063d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	68b9      	ldr	r1, [r7, #8]
 80063ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80063ec:	f000 f936 	bl	800665c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80063f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80063f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f8:	d112      	bne.n	8006420 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d016      	beq.n	8006430 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006404:	3324      	adds	r3, #36	@ 0x24
 8006406:	4618      	mov	r0, r3
 8006408:	f000 ff2a 	bl	8007260 <xTaskRemoveFromEventList>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00e      	beq.n	8006430 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00b      	beq.n	8006430 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	e007      	b.n	8006430 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006420:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006424:	3301      	adds	r3, #1
 8006426:	b2db      	uxtb	r3, r3
 8006428:	b25a      	sxtb	r2, r3
 800642a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006430:	2301      	movs	r3, #1
 8006432:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006434:	e001      	b.n	800643a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006436:	2300      	movs	r3, #0
 8006438:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800643a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800643c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006444:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006448:	4618      	mov	r0, r3
 800644a:	3740      	adds	r7, #64	@ 0x40
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08c      	sub	sp, #48	@ 0x30
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800645c:	2300      	movs	r3, #0
 800645e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10b      	bne.n	8006482 <xQueueReceive+0x32>
	__asm volatile
 800646a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	623b      	str	r3, [r7, #32]
}
 800647c:	bf00      	nop
 800647e:	bf00      	nop
 8006480:	e7fd      	b.n	800647e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d103      	bne.n	8006490 <xQueueReceive+0x40>
 8006488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <xQueueReceive+0x44>
 8006490:	2301      	movs	r3, #1
 8006492:	e000      	b.n	8006496 <xQueueReceive+0x46>
 8006494:	2300      	movs	r3, #0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10b      	bne.n	80064b2 <xQueueReceive+0x62>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	61fb      	str	r3, [r7, #28]
}
 80064ac:	bf00      	nop
 80064ae:	bf00      	nop
 80064b0:	e7fd      	b.n	80064ae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064b2:	f001 f895 	bl	80075e0 <xTaskGetSchedulerState>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d102      	bne.n	80064c2 <xQueueReceive+0x72>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <xQueueReceive+0x76>
 80064c2:	2301      	movs	r3, #1
 80064c4:	e000      	b.n	80064c8 <xQueueReceive+0x78>
 80064c6:	2300      	movs	r3, #0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10b      	bne.n	80064e4 <xQueueReceive+0x94>
	__asm volatile
 80064cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	61bb      	str	r3, [r7, #24]
}
 80064de:	bf00      	nop
 80064e0:	bf00      	nop
 80064e2:	e7fd      	b.n	80064e0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064e4:	f001 fde8 	bl	80080b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d01f      	beq.n	8006534 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064f4:	68b9      	ldr	r1, [r7, #8]
 80064f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064f8:	f000 f91a 	bl	8006730 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fe:	1e5a      	subs	r2, r3, #1
 8006500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006502:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00f      	beq.n	800652c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800650c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650e:	3310      	adds	r3, #16
 8006510:	4618      	mov	r0, r3
 8006512:	f000 fea5 	bl	8007260 <xTaskRemoveFromEventList>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d007      	beq.n	800652c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800651c:	4b3c      	ldr	r3, [pc, #240]	@ (8006610 <xQueueReceive+0x1c0>)
 800651e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800652c:	f001 fdf6 	bl	800811c <vPortExitCritical>
				return pdPASS;
 8006530:	2301      	movs	r3, #1
 8006532:	e069      	b.n	8006608 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d103      	bne.n	8006542 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800653a:	f001 fdef 	bl	800811c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800653e:	2300      	movs	r3, #0
 8006540:	e062      	b.n	8006608 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006544:	2b00      	cmp	r3, #0
 8006546:	d106      	bne.n	8006556 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006548:	f107 0310 	add.w	r3, r7, #16
 800654c:	4618      	mov	r0, r3
 800654e:	f000 feeb 	bl	8007328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006552:	2301      	movs	r3, #1
 8006554:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006556:	f001 fde1 	bl	800811c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800655a:	f000 fc5b 	bl	8006e14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800655e:	f001 fdab 	bl	80080b8 <vPortEnterCritical>
 8006562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006564:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006568:	b25b      	sxtb	r3, r3
 800656a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656e:	d103      	bne.n	8006578 <xQueueReceive+0x128>
 8006570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006572:	2200      	movs	r2, #0
 8006574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800657e:	b25b      	sxtb	r3, r3
 8006580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006584:	d103      	bne.n	800658e <xQueueReceive+0x13e>
 8006586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800658e:	f001 fdc5 	bl	800811c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006592:	1d3a      	adds	r2, r7, #4
 8006594:	f107 0310 	add.w	r3, r7, #16
 8006598:	4611      	mov	r1, r2
 800659a:	4618      	mov	r0, r3
 800659c:	f000 feda 	bl	8007354 <xTaskCheckForTimeOut>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d123      	bne.n	80065ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065a8:	f000 f93a 	bl	8006820 <prvIsQueueEmpty>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d017      	beq.n	80065e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b4:	3324      	adds	r3, #36	@ 0x24
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	4611      	mov	r1, r2
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fdfe 	bl	80071bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065c2:	f000 f8db 	bl	800677c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065c6:	f000 fc33 	bl	8006e30 <xTaskResumeAll>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d189      	bne.n	80064e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80065d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006610 <xQueueReceive+0x1c0>)
 80065d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	e780      	b.n	80064e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80065e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065e4:	f000 f8ca 	bl	800677c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065e8:	f000 fc22 	bl	8006e30 <xTaskResumeAll>
 80065ec:	e77a      	b.n	80064e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80065ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065f0:	f000 f8c4 	bl	800677c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065f4:	f000 fc1c 	bl	8006e30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065fa:	f000 f911 	bl	8006820 <prvIsQueueEmpty>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	f43f af6f 	beq.w	80064e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006606:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006608:	4618      	mov	r0, r3
 800660a:	3730      	adds	r7, #48	@ 0x30
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	e000ed04 	.word	0xe000ed04

08006614 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10b      	bne.n	800663e <vQueueDelete+0x2a>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	60bb      	str	r3, [r7, #8]
}
 8006638:	bf00      	nop
 800663a:	bf00      	nop
 800663c:	e7fd      	b.n	800663a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 f946 	bl	80068d0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800664a:	2b00      	cmp	r3, #0
 800664c:	d102      	bne.n	8006654 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f001 ff22 	bl	8008498 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006654:	bf00      	nop
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006668:	2300      	movs	r3, #0
 800666a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006670:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10d      	bne.n	8006696 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d14d      	bne.n	800671e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	4618      	mov	r0, r3
 8006688:	f000 ffc8 	bl	800761c <xTaskPriorityDisinherit>
 800668c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	609a      	str	r2, [r3, #8]
 8006694:	e043      	b.n	800671e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d119      	bne.n	80066d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6858      	ldr	r0, [r3, #4]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a4:	461a      	mov	r2, r3
 80066a6:	68b9      	ldr	r1, [r7, #8]
 80066a8:	f002 faa3 	bl	8008bf2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b4:	441a      	add	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d32b      	bcc.n	800671e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	605a      	str	r2, [r3, #4]
 80066ce:	e026      	b.n	800671e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	68d8      	ldr	r0, [r3, #12]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d8:	461a      	mov	r2, r3
 80066da:	68b9      	ldr	r1, [r7, #8]
 80066dc:	f002 fa89 	bl	8008bf2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e8:	425b      	negs	r3, r3
 80066ea:	441a      	add	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	68da      	ldr	r2, [r3, #12]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d207      	bcs.n	800670c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006704:	425b      	negs	r3, r3
 8006706:	441a      	add	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b02      	cmp	r3, #2
 8006710:	d105      	bne.n	800671e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	3b01      	subs	r3, #1
 800671c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006726:	697b      	ldr	r3, [r7, #20]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3718      	adds	r7, #24
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800673e:	2b00      	cmp	r3, #0
 8006740:	d018      	beq.n	8006774 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800674a:	441a      	add	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68da      	ldr	r2, [r3, #12]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	429a      	cmp	r2, r3
 800675a:	d303      	bcc.n	8006764 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68d9      	ldr	r1, [r3, #12]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800676c:	461a      	mov	r2, r3
 800676e:	6838      	ldr	r0, [r7, #0]
 8006770:	f002 fa3f 	bl	8008bf2 <memcpy>
	}
}
 8006774:	bf00      	nop
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006784:	f001 fc98 	bl	80080b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800678e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006790:	e011      	b.n	80067b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006796:	2b00      	cmp	r3, #0
 8006798:	d012      	beq.n	80067c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	3324      	adds	r3, #36	@ 0x24
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 fd5e 	bl	8007260 <xTaskRemoveFromEventList>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067aa:	f000 fe37 	bl	800741c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
 80067b0:	3b01      	subs	r3, #1
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	dce9      	bgt.n	8006792 <prvUnlockQueue+0x16>
 80067be:	e000      	b.n	80067c2 <prvUnlockQueue+0x46>
					break;
 80067c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	22ff      	movs	r2, #255	@ 0xff
 80067c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80067ca:	f001 fca7 	bl	800811c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067ce:	f001 fc73 	bl	80080b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067da:	e011      	b.n	8006800 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d012      	beq.n	800680a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	3310      	adds	r3, #16
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fd39 	bl	8007260 <xTaskRemoveFromEventList>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067f4:	f000 fe12 	bl	800741c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
 80067fa:	3b01      	subs	r3, #1
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006800:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006804:	2b00      	cmp	r3, #0
 8006806:	dce9      	bgt.n	80067dc <prvUnlockQueue+0x60>
 8006808:	e000      	b.n	800680c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800680a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	22ff      	movs	r2, #255	@ 0xff
 8006810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006814:	f001 fc82 	bl	800811c <vPortExitCritical>
}
 8006818:	bf00      	nop
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006828:	f001 fc46 	bl	80080b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006830:	2b00      	cmp	r3, #0
 8006832:	d102      	bne.n	800683a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006834:	2301      	movs	r3, #1
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	e001      	b.n	800683e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800683e:	f001 fc6d 	bl	800811c <vPortExitCritical>

	return xReturn;
 8006842:	68fb      	ldr	r3, [r7, #12]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006854:	f001 fc30 	bl	80080b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006860:	429a      	cmp	r2, r3
 8006862:	d102      	bne.n	800686a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006864:	2301      	movs	r3, #1
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	e001      	b.n	800686e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800686a:	2300      	movs	r3, #0
 800686c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800686e:	f001 fc55 	bl	800811c <vPortExitCritical>

	return xReturn;
 8006872:	68fb      	ldr	r3, [r7, #12]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	e014      	b.n	80068b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800688c:	4a0f      	ldr	r2, [pc, #60]	@ (80068cc <vQueueAddToRegistry+0x50>)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10b      	bne.n	80068b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006898:	490c      	ldr	r1, [pc, #48]	@ (80068cc <vQueueAddToRegistry+0x50>)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80068a2:	4a0a      	ldr	r2, [pc, #40]	@ (80068cc <vQueueAddToRegistry+0x50>)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	4413      	add	r3, r2
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80068ae:	e006      	b.n	80068be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3301      	adds	r3, #1
 80068b4:	60fb      	str	r3, [r7, #12]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2b07      	cmp	r3, #7
 80068ba:	d9e7      	bls.n	800688c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80068bc:	bf00      	nop
 80068be:	bf00      	nop
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	20000fe4 	.word	0x20000fe4

080068d0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068d8:	2300      	movs	r3, #0
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	e016      	b.n	800690c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80068de:	4a10      	ldr	r2, [pc, #64]	@ (8006920 <vQueueUnregisterQueue+0x50>)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	4413      	add	r3, r2
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d10b      	bne.n	8006906 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80068ee:	4a0c      	ldr	r2, [pc, #48]	@ (8006920 <vQueueUnregisterQueue+0x50>)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2100      	movs	r1, #0
 80068f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80068f8:	4a09      	ldr	r2, [pc, #36]	@ (8006920 <vQueueUnregisterQueue+0x50>)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	00db      	lsls	r3, r3, #3
 80068fe:	4413      	add	r3, r2
 8006900:	2200      	movs	r2, #0
 8006902:	605a      	str	r2, [r3, #4]
				break;
 8006904:	e006      	b.n	8006914 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3301      	adds	r3, #1
 800690a:	60fb      	str	r3, [r7, #12]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2b07      	cmp	r3, #7
 8006910:	d9e5      	bls.n	80068de <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006912:	bf00      	nop
 8006914:	bf00      	nop
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	20000fe4 	.word	0x20000fe4

08006924 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006934:	f001 fbc0 	bl	80080b8 <vPortEnterCritical>
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800693e:	b25b      	sxtb	r3, r3
 8006940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006944:	d103      	bne.n	800694e <vQueueWaitForMessageRestricted+0x2a>
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006954:	b25b      	sxtb	r3, r3
 8006956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695a:	d103      	bne.n	8006964 <vQueueWaitForMessageRestricted+0x40>
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006964:	f001 fbda 	bl	800811c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800696c:	2b00      	cmp	r3, #0
 800696e:	d106      	bne.n	800697e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	3324      	adds	r3, #36	@ 0x24
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	68b9      	ldr	r1, [r7, #8]
 8006978:	4618      	mov	r0, r3
 800697a:	f000 fc45 	bl	8007208 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800697e:	6978      	ldr	r0, [r7, #20]
 8006980:	f7ff fefc 	bl	800677c <prvUnlockQueue>
	}
 8006984:	bf00      	nop
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08e      	sub	sp, #56	@ 0x38
 8006990:	af04      	add	r7, sp, #16
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
 8006998:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800699a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10b      	bne.n	80069b8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	623b      	str	r3, [r7, #32]
}
 80069b2:	bf00      	nop
 80069b4:	bf00      	nop
 80069b6:	e7fd      	b.n	80069b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80069b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10b      	bne.n	80069d6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	61fb      	str	r3, [r7, #28]
}
 80069d0:	bf00      	nop
 80069d2:	bf00      	nop
 80069d4:	e7fd      	b.n	80069d2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069d6:	235c      	movs	r3, #92	@ 0x5c
 80069d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	2b5c      	cmp	r3, #92	@ 0x5c
 80069de:	d00b      	beq.n	80069f8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80069e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	61bb      	str	r3, [r7, #24]
}
 80069f2:	bf00      	nop
 80069f4:	bf00      	nop
 80069f6:	e7fd      	b.n	80069f4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01e      	beq.n	8006a3e <xTaskCreateStatic+0xb2>
 8006a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d01b      	beq.n	8006a3e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a08:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a0e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a18:	2300      	movs	r3, #0
 8006a1a:	9303      	str	r3, [sp, #12]
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1e:	9302      	str	r3, [sp, #8]
 8006a20:	f107 0314 	add.w	r3, r7, #20
 8006a24:	9301      	str	r3, [sp, #4]
 8006a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	68b9      	ldr	r1, [r7, #8]
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 f850 	bl	8006ad6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006a38:	f000 f8de 	bl	8006bf8 <prvAddNewTaskToReadyList>
 8006a3c:	e001      	b.n	8006a42 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a42:	697b      	ldr	r3, [r7, #20]
	}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3728      	adds	r7, #40	@ 0x28
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08c      	sub	sp, #48	@ 0x30
 8006a50:	af04      	add	r7, sp, #16
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	603b      	str	r3, [r7, #0]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a5c:	88fb      	ldrh	r3, [r7, #6]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4618      	mov	r0, r3
 8006a62:	f001 fc4b 	bl	80082fc <pvPortMalloc>
 8006a66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00e      	beq.n	8006a8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a6e:	205c      	movs	r0, #92	@ 0x5c
 8006a70:	f001 fc44 	bl	80082fc <pvPortMalloc>
 8006a74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d003      	beq.n	8006a84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a82:	e005      	b.n	8006a90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a84:	6978      	ldr	r0, [r7, #20]
 8006a86:	f001 fd07 	bl	8008498 <vPortFree>
 8006a8a:	e001      	b.n	8006a90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d017      	beq.n	8006ac6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a9e:	88fa      	ldrh	r2, [r7, #6]
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	9303      	str	r3, [sp, #12]
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	9302      	str	r3, [sp, #8]
 8006aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aaa:	9301      	str	r3, [sp, #4]
 8006aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	68b9      	ldr	r1, [r7, #8]
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 f80e 	bl	8006ad6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006aba:	69f8      	ldr	r0, [r7, #28]
 8006abc:	f000 f89c 	bl	8006bf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	61bb      	str	r3, [r7, #24]
 8006ac4:	e002      	b.n	8006acc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8006aca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006acc:	69bb      	ldr	r3, [r7, #24]
	}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3720      	adds	r7, #32
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b088      	sub	sp, #32
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	607a      	str	r2, [r7, #4]
 8006ae2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	461a      	mov	r2, r3
 8006aee:	21a5      	movs	r1, #165	@ 0xa5
 8006af0:	f002 f804 	bl	8008afc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006afe:	3b01      	subs	r3, #1
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	f023 0307 	bic.w	r3, r3, #7
 8006b0c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	f003 0307 	and.w	r3, r3, #7
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00b      	beq.n	8006b30 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	617b      	str	r3, [r7, #20]
}
 8006b2a:	bf00      	nop
 8006b2c:	bf00      	nop
 8006b2e:	e7fd      	b.n	8006b2c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d01f      	beq.n	8006b76 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b36:	2300      	movs	r3, #0
 8006b38:	61fb      	str	r3, [r7, #28]
 8006b3a:	e012      	b.n	8006b62 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	4413      	add	r3, r2
 8006b42:	7819      	ldrb	r1, [r3, #0]
 8006b44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	4413      	add	r3, r2
 8006b4a:	3334      	adds	r3, #52	@ 0x34
 8006b4c:	460a      	mov	r2, r1
 8006b4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	4413      	add	r3, r2
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d006      	beq.n	8006b6a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	61fb      	str	r3, [r7, #28]
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	2b0f      	cmp	r3, #15
 8006b66:	d9e9      	bls.n	8006b3c <prvInitialiseNewTask+0x66>
 8006b68:	e000      	b.n	8006b6c <prvInitialiseNewTask+0x96>
			{
				break;
 8006b6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b74:	e003      	b.n	8006b7e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b80:	2b37      	cmp	r3, #55	@ 0x37
 8006b82:	d901      	bls.n	8006b88 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b84:	2337      	movs	r3, #55	@ 0x37
 8006b86:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b8c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b92:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b96:	2200      	movs	r2, #0
 8006b98:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff f86e 	bl	8005c80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba6:	3318      	adds	r3, #24
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7ff f869 	bl	8005c80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bc2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	68f9      	ldr	r1, [r7, #12]
 8006bd6:	69b8      	ldr	r0, [r7, #24]
 8006bd8:	f001 f93e 	bl	8007e58 <pxPortInitialiseStack>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bee:	bf00      	nop
 8006bf0:	3720      	adds	r7, #32
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c00:	f001 fa5a 	bl	80080b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c04:	4b2d      	ldr	r3, [pc, #180]	@ (8006cbc <prvAddNewTaskToReadyList+0xc4>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8006cbc <prvAddNewTaskToReadyList+0xc4>)
 8006c0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8006cc0 <prvAddNewTaskToReadyList+0xc8>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d109      	bne.n	8006c2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c16:	4a2a      	ldr	r2, [pc, #168]	@ (8006cc0 <prvAddNewTaskToReadyList+0xc8>)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c1c:	4b27      	ldr	r3, [pc, #156]	@ (8006cbc <prvAddNewTaskToReadyList+0xc4>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d110      	bne.n	8006c46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c24:	f000 fc1e 	bl	8007464 <prvInitialiseTaskLists>
 8006c28:	e00d      	b.n	8006c46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c2a:	4b26      	ldr	r3, [pc, #152]	@ (8006cc4 <prvAddNewTaskToReadyList+0xcc>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d109      	bne.n	8006c46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c32:	4b23      	ldr	r3, [pc, #140]	@ (8006cc0 <prvAddNewTaskToReadyList+0xc8>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d802      	bhi.n	8006c46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c40:	4a1f      	ldr	r2, [pc, #124]	@ (8006cc0 <prvAddNewTaskToReadyList+0xc8>)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c46:	4b20      	ldr	r3, [pc, #128]	@ (8006cc8 <prvAddNewTaskToReadyList+0xd0>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8006cc8 <prvAddNewTaskToReadyList+0xd0>)
 8006c4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c50:	4b1d      	ldr	r3, [pc, #116]	@ (8006cc8 <prvAddNewTaskToReadyList+0xd0>)
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8006ccc <prvAddNewTaskToReadyList+0xd4>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d903      	bls.n	8006c6c <prvAddNewTaskToReadyList+0x74>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c68:	4a18      	ldr	r2, [pc, #96]	@ (8006ccc <prvAddNewTaskToReadyList+0xd4>)
 8006c6a:	6013      	str	r3, [r2, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c70:	4613      	mov	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4a15      	ldr	r2, [pc, #84]	@ (8006cd0 <prvAddNewTaskToReadyList+0xd8>)
 8006c7a:	441a      	add	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	3304      	adds	r3, #4
 8006c80:	4619      	mov	r1, r3
 8006c82:	4610      	mov	r0, r2
 8006c84:	f7ff f809 	bl	8005c9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c88:	f001 fa48 	bl	800811c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc4 <prvAddNewTaskToReadyList+0xcc>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00e      	beq.n	8006cb2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c94:	4b0a      	ldr	r3, [pc, #40]	@ (8006cc0 <prvAddNewTaskToReadyList+0xc8>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d207      	bcs.n	8006cb2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8006cd4 <prvAddNewTaskToReadyList+0xdc>)
 8006ca4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cb2:	bf00      	nop
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	200014f8 	.word	0x200014f8
 8006cc0:	20001024 	.word	0x20001024
 8006cc4:	20001504 	.word	0x20001504
 8006cc8:	20001514 	.word	0x20001514
 8006ccc:	20001500 	.word	0x20001500
 8006cd0:	20001028 	.word	0x20001028
 8006cd4:	e000ed04 	.word	0xe000ed04

08006cd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d018      	beq.n	8006d1c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cea:	4b14      	ldr	r3, [pc, #80]	@ (8006d3c <vTaskDelay+0x64>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00b      	beq.n	8006d0a <vTaskDelay+0x32>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	60bb      	str	r3, [r7, #8]
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop
 8006d08:	e7fd      	b.n	8006d06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d0a:	f000 f883 	bl	8006e14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d0e:	2100      	movs	r1, #0
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fcf3 	bl	80076fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d16:	f000 f88b 	bl	8006e30 <xTaskResumeAll>
 8006d1a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d107      	bne.n	8006d32 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006d22:	4b07      	ldr	r3, [pc, #28]	@ (8006d40 <vTaskDelay+0x68>)
 8006d24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d28:	601a      	str	r2, [r3, #0]
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d32:	bf00      	nop
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20001520 	.word	0x20001520
 8006d40:	e000ed04 	.word	0xe000ed04

08006d44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08a      	sub	sp, #40	@ 0x28
 8006d48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d52:	463a      	mov	r2, r7
 8006d54:	1d39      	adds	r1, r7, #4
 8006d56:	f107 0308 	add.w	r3, r7, #8
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fe ff3c 	bl	8005bd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	9202      	str	r2, [sp, #8]
 8006d68:	9301      	str	r3, [sp, #4]
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	2300      	movs	r3, #0
 8006d70:	460a      	mov	r2, r1
 8006d72:	4922      	ldr	r1, [pc, #136]	@ (8006dfc <vTaskStartScheduler+0xb8>)
 8006d74:	4822      	ldr	r0, [pc, #136]	@ (8006e00 <vTaskStartScheduler+0xbc>)
 8006d76:	f7ff fe09 	bl	800698c <xTaskCreateStatic>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	4a21      	ldr	r2, [pc, #132]	@ (8006e04 <vTaskStartScheduler+0xc0>)
 8006d7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d80:	4b20      	ldr	r3, [pc, #128]	@ (8006e04 <vTaskStartScheduler+0xc0>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	e001      	b.n	8006d92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d102      	bne.n	8006d9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d98:	f000 fd04 	bl	80077a4 <xTimerCreateTimerTask>
 8006d9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d116      	bne.n	8006dd2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	613b      	str	r3, [r7, #16]
}
 8006db6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006db8:	4b13      	ldr	r3, [pc, #76]	@ (8006e08 <vTaskStartScheduler+0xc4>)
 8006dba:	f04f 32ff 	mov.w	r2, #4294967295
 8006dbe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006dc0:	4b12      	ldr	r3, [pc, #72]	@ (8006e0c <vTaskStartScheduler+0xc8>)
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006dc6:	4b12      	ldr	r3, [pc, #72]	@ (8006e10 <vTaskStartScheduler+0xcc>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006dcc:	f001 f8d0 	bl	8007f70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006dd0:	e00f      	b.n	8006df2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd8:	d10b      	bne.n	8006df2 <vTaskStartScheduler+0xae>
	__asm volatile
 8006dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dde:	f383 8811 	msr	BASEPRI, r3
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	60fb      	str	r3, [r7, #12]
}
 8006dec:	bf00      	nop
 8006dee:	bf00      	nop
 8006df0:	e7fd      	b.n	8006dee <vTaskStartScheduler+0xaa>
}
 8006df2:	bf00      	nop
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	08009720 	.word	0x08009720
 8006e00:	08007435 	.word	0x08007435
 8006e04:	2000151c 	.word	0x2000151c
 8006e08:	20001518 	.word	0x20001518
 8006e0c:	20001504 	.word	0x20001504
 8006e10:	200014fc 	.word	0x200014fc

08006e14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e14:	b480      	push	{r7}
 8006e16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e18:	4b04      	ldr	r3, [pc, #16]	@ (8006e2c <vTaskSuspendAll+0x18>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	4a03      	ldr	r2, [pc, #12]	@ (8006e2c <vTaskSuspendAll+0x18>)
 8006e20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e22:	bf00      	nop
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	20001520 	.word	0x20001520

08006e30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e36:	2300      	movs	r3, #0
 8006e38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e3e:	4b42      	ldr	r3, [pc, #264]	@ (8006f48 <xTaskResumeAll+0x118>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10b      	bne.n	8006e5e <xTaskResumeAll+0x2e>
	__asm volatile
 8006e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4a:	f383 8811 	msr	BASEPRI, r3
 8006e4e:	f3bf 8f6f 	isb	sy
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	603b      	str	r3, [r7, #0]
}
 8006e58:	bf00      	nop
 8006e5a:	bf00      	nop
 8006e5c:	e7fd      	b.n	8006e5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e5e:	f001 f92b 	bl	80080b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e62:	4b39      	ldr	r3, [pc, #228]	@ (8006f48 <xTaskResumeAll+0x118>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3b01      	subs	r3, #1
 8006e68:	4a37      	ldr	r2, [pc, #220]	@ (8006f48 <xTaskResumeAll+0x118>)
 8006e6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e6c:	4b36      	ldr	r3, [pc, #216]	@ (8006f48 <xTaskResumeAll+0x118>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d162      	bne.n	8006f3a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e74:	4b35      	ldr	r3, [pc, #212]	@ (8006f4c <xTaskResumeAll+0x11c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d05e      	beq.n	8006f3a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e7c:	e02f      	b.n	8006ede <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e7e:	4b34      	ldr	r3, [pc, #208]	@ (8006f50 <xTaskResumeAll+0x120>)
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	3318      	adds	r3, #24
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fe ff62 	bl	8005d54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3304      	adds	r3, #4
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fe ff5d 	bl	8005d54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e9e:	4b2d      	ldr	r3, [pc, #180]	@ (8006f54 <xTaskResumeAll+0x124>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d903      	bls.n	8006eae <xTaskResumeAll+0x7e>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eaa:	4a2a      	ldr	r2, [pc, #168]	@ (8006f54 <xTaskResumeAll+0x124>)
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4a27      	ldr	r2, [pc, #156]	@ (8006f58 <xTaskResumeAll+0x128>)
 8006ebc:	441a      	add	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	f7fe fee8 	bl	8005c9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ece:	4b23      	ldr	r3, [pc, #140]	@ (8006f5c <xTaskResumeAll+0x12c>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d302      	bcc.n	8006ede <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006ed8:	4b21      	ldr	r3, [pc, #132]	@ (8006f60 <xTaskResumeAll+0x130>)
 8006eda:	2201      	movs	r2, #1
 8006edc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ede:	4b1c      	ldr	r3, [pc, #112]	@ (8006f50 <xTaskResumeAll+0x120>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1cb      	bne.n	8006e7e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006eec:	f000 fb58 	bl	80075a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8006f64 <xTaskResumeAll+0x134>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d010      	beq.n	8006f1e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006efc:	f000 f846 	bl	8006f8c <xTaskIncrementTick>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d002      	beq.n	8006f0c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006f06:	4b16      	ldr	r3, [pc, #88]	@ (8006f60 <xTaskResumeAll+0x130>)
 8006f08:	2201      	movs	r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1f1      	bne.n	8006efc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006f18:	4b12      	ldr	r3, [pc, #72]	@ (8006f64 <xTaskResumeAll+0x134>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f1e:	4b10      	ldr	r3, [pc, #64]	@ (8006f60 <xTaskResumeAll+0x130>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d009      	beq.n	8006f3a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f26:	2301      	movs	r3, #1
 8006f28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8006f68 <xTaskResumeAll+0x138>)
 8006f2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f30:	601a      	str	r2, [r3, #0]
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f3a:	f001 f8ef 	bl	800811c <vPortExitCritical>

	return xAlreadyYielded;
 8006f3e:	68bb      	ldr	r3, [r7, #8]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	20001520 	.word	0x20001520
 8006f4c:	200014f8 	.word	0x200014f8
 8006f50:	200014b8 	.word	0x200014b8
 8006f54:	20001500 	.word	0x20001500
 8006f58:	20001028 	.word	0x20001028
 8006f5c:	20001024 	.word	0x20001024
 8006f60:	2000150c 	.word	0x2000150c
 8006f64:	20001508 	.word	0x20001508
 8006f68:	e000ed04 	.word	0xe000ed04

08006f6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f72:	4b05      	ldr	r3, [pc, #20]	@ (8006f88 <xTaskGetTickCount+0x1c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f78:	687b      	ldr	r3, [r7, #4]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	200014fc 	.word	0x200014fc

08006f8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f92:	2300      	movs	r3, #0
 8006f94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f96:	4b4f      	ldr	r3, [pc, #316]	@ (80070d4 <xTaskIncrementTick+0x148>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f040 8090 	bne.w	80070c0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fa0:	4b4d      	ldr	r3, [pc, #308]	@ (80070d8 <xTaskIncrementTick+0x14c>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fa8:	4a4b      	ldr	r2, [pc, #300]	@ (80070d8 <xTaskIncrementTick+0x14c>)
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d121      	bne.n	8006ff8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fb4:	4b49      	ldr	r3, [pc, #292]	@ (80070dc <xTaskIncrementTick+0x150>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00b      	beq.n	8006fd6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	603b      	str	r3, [r7, #0]
}
 8006fd0:	bf00      	nop
 8006fd2:	bf00      	nop
 8006fd4:	e7fd      	b.n	8006fd2 <xTaskIncrementTick+0x46>
 8006fd6:	4b41      	ldr	r3, [pc, #260]	@ (80070dc <xTaskIncrementTick+0x150>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	4b40      	ldr	r3, [pc, #256]	@ (80070e0 <xTaskIncrementTick+0x154>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a3e      	ldr	r2, [pc, #248]	@ (80070dc <xTaskIncrementTick+0x150>)
 8006fe2:	6013      	str	r3, [r2, #0]
 8006fe4:	4a3e      	ldr	r2, [pc, #248]	@ (80070e0 <xTaskIncrementTick+0x154>)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	4b3e      	ldr	r3, [pc, #248]	@ (80070e4 <xTaskIncrementTick+0x158>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	4a3c      	ldr	r2, [pc, #240]	@ (80070e4 <xTaskIncrementTick+0x158>)
 8006ff2:	6013      	str	r3, [r2, #0]
 8006ff4:	f000 fad4 	bl	80075a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ff8:	4b3b      	ldr	r3, [pc, #236]	@ (80070e8 <xTaskIncrementTick+0x15c>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d349      	bcc.n	8007096 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007002:	4b36      	ldr	r3, [pc, #216]	@ (80070dc <xTaskIncrementTick+0x150>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d104      	bne.n	8007016 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800700c:	4b36      	ldr	r3, [pc, #216]	@ (80070e8 <xTaskIncrementTick+0x15c>)
 800700e:	f04f 32ff 	mov.w	r2, #4294967295
 8007012:	601a      	str	r2, [r3, #0]
					break;
 8007014:	e03f      	b.n	8007096 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007016:	4b31      	ldr	r3, [pc, #196]	@ (80070dc <xTaskIncrementTick+0x150>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	429a      	cmp	r2, r3
 800702c:	d203      	bcs.n	8007036 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800702e:	4a2e      	ldr	r2, [pc, #184]	@ (80070e8 <xTaskIncrementTick+0x15c>)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007034:	e02f      	b.n	8007096 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	3304      	adds	r3, #4
 800703a:	4618      	mov	r0, r3
 800703c:	f7fe fe8a 	bl	8005d54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007044:	2b00      	cmp	r3, #0
 8007046:	d004      	beq.n	8007052 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	3318      	adds	r3, #24
 800704c:	4618      	mov	r0, r3
 800704e:	f7fe fe81 	bl	8005d54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007056:	4b25      	ldr	r3, [pc, #148]	@ (80070ec <xTaskIncrementTick+0x160>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	429a      	cmp	r2, r3
 800705c:	d903      	bls.n	8007066 <xTaskIncrementTick+0xda>
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007062:	4a22      	ldr	r2, [pc, #136]	@ (80070ec <xTaskIncrementTick+0x160>)
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800706a:	4613      	mov	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4a1f      	ldr	r2, [pc, #124]	@ (80070f0 <xTaskIncrementTick+0x164>)
 8007074:	441a      	add	r2, r3
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	3304      	adds	r3, #4
 800707a:	4619      	mov	r1, r3
 800707c:	4610      	mov	r0, r2
 800707e:	f7fe fe0c 	bl	8005c9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007086:	4b1b      	ldr	r3, [pc, #108]	@ (80070f4 <xTaskIncrementTick+0x168>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708c:	429a      	cmp	r2, r3
 800708e:	d3b8      	bcc.n	8007002 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007090:	2301      	movs	r3, #1
 8007092:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007094:	e7b5      	b.n	8007002 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007096:	4b17      	ldr	r3, [pc, #92]	@ (80070f4 <xTaskIncrementTick+0x168>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800709c:	4914      	ldr	r1, [pc, #80]	@ (80070f0 <xTaskIncrementTick+0x164>)
 800709e:	4613      	mov	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	440b      	add	r3, r1
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d901      	bls.n	80070b2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80070ae:	2301      	movs	r3, #1
 80070b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80070b2:	4b11      	ldr	r3, [pc, #68]	@ (80070f8 <xTaskIncrementTick+0x16c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d007      	beq.n	80070ca <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80070ba:	2301      	movs	r3, #1
 80070bc:	617b      	str	r3, [r7, #20]
 80070be:	e004      	b.n	80070ca <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80070c0:	4b0e      	ldr	r3, [pc, #56]	@ (80070fc <xTaskIncrementTick+0x170>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	3301      	adds	r3, #1
 80070c6:	4a0d      	ldr	r2, [pc, #52]	@ (80070fc <xTaskIncrementTick+0x170>)
 80070c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80070ca:	697b      	ldr	r3, [r7, #20]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	20001520 	.word	0x20001520
 80070d8:	200014fc 	.word	0x200014fc
 80070dc:	200014b0 	.word	0x200014b0
 80070e0:	200014b4 	.word	0x200014b4
 80070e4:	20001510 	.word	0x20001510
 80070e8:	20001518 	.word	0x20001518
 80070ec:	20001500 	.word	0x20001500
 80070f0:	20001028 	.word	0x20001028
 80070f4:	20001024 	.word	0x20001024
 80070f8:	2000150c 	.word	0x2000150c
 80070fc:	20001508 	.word	0x20001508

08007100 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007106:	4b28      	ldr	r3, [pc, #160]	@ (80071a8 <vTaskSwitchContext+0xa8>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800710e:	4b27      	ldr	r3, [pc, #156]	@ (80071ac <vTaskSwitchContext+0xac>)
 8007110:	2201      	movs	r2, #1
 8007112:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007114:	e042      	b.n	800719c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007116:	4b25      	ldr	r3, [pc, #148]	@ (80071ac <vTaskSwitchContext+0xac>)
 8007118:	2200      	movs	r2, #0
 800711a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800711c:	4b24      	ldr	r3, [pc, #144]	@ (80071b0 <vTaskSwitchContext+0xb0>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	60fb      	str	r3, [r7, #12]
 8007122:	e011      	b.n	8007148 <vTaskSwitchContext+0x48>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10b      	bne.n	8007142 <vTaskSwitchContext+0x42>
	__asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	607b      	str	r3, [r7, #4]
}
 800713c:	bf00      	nop
 800713e:	bf00      	nop
 8007140:	e7fd      	b.n	800713e <vTaskSwitchContext+0x3e>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	3b01      	subs	r3, #1
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	491a      	ldr	r1, [pc, #104]	@ (80071b4 <vTaskSwitchContext+0xb4>)
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	440b      	add	r3, r1
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0e3      	beq.n	8007124 <vTaskSwitchContext+0x24>
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	4613      	mov	r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	4413      	add	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4a13      	ldr	r2, [pc, #76]	@ (80071b4 <vTaskSwitchContext+0xb4>)
 8007168:	4413      	add	r3, r2
 800716a:	60bb      	str	r3, [r7, #8]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	605a      	str	r2, [r3, #4]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	3308      	adds	r3, #8
 800717e:	429a      	cmp	r2, r3
 8007180:	d104      	bne.n	800718c <vTaskSwitchContext+0x8c>
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	605a      	str	r2, [r3, #4]
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	4a09      	ldr	r2, [pc, #36]	@ (80071b8 <vTaskSwitchContext+0xb8>)
 8007194:	6013      	str	r3, [r2, #0]
 8007196:	4a06      	ldr	r2, [pc, #24]	@ (80071b0 <vTaskSwitchContext+0xb0>)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6013      	str	r3, [r2, #0]
}
 800719c:	bf00      	nop
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	20001520 	.word	0x20001520
 80071ac:	2000150c 	.word	0x2000150c
 80071b0:	20001500 	.word	0x20001500
 80071b4:	20001028 	.word	0x20001028
 80071b8:	20001024 	.word	0x20001024

080071bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10b      	bne.n	80071e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	60fb      	str	r3, [r7, #12]
}
 80071de:	bf00      	nop
 80071e0:	bf00      	nop
 80071e2:	e7fd      	b.n	80071e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071e4:	4b07      	ldr	r3, [pc, #28]	@ (8007204 <vTaskPlaceOnEventList+0x48>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3318      	adds	r3, #24
 80071ea:	4619      	mov	r1, r3
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7fe fd78 	bl	8005ce2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071f2:	2101      	movs	r1, #1
 80071f4:	6838      	ldr	r0, [r7, #0]
 80071f6:	f000 fa81 	bl	80076fc <prvAddCurrentTaskToDelayedList>
}
 80071fa:	bf00      	nop
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	20001024 	.word	0x20001024

08007208 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10b      	bne.n	8007232 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800721a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800721e:	f383 8811 	msr	BASEPRI, r3
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	617b      	str	r3, [r7, #20]
}
 800722c:	bf00      	nop
 800722e:	bf00      	nop
 8007230:	e7fd      	b.n	800722e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007232:	4b0a      	ldr	r3, [pc, #40]	@ (800725c <vTaskPlaceOnEventListRestricted+0x54>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3318      	adds	r3, #24
 8007238:	4619      	mov	r1, r3
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f7fe fd2d 	bl	8005c9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d002      	beq.n	800724c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007246:	f04f 33ff 	mov.w	r3, #4294967295
 800724a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800724c:	6879      	ldr	r1, [r7, #4]
 800724e:	68b8      	ldr	r0, [r7, #8]
 8007250:	f000 fa54 	bl	80076fc <prvAddCurrentTaskToDelayedList>
	}
 8007254:	bf00      	nop
 8007256:	3718      	adds	r7, #24
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	20001024 	.word	0x20001024

08007260 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10b      	bne.n	800728e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727a:	f383 8811 	msr	BASEPRI, r3
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	60fb      	str	r3, [r7, #12]
}
 8007288:	bf00      	nop
 800728a:	bf00      	nop
 800728c:	e7fd      	b.n	800728a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	3318      	adds	r3, #24
 8007292:	4618      	mov	r0, r3
 8007294:	f7fe fd5e 	bl	8005d54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007298:	4b1d      	ldr	r3, [pc, #116]	@ (8007310 <xTaskRemoveFromEventList+0xb0>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d11d      	bne.n	80072dc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	3304      	adds	r3, #4
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7fe fd55 	bl	8005d54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ae:	4b19      	ldr	r3, [pc, #100]	@ (8007314 <xTaskRemoveFromEventList+0xb4>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d903      	bls.n	80072be <xTaskRemoveFromEventList+0x5e>
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ba:	4a16      	ldr	r2, [pc, #88]	@ (8007314 <xTaskRemoveFromEventList+0xb4>)
 80072bc:	6013      	str	r3, [r2, #0]
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c2:	4613      	mov	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4a13      	ldr	r2, [pc, #76]	@ (8007318 <xTaskRemoveFromEventList+0xb8>)
 80072cc:	441a      	add	r2, r3
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	3304      	adds	r3, #4
 80072d2:	4619      	mov	r1, r3
 80072d4:	4610      	mov	r0, r2
 80072d6:	f7fe fce0 	bl	8005c9a <vListInsertEnd>
 80072da:	e005      	b.n	80072e8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	3318      	adds	r3, #24
 80072e0:	4619      	mov	r1, r3
 80072e2:	480e      	ldr	r0, [pc, #56]	@ (800731c <xTaskRemoveFromEventList+0xbc>)
 80072e4:	f7fe fcd9 	bl	8005c9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007320 <xTaskRemoveFromEventList+0xc0>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d905      	bls.n	8007302 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072f6:	2301      	movs	r3, #1
 80072f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80072fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007324 <xTaskRemoveFromEventList+0xc4>)
 80072fc:	2201      	movs	r2, #1
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	e001      	b.n	8007306 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007302:	2300      	movs	r3, #0
 8007304:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007306:	697b      	ldr	r3, [r7, #20]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3718      	adds	r7, #24
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	20001520 	.word	0x20001520
 8007314:	20001500 	.word	0x20001500
 8007318:	20001028 	.word	0x20001028
 800731c:	200014b8 	.word	0x200014b8
 8007320:	20001024 	.word	0x20001024
 8007324:	2000150c 	.word	0x2000150c

08007328 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007330:	4b06      	ldr	r3, [pc, #24]	@ (800734c <vTaskInternalSetTimeOutState+0x24>)
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007338:	4b05      	ldr	r3, [pc, #20]	@ (8007350 <vTaskInternalSetTimeOutState+0x28>)
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	605a      	str	r2, [r3, #4]
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	20001510 	.word	0x20001510
 8007350:	200014fc 	.word	0x200014fc

08007354 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b088      	sub	sp, #32
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10b      	bne.n	800737c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	613b      	str	r3, [r7, #16]
}
 8007376:	bf00      	nop
 8007378:	bf00      	nop
 800737a:	e7fd      	b.n	8007378 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10b      	bne.n	800739a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	60fb      	str	r3, [r7, #12]
}
 8007394:	bf00      	nop
 8007396:	bf00      	nop
 8007398:	e7fd      	b.n	8007396 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800739a:	f000 fe8d 	bl	80080b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800739e:	4b1d      	ldr	r3, [pc, #116]	@ (8007414 <xTaskCheckForTimeOut+0xc0>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b6:	d102      	bne.n	80073be <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80073b8:	2300      	movs	r3, #0
 80073ba:	61fb      	str	r3, [r7, #28]
 80073bc:	e023      	b.n	8007406 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	4b15      	ldr	r3, [pc, #84]	@ (8007418 <xTaskCheckForTimeOut+0xc4>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d007      	beq.n	80073da <xTaskCheckForTimeOut+0x86>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	69ba      	ldr	r2, [r7, #24]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d302      	bcc.n	80073da <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80073d4:	2301      	movs	r3, #1
 80073d6:	61fb      	str	r3, [r7, #28]
 80073d8:	e015      	b.n	8007406 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d20b      	bcs.n	80073fc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	1ad2      	subs	r2, r2, r3
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff ff99 	bl	8007328 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073f6:	2300      	movs	r3, #0
 80073f8:	61fb      	str	r3, [r7, #28]
 80073fa:	e004      	b.n	8007406 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	2200      	movs	r2, #0
 8007400:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007402:	2301      	movs	r3, #1
 8007404:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007406:	f000 fe89 	bl	800811c <vPortExitCritical>

	return xReturn;
 800740a:	69fb      	ldr	r3, [r7, #28]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3720      	adds	r7, #32
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	200014fc 	.word	0x200014fc
 8007418:	20001510 	.word	0x20001510

0800741c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800741c:	b480      	push	{r7}
 800741e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007420:	4b03      	ldr	r3, [pc, #12]	@ (8007430 <vTaskMissedYield+0x14>)
 8007422:	2201      	movs	r2, #1
 8007424:	601a      	str	r2, [r3, #0]
}
 8007426:	bf00      	nop
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	2000150c 	.word	0x2000150c

08007434 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800743c:	f000 f852 	bl	80074e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007440:	4b06      	ldr	r3, [pc, #24]	@ (800745c <prvIdleTask+0x28>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d9f9      	bls.n	800743c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007448:	4b05      	ldr	r3, [pc, #20]	@ (8007460 <prvIdleTask+0x2c>)
 800744a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007458:	e7f0      	b.n	800743c <prvIdleTask+0x8>
 800745a:	bf00      	nop
 800745c:	20001028 	.word	0x20001028
 8007460:	e000ed04 	.word	0xe000ed04

08007464 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800746a:	2300      	movs	r3, #0
 800746c:	607b      	str	r3, [r7, #4]
 800746e:	e00c      	b.n	800748a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	4613      	mov	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4a12      	ldr	r2, [pc, #72]	@ (80074c4 <prvInitialiseTaskLists+0x60>)
 800747c:	4413      	add	r3, r2
 800747e:	4618      	mov	r0, r3
 8007480:	f7fe fbde 	bl	8005c40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	3301      	adds	r3, #1
 8007488:	607b      	str	r3, [r7, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b37      	cmp	r3, #55	@ 0x37
 800748e:	d9ef      	bls.n	8007470 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007490:	480d      	ldr	r0, [pc, #52]	@ (80074c8 <prvInitialiseTaskLists+0x64>)
 8007492:	f7fe fbd5 	bl	8005c40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007496:	480d      	ldr	r0, [pc, #52]	@ (80074cc <prvInitialiseTaskLists+0x68>)
 8007498:	f7fe fbd2 	bl	8005c40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800749c:	480c      	ldr	r0, [pc, #48]	@ (80074d0 <prvInitialiseTaskLists+0x6c>)
 800749e:	f7fe fbcf 	bl	8005c40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80074a2:	480c      	ldr	r0, [pc, #48]	@ (80074d4 <prvInitialiseTaskLists+0x70>)
 80074a4:	f7fe fbcc 	bl	8005c40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80074a8:	480b      	ldr	r0, [pc, #44]	@ (80074d8 <prvInitialiseTaskLists+0x74>)
 80074aa:	f7fe fbc9 	bl	8005c40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80074ae:	4b0b      	ldr	r3, [pc, #44]	@ (80074dc <prvInitialiseTaskLists+0x78>)
 80074b0:	4a05      	ldr	r2, [pc, #20]	@ (80074c8 <prvInitialiseTaskLists+0x64>)
 80074b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074b4:	4b0a      	ldr	r3, [pc, #40]	@ (80074e0 <prvInitialiseTaskLists+0x7c>)
 80074b6:	4a05      	ldr	r2, [pc, #20]	@ (80074cc <prvInitialiseTaskLists+0x68>)
 80074b8:	601a      	str	r2, [r3, #0]
}
 80074ba:	bf00      	nop
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	20001028 	.word	0x20001028
 80074c8:	20001488 	.word	0x20001488
 80074cc:	2000149c 	.word	0x2000149c
 80074d0:	200014b8 	.word	0x200014b8
 80074d4:	200014cc 	.word	0x200014cc
 80074d8:	200014e4 	.word	0x200014e4
 80074dc:	200014b0 	.word	0x200014b0
 80074e0:	200014b4 	.word	0x200014b4

080074e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074ea:	e019      	b.n	8007520 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074ec:	f000 fde4 	bl	80080b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074f0:	4b10      	ldr	r3, [pc, #64]	@ (8007534 <prvCheckTasksWaitingTermination+0x50>)
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	3304      	adds	r3, #4
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7fe fc29 	bl	8005d54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007502:	4b0d      	ldr	r3, [pc, #52]	@ (8007538 <prvCheckTasksWaitingTermination+0x54>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3b01      	subs	r3, #1
 8007508:	4a0b      	ldr	r2, [pc, #44]	@ (8007538 <prvCheckTasksWaitingTermination+0x54>)
 800750a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800750c:	4b0b      	ldr	r3, [pc, #44]	@ (800753c <prvCheckTasksWaitingTermination+0x58>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	3b01      	subs	r3, #1
 8007512:	4a0a      	ldr	r2, [pc, #40]	@ (800753c <prvCheckTasksWaitingTermination+0x58>)
 8007514:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007516:	f000 fe01 	bl	800811c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f810 	bl	8007540 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007520:	4b06      	ldr	r3, [pc, #24]	@ (800753c <prvCheckTasksWaitingTermination+0x58>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1e1      	bne.n	80074ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007528:	bf00      	nop
 800752a:	bf00      	nop
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	200014cc 	.word	0x200014cc
 8007538:	200014f8 	.word	0x200014f8
 800753c:	200014e0 	.word	0x200014e0

08007540 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800754e:	2b00      	cmp	r3, #0
 8007550:	d108      	bne.n	8007564 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007556:	4618      	mov	r0, r3
 8007558:	f000 ff9e 	bl	8008498 <vPortFree>
				vPortFree( pxTCB );
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 ff9b 	bl	8008498 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007562:	e019      	b.n	8007598 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800756a:	2b01      	cmp	r3, #1
 800756c:	d103      	bne.n	8007576 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 ff92 	bl	8008498 <vPortFree>
	}
 8007574:	e010      	b.n	8007598 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800757c:	2b02      	cmp	r3, #2
 800757e:	d00b      	beq.n	8007598 <prvDeleteTCB+0x58>
	__asm volatile
 8007580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007584:	f383 8811 	msr	BASEPRI, r3
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	60fb      	str	r3, [r7, #12]
}
 8007592:	bf00      	nop
 8007594:	bf00      	nop
 8007596:	e7fd      	b.n	8007594 <prvDeleteTCB+0x54>
	}
 8007598:	bf00      	nop
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075a6:	4b0c      	ldr	r3, [pc, #48]	@ (80075d8 <prvResetNextTaskUnblockTime+0x38>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d104      	bne.n	80075ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80075b0:	4b0a      	ldr	r3, [pc, #40]	@ (80075dc <prvResetNextTaskUnblockTime+0x3c>)
 80075b2:	f04f 32ff 	mov.w	r2, #4294967295
 80075b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80075b8:	e008      	b.n	80075cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ba:	4b07      	ldr	r3, [pc, #28]	@ (80075d8 <prvResetNextTaskUnblockTime+0x38>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	4a04      	ldr	r2, [pc, #16]	@ (80075dc <prvResetNextTaskUnblockTime+0x3c>)
 80075ca:	6013      	str	r3, [r2, #0]
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	200014b0 	.word	0x200014b0
 80075dc:	20001518 	.word	0x20001518

080075e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007614 <xTaskGetSchedulerState+0x34>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d102      	bne.n	80075f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075ee:	2301      	movs	r3, #1
 80075f0:	607b      	str	r3, [r7, #4]
 80075f2:	e008      	b.n	8007606 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075f4:	4b08      	ldr	r3, [pc, #32]	@ (8007618 <xTaskGetSchedulerState+0x38>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d102      	bne.n	8007602 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075fc:	2302      	movs	r3, #2
 80075fe:	607b      	str	r3, [r7, #4]
 8007600:	e001      	b.n	8007606 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007602:	2300      	movs	r3, #0
 8007604:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007606:	687b      	ldr	r3, [r7, #4]
	}
 8007608:	4618      	mov	r0, r3
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr
 8007614:	20001504 	.word	0x20001504
 8007618:	20001520 	.word	0x20001520

0800761c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007628:	2300      	movs	r3, #0
 800762a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d058      	beq.n	80076e4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007632:	4b2f      	ldr	r3, [pc, #188]	@ (80076f0 <xTaskPriorityDisinherit+0xd4>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	429a      	cmp	r2, r3
 800763a:	d00b      	beq.n	8007654 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800763c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	60fb      	str	r3, [r7, #12]
}
 800764e:	bf00      	nop
 8007650:	bf00      	nop
 8007652:	e7fd      	b.n	8007650 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10b      	bne.n	8007674 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	60bb      	str	r3, [r7, #8]
}
 800766e:	bf00      	nop
 8007670:	bf00      	nop
 8007672:	e7fd      	b.n	8007670 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007678:	1e5a      	subs	r2, r3, #1
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007686:	429a      	cmp	r2, r3
 8007688:	d02c      	beq.n	80076e4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800768e:	2b00      	cmp	r3, #0
 8007690:	d128      	bne.n	80076e4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	3304      	adds	r3, #4
 8007696:	4618      	mov	r0, r3
 8007698:	f7fe fb5c 	bl	8005d54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076b4:	4b0f      	ldr	r3, [pc, #60]	@ (80076f4 <xTaskPriorityDisinherit+0xd8>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d903      	bls.n	80076c4 <xTaskPriorityDisinherit+0xa8>
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c0:	4a0c      	ldr	r2, [pc, #48]	@ (80076f4 <xTaskPriorityDisinherit+0xd8>)
 80076c2:	6013      	str	r3, [r2, #0]
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076c8:	4613      	mov	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4a09      	ldr	r2, [pc, #36]	@ (80076f8 <xTaskPriorityDisinherit+0xdc>)
 80076d2:	441a      	add	r2, r3
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	3304      	adds	r3, #4
 80076d8:	4619      	mov	r1, r3
 80076da:	4610      	mov	r0, r2
 80076dc:	f7fe fadd 	bl	8005c9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80076e0:	2301      	movs	r3, #1
 80076e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076e4:	697b      	ldr	r3, [r7, #20]
	}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3718      	adds	r7, #24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	20001024 	.word	0x20001024
 80076f4:	20001500 	.word	0x20001500
 80076f8:	20001028 	.word	0x20001028

080076fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007706:	4b21      	ldr	r3, [pc, #132]	@ (800778c <prvAddCurrentTaskToDelayedList+0x90>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800770c:	4b20      	ldr	r3, [pc, #128]	@ (8007790 <prvAddCurrentTaskToDelayedList+0x94>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3304      	adds	r3, #4
 8007712:	4618      	mov	r0, r3
 8007714:	f7fe fb1e 	bl	8005d54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771e:	d10a      	bne.n	8007736 <prvAddCurrentTaskToDelayedList+0x3a>
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d007      	beq.n	8007736 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007726:	4b1a      	ldr	r3, [pc, #104]	@ (8007790 <prvAddCurrentTaskToDelayedList+0x94>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	3304      	adds	r3, #4
 800772c:	4619      	mov	r1, r3
 800772e:	4819      	ldr	r0, [pc, #100]	@ (8007794 <prvAddCurrentTaskToDelayedList+0x98>)
 8007730:	f7fe fab3 	bl	8005c9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007734:	e026      	b.n	8007784 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4413      	add	r3, r2
 800773c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800773e:	4b14      	ldr	r3, [pc, #80]	@ (8007790 <prvAddCurrentTaskToDelayedList+0x94>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	429a      	cmp	r2, r3
 800774c:	d209      	bcs.n	8007762 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800774e:	4b12      	ldr	r3, [pc, #72]	@ (8007798 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	4b0f      	ldr	r3, [pc, #60]	@ (8007790 <prvAddCurrentTaskToDelayedList+0x94>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3304      	adds	r3, #4
 8007758:	4619      	mov	r1, r3
 800775a:	4610      	mov	r0, r2
 800775c:	f7fe fac1 	bl	8005ce2 <vListInsert>
}
 8007760:	e010      	b.n	8007784 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007762:	4b0e      	ldr	r3, [pc, #56]	@ (800779c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	4b0a      	ldr	r3, [pc, #40]	@ (8007790 <prvAddCurrentTaskToDelayedList+0x94>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3304      	adds	r3, #4
 800776c:	4619      	mov	r1, r3
 800776e:	4610      	mov	r0, r2
 8007770:	f7fe fab7 	bl	8005ce2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007774:	4b0a      	ldr	r3, [pc, #40]	@ (80077a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	429a      	cmp	r2, r3
 800777c:	d202      	bcs.n	8007784 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800777e:	4a08      	ldr	r2, [pc, #32]	@ (80077a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	6013      	str	r3, [r2, #0]
}
 8007784:	bf00      	nop
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	200014fc 	.word	0x200014fc
 8007790:	20001024 	.word	0x20001024
 8007794:	200014e4 	.word	0x200014e4
 8007798:	200014b4 	.word	0x200014b4
 800779c:	200014b0 	.word	0x200014b0
 80077a0:	20001518 	.word	0x20001518

080077a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b08a      	sub	sp, #40	@ 0x28
 80077a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80077aa:	2300      	movs	r3, #0
 80077ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80077ae:	f000 fb13 	bl	8007dd8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80077b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007828 <xTimerCreateTimerTask+0x84>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d021      	beq.n	80077fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80077be:	2300      	movs	r3, #0
 80077c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80077c2:	1d3a      	adds	r2, r7, #4
 80077c4:	f107 0108 	add.w	r1, r7, #8
 80077c8:	f107 030c 	add.w	r3, r7, #12
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7fe fa1d 	bl	8005c0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	9202      	str	r2, [sp, #8]
 80077da:	9301      	str	r3, [sp, #4]
 80077dc:	2302      	movs	r3, #2
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	2300      	movs	r3, #0
 80077e2:	460a      	mov	r2, r1
 80077e4:	4911      	ldr	r1, [pc, #68]	@ (800782c <xTimerCreateTimerTask+0x88>)
 80077e6:	4812      	ldr	r0, [pc, #72]	@ (8007830 <xTimerCreateTimerTask+0x8c>)
 80077e8:	f7ff f8d0 	bl	800698c <xTaskCreateStatic>
 80077ec:	4603      	mov	r3, r0
 80077ee:	4a11      	ldr	r2, [pc, #68]	@ (8007834 <xTimerCreateTimerTask+0x90>)
 80077f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80077f2:	4b10      	ldr	r3, [pc, #64]	@ (8007834 <xTimerCreateTimerTask+0x90>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d001      	beq.n	80077fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80077fa:	2301      	movs	r3, #1
 80077fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10b      	bne.n	800781c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007808:	f383 8811 	msr	BASEPRI, r3
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	613b      	str	r3, [r7, #16]
}
 8007816:	bf00      	nop
 8007818:	bf00      	nop
 800781a:	e7fd      	b.n	8007818 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800781c:	697b      	ldr	r3, [r7, #20]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20001554 	.word	0x20001554
 800782c:	08009728 	.word	0x08009728
 8007830:	08007971 	.word	0x08007971
 8007834:	20001558 	.word	0x20001558

08007838 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b08a      	sub	sp, #40	@ 0x28
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
 8007844:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007846:	2300      	movs	r3, #0
 8007848:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10b      	bne.n	8007868 <xTimerGenericCommand+0x30>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	623b      	str	r3, [r7, #32]
}
 8007862:	bf00      	nop
 8007864:	bf00      	nop
 8007866:	e7fd      	b.n	8007864 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007868:	4b19      	ldr	r3, [pc, #100]	@ (80078d0 <xTimerGenericCommand+0x98>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d02a      	beq.n	80078c6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2b05      	cmp	r3, #5
 8007880:	dc18      	bgt.n	80078b4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007882:	f7ff fead 	bl	80075e0 <xTaskGetSchedulerState>
 8007886:	4603      	mov	r3, r0
 8007888:	2b02      	cmp	r3, #2
 800788a:	d109      	bne.n	80078a0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800788c:	4b10      	ldr	r3, [pc, #64]	@ (80078d0 <xTimerGenericCommand+0x98>)
 800788e:	6818      	ldr	r0, [r3, #0]
 8007890:	f107 0110 	add.w	r1, r7, #16
 8007894:	2300      	movs	r3, #0
 8007896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007898:	f7fe fc3a 	bl	8006110 <xQueueGenericSend>
 800789c:	6278      	str	r0, [r7, #36]	@ 0x24
 800789e:	e012      	b.n	80078c6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80078a0:	4b0b      	ldr	r3, [pc, #44]	@ (80078d0 <xTimerGenericCommand+0x98>)
 80078a2:	6818      	ldr	r0, [r3, #0]
 80078a4:	f107 0110 	add.w	r1, r7, #16
 80078a8:	2300      	movs	r3, #0
 80078aa:	2200      	movs	r2, #0
 80078ac:	f7fe fc30 	bl	8006110 <xQueueGenericSend>
 80078b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80078b2:	e008      	b.n	80078c6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80078b4:	4b06      	ldr	r3, [pc, #24]	@ (80078d0 <xTimerGenericCommand+0x98>)
 80078b6:	6818      	ldr	r0, [r3, #0]
 80078b8:	f107 0110 	add.w	r1, r7, #16
 80078bc:	2300      	movs	r3, #0
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	f7fe fd28 	bl	8006314 <xQueueGenericSendFromISR>
 80078c4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80078c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3728      	adds	r7, #40	@ 0x28
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	20001554 	.word	0x20001554

080078d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b088      	sub	sp, #32
 80078d8:	af02      	add	r7, sp, #8
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078de:	4b23      	ldr	r3, [pc, #140]	@ (800796c <prvProcessExpiredTimer+0x98>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	3304      	adds	r3, #4
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fe fa31 	bl	8005d54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078f8:	f003 0304 	and.w	r3, r3, #4
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d023      	beq.n	8007948 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	699a      	ldr	r2, [r3, #24]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	18d1      	adds	r1, r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	683a      	ldr	r2, [r7, #0]
 800790c:	6978      	ldr	r0, [r7, #20]
 800790e:	f000 f8d5 	bl	8007abc <prvInsertTimerInActiveList>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d020      	beq.n	800795a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007918:	2300      	movs	r3, #0
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	2300      	movs	r3, #0
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	2100      	movs	r1, #0
 8007922:	6978      	ldr	r0, [r7, #20]
 8007924:	f7ff ff88 	bl	8007838 <xTimerGenericCommand>
 8007928:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d114      	bne.n	800795a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	60fb      	str	r3, [r7, #12]
}
 8007942:	bf00      	nop
 8007944:	bf00      	nop
 8007946:	e7fd      	b.n	8007944 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800794e:	f023 0301 	bic.w	r3, r3, #1
 8007952:	b2da      	uxtb	r2, r3
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	6978      	ldr	r0, [r7, #20]
 8007960:	4798      	blx	r3
}
 8007962:	bf00      	nop
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	2000154c 	.word	0x2000154c

08007970 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007978:	f107 0308 	add.w	r3, r7, #8
 800797c:	4618      	mov	r0, r3
 800797e:	f000 f859 	bl	8007a34 <prvGetNextExpireTime>
 8007982:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	4619      	mov	r1, r3
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 f805 	bl	8007998 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800798e:	f000 f8d7 	bl	8007b40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007992:	bf00      	nop
 8007994:	e7f0      	b.n	8007978 <prvTimerTask+0x8>
	...

08007998 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80079a2:	f7ff fa37 	bl	8006e14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079a6:	f107 0308 	add.w	r3, r7, #8
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 f866 	bl	8007a7c <prvSampleTimeNow>
 80079b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d130      	bne.n	8007a1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10a      	bne.n	80079d4 <prvProcessTimerOrBlockTask+0x3c>
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d806      	bhi.n	80079d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80079c6:	f7ff fa33 	bl	8006e30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80079ca:	68f9      	ldr	r1, [r7, #12]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff ff81 	bl	80078d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80079d2:	e024      	b.n	8007a1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d008      	beq.n	80079ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80079da:	4b13      	ldr	r3, [pc, #76]	@ (8007a28 <prvProcessTimerOrBlockTask+0x90>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d101      	bne.n	80079e8 <prvProcessTimerOrBlockTask+0x50>
 80079e4:	2301      	movs	r3, #1
 80079e6:	e000      	b.n	80079ea <prvProcessTimerOrBlockTask+0x52>
 80079e8:	2300      	movs	r3, #0
 80079ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80079ec:	4b0f      	ldr	r3, [pc, #60]	@ (8007a2c <prvProcessTimerOrBlockTask+0x94>)
 80079ee:	6818      	ldr	r0, [r3, #0]
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	4619      	mov	r1, r3
 80079fa:	f7fe ff93 	bl	8006924 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80079fe:	f7ff fa17 	bl	8006e30 <xTaskResumeAll>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10a      	bne.n	8007a1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a08:	4b09      	ldr	r3, [pc, #36]	@ (8007a30 <prvProcessTimerOrBlockTask+0x98>)
 8007a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a0e:	601a      	str	r2, [r3, #0]
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	f3bf 8f6f 	isb	sy
}
 8007a18:	e001      	b.n	8007a1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a1a:	f7ff fa09 	bl	8006e30 <xTaskResumeAll>
}
 8007a1e:	bf00      	nop
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20001550 	.word	0x20001550
 8007a2c:	20001554 	.word	0x20001554
 8007a30:	e000ed04 	.word	0xe000ed04

08007a34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8007a78 <prvGetNextExpireTime+0x44>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <prvGetNextExpireTime+0x16>
 8007a46:	2201      	movs	r2, #1
 8007a48:	e000      	b.n	8007a4c <prvGetNextExpireTime+0x18>
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d105      	bne.n	8007a64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a58:	4b07      	ldr	r3, [pc, #28]	@ (8007a78 <prvGetNextExpireTime+0x44>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	60fb      	str	r3, [r7, #12]
 8007a62:	e001      	b.n	8007a68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007a68:	68fb      	ldr	r3, [r7, #12]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	2000154c 	.word	0x2000154c

08007a7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a84:	f7ff fa72 	bl	8006f6c <xTaskGetTickCount>
 8007a88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab8 <prvSampleTimeNow+0x3c>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d205      	bcs.n	8007aa0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a94:	f000 f93a 	bl	8007d0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	e002      	b.n	8007aa6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007aa6:	4a04      	ldr	r2, [pc, #16]	@ (8007ab8 <prvSampleTimeNow+0x3c>)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007aac:	68fb      	ldr	r3, [r7, #12]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	2000155c 	.word	0x2000155c

08007abc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
 8007ac8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007aca:	2300      	movs	r3, #0
 8007acc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d812      	bhi.n	8007b08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	1ad2      	subs	r2, r2, r3
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d302      	bcc.n	8007af6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007af0:	2301      	movs	r3, #1
 8007af2:	617b      	str	r3, [r7, #20]
 8007af4:	e01b      	b.n	8007b2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007af6:	4b10      	ldr	r3, [pc, #64]	@ (8007b38 <prvInsertTimerInActiveList+0x7c>)
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	3304      	adds	r3, #4
 8007afe:	4619      	mov	r1, r3
 8007b00:	4610      	mov	r0, r2
 8007b02:	f7fe f8ee 	bl	8005ce2 <vListInsert>
 8007b06:	e012      	b.n	8007b2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d206      	bcs.n	8007b1e <prvInsertTimerInActiveList+0x62>
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d302      	bcc.n	8007b1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	617b      	str	r3, [r7, #20]
 8007b1c:	e007      	b.n	8007b2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b1e:	4b07      	ldr	r3, [pc, #28]	@ (8007b3c <prvInsertTimerInActiveList+0x80>)
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3304      	adds	r3, #4
 8007b26:	4619      	mov	r1, r3
 8007b28:	4610      	mov	r0, r2
 8007b2a:	f7fe f8da 	bl	8005ce2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b2e:	697b      	ldr	r3, [r7, #20]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3718      	adds	r7, #24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	20001550 	.word	0x20001550
 8007b3c:	2000154c 	.word	0x2000154c

08007b40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b08e      	sub	sp, #56	@ 0x38
 8007b44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b46:	e0ce      	b.n	8007ce6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	da19      	bge.n	8007b82 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b4e:	1d3b      	adds	r3, r7, #4
 8007b50:	3304      	adds	r3, #4
 8007b52:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10b      	bne.n	8007b72 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	61fb      	str	r3, [r7, #28]
}
 8007b6c:	bf00      	nop
 8007b6e:	bf00      	nop
 8007b70:	e7fd      	b.n	8007b6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b78:	6850      	ldr	r0, [r2, #4]
 8007b7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b7c:	6892      	ldr	r2, [r2, #8]
 8007b7e:	4611      	mov	r1, r2
 8007b80:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f2c0 80ae 	blt.w	8007ce6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d004      	beq.n	8007ba0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b98:	3304      	adds	r3, #4
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fe f8da 	bl	8005d54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ba0:	463b      	mov	r3, r7
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7ff ff6a 	bl	8007a7c <prvSampleTimeNow>
 8007ba8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2b09      	cmp	r3, #9
 8007bae:	f200 8097 	bhi.w	8007ce0 <prvProcessReceivedCommands+0x1a0>
 8007bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb8 <prvProcessReceivedCommands+0x78>)
 8007bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb8:	08007be1 	.word	0x08007be1
 8007bbc:	08007be1 	.word	0x08007be1
 8007bc0:	08007be1 	.word	0x08007be1
 8007bc4:	08007c57 	.word	0x08007c57
 8007bc8:	08007c6b 	.word	0x08007c6b
 8007bcc:	08007cb7 	.word	0x08007cb7
 8007bd0:	08007be1 	.word	0x08007be1
 8007bd4:	08007be1 	.word	0x08007be1
 8007bd8:	08007c57 	.word	0x08007c57
 8007bdc:	08007c6b 	.word	0x08007c6b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007be6:	f043 0301 	orr.w	r3, r3, #1
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	18d1      	adds	r1, r2, r3
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c00:	f7ff ff5c 	bl	8007abc <prvInsertTimerInActiveList>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d06c      	beq.n	8007ce4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0c:	6a1b      	ldr	r3, [r3, #32]
 8007c0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c18:	f003 0304 	and.w	r3, r3, #4
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d061      	beq.n	8007ce4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	441a      	add	r2, r3
 8007c28:	2300      	movs	r3, #0
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	2100      	movs	r1, #0
 8007c30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c32:	f7ff fe01 	bl	8007838 <xTimerGenericCommand>
 8007c36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d152      	bne.n	8007ce4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	61bb      	str	r3, [r7, #24]
}
 8007c50:	bf00      	nop
 8007c52:	bf00      	nop
 8007c54:	e7fd      	b.n	8007c52 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c5c:	f023 0301 	bic.w	r3, r3, #1
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007c68:	e03d      	b.n	8007ce6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c70:	f043 0301 	orr.w	r3, r3, #1
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c80:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10b      	bne.n	8007ca2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	617b      	str	r3, [r7, #20]
}
 8007c9c:	bf00      	nop
 8007c9e:	bf00      	nop
 8007ca0:	e7fd      	b.n	8007c9e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca4:	699a      	ldr	r2, [r3, #24]
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca8:	18d1      	adds	r1, r2, r3
 8007caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cb0:	f7ff ff04 	bl	8007abc <prvInsertTimerInActiveList>
					break;
 8007cb4:	e017      	b.n	8007ce6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cbc:	f003 0302 	and.w	r3, r3, #2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d103      	bne.n	8007ccc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007cc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cc6:	f000 fbe7 	bl	8008498 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007cca:	e00c      	b.n	8007ce6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cd2:	f023 0301 	bic.w	r3, r3, #1
 8007cd6:	b2da      	uxtb	r2, r3
 8007cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007cde:	e002      	b.n	8007ce6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007ce0:	bf00      	nop
 8007ce2:	e000      	b.n	8007ce6 <prvProcessReceivedCommands+0x1a6>
					break;
 8007ce4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ce6:	4b08      	ldr	r3, [pc, #32]	@ (8007d08 <prvProcessReceivedCommands+0x1c8>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	1d39      	adds	r1, r7, #4
 8007cec:	2200      	movs	r2, #0
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fe fbae 	bl	8006450 <xQueueReceive>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f47f af26 	bne.w	8007b48 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007cfc:	bf00      	nop
 8007cfe:	bf00      	nop
 8007d00:	3730      	adds	r7, #48	@ 0x30
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20001554 	.word	0x20001554

08007d0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b088      	sub	sp, #32
 8007d10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d12:	e049      	b.n	8007da8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d14:	4b2e      	ldr	r3, [pc, #184]	@ (8007dd0 <prvSwitchTimerLists+0xc4>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d1e:	4b2c      	ldr	r3, [pc, #176]	@ (8007dd0 <prvSwitchTimerLists+0xc4>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	3304      	adds	r3, #4
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fe f811 	bl	8005d54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d40:	f003 0304 	and.w	r3, r3, #4
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d02f      	beq.n	8007da8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	4413      	add	r3, r2
 8007d50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d52:	68ba      	ldr	r2, [r7, #8]
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d90e      	bls.n	8007d78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d66:	4b1a      	ldr	r3, [pc, #104]	@ (8007dd0 <prvSwitchTimerLists+0xc4>)
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	4619      	mov	r1, r3
 8007d70:	4610      	mov	r0, r2
 8007d72:	f7fd ffb6 	bl	8005ce2 <vListInsert>
 8007d76:	e017      	b.n	8007da8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d78:	2300      	movs	r3, #0
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	693a      	ldr	r2, [r7, #16]
 8007d80:	2100      	movs	r1, #0
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f7ff fd58 	bl	8007838 <xTimerGenericCommand>
 8007d88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10b      	bne.n	8007da8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	603b      	str	r3, [r7, #0]
}
 8007da2:	bf00      	nop
 8007da4:	bf00      	nop
 8007da6:	e7fd      	b.n	8007da4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007da8:	4b09      	ldr	r3, [pc, #36]	@ (8007dd0 <prvSwitchTimerLists+0xc4>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1b0      	bne.n	8007d14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007db2:	4b07      	ldr	r3, [pc, #28]	@ (8007dd0 <prvSwitchTimerLists+0xc4>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007db8:	4b06      	ldr	r3, [pc, #24]	@ (8007dd4 <prvSwitchTimerLists+0xc8>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a04      	ldr	r2, [pc, #16]	@ (8007dd0 <prvSwitchTimerLists+0xc4>)
 8007dbe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007dc0:	4a04      	ldr	r2, [pc, #16]	@ (8007dd4 <prvSwitchTimerLists+0xc8>)
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	6013      	str	r3, [r2, #0]
}
 8007dc6:	bf00      	nop
 8007dc8:	3718      	adds	r7, #24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	2000154c 	.word	0x2000154c
 8007dd4:	20001550 	.word	0x20001550

08007dd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007dde:	f000 f96b 	bl	80080b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007de2:	4b15      	ldr	r3, [pc, #84]	@ (8007e38 <prvCheckForValidListAndQueue+0x60>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d120      	bne.n	8007e2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007dea:	4814      	ldr	r0, [pc, #80]	@ (8007e3c <prvCheckForValidListAndQueue+0x64>)
 8007dec:	f7fd ff28 	bl	8005c40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007df0:	4813      	ldr	r0, [pc, #76]	@ (8007e40 <prvCheckForValidListAndQueue+0x68>)
 8007df2:	f7fd ff25 	bl	8005c40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007df6:	4b13      	ldr	r3, [pc, #76]	@ (8007e44 <prvCheckForValidListAndQueue+0x6c>)
 8007df8:	4a10      	ldr	r2, [pc, #64]	@ (8007e3c <prvCheckForValidListAndQueue+0x64>)
 8007dfa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007dfc:	4b12      	ldr	r3, [pc, #72]	@ (8007e48 <prvCheckForValidListAndQueue+0x70>)
 8007dfe:	4a10      	ldr	r2, [pc, #64]	@ (8007e40 <prvCheckForValidListAndQueue+0x68>)
 8007e00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e02:	2300      	movs	r3, #0
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	4b11      	ldr	r3, [pc, #68]	@ (8007e4c <prvCheckForValidListAndQueue+0x74>)
 8007e08:	4a11      	ldr	r2, [pc, #68]	@ (8007e50 <prvCheckForValidListAndQueue+0x78>)
 8007e0a:	2110      	movs	r1, #16
 8007e0c:	200a      	movs	r0, #10
 8007e0e:	f7fe f835 	bl	8005e7c <xQueueGenericCreateStatic>
 8007e12:	4603      	mov	r3, r0
 8007e14:	4a08      	ldr	r2, [pc, #32]	@ (8007e38 <prvCheckForValidListAndQueue+0x60>)
 8007e16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e18:	4b07      	ldr	r3, [pc, #28]	@ (8007e38 <prvCheckForValidListAndQueue+0x60>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d005      	beq.n	8007e2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e20:	4b05      	ldr	r3, [pc, #20]	@ (8007e38 <prvCheckForValidListAndQueue+0x60>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	490b      	ldr	r1, [pc, #44]	@ (8007e54 <prvCheckForValidListAndQueue+0x7c>)
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fe fd28 	bl	800687c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e2c:	f000 f976 	bl	800811c <vPortExitCritical>
}
 8007e30:	bf00      	nop
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	20001554 	.word	0x20001554
 8007e3c:	20001524 	.word	0x20001524
 8007e40:	20001538 	.word	0x20001538
 8007e44:	2000154c 	.word	0x2000154c
 8007e48:	20001550 	.word	0x20001550
 8007e4c:	20001600 	.word	0x20001600
 8007e50:	20001560 	.word	0x20001560
 8007e54:	08009730 	.word	0x08009730

08007e58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	3b04      	subs	r3, #4
 8007e68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007e70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3b04      	subs	r3, #4
 8007e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	f023 0201 	bic.w	r2, r3, #1
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3b04      	subs	r3, #4
 8007e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e88:	4a0c      	ldr	r2, [pc, #48]	@ (8007ebc <pxPortInitialiseStack+0x64>)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	3b14      	subs	r3, #20
 8007e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3b04      	subs	r3, #4
 8007e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f06f 0202 	mvn.w	r2, #2
 8007ea6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3b20      	subs	r3, #32
 8007eac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007eae:	68fb      	ldr	r3, [r7, #12]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	08007ec1 	.word	0x08007ec1

08007ec0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007eca:	4b13      	ldr	r3, [pc, #76]	@ (8007f18 <prvTaskExitError+0x58>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed2:	d00b      	beq.n	8007eec <prvTaskExitError+0x2c>
	__asm volatile
 8007ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed8:	f383 8811 	msr	BASEPRI, r3
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f3bf 8f4f 	dsb	sy
 8007ee4:	60fb      	str	r3, [r7, #12]
}
 8007ee6:	bf00      	nop
 8007ee8:	bf00      	nop
 8007eea:	e7fd      	b.n	8007ee8 <prvTaskExitError+0x28>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	60bb      	str	r3, [r7, #8]
}
 8007efe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f00:	bf00      	nop
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d0fc      	beq.n	8007f02 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f08:	bf00      	nop
 8007f0a:	bf00      	nop
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	2000000c 	.word	0x2000000c
 8007f1c:	00000000 	.word	0x00000000

08007f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f20:	4b07      	ldr	r3, [pc, #28]	@ (8007f40 <pxCurrentTCBConst2>)
 8007f22:	6819      	ldr	r1, [r3, #0]
 8007f24:	6808      	ldr	r0, [r1, #0]
 8007f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f2a:	f380 8809 	msr	PSP, r0
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f04f 0000 	mov.w	r0, #0
 8007f36:	f380 8811 	msr	BASEPRI, r0
 8007f3a:	4770      	bx	lr
 8007f3c:	f3af 8000 	nop.w

08007f40 <pxCurrentTCBConst2>:
 8007f40:	20001024 	.word	0x20001024
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f44:	bf00      	nop
 8007f46:	bf00      	nop

08007f48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f48:	4808      	ldr	r0, [pc, #32]	@ (8007f6c <prvPortStartFirstTask+0x24>)
 8007f4a:	6800      	ldr	r0, [r0, #0]
 8007f4c:	6800      	ldr	r0, [r0, #0]
 8007f4e:	f380 8808 	msr	MSP, r0
 8007f52:	f04f 0000 	mov.w	r0, #0
 8007f56:	f380 8814 	msr	CONTROL, r0
 8007f5a:	b662      	cpsie	i
 8007f5c:	b661      	cpsie	f
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	df00      	svc	0
 8007f68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f6a:	bf00      	nop
 8007f6c:	e000ed08 	.word	0xe000ed08

08007f70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f76:	4b47      	ldr	r3, [pc, #284]	@ (8008094 <xPortStartScheduler+0x124>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a47      	ldr	r2, [pc, #284]	@ (8008098 <xPortStartScheduler+0x128>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d10b      	bne.n	8007f98 <xPortStartScheduler+0x28>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	60fb      	str	r3, [r7, #12]
}
 8007f92:	bf00      	nop
 8007f94:	bf00      	nop
 8007f96:	e7fd      	b.n	8007f94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f98:	4b3e      	ldr	r3, [pc, #248]	@ (8008094 <xPortStartScheduler+0x124>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a3f      	ldr	r2, [pc, #252]	@ (800809c <xPortStartScheduler+0x12c>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d10b      	bne.n	8007fba <xPortStartScheduler+0x4a>
	__asm volatile
 8007fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa6:	f383 8811 	msr	BASEPRI, r3
 8007faa:	f3bf 8f6f 	isb	sy
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	613b      	str	r3, [r7, #16]
}
 8007fb4:	bf00      	nop
 8007fb6:	bf00      	nop
 8007fb8:	e7fd      	b.n	8007fb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007fba:	4b39      	ldr	r3, [pc, #228]	@ (80080a0 <xPortStartScheduler+0x130>)
 8007fbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	22ff      	movs	r2, #255	@ 0xff
 8007fca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fd4:	78fb      	ldrb	r3, [r7, #3]
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	4b31      	ldr	r3, [pc, #196]	@ (80080a4 <xPortStartScheduler+0x134>)
 8007fe0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007fe2:	4b31      	ldr	r3, [pc, #196]	@ (80080a8 <xPortStartScheduler+0x138>)
 8007fe4:	2207      	movs	r2, #7
 8007fe6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fe8:	e009      	b.n	8007ffe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007fea:	4b2f      	ldr	r3, [pc, #188]	@ (80080a8 <xPortStartScheduler+0x138>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	4a2d      	ldr	r2, [pc, #180]	@ (80080a8 <xPortStartScheduler+0x138>)
 8007ff2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ff4:	78fb      	ldrb	r3, [r7, #3]
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	005b      	lsls	r3, r3, #1
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ffe:	78fb      	ldrb	r3, [r7, #3]
 8008000:	b2db      	uxtb	r3, r3
 8008002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008006:	2b80      	cmp	r3, #128	@ 0x80
 8008008:	d0ef      	beq.n	8007fea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800800a:	4b27      	ldr	r3, [pc, #156]	@ (80080a8 <xPortStartScheduler+0x138>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f1c3 0307 	rsb	r3, r3, #7
 8008012:	2b04      	cmp	r3, #4
 8008014:	d00b      	beq.n	800802e <xPortStartScheduler+0xbe>
	__asm volatile
 8008016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801a:	f383 8811 	msr	BASEPRI, r3
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	60bb      	str	r3, [r7, #8]
}
 8008028:	bf00      	nop
 800802a:	bf00      	nop
 800802c:	e7fd      	b.n	800802a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800802e:	4b1e      	ldr	r3, [pc, #120]	@ (80080a8 <xPortStartScheduler+0x138>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	021b      	lsls	r3, r3, #8
 8008034:	4a1c      	ldr	r2, [pc, #112]	@ (80080a8 <xPortStartScheduler+0x138>)
 8008036:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008038:	4b1b      	ldr	r3, [pc, #108]	@ (80080a8 <xPortStartScheduler+0x138>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008040:	4a19      	ldr	r2, [pc, #100]	@ (80080a8 <xPortStartScheduler+0x138>)
 8008042:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	b2da      	uxtb	r2, r3
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800804c:	4b17      	ldr	r3, [pc, #92]	@ (80080ac <xPortStartScheduler+0x13c>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a16      	ldr	r2, [pc, #88]	@ (80080ac <xPortStartScheduler+0x13c>)
 8008052:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008056:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008058:	4b14      	ldr	r3, [pc, #80]	@ (80080ac <xPortStartScheduler+0x13c>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a13      	ldr	r2, [pc, #76]	@ (80080ac <xPortStartScheduler+0x13c>)
 800805e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008062:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008064:	f000 f8da 	bl	800821c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008068:	4b11      	ldr	r3, [pc, #68]	@ (80080b0 <xPortStartScheduler+0x140>)
 800806a:	2200      	movs	r2, #0
 800806c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800806e:	f000 f8f9 	bl	8008264 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008072:	4b10      	ldr	r3, [pc, #64]	@ (80080b4 <xPortStartScheduler+0x144>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a0f      	ldr	r2, [pc, #60]	@ (80080b4 <xPortStartScheduler+0x144>)
 8008078:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800807c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800807e:	f7ff ff63 	bl	8007f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008082:	f7ff f83d 	bl	8007100 <vTaskSwitchContext>
	prvTaskExitError();
 8008086:	f7ff ff1b 	bl	8007ec0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3718      	adds	r7, #24
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	e000ed00 	.word	0xe000ed00
 8008098:	410fc271 	.word	0x410fc271
 800809c:	410fc270 	.word	0x410fc270
 80080a0:	e000e400 	.word	0xe000e400
 80080a4:	20001650 	.word	0x20001650
 80080a8:	20001654 	.word	0x20001654
 80080ac:	e000ed20 	.word	0xe000ed20
 80080b0:	2000000c 	.word	0x2000000c
 80080b4:	e000ef34 	.word	0xe000ef34

080080b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
	__asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	607b      	str	r3, [r7, #4]
}
 80080d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080d2:	4b10      	ldr	r3, [pc, #64]	@ (8008114 <vPortEnterCritical+0x5c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	3301      	adds	r3, #1
 80080d8:	4a0e      	ldr	r2, [pc, #56]	@ (8008114 <vPortEnterCritical+0x5c>)
 80080da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080dc:	4b0d      	ldr	r3, [pc, #52]	@ (8008114 <vPortEnterCritical+0x5c>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d110      	bne.n	8008106 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008118 <vPortEnterCritical+0x60>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00b      	beq.n	8008106 <vPortEnterCritical+0x4e>
	__asm volatile
 80080ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f2:	f383 8811 	msr	BASEPRI, r3
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	603b      	str	r3, [r7, #0]
}
 8008100:	bf00      	nop
 8008102:	bf00      	nop
 8008104:	e7fd      	b.n	8008102 <vPortEnterCritical+0x4a>
	}
}
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	2000000c 	.word	0x2000000c
 8008118:	e000ed04 	.word	0xe000ed04

0800811c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008122:	4b12      	ldr	r3, [pc, #72]	@ (800816c <vPortExitCritical+0x50>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10b      	bne.n	8008142 <vPortExitCritical+0x26>
	__asm volatile
 800812a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	607b      	str	r3, [r7, #4]
}
 800813c:	bf00      	nop
 800813e:	bf00      	nop
 8008140:	e7fd      	b.n	800813e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008142:	4b0a      	ldr	r3, [pc, #40]	@ (800816c <vPortExitCritical+0x50>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	3b01      	subs	r3, #1
 8008148:	4a08      	ldr	r2, [pc, #32]	@ (800816c <vPortExitCritical+0x50>)
 800814a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800814c:	4b07      	ldr	r3, [pc, #28]	@ (800816c <vPortExitCritical+0x50>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d105      	bne.n	8008160 <vPortExitCritical+0x44>
 8008154:	2300      	movs	r3, #0
 8008156:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	f383 8811 	msr	BASEPRI, r3
}
 800815e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008160:	bf00      	nop
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr
 800816c:	2000000c 	.word	0x2000000c

08008170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008170:	f3ef 8009 	mrs	r0, PSP
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	4b15      	ldr	r3, [pc, #84]	@ (80081d0 <pxCurrentTCBConst>)
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	f01e 0f10 	tst.w	lr, #16
 8008180:	bf08      	it	eq
 8008182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800818a:	6010      	str	r0, [r2, #0]
 800818c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008190:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008194:	f380 8811 	msr	BASEPRI, r0
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f7fe ffae 	bl	8007100 <vTaskSwitchContext>
 80081a4:	f04f 0000 	mov.w	r0, #0
 80081a8:	f380 8811 	msr	BASEPRI, r0
 80081ac:	bc09      	pop	{r0, r3}
 80081ae:	6819      	ldr	r1, [r3, #0]
 80081b0:	6808      	ldr	r0, [r1, #0]
 80081b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b6:	f01e 0f10 	tst.w	lr, #16
 80081ba:	bf08      	it	eq
 80081bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081c0:	f380 8809 	msr	PSP, r0
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	f3af 8000 	nop.w

080081d0 <pxCurrentTCBConst>:
 80081d0:	20001024 	.word	0x20001024
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop

080081d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	607b      	str	r3, [r7, #4]
}
 80081f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081f2:	f7fe fecb 	bl	8006f8c <xTaskIncrementTick>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d003      	beq.n	8008204 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081fc:	4b06      	ldr	r3, [pc, #24]	@ (8008218 <xPortSysTickHandler+0x40>)
 80081fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	2300      	movs	r3, #0
 8008206:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	f383 8811 	msr	BASEPRI, r3
}
 800820e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008210:	bf00      	nop
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	e000ed04 	.word	0xe000ed04

0800821c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800821c:	b480      	push	{r7}
 800821e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008220:	4b0b      	ldr	r3, [pc, #44]	@ (8008250 <vPortSetupTimerInterrupt+0x34>)
 8008222:	2200      	movs	r2, #0
 8008224:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008226:	4b0b      	ldr	r3, [pc, #44]	@ (8008254 <vPortSetupTimerInterrupt+0x38>)
 8008228:	2200      	movs	r2, #0
 800822a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800822c:	4b0a      	ldr	r3, [pc, #40]	@ (8008258 <vPortSetupTimerInterrupt+0x3c>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a0a      	ldr	r2, [pc, #40]	@ (800825c <vPortSetupTimerInterrupt+0x40>)
 8008232:	fba2 2303 	umull	r2, r3, r2, r3
 8008236:	099b      	lsrs	r3, r3, #6
 8008238:	4a09      	ldr	r2, [pc, #36]	@ (8008260 <vPortSetupTimerInterrupt+0x44>)
 800823a:	3b01      	subs	r3, #1
 800823c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800823e:	4b04      	ldr	r3, [pc, #16]	@ (8008250 <vPortSetupTimerInterrupt+0x34>)
 8008240:	2207      	movs	r2, #7
 8008242:	601a      	str	r2, [r3, #0]
}
 8008244:	bf00      	nop
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	e000e010 	.word	0xe000e010
 8008254:	e000e018 	.word	0xe000e018
 8008258:	20000000 	.word	0x20000000
 800825c:	10624dd3 	.word	0x10624dd3
 8008260:	e000e014 	.word	0xe000e014

08008264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008264:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008274 <vPortEnableVFP+0x10>
 8008268:	6801      	ldr	r1, [r0, #0]
 800826a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800826e:	6001      	str	r1, [r0, #0]
 8008270:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008272:	bf00      	nop
 8008274:	e000ed88 	.word	0xe000ed88

08008278 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800827e:	f3ef 8305 	mrs	r3, IPSR
 8008282:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2b0f      	cmp	r3, #15
 8008288:	d915      	bls.n	80082b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800828a:	4a18      	ldr	r2, [pc, #96]	@ (80082ec <vPortValidateInterruptPriority+0x74>)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	4413      	add	r3, r2
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008294:	4b16      	ldr	r3, [pc, #88]	@ (80082f0 <vPortValidateInterruptPriority+0x78>)
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	7afa      	ldrb	r2, [r7, #11]
 800829a:	429a      	cmp	r2, r3
 800829c:	d20b      	bcs.n	80082b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800829e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	607b      	str	r3, [r7, #4]
}
 80082b0:	bf00      	nop
 80082b2:	bf00      	nop
 80082b4:	e7fd      	b.n	80082b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80082b6:	4b0f      	ldr	r3, [pc, #60]	@ (80082f4 <vPortValidateInterruptPriority+0x7c>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80082be:	4b0e      	ldr	r3, [pc, #56]	@ (80082f8 <vPortValidateInterruptPriority+0x80>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d90b      	bls.n	80082de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80082c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ca:	f383 8811 	msr	BASEPRI, r3
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	603b      	str	r3, [r7, #0]
}
 80082d8:	bf00      	nop
 80082da:	bf00      	nop
 80082dc:	e7fd      	b.n	80082da <vPortValidateInterruptPriority+0x62>
	}
 80082de:	bf00      	nop
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	e000e3f0 	.word	0xe000e3f0
 80082f0:	20001650 	.word	0x20001650
 80082f4:	e000ed0c 	.word	0xe000ed0c
 80082f8:	20001654 	.word	0x20001654

080082fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b08a      	sub	sp, #40	@ 0x28
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008304:	2300      	movs	r3, #0
 8008306:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008308:	f7fe fd84 	bl	8006e14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800830c:	4b5c      	ldr	r3, [pc, #368]	@ (8008480 <pvPortMalloc+0x184>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d101      	bne.n	8008318 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008314:	f000 f924 	bl	8008560 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008318:	4b5a      	ldr	r3, [pc, #360]	@ (8008484 <pvPortMalloc+0x188>)
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4013      	ands	r3, r2
 8008320:	2b00      	cmp	r3, #0
 8008322:	f040 8095 	bne.w	8008450 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d01e      	beq.n	800836a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800832c:	2208      	movs	r2, #8
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4413      	add	r3, r2
 8008332:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f003 0307 	and.w	r3, r3, #7
 800833a:	2b00      	cmp	r3, #0
 800833c:	d015      	beq.n	800836a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f023 0307 	bic.w	r3, r3, #7
 8008344:	3308      	adds	r3, #8
 8008346:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f003 0307 	and.w	r3, r3, #7
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00b      	beq.n	800836a <pvPortMalloc+0x6e>
	__asm volatile
 8008352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	617b      	str	r3, [r7, #20]
}
 8008364:	bf00      	nop
 8008366:	bf00      	nop
 8008368:	e7fd      	b.n	8008366 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d06f      	beq.n	8008450 <pvPortMalloc+0x154>
 8008370:	4b45      	ldr	r3, [pc, #276]	@ (8008488 <pvPortMalloc+0x18c>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	429a      	cmp	r2, r3
 8008378:	d86a      	bhi.n	8008450 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800837a:	4b44      	ldr	r3, [pc, #272]	@ (800848c <pvPortMalloc+0x190>)
 800837c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800837e:	4b43      	ldr	r3, [pc, #268]	@ (800848c <pvPortMalloc+0x190>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008384:	e004      	b.n	8008390 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008388:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800838a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	429a      	cmp	r2, r3
 8008398:	d903      	bls.n	80083a2 <pvPortMalloc+0xa6>
 800839a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1f1      	bne.n	8008386 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083a2:	4b37      	ldr	r3, [pc, #220]	@ (8008480 <pvPortMalloc+0x184>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d051      	beq.n	8008450 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083ac:	6a3b      	ldr	r3, [r7, #32]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2208      	movs	r2, #8
 80083b2:	4413      	add	r3, r2
 80083b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80083b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80083be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c0:	685a      	ldr	r2, [r3, #4]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	1ad2      	subs	r2, r2, r3
 80083c6:	2308      	movs	r3, #8
 80083c8:	005b      	lsls	r3, r3, #1
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d920      	bls.n	8008410 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4413      	add	r3, r2
 80083d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	f003 0307 	and.w	r3, r3, #7
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00b      	beq.n	80083f8 <pvPortMalloc+0xfc>
	__asm volatile
 80083e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e4:	f383 8811 	msr	BASEPRI, r3
 80083e8:	f3bf 8f6f 	isb	sy
 80083ec:	f3bf 8f4f 	dsb	sy
 80083f0:	613b      	str	r3, [r7, #16]
}
 80083f2:	bf00      	nop
 80083f4:	bf00      	nop
 80083f6:	e7fd      	b.n	80083f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	1ad2      	subs	r2, r2, r3
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800840a:	69b8      	ldr	r0, [r7, #24]
 800840c:	f000 f90a 	bl	8008624 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008410:	4b1d      	ldr	r3, [pc, #116]	@ (8008488 <pvPortMalloc+0x18c>)
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	4a1b      	ldr	r2, [pc, #108]	@ (8008488 <pvPortMalloc+0x18c>)
 800841c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800841e:	4b1a      	ldr	r3, [pc, #104]	@ (8008488 <pvPortMalloc+0x18c>)
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	4b1b      	ldr	r3, [pc, #108]	@ (8008490 <pvPortMalloc+0x194>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	429a      	cmp	r2, r3
 8008428:	d203      	bcs.n	8008432 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800842a:	4b17      	ldr	r3, [pc, #92]	@ (8008488 <pvPortMalloc+0x18c>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a18      	ldr	r2, [pc, #96]	@ (8008490 <pvPortMalloc+0x194>)
 8008430:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	4b13      	ldr	r3, [pc, #76]	@ (8008484 <pvPortMalloc+0x188>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	431a      	orrs	r2, r3
 800843c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008442:	2200      	movs	r2, #0
 8008444:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008446:	4b13      	ldr	r3, [pc, #76]	@ (8008494 <pvPortMalloc+0x198>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	3301      	adds	r3, #1
 800844c:	4a11      	ldr	r2, [pc, #68]	@ (8008494 <pvPortMalloc+0x198>)
 800844e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008450:	f7fe fcee 	bl	8006e30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	f003 0307 	and.w	r3, r3, #7
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00b      	beq.n	8008476 <pvPortMalloc+0x17a>
	__asm volatile
 800845e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	60fb      	str	r3, [r7, #12]
}
 8008470:	bf00      	nop
 8008472:	bf00      	nop
 8008474:	e7fd      	b.n	8008472 <pvPortMalloc+0x176>
	return pvReturn;
 8008476:	69fb      	ldr	r3, [r7, #28]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3728      	adds	r7, #40	@ 0x28
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	20002218 	.word	0x20002218
 8008484:	2000222c 	.word	0x2000222c
 8008488:	2000221c 	.word	0x2000221c
 800848c:	20002210 	.word	0x20002210
 8008490:	20002220 	.word	0x20002220
 8008494:	20002224 	.word	0x20002224

08008498 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b086      	sub	sp, #24
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d04f      	beq.n	800854a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084aa:	2308      	movs	r3, #8
 80084ac:	425b      	negs	r3, r3
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	4413      	add	r3, r2
 80084b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	4b25      	ldr	r3, [pc, #148]	@ (8008554 <vPortFree+0xbc>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4013      	ands	r3, r2
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10b      	bne.n	80084de <vPortFree+0x46>
	__asm volatile
 80084c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	60fb      	str	r3, [r7, #12]
}
 80084d8:	bf00      	nop
 80084da:	bf00      	nop
 80084dc:	e7fd      	b.n	80084da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00b      	beq.n	80084fe <vPortFree+0x66>
	__asm volatile
 80084e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	60bb      	str	r3, [r7, #8]
}
 80084f8:	bf00      	nop
 80084fa:	bf00      	nop
 80084fc:	e7fd      	b.n	80084fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	4b14      	ldr	r3, [pc, #80]	@ (8008554 <vPortFree+0xbc>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4013      	ands	r3, r2
 8008508:	2b00      	cmp	r3, #0
 800850a:	d01e      	beq.n	800854a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d11a      	bne.n	800854a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	685a      	ldr	r2, [r3, #4]
 8008518:	4b0e      	ldr	r3, [pc, #56]	@ (8008554 <vPortFree+0xbc>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	43db      	mvns	r3, r3
 800851e:	401a      	ands	r2, r3
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008524:	f7fe fc76 	bl	8006e14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	4b0a      	ldr	r3, [pc, #40]	@ (8008558 <vPortFree+0xc0>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4413      	add	r3, r2
 8008532:	4a09      	ldr	r2, [pc, #36]	@ (8008558 <vPortFree+0xc0>)
 8008534:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008536:	6938      	ldr	r0, [r7, #16]
 8008538:	f000 f874 	bl	8008624 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800853c:	4b07      	ldr	r3, [pc, #28]	@ (800855c <vPortFree+0xc4>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	3301      	adds	r3, #1
 8008542:	4a06      	ldr	r2, [pc, #24]	@ (800855c <vPortFree+0xc4>)
 8008544:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008546:	f7fe fc73 	bl	8006e30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800854a:	bf00      	nop
 800854c:	3718      	adds	r7, #24
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	2000222c 	.word	0x2000222c
 8008558:	2000221c 	.word	0x2000221c
 800855c:	20002228 	.word	0x20002228

08008560 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008566:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800856a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800856c:	4b27      	ldr	r3, [pc, #156]	@ (800860c <prvHeapInit+0xac>)
 800856e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f003 0307 	and.w	r3, r3, #7
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00c      	beq.n	8008594 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	3307      	adds	r3, #7
 800857e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f023 0307 	bic.w	r3, r3, #7
 8008586:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	4a1f      	ldr	r2, [pc, #124]	@ (800860c <prvHeapInit+0xac>)
 8008590:	4413      	add	r3, r2
 8008592:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008598:	4a1d      	ldr	r2, [pc, #116]	@ (8008610 <prvHeapInit+0xb0>)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800859e:	4b1c      	ldr	r3, [pc, #112]	@ (8008610 <prvHeapInit+0xb0>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	4413      	add	r3, r2
 80085aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80085ac:	2208      	movs	r2, #8
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	1a9b      	subs	r3, r3, r2
 80085b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f023 0307 	bic.w	r3, r3, #7
 80085ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	4a15      	ldr	r2, [pc, #84]	@ (8008614 <prvHeapInit+0xb4>)
 80085c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80085c2:	4b14      	ldr	r3, [pc, #80]	@ (8008614 <prvHeapInit+0xb4>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2200      	movs	r2, #0
 80085c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80085ca:	4b12      	ldr	r3, [pc, #72]	@ (8008614 <prvHeapInit+0xb4>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2200      	movs	r2, #0
 80085d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	68fa      	ldr	r2, [r7, #12]
 80085da:	1ad2      	subs	r2, r2, r3
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80085e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008614 <prvHeapInit+0xb4>)
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	4a0a      	ldr	r2, [pc, #40]	@ (8008618 <prvHeapInit+0xb8>)
 80085ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	4a09      	ldr	r2, [pc, #36]	@ (800861c <prvHeapInit+0xbc>)
 80085f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085f8:	4b09      	ldr	r3, [pc, #36]	@ (8008620 <prvHeapInit+0xc0>)
 80085fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80085fe:	601a      	str	r2, [r3, #0]
}
 8008600:	bf00      	nop
 8008602:	3714      	adds	r7, #20
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	20001658 	.word	0x20001658
 8008610:	20002210 	.word	0x20002210
 8008614:	20002218 	.word	0x20002218
 8008618:	20002220 	.word	0x20002220
 800861c:	2000221c 	.word	0x2000221c
 8008620:	2000222c 	.word	0x2000222c

08008624 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800862c:	4b28      	ldr	r3, [pc, #160]	@ (80086d0 <prvInsertBlockIntoFreeList+0xac>)
 800862e:	60fb      	str	r3, [r7, #12]
 8008630:	e002      	b.n	8008638 <prvInsertBlockIntoFreeList+0x14>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	429a      	cmp	r2, r3
 8008640:	d8f7      	bhi.n	8008632 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	4413      	add	r3, r2
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	429a      	cmp	r2, r3
 8008652:	d108      	bne.n	8008666 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	441a      	add	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	441a      	add	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	429a      	cmp	r2, r3
 8008678:	d118      	bne.n	80086ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	4b15      	ldr	r3, [pc, #84]	@ (80086d4 <prvInsertBlockIntoFreeList+0xb0>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	429a      	cmp	r2, r3
 8008684:	d00d      	beq.n	80086a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	685a      	ldr	r2, [r3, #4]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	441a      	add	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	601a      	str	r2, [r3, #0]
 80086a0:	e008      	b.n	80086b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80086a2:	4b0c      	ldr	r3, [pc, #48]	@ (80086d4 <prvInsertBlockIntoFreeList+0xb0>)
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	601a      	str	r2, [r3, #0]
 80086aa:	e003      	b.n	80086b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d002      	beq.n	80086c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086c2:	bf00      	nop
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	20002210 	.word	0x20002210
 80086d4:	20002218 	.word	0x20002218

080086d8 <std>:
 80086d8:	2300      	movs	r3, #0
 80086da:	b510      	push	{r4, lr}
 80086dc:	4604      	mov	r4, r0
 80086de:	e9c0 3300 	strd	r3, r3, [r0]
 80086e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086e6:	6083      	str	r3, [r0, #8]
 80086e8:	8181      	strh	r1, [r0, #12]
 80086ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80086ec:	81c2      	strh	r2, [r0, #14]
 80086ee:	6183      	str	r3, [r0, #24]
 80086f0:	4619      	mov	r1, r3
 80086f2:	2208      	movs	r2, #8
 80086f4:	305c      	adds	r0, #92	@ 0x5c
 80086f6:	f000 fa01 	bl	8008afc <memset>
 80086fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008730 <std+0x58>)
 80086fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80086fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008734 <std+0x5c>)
 8008700:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008702:	4b0d      	ldr	r3, [pc, #52]	@ (8008738 <std+0x60>)
 8008704:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008706:	4b0d      	ldr	r3, [pc, #52]	@ (800873c <std+0x64>)
 8008708:	6323      	str	r3, [r4, #48]	@ 0x30
 800870a:	4b0d      	ldr	r3, [pc, #52]	@ (8008740 <std+0x68>)
 800870c:	6224      	str	r4, [r4, #32]
 800870e:	429c      	cmp	r4, r3
 8008710:	d006      	beq.n	8008720 <std+0x48>
 8008712:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008716:	4294      	cmp	r4, r2
 8008718:	d002      	beq.n	8008720 <std+0x48>
 800871a:	33d0      	adds	r3, #208	@ 0xd0
 800871c:	429c      	cmp	r4, r3
 800871e:	d105      	bne.n	800872c <std+0x54>
 8008720:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008728:	f000 ba60 	b.w	8008bec <__retarget_lock_init_recursive>
 800872c:	bd10      	pop	{r4, pc}
 800872e:	bf00      	nop
 8008730:	0800894d 	.word	0x0800894d
 8008734:	0800896f 	.word	0x0800896f
 8008738:	080089a7 	.word	0x080089a7
 800873c:	080089cb 	.word	0x080089cb
 8008740:	20002230 	.word	0x20002230

08008744 <stdio_exit_handler>:
 8008744:	4a02      	ldr	r2, [pc, #8]	@ (8008750 <stdio_exit_handler+0xc>)
 8008746:	4903      	ldr	r1, [pc, #12]	@ (8008754 <stdio_exit_handler+0x10>)
 8008748:	4803      	ldr	r0, [pc, #12]	@ (8008758 <stdio_exit_handler+0x14>)
 800874a:	f000 b869 	b.w	8008820 <_fwalk_sglue>
 800874e:	bf00      	nop
 8008750:	20000010 	.word	0x20000010
 8008754:	080094a5 	.word	0x080094a5
 8008758:	20000020 	.word	0x20000020

0800875c <cleanup_stdio>:
 800875c:	6841      	ldr	r1, [r0, #4]
 800875e:	4b0c      	ldr	r3, [pc, #48]	@ (8008790 <cleanup_stdio+0x34>)
 8008760:	4299      	cmp	r1, r3
 8008762:	b510      	push	{r4, lr}
 8008764:	4604      	mov	r4, r0
 8008766:	d001      	beq.n	800876c <cleanup_stdio+0x10>
 8008768:	f000 fe9c 	bl	80094a4 <_fflush_r>
 800876c:	68a1      	ldr	r1, [r4, #8]
 800876e:	4b09      	ldr	r3, [pc, #36]	@ (8008794 <cleanup_stdio+0x38>)
 8008770:	4299      	cmp	r1, r3
 8008772:	d002      	beq.n	800877a <cleanup_stdio+0x1e>
 8008774:	4620      	mov	r0, r4
 8008776:	f000 fe95 	bl	80094a4 <_fflush_r>
 800877a:	68e1      	ldr	r1, [r4, #12]
 800877c:	4b06      	ldr	r3, [pc, #24]	@ (8008798 <cleanup_stdio+0x3c>)
 800877e:	4299      	cmp	r1, r3
 8008780:	d004      	beq.n	800878c <cleanup_stdio+0x30>
 8008782:	4620      	mov	r0, r4
 8008784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008788:	f000 be8c 	b.w	80094a4 <_fflush_r>
 800878c:	bd10      	pop	{r4, pc}
 800878e:	bf00      	nop
 8008790:	20002230 	.word	0x20002230
 8008794:	20002298 	.word	0x20002298
 8008798:	20002300 	.word	0x20002300

0800879c <global_stdio_init.part.0>:
 800879c:	b510      	push	{r4, lr}
 800879e:	4b0b      	ldr	r3, [pc, #44]	@ (80087cc <global_stdio_init.part.0+0x30>)
 80087a0:	4c0b      	ldr	r4, [pc, #44]	@ (80087d0 <global_stdio_init.part.0+0x34>)
 80087a2:	4a0c      	ldr	r2, [pc, #48]	@ (80087d4 <global_stdio_init.part.0+0x38>)
 80087a4:	601a      	str	r2, [r3, #0]
 80087a6:	4620      	mov	r0, r4
 80087a8:	2200      	movs	r2, #0
 80087aa:	2104      	movs	r1, #4
 80087ac:	f7ff ff94 	bl	80086d8 <std>
 80087b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80087b4:	2201      	movs	r2, #1
 80087b6:	2109      	movs	r1, #9
 80087b8:	f7ff ff8e 	bl	80086d8 <std>
 80087bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80087c0:	2202      	movs	r2, #2
 80087c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087c6:	2112      	movs	r1, #18
 80087c8:	f7ff bf86 	b.w	80086d8 <std>
 80087cc:	20002368 	.word	0x20002368
 80087d0:	20002230 	.word	0x20002230
 80087d4:	08008745 	.word	0x08008745

080087d8 <__sfp_lock_acquire>:
 80087d8:	4801      	ldr	r0, [pc, #4]	@ (80087e0 <__sfp_lock_acquire+0x8>)
 80087da:	f000 ba08 	b.w	8008bee <__retarget_lock_acquire_recursive>
 80087de:	bf00      	nop
 80087e0:	20002371 	.word	0x20002371

080087e4 <__sfp_lock_release>:
 80087e4:	4801      	ldr	r0, [pc, #4]	@ (80087ec <__sfp_lock_release+0x8>)
 80087e6:	f000 ba03 	b.w	8008bf0 <__retarget_lock_release_recursive>
 80087ea:	bf00      	nop
 80087ec:	20002371 	.word	0x20002371

080087f0 <__sinit>:
 80087f0:	b510      	push	{r4, lr}
 80087f2:	4604      	mov	r4, r0
 80087f4:	f7ff fff0 	bl	80087d8 <__sfp_lock_acquire>
 80087f8:	6a23      	ldr	r3, [r4, #32]
 80087fa:	b11b      	cbz	r3, 8008804 <__sinit+0x14>
 80087fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008800:	f7ff bff0 	b.w	80087e4 <__sfp_lock_release>
 8008804:	4b04      	ldr	r3, [pc, #16]	@ (8008818 <__sinit+0x28>)
 8008806:	6223      	str	r3, [r4, #32]
 8008808:	4b04      	ldr	r3, [pc, #16]	@ (800881c <__sinit+0x2c>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1f5      	bne.n	80087fc <__sinit+0xc>
 8008810:	f7ff ffc4 	bl	800879c <global_stdio_init.part.0>
 8008814:	e7f2      	b.n	80087fc <__sinit+0xc>
 8008816:	bf00      	nop
 8008818:	0800875d 	.word	0x0800875d
 800881c:	20002368 	.word	0x20002368

08008820 <_fwalk_sglue>:
 8008820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008824:	4607      	mov	r7, r0
 8008826:	4688      	mov	r8, r1
 8008828:	4614      	mov	r4, r2
 800882a:	2600      	movs	r6, #0
 800882c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008830:	f1b9 0901 	subs.w	r9, r9, #1
 8008834:	d505      	bpl.n	8008842 <_fwalk_sglue+0x22>
 8008836:	6824      	ldr	r4, [r4, #0]
 8008838:	2c00      	cmp	r4, #0
 800883a:	d1f7      	bne.n	800882c <_fwalk_sglue+0xc>
 800883c:	4630      	mov	r0, r6
 800883e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008842:	89ab      	ldrh	r3, [r5, #12]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d907      	bls.n	8008858 <_fwalk_sglue+0x38>
 8008848:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800884c:	3301      	adds	r3, #1
 800884e:	d003      	beq.n	8008858 <_fwalk_sglue+0x38>
 8008850:	4629      	mov	r1, r5
 8008852:	4638      	mov	r0, r7
 8008854:	47c0      	blx	r8
 8008856:	4306      	orrs	r6, r0
 8008858:	3568      	adds	r5, #104	@ 0x68
 800885a:	e7e9      	b.n	8008830 <_fwalk_sglue+0x10>

0800885c <iprintf>:
 800885c:	b40f      	push	{r0, r1, r2, r3}
 800885e:	b507      	push	{r0, r1, r2, lr}
 8008860:	4906      	ldr	r1, [pc, #24]	@ (800887c <iprintf+0x20>)
 8008862:	ab04      	add	r3, sp, #16
 8008864:	6808      	ldr	r0, [r1, #0]
 8008866:	f853 2b04 	ldr.w	r2, [r3], #4
 800886a:	6881      	ldr	r1, [r0, #8]
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	f000 faf1 	bl	8008e54 <_vfiprintf_r>
 8008872:	b003      	add	sp, #12
 8008874:	f85d eb04 	ldr.w	lr, [sp], #4
 8008878:	b004      	add	sp, #16
 800887a:	4770      	bx	lr
 800887c:	2000001c 	.word	0x2000001c

08008880 <putchar>:
 8008880:	4b02      	ldr	r3, [pc, #8]	@ (800888c <putchar+0xc>)
 8008882:	4601      	mov	r1, r0
 8008884:	6818      	ldr	r0, [r3, #0]
 8008886:	6882      	ldr	r2, [r0, #8]
 8008888:	f000 be96 	b.w	80095b8 <_putc_r>
 800888c:	2000001c 	.word	0x2000001c

08008890 <_puts_r>:
 8008890:	6a03      	ldr	r3, [r0, #32]
 8008892:	b570      	push	{r4, r5, r6, lr}
 8008894:	6884      	ldr	r4, [r0, #8]
 8008896:	4605      	mov	r5, r0
 8008898:	460e      	mov	r6, r1
 800889a:	b90b      	cbnz	r3, 80088a0 <_puts_r+0x10>
 800889c:	f7ff ffa8 	bl	80087f0 <__sinit>
 80088a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088a2:	07db      	lsls	r3, r3, #31
 80088a4:	d405      	bmi.n	80088b2 <_puts_r+0x22>
 80088a6:	89a3      	ldrh	r3, [r4, #12]
 80088a8:	0598      	lsls	r0, r3, #22
 80088aa:	d402      	bmi.n	80088b2 <_puts_r+0x22>
 80088ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088ae:	f000 f99e 	bl	8008bee <__retarget_lock_acquire_recursive>
 80088b2:	89a3      	ldrh	r3, [r4, #12]
 80088b4:	0719      	lsls	r1, r3, #28
 80088b6:	d502      	bpl.n	80088be <_puts_r+0x2e>
 80088b8:	6923      	ldr	r3, [r4, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d135      	bne.n	800892a <_puts_r+0x9a>
 80088be:	4621      	mov	r1, r4
 80088c0:	4628      	mov	r0, r5
 80088c2:	f000 f8c5 	bl	8008a50 <__swsetup_r>
 80088c6:	b380      	cbz	r0, 800892a <_puts_r+0x9a>
 80088c8:	f04f 35ff 	mov.w	r5, #4294967295
 80088cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088ce:	07da      	lsls	r2, r3, #31
 80088d0:	d405      	bmi.n	80088de <_puts_r+0x4e>
 80088d2:	89a3      	ldrh	r3, [r4, #12]
 80088d4:	059b      	lsls	r3, r3, #22
 80088d6:	d402      	bmi.n	80088de <_puts_r+0x4e>
 80088d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088da:	f000 f989 	bl	8008bf0 <__retarget_lock_release_recursive>
 80088de:	4628      	mov	r0, r5
 80088e0:	bd70      	pop	{r4, r5, r6, pc}
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	da04      	bge.n	80088f0 <_puts_r+0x60>
 80088e6:	69a2      	ldr	r2, [r4, #24]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	dc17      	bgt.n	800891c <_puts_r+0x8c>
 80088ec:	290a      	cmp	r1, #10
 80088ee:	d015      	beq.n	800891c <_puts_r+0x8c>
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	1c5a      	adds	r2, r3, #1
 80088f4:	6022      	str	r2, [r4, #0]
 80088f6:	7019      	strb	r1, [r3, #0]
 80088f8:	68a3      	ldr	r3, [r4, #8]
 80088fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80088fe:	3b01      	subs	r3, #1
 8008900:	60a3      	str	r3, [r4, #8]
 8008902:	2900      	cmp	r1, #0
 8008904:	d1ed      	bne.n	80088e2 <_puts_r+0x52>
 8008906:	2b00      	cmp	r3, #0
 8008908:	da11      	bge.n	800892e <_puts_r+0x9e>
 800890a:	4622      	mov	r2, r4
 800890c:	210a      	movs	r1, #10
 800890e:	4628      	mov	r0, r5
 8008910:	f000 f85f 	bl	80089d2 <__swbuf_r>
 8008914:	3001      	adds	r0, #1
 8008916:	d0d7      	beq.n	80088c8 <_puts_r+0x38>
 8008918:	250a      	movs	r5, #10
 800891a:	e7d7      	b.n	80088cc <_puts_r+0x3c>
 800891c:	4622      	mov	r2, r4
 800891e:	4628      	mov	r0, r5
 8008920:	f000 f857 	bl	80089d2 <__swbuf_r>
 8008924:	3001      	adds	r0, #1
 8008926:	d1e7      	bne.n	80088f8 <_puts_r+0x68>
 8008928:	e7ce      	b.n	80088c8 <_puts_r+0x38>
 800892a:	3e01      	subs	r6, #1
 800892c:	e7e4      	b.n	80088f8 <_puts_r+0x68>
 800892e:	6823      	ldr	r3, [r4, #0]
 8008930:	1c5a      	adds	r2, r3, #1
 8008932:	6022      	str	r2, [r4, #0]
 8008934:	220a      	movs	r2, #10
 8008936:	701a      	strb	r2, [r3, #0]
 8008938:	e7ee      	b.n	8008918 <_puts_r+0x88>
	...

0800893c <puts>:
 800893c:	4b02      	ldr	r3, [pc, #8]	@ (8008948 <puts+0xc>)
 800893e:	4601      	mov	r1, r0
 8008940:	6818      	ldr	r0, [r3, #0]
 8008942:	f7ff bfa5 	b.w	8008890 <_puts_r>
 8008946:	bf00      	nop
 8008948:	2000001c 	.word	0x2000001c

0800894c <__sread>:
 800894c:	b510      	push	{r4, lr}
 800894e:	460c      	mov	r4, r1
 8008950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008954:	f000 f8fc 	bl	8008b50 <_read_r>
 8008958:	2800      	cmp	r0, #0
 800895a:	bfab      	itete	ge
 800895c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800895e:	89a3      	ldrhlt	r3, [r4, #12]
 8008960:	181b      	addge	r3, r3, r0
 8008962:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008966:	bfac      	ite	ge
 8008968:	6563      	strge	r3, [r4, #84]	@ 0x54
 800896a:	81a3      	strhlt	r3, [r4, #12]
 800896c:	bd10      	pop	{r4, pc}

0800896e <__swrite>:
 800896e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008972:	461f      	mov	r7, r3
 8008974:	898b      	ldrh	r3, [r1, #12]
 8008976:	05db      	lsls	r3, r3, #23
 8008978:	4605      	mov	r5, r0
 800897a:	460c      	mov	r4, r1
 800897c:	4616      	mov	r6, r2
 800897e:	d505      	bpl.n	800898c <__swrite+0x1e>
 8008980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008984:	2302      	movs	r3, #2
 8008986:	2200      	movs	r2, #0
 8008988:	f000 f8d0 	bl	8008b2c <_lseek_r>
 800898c:	89a3      	ldrh	r3, [r4, #12]
 800898e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008992:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008996:	81a3      	strh	r3, [r4, #12]
 8008998:	4632      	mov	r2, r6
 800899a:	463b      	mov	r3, r7
 800899c:	4628      	mov	r0, r5
 800899e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089a2:	f000 b8e7 	b.w	8008b74 <_write_r>

080089a6 <__sseek>:
 80089a6:	b510      	push	{r4, lr}
 80089a8:	460c      	mov	r4, r1
 80089aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ae:	f000 f8bd 	bl	8008b2c <_lseek_r>
 80089b2:	1c43      	adds	r3, r0, #1
 80089b4:	89a3      	ldrh	r3, [r4, #12]
 80089b6:	bf15      	itete	ne
 80089b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80089ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80089be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80089c2:	81a3      	strheq	r3, [r4, #12]
 80089c4:	bf18      	it	ne
 80089c6:	81a3      	strhne	r3, [r4, #12]
 80089c8:	bd10      	pop	{r4, pc}

080089ca <__sclose>:
 80089ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ce:	f000 b89d 	b.w	8008b0c <_close_r>

080089d2 <__swbuf_r>:
 80089d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d4:	460e      	mov	r6, r1
 80089d6:	4614      	mov	r4, r2
 80089d8:	4605      	mov	r5, r0
 80089da:	b118      	cbz	r0, 80089e4 <__swbuf_r+0x12>
 80089dc:	6a03      	ldr	r3, [r0, #32]
 80089de:	b90b      	cbnz	r3, 80089e4 <__swbuf_r+0x12>
 80089e0:	f7ff ff06 	bl	80087f0 <__sinit>
 80089e4:	69a3      	ldr	r3, [r4, #24]
 80089e6:	60a3      	str	r3, [r4, #8]
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	071a      	lsls	r2, r3, #28
 80089ec:	d501      	bpl.n	80089f2 <__swbuf_r+0x20>
 80089ee:	6923      	ldr	r3, [r4, #16]
 80089f0:	b943      	cbnz	r3, 8008a04 <__swbuf_r+0x32>
 80089f2:	4621      	mov	r1, r4
 80089f4:	4628      	mov	r0, r5
 80089f6:	f000 f82b 	bl	8008a50 <__swsetup_r>
 80089fa:	b118      	cbz	r0, 8008a04 <__swbuf_r+0x32>
 80089fc:	f04f 37ff 	mov.w	r7, #4294967295
 8008a00:	4638      	mov	r0, r7
 8008a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	6922      	ldr	r2, [r4, #16]
 8008a08:	1a98      	subs	r0, r3, r2
 8008a0a:	6963      	ldr	r3, [r4, #20]
 8008a0c:	b2f6      	uxtb	r6, r6
 8008a0e:	4283      	cmp	r3, r0
 8008a10:	4637      	mov	r7, r6
 8008a12:	dc05      	bgt.n	8008a20 <__swbuf_r+0x4e>
 8008a14:	4621      	mov	r1, r4
 8008a16:	4628      	mov	r0, r5
 8008a18:	f000 fd44 	bl	80094a4 <_fflush_r>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d1ed      	bne.n	80089fc <__swbuf_r+0x2a>
 8008a20:	68a3      	ldr	r3, [r4, #8]
 8008a22:	3b01      	subs	r3, #1
 8008a24:	60a3      	str	r3, [r4, #8]
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	1c5a      	adds	r2, r3, #1
 8008a2a:	6022      	str	r2, [r4, #0]
 8008a2c:	701e      	strb	r6, [r3, #0]
 8008a2e:	6962      	ldr	r2, [r4, #20]
 8008a30:	1c43      	adds	r3, r0, #1
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d004      	beq.n	8008a40 <__swbuf_r+0x6e>
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	07db      	lsls	r3, r3, #31
 8008a3a:	d5e1      	bpl.n	8008a00 <__swbuf_r+0x2e>
 8008a3c:	2e0a      	cmp	r6, #10
 8008a3e:	d1df      	bne.n	8008a00 <__swbuf_r+0x2e>
 8008a40:	4621      	mov	r1, r4
 8008a42:	4628      	mov	r0, r5
 8008a44:	f000 fd2e 	bl	80094a4 <_fflush_r>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d0d9      	beq.n	8008a00 <__swbuf_r+0x2e>
 8008a4c:	e7d6      	b.n	80089fc <__swbuf_r+0x2a>
	...

08008a50 <__swsetup_r>:
 8008a50:	b538      	push	{r3, r4, r5, lr}
 8008a52:	4b29      	ldr	r3, [pc, #164]	@ (8008af8 <__swsetup_r+0xa8>)
 8008a54:	4605      	mov	r5, r0
 8008a56:	6818      	ldr	r0, [r3, #0]
 8008a58:	460c      	mov	r4, r1
 8008a5a:	b118      	cbz	r0, 8008a64 <__swsetup_r+0x14>
 8008a5c:	6a03      	ldr	r3, [r0, #32]
 8008a5e:	b90b      	cbnz	r3, 8008a64 <__swsetup_r+0x14>
 8008a60:	f7ff fec6 	bl	80087f0 <__sinit>
 8008a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a68:	0719      	lsls	r1, r3, #28
 8008a6a:	d422      	bmi.n	8008ab2 <__swsetup_r+0x62>
 8008a6c:	06da      	lsls	r2, r3, #27
 8008a6e:	d407      	bmi.n	8008a80 <__swsetup_r+0x30>
 8008a70:	2209      	movs	r2, #9
 8008a72:	602a      	str	r2, [r5, #0]
 8008a74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a78:	81a3      	strh	r3, [r4, #12]
 8008a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7e:	e033      	b.n	8008ae8 <__swsetup_r+0x98>
 8008a80:	0758      	lsls	r0, r3, #29
 8008a82:	d512      	bpl.n	8008aaa <__swsetup_r+0x5a>
 8008a84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a86:	b141      	cbz	r1, 8008a9a <__swsetup_r+0x4a>
 8008a88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a8c:	4299      	cmp	r1, r3
 8008a8e:	d002      	beq.n	8008a96 <__swsetup_r+0x46>
 8008a90:	4628      	mov	r0, r5
 8008a92:	f000 f8bd 	bl	8008c10 <_free_r>
 8008a96:	2300      	movs	r3, #0
 8008a98:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a9a:	89a3      	ldrh	r3, [r4, #12]
 8008a9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008aa0:	81a3      	strh	r3, [r4, #12]
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	6063      	str	r3, [r4, #4]
 8008aa6:	6923      	ldr	r3, [r4, #16]
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	89a3      	ldrh	r3, [r4, #12]
 8008aac:	f043 0308 	orr.w	r3, r3, #8
 8008ab0:	81a3      	strh	r3, [r4, #12]
 8008ab2:	6923      	ldr	r3, [r4, #16]
 8008ab4:	b94b      	cbnz	r3, 8008aca <__swsetup_r+0x7a>
 8008ab6:	89a3      	ldrh	r3, [r4, #12]
 8008ab8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ac0:	d003      	beq.n	8008aca <__swsetup_r+0x7a>
 8008ac2:	4621      	mov	r1, r4
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	f000 fd3b 	bl	8009540 <__smakebuf_r>
 8008aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ace:	f013 0201 	ands.w	r2, r3, #1
 8008ad2:	d00a      	beq.n	8008aea <__swsetup_r+0x9a>
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	60a2      	str	r2, [r4, #8]
 8008ad8:	6962      	ldr	r2, [r4, #20]
 8008ada:	4252      	negs	r2, r2
 8008adc:	61a2      	str	r2, [r4, #24]
 8008ade:	6922      	ldr	r2, [r4, #16]
 8008ae0:	b942      	cbnz	r2, 8008af4 <__swsetup_r+0xa4>
 8008ae2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008ae6:	d1c5      	bne.n	8008a74 <__swsetup_r+0x24>
 8008ae8:	bd38      	pop	{r3, r4, r5, pc}
 8008aea:	0799      	lsls	r1, r3, #30
 8008aec:	bf58      	it	pl
 8008aee:	6962      	ldrpl	r2, [r4, #20]
 8008af0:	60a2      	str	r2, [r4, #8]
 8008af2:	e7f4      	b.n	8008ade <__swsetup_r+0x8e>
 8008af4:	2000      	movs	r0, #0
 8008af6:	e7f7      	b.n	8008ae8 <__swsetup_r+0x98>
 8008af8:	2000001c 	.word	0x2000001c

08008afc <memset>:
 8008afc:	4402      	add	r2, r0
 8008afe:	4603      	mov	r3, r0
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d100      	bne.n	8008b06 <memset+0xa>
 8008b04:	4770      	bx	lr
 8008b06:	f803 1b01 	strb.w	r1, [r3], #1
 8008b0a:	e7f9      	b.n	8008b00 <memset+0x4>

08008b0c <_close_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	4d06      	ldr	r5, [pc, #24]	@ (8008b28 <_close_r+0x1c>)
 8008b10:	2300      	movs	r3, #0
 8008b12:	4604      	mov	r4, r0
 8008b14:	4608      	mov	r0, r1
 8008b16:	602b      	str	r3, [r5, #0]
 8008b18:	f7f8 f992 	bl	8000e40 <_close>
 8008b1c:	1c43      	adds	r3, r0, #1
 8008b1e:	d102      	bne.n	8008b26 <_close_r+0x1a>
 8008b20:	682b      	ldr	r3, [r5, #0]
 8008b22:	b103      	cbz	r3, 8008b26 <_close_r+0x1a>
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	bd38      	pop	{r3, r4, r5, pc}
 8008b28:	2000236c 	.word	0x2000236c

08008b2c <_lseek_r>:
 8008b2c:	b538      	push	{r3, r4, r5, lr}
 8008b2e:	4d07      	ldr	r5, [pc, #28]	@ (8008b4c <_lseek_r+0x20>)
 8008b30:	4604      	mov	r4, r0
 8008b32:	4608      	mov	r0, r1
 8008b34:	4611      	mov	r1, r2
 8008b36:	2200      	movs	r2, #0
 8008b38:	602a      	str	r2, [r5, #0]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	f7f8 f9a7 	bl	8000e8e <_lseek>
 8008b40:	1c43      	adds	r3, r0, #1
 8008b42:	d102      	bne.n	8008b4a <_lseek_r+0x1e>
 8008b44:	682b      	ldr	r3, [r5, #0]
 8008b46:	b103      	cbz	r3, 8008b4a <_lseek_r+0x1e>
 8008b48:	6023      	str	r3, [r4, #0]
 8008b4a:	bd38      	pop	{r3, r4, r5, pc}
 8008b4c:	2000236c 	.word	0x2000236c

08008b50 <_read_r>:
 8008b50:	b538      	push	{r3, r4, r5, lr}
 8008b52:	4d07      	ldr	r5, [pc, #28]	@ (8008b70 <_read_r+0x20>)
 8008b54:	4604      	mov	r4, r0
 8008b56:	4608      	mov	r0, r1
 8008b58:	4611      	mov	r1, r2
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	602a      	str	r2, [r5, #0]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	f7f8 f935 	bl	8000dce <_read>
 8008b64:	1c43      	adds	r3, r0, #1
 8008b66:	d102      	bne.n	8008b6e <_read_r+0x1e>
 8008b68:	682b      	ldr	r3, [r5, #0]
 8008b6a:	b103      	cbz	r3, 8008b6e <_read_r+0x1e>
 8008b6c:	6023      	str	r3, [r4, #0]
 8008b6e:	bd38      	pop	{r3, r4, r5, pc}
 8008b70:	2000236c 	.word	0x2000236c

08008b74 <_write_r>:
 8008b74:	b538      	push	{r3, r4, r5, lr}
 8008b76:	4d07      	ldr	r5, [pc, #28]	@ (8008b94 <_write_r+0x20>)
 8008b78:	4604      	mov	r4, r0
 8008b7a:	4608      	mov	r0, r1
 8008b7c:	4611      	mov	r1, r2
 8008b7e:	2200      	movs	r2, #0
 8008b80:	602a      	str	r2, [r5, #0]
 8008b82:	461a      	mov	r2, r3
 8008b84:	f7f8 f940 	bl	8000e08 <_write>
 8008b88:	1c43      	adds	r3, r0, #1
 8008b8a:	d102      	bne.n	8008b92 <_write_r+0x1e>
 8008b8c:	682b      	ldr	r3, [r5, #0]
 8008b8e:	b103      	cbz	r3, 8008b92 <_write_r+0x1e>
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	bd38      	pop	{r3, r4, r5, pc}
 8008b94:	2000236c 	.word	0x2000236c

08008b98 <__errno>:
 8008b98:	4b01      	ldr	r3, [pc, #4]	@ (8008ba0 <__errno+0x8>)
 8008b9a:	6818      	ldr	r0, [r3, #0]
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	2000001c 	.word	0x2000001c

08008ba4 <__libc_init_array>:
 8008ba4:	b570      	push	{r4, r5, r6, lr}
 8008ba6:	4d0d      	ldr	r5, [pc, #52]	@ (8008bdc <__libc_init_array+0x38>)
 8008ba8:	4c0d      	ldr	r4, [pc, #52]	@ (8008be0 <__libc_init_array+0x3c>)
 8008baa:	1b64      	subs	r4, r4, r5
 8008bac:	10a4      	asrs	r4, r4, #2
 8008bae:	2600      	movs	r6, #0
 8008bb0:	42a6      	cmp	r6, r4
 8008bb2:	d109      	bne.n	8008bc8 <__libc_init_array+0x24>
 8008bb4:	4d0b      	ldr	r5, [pc, #44]	@ (8008be4 <__libc_init_array+0x40>)
 8008bb6:	4c0c      	ldr	r4, [pc, #48]	@ (8008be8 <__libc_init_array+0x44>)
 8008bb8:	f000 fd64 	bl	8009684 <_init>
 8008bbc:	1b64      	subs	r4, r4, r5
 8008bbe:	10a4      	asrs	r4, r4, #2
 8008bc0:	2600      	movs	r6, #0
 8008bc2:	42a6      	cmp	r6, r4
 8008bc4:	d105      	bne.n	8008bd2 <__libc_init_array+0x2e>
 8008bc6:	bd70      	pop	{r4, r5, r6, pc}
 8008bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bcc:	4798      	blx	r3
 8008bce:	3601      	adds	r6, #1
 8008bd0:	e7ee      	b.n	8008bb0 <__libc_init_array+0xc>
 8008bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bd6:	4798      	blx	r3
 8008bd8:	3601      	adds	r6, #1
 8008bda:	e7f2      	b.n	8008bc2 <__libc_init_array+0x1e>
 8008bdc:	08009814 	.word	0x08009814
 8008be0:	08009814 	.word	0x08009814
 8008be4:	08009814 	.word	0x08009814
 8008be8:	08009818 	.word	0x08009818

08008bec <__retarget_lock_init_recursive>:
 8008bec:	4770      	bx	lr

08008bee <__retarget_lock_acquire_recursive>:
 8008bee:	4770      	bx	lr

08008bf0 <__retarget_lock_release_recursive>:
 8008bf0:	4770      	bx	lr

08008bf2 <memcpy>:
 8008bf2:	440a      	add	r2, r1
 8008bf4:	4291      	cmp	r1, r2
 8008bf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bfa:	d100      	bne.n	8008bfe <memcpy+0xc>
 8008bfc:	4770      	bx	lr
 8008bfe:	b510      	push	{r4, lr}
 8008c00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c08:	4291      	cmp	r1, r2
 8008c0a:	d1f9      	bne.n	8008c00 <memcpy+0xe>
 8008c0c:	bd10      	pop	{r4, pc}
	...

08008c10 <_free_r>:
 8008c10:	b538      	push	{r3, r4, r5, lr}
 8008c12:	4605      	mov	r5, r0
 8008c14:	2900      	cmp	r1, #0
 8008c16:	d041      	beq.n	8008c9c <_free_r+0x8c>
 8008c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c1c:	1f0c      	subs	r4, r1, #4
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	bfb8      	it	lt
 8008c22:	18e4      	addlt	r4, r4, r3
 8008c24:	f000 f8e0 	bl	8008de8 <__malloc_lock>
 8008c28:	4a1d      	ldr	r2, [pc, #116]	@ (8008ca0 <_free_r+0x90>)
 8008c2a:	6813      	ldr	r3, [r2, #0]
 8008c2c:	b933      	cbnz	r3, 8008c3c <_free_r+0x2c>
 8008c2e:	6063      	str	r3, [r4, #4]
 8008c30:	6014      	str	r4, [r2, #0]
 8008c32:	4628      	mov	r0, r5
 8008c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c38:	f000 b8dc 	b.w	8008df4 <__malloc_unlock>
 8008c3c:	42a3      	cmp	r3, r4
 8008c3e:	d908      	bls.n	8008c52 <_free_r+0x42>
 8008c40:	6820      	ldr	r0, [r4, #0]
 8008c42:	1821      	adds	r1, r4, r0
 8008c44:	428b      	cmp	r3, r1
 8008c46:	bf01      	itttt	eq
 8008c48:	6819      	ldreq	r1, [r3, #0]
 8008c4a:	685b      	ldreq	r3, [r3, #4]
 8008c4c:	1809      	addeq	r1, r1, r0
 8008c4e:	6021      	streq	r1, [r4, #0]
 8008c50:	e7ed      	b.n	8008c2e <_free_r+0x1e>
 8008c52:	461a      	mov	r2, r3
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	b10b      	cbz	r3, 8008c5c <_free_r+0x4c>
 8008c58:	42a3      	cmp	r3, r4
 8008c5a:	d9fa      	bls.n	8008c52 <_free_r+0x42>
 8008c5c:	6811      	ldr	r1, [r2, #0]
 8008c5e:	1850      	adds	r0, r2, r1
 8008c60:	42a0      	cmp	r0, r4
 8008c62:	d10b      	bne.n	8008c7c <_free_r+0x6c>
 8008c64:	6820      	ldr	r0, [r4, #0]
 8008c66:	4401      	add	r1, r0
 8008c68:	1850      	adds	r0, r2, r1
 8008c6a:	4283      	cmp	r3, r0
 8008c6c:	6011      	str	r1, [r2, #0]
 8008c6e:	d1e0      	bne.n	8008c32 <_free_r+0x22>
 8008c70:	6818      	ldr	r0, [r3, #0]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	6053      	str	r3, [r2, #4]
 8008c76:	4408      	add	r0, r1
 8008c78:	6010      	str	r0, [r2, #0]
 8008c7a:	e7da      	b.n	8008c32 <_free_r+0x22>
 8008c7c:	d902      	bls.n	8008c84 <_free_r+0x74>
 8008c7e:	230c      	movs	r3, #12
 8008c80:	602b      	str	r3, [r5, #0]
 8008c82:	e7d6      	b.n	8008c32 <_free_r+0x22>
 8008c84:	6820      	ldr	r0, [r4, #0]
 8008c86:	1821      	adds	r1, r4, r0
 8008c88:	428b      	cmp	r3, r1
 8008c8a:	bf04      	itt	eq
 8008c8c:	6819      	ldreq	r1, [r3, #0]
 8008c8e:	685b      	ldreq	r3, [r3, #4]
 8008c90:	6063      	str	r3, [r4, #4]
 8008c92:	bf04      	itt	eq
 8008c94:	1809      	addeq	r1, r1, r0
 8008c96:	6021      	streq	r1, [r4, #0]
 8008c98:	6054      	str	r4, [r2, #4]
 8008c9a:	e7ca      	b.n	8008c32 <_free_r+0x22>
 8008c9c:	bd38      	pop	{r3, r4, r5, pc}
 8008c9e:	bf00      	nop
 8008ca0:	20002378 	.word	0x20002378

08008ca4 <sbrk_aligned>:
 8008ca4:	b570      	push	{r4, r5, r6, lr}
 8008ca6:	4e0f      	ldr	r6, [pc, #60]	@ (8008ce4 <sbrk_aligned+0x40>)
 8008ca8:	460c      	mov	r4, r1
 8008caa:	6831      	ldr	r1, [r6, #0]
 8008cac:	4605      	mov	r5, r0
 8008cae:	b911      	cbnz	r1, 8008cb6 <sbrk_aligned+0x12>
 8008cb0:	f000 fcd8 	bl	8009664 <_sbrk_r>
 8008cb4:	6030      	str	r0, [r6, #0]
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	4628      	mov	r0, r5
 8008cba:	f000 fcd3 	bl	8009664 <_sbrk_r>
 8008cbe:	1c43      	adds	r3, r0, #1
 8008cc0:	d103      	bne.n	8008cca <sbrk_aligned+0x26>
 8008cc2:	f04f 34ff 	mov.w	r4, #4294967295
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	bd70      	pop	{r4, r5, r6, pc}
 8008cca:	1cc4      	adds	r4, r0, #3
 8008ccc:	f024 0403 	bic.w	r4, r4, #3
 8008cd0:	42a0      	cmp	r0, r4
 8008cd2:	d0f8      	beq.n	8008cc6 <sbrk_aligned+0x22>
 8008cd4:	1a21      	subs	r1, r4, r0
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	f000 fcc4 	bl	8009664 <_sbrk_r>
 8008cdc:	3001      	adds	r0, #1
 8008cde:	d1f2      	bne.n	8008cc6 <sbrk_aligned+0x22>
 8008ce0:	e7ef      	b.n	8008cc2 <sbrk_aligned+0x1e>
 8008ce2:	bf00      	nop
 8008ce4:	20002374 	.word	0x20002374

08008ce8 <_malloc_r>:
 8008ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cec:	1ccd      	adds	r5, r1, #3
 8008cee:	f025 0503 	bic.w	r5, r5, #3
 8008cf2:	3508      	adds	r5, #8
 8008cf4:	2d0c      	cmp	r5, #12
 8008cf6:	bf38      	it	cc
 8008cf8:	250c      	movcc	r5, #12
 8008cfa:	2d00      	cmp	r5, #0
 8008cfc:	4606      	mov	r6, r0
 8008cfe:	db01      	blt.n	8008d04 <_malloc_r+0x1c>
 8008d00:	42a9      	cmp	r1, r5
 8008d02:	d904      	bls.n	8008d0e <_malloc_r+0x26>
 8008d04:	230c      	movs	r3, #12
 8008d06:	6033      	str	r3, [r6, #0]
 8008d08:	2000      	movs	r0, #0
 8008d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008de4 <_malloc_r+0xfc>
 8008d12:	f000 f869 	bl	8008de8 <__malloc_lock>
 8008d16:	f8d8 3000 	ldr.w	r3, [r8]
 8008d1a:	461c      	mov	r4, r3
 8008d1c:	bb44      	cbnz	r4, 8008d70 <_malloc_r+0x88>
 8008d1e:	4629      	mov	r1, r5
 8008d20:	4630      	mov	r0, r6
 8008d22:	f7ff ffbf 	bl	8008ca4 <sbrk_aligned>
 8008d26:	1c43      	adds	r3, r0, #1
 8008d28:	4604      	mov	r4, r0
 8008d2a:	d158      	bne.n	8008dde <_malloc_r+0xf6>
 8008d2c:	f8d8 4000 	ldr.w	r4, [r8]
 8008d30:	4627      	mov	r7, r4
 8008d32:	2f00      	cmp	r7, #0
 8008d34:	d143      	bne.n	8008dbe <_malloc_r+0xd6>
 8008d36:	2c00      	cmp	r4, #0
 8008d38:	d04b      	beq.n	8008dd2 <_malloc_r+0xea>
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	4639      	mov	r1, r7
 8008d3e:	4630      	mov	r0, r6
 8008d40:	eb04 0903 	add.w	r9, r4, r3
 8008d44:	f000 fc8e 	bl	8009664 <_sbrk_r>
 8008d48:	4581      	cmp	r9, r0
 8008d4a:	d142      	bne.n	8008dd2 <_malloc_r+0xea>
 8008d4c:	6821      	ldr	r1, [r4, #0]
 8008d4e:	1a6d      	subs	r5, r5, r1
 8008d50:	4629      	mov	r1, r5
 8008d52:	4630      	mov	r0, r6
 8008d54:	f7ff ffa6 	bl	8008ca4 <sbrk_aligned>
 8008d58:	3001      	adds	r0, #1
 8008d5a:	d03a      	beq.n	8008dd2 <_malloc_r+0xea>
 8008d5c:	6823      	ldr	r3, [r4, #0]
 8008d5e:	442b      	add	r3, r5
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	f8d8 3000 	ldr.w	r3, [r8]
 8008d66:	685a      	ldr	r2, [r3, #4]
 8008d68:	bb62      	cbnz	r2, 8008dc4 <_malloc_r+0xdc>
 8008d6a:	f8c8 7000 	str.w	r7, [r8]
 8008d6e:	e00f      	b.n	8008d90 <_malloc_r+0xa8>
 8008d70:	6822      	ldr	r2, [r4, #0]
 8008d72:	1b52      	subs	r2, r2, r5
 8008d74:	d420      	bmi.n	8008db8 <_malloc_r+0xd0>
 8008d76:	2a0b      	cmp	r2, #11
 8008d78:	d917      	bls.n	8008daa <_malloc_r+0xc2>
 8008d7a:	1961      	adds	r1, r4, r5
 8008d7c:	42a3      	cmp	r3, r4
 8008d7e:	6025      	str	r5, [r4, #0]
 8008d80:	bf18      	it	ne
 8008d82:	6059      	strne	r1, [r3, #4]
 8008d84:	6863      	ldr	r3, [r4, #4]
 8008d86:	bf08      	it	eq
 8008d88:	f8c8 1000 	streq.w	r1, [r8]
 8008d8c:	5162      	str	r2, [r4, r5]
 8008d8e:	604b      	str	r3, [r1, #4]
 8008d90:	4630      	mov	r0, r6
 8008d92:	f000 f82f 	bl	8008df4 <__malloc_unlock>
 8008d96:	f104 000b 	add.w	r0, r4, #11
 8008d9a:	1d23      	adds	r3, r4, #4
 8008d9c:	f020 0007 	bic.w	r0, r0, #7
 8008da0:	1ac2      	subs	r2, r0, r3
 8008da2:	bf1c      	itt	ne
 8008da4:	1a1b      	subne	r3, r3, r0
 8008da6:	50a3      	strne	r3, [r4, r2]
 8008da8:	e7af      	b.n	8008d0a <_malloc_r+0x22>
 8008daa:	6862      	ldr	r2, [r4, #4]
 8008dac:	42a3      	cmp	r3, r4
 8008dae:	bf0c      	ite	eq
 8008db0:	f8c8 2000 	streq.w	r2, [r8]
 8008db4:	605a      	strne	r2, [r3, #4]
 8008db6:	e7eb      	b.n	8008d90 <_malloc_r+0xa8>
 8008db8:	4623      	mov	r3, r4
 8008dba:	6864      	ldr	r4, [r4, #4]
 8008dbc:	e7ae      	b.n	8008d1c <_malloc_r+0x34>
 8008dbe:	463c      	mov	r4, r7
 8008dc0:	687f      	ldr	r7, [r7, #4]
 8008dc2:	e7b6      	b.n	8008d32 <_malloc_r+0x4a>
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	42a3      	cmp	r3, r4
 8008dca:	d1fb      	bne.n	8008dc4 <_malloc_r+0xdc>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	6053      	str	r3, [r2, #4]
 8008dd0:	e7de      	b.n	8008d90 <_malloc_r+0xa8>
 8008dd2:	230c      	movs	r3, #12
 8008dd4:	6033      	str	r3, [r6, #0]
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	f000 f80c 	bl	8008df4 <__malloc_unlock>
 8008ddc:	e794      	b.n	8008d08 <_malloc_r+0x20>
 8008dde:	6005      	str	r5, [r0, #0]
 8008de0:	e7d6      	b.n	8008d90 <_malloc_r+0xa8>
 8008de2:	bf00      	nop
 8008de4:	20002378 	.word	0x20002378

08008de8 <__malloc_lock>:
 8008de8:	4801      	ldr	r0, [pc, #4]	@ (8008df0 <__malloc_lock+0x8>)
 8008dea:	f7ff bf00 	b.w	8008bee <__retarget_lock_acquire_recursive>
 8008dee:	bf00      	nop
 8008df0:	20002370 	.word	0x20002370

08008df4 <__malloc_unlock>:
 8008df4:	4801      	ldr	r0, [pc, #4]	@ (8008dfc <__malloc_unlock+0x8>)
 8008df6:	f7ff befb 	b.w	8008bf0 <__retarget_lock_release_recursive>
 8008dfa:	bf00      	nop
 8008dfc:	20002370 	.word	0x20002370

08008e00 <__sfputc_r>:
 8008e00:	6893      	ldr	r3, [r2, #8]
 8008e02:	3b01      	subs	r3, #1
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	b410      	push	{r4}
 8008e08:	6093      	str	r3, [r2, #8]
 8008e0a:	da08      	bge.n	8008e1e <__sfputc_r+0x1e>
 8008e0c:	6994      	ldr	r4, [r2, #24]
 8008e0e:	42a3      	cmp	r3, r4
 8008e10:	db01      	blt.n	8008e16 <__sfputc_r+0x16>
 8008e12:	290a      	cmp	r1, #10
 8008e14:	d103      	bne.n	8008e1e <__sfputc_r+0x1e>
 8008e16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e1a:	f7ff bdda 	b.w	80089d2 <__swbuf_r>
 8008e1e:	6813      	ldr	r3, [r2, #0]
 8008e20:	1c58      	adds	r0, r3, #1
 8008e22:	6010      	str	r0, [r2, #0]
 8008e24:	7019      	strb	r1, [r3, #0]
 8008e26:	4608      	mov	r0, r1
 8008e28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e2c:	4770      	bx	lr

08008e2e <__sfputs_r>:
 8008e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e30:	4606      	mov	r6, r0
 8008e32:	460f      	mov	r7, r1
 8008e34:	4614      	mov	r4, r2
 8008e36:	18d5      	adds	r5, r2, r3
 8008e38:	42ac      	cmp	r4, r5
 8008e3a:	d101      	bne.n	8008e40 <__sfputs_r+0x12>
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	e007      	b.n	8008e50 <__sfputs_r+0x22>
 8008e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e44:	463a      	mov	r2, r7
 8008e46:	4630      	mov	r0, r6
 8008e48:	f7ff ffda 	bl	8008e00 <__sfputc_r>
 8008e4c:	1c43      	adds	r3, r0, #1
 8008e4e:	d1f3      	bne.n	8008e38 <__sfputs_r+0xa>
 8008e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e54 <_vfiprintf_r>:
 8008e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e58:	460d      	mov	r5, r1
 8008e5a:	b09d      	sub	sp, #116	@ 0x74
 8008e5c:	4614      	mov	r4, r2
 8008e5e:	4698      	mov	r8, r3
 8008e60:	4606      	mov	r6, r0
 8008e62:	b118      	cbz	r0, 8008e6c <_vfiprintf_r+0x18>
 8008e64:	6a03      	ldr	r3, [r0, #32]
 8008e66:	b90b      	cbnz	r3, 8008e6c <_vfiprintf_r+0x18>
 8008e68:	f7ff fcc2 	bl	80087f0 <__sinit>
 8008e6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e6e:	07d9      	lsls	r1, r3, #31
 8008e70:	d405      	bmi.n	8008e7e <_vfiprintf_r+0x2a>
 8008e72:	89ab      	ldrh	r3, [r5, #12]
 8008e74:	059a      	lsls	r2, r3, #22
 8008e76:	d402      	bmi.n	8008e7e <_vfiprintf_r+0x2a>
 8008e78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e7a:	f7ff feb8 	bl	8008bee <__retarget_lock_acquire_recursive>
 8008e7e:	89ab      	ldrh	r3, [r5, #12]
 8008e80:	071b      	lsls	r3, r3, #28
 8008e82:	d501      	bpl.n	8008e88 <_vfiprintf_r+0x34>
 8008e84:	692b      	ldr	r3, [r5, #16]
 8008e86:	b99b      	cbnz	r3, 8008eb0 <_vfiprintf_r+0x5c>
 8008e88:	4629      	mov	r1, r5
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f7ff fde0 	bl	8008a50 <__swsetup_r>
 8008e90:	b170      	cbz	r0, 8008eb0 <_vfiprintf_r+0x5c>
 8008e92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e94:	07dc      	lsls	r4, r3, #31
 8008e96:	d504      	bpl.n	8008ea2 <_vfiprintf_r+0x4e>
 8008e98:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9c:	b01d      	add	sp, #116	@ 0x74
 8008e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea2:	89ab      	ldrh	r3, [r5, #12]
 8008ea4:	0598      	lsls	r0, r3, #22
 8008ea6:	d4f7      	bmi.n	8008e98 <_vfiprintf_r+0x44>
 8008ea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008eaa:	f7ff fea1 	bl	8008bf0 <__retarget_lock_release_recursive>
 8008eae:	e7f3      	b.n	8008e98 <_vfiprintf_r+0x44>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eb4:	2320      	movs	r3, #32
 8008eb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008eba:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ebe:	2330      	movs	r3, #48	@ 0x30
 8008ec0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009070 <_vfiprintf_r+0x21c>
 8008ec4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ec8:	f04f 0901 	mov.w	r9, #1
 8008ecc:	4623      	mov	r3, r4
 8008ece:	469a      	mov	sl, r3
 8008ed0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ed4:	b10a      	cbz	r2, 8008eda <_vfiprintf_r+0x86>
 8008ed6:	2a25      	cmp	r2, #37	@ 0x25
 8008ed8:	d1f9      	bne.n	8008ece <_vfiprintf_r+0x7a>
 8008eda:	ebba 0b04 	subs.w	fp, sl, r4
 8008ede:	d00b      	beq.n	8008ef8 <_vfiprintf_r+0xa4>
 8008ee0:	465b      	mov	r3, fp
 8008ee2:	4622      	mov	r2, r4
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	f7ff ffa1 	bl	8008e2e <__sfputs_r>
 8008eec:	3001      	adds	r0, #1
 8008eee:	f000 80a7 	beq.w	8009040 <_vfiprintf_r+0x1ec>
 8008ef2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ef4:	445a      	add	r2, fp
 8008ef6:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f000 809f 	beq.w	8009040 <_vfiprintf_r+0x1ec>
 8008f02:	2300      	movs	r3, #0
 8008f04:	f04f 32ff 	mov.w	r2, #4294967295
 8008f08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f0c:	f10a 0a01 	add.w	sl, sl, #1
 8008f10:	9304      	str	r3, [sp, #16]
 8008f12:	9307      	str	r3, [sp, #28]
 8008f14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f18:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f1a:	4654      	mov	r4, sl
 8008f1c:	2205      	movs	r2, #5
 8008f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f22:	4853      	ldr	r0, [pc, #332]	@ (8009070 <_vfiprintf_r+0x21c>)
 8008f24:	f7f7 f954 	bl	80001d0 <memchr>
 8008f28:	9a04      	ldr	r2, [sp, #16]
 8008f2a:	b9d8      	cbnz	r0, 8008f64 <_vfiprintf_r+0x110>
 8008f2c:	06d1      	lsls	r1, r2, #27
 8008f2e:	bf44      	itt	mi
 8008f30:	2320      	movmi	r3, #32
 8008f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f36:	0713      	lsls	r3, r2, #28
 8008f38:	bf44      	itt	mi
 8008f3a:	232b      	movmi	r3, #43	@ 0x2b
 8008f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f40:	f89a 3000 	ldrb.w	r3, [sl]
 8008f44:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f46:	d015      	beq.n	8008f74 <_vfiprintf_r+0x120>
 8008f48:	9a07      	ldr	r2, [sp, #28]
 8008f4a:	4654      	mov	r4, sl
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	f04f 0c0a 	mov.w	ip, #10
 8008f52:	4621      	mov	r1, r4
 8008f54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f58:	3b30      	subs	r3, #48	@ 0x30
 8008f5a:	2b09      	cmp	r3, #9
 8008f5c:	d94b      	bls.n	8008ff6 <_vfiprintf_r+0x1a2>
 8008f5e:	b1b0      	cbz	r0, 8008f8e <_vfiprintf_r+0x13a>
 8008f60:	9207      	str	r2, [sp, #28]
 8008f62:	e014      	b.n	8008f8e <_vfiprintf_r+0x13a>
 8008f64:	eba0 0308 	sub.w	r3, r0, r8
 8008f68:	fa09 f303 	lsl.w	r3, r9, r3
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	9304      	str	r3, [sp, #16]
 8008f70:	46a2      	mov	sl, r4
 8008f72:	e7d2      	b.n	8008f1a <_vfiprintf_r+0xc6>
 8008f74:	9b03      	ldr	r3, [sp, #12]
 8008f76:	1d19      	adds	r1, r3, #4
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	9103      	str	r1, [sp, #12]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	bfbb      	ittet	lt
 8008f80:	425b      	neglt	r3, r3
 8008f82:	f042 0202 	orrlt.w	r2, r2, #2
 8008f86:	9307      	strge	r3, [sp, #28]
 8008f88:	9307      	strlt	r3, [sp, #28]
 8008f8a:	bfb8      	it	lt
 8008f8c:	9204      	strlt	r2, [sp, #16]
 8008f8e:	7823      	ldrb	r3, [r4, #0]
 8008f90:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f92:	d10a      	bne.n	8008faa <_vfiprintf_r+0x156>
 8008f94:	7863      	ldrb	r3, [r4, #1]
 8008f96:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f98:	d132      	bne.n	8009000 <_vfiprintf_r+0x1ac>
 8008f9a:	9b03      	ldr	r3, [sp, #12]
 8008f9c:	1d1a      	adds	r2, r3, #4
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	9203      	str	r2, [sp, #12]
 8008fa2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fa6:	3402      	adds	r4, #2
 8008fa8:	9305      	str	r3, [sp, #20]
 8008faa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009080 <_vfiprintf_r+0x22c>
 8008fae:	7821      	ldrb	r1, [r4, #0]
 8008fb0:	2203      	movs	r2, #3
 8008fb2:	4650      	mov	r0, sl
 8008fb4:	f7f7 f90c 	bl	80001d0 <memchr>
 8008fb8:	b138      	cbz	r0, 8008fca <_vfiprintf_r+0x176>
 8008fba:	9b04      	ldr	r3, [sp, #16]
 8008fbc:	eba0 000a 	sub.w	r0, r0, sl
 8008fc0:	2240      	movs	r2, #64	@ 0x40
 8008fc2:	4082      	lsls	r2, r0
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	3401      	adds	r4, #1
 8008fc8:	9304      	str	r3, [sp, #16]
 8008fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fce:	4829      	ldr	r0, [pc, #164]	@ (8009074 <_vfiprintf_r+0x220>)
 8008fd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fd4:	2206      	movs	r2, #6
 8008fd6:	f7f7 f8fb 	bl	80001d0 <memchr>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	d03f      	beq.n	800905e <_vfiprintf_r+0x20a>
 8008fde:	4b26      	ldr	r3, [pc, #152]	@ (8009078 <_vfiprintf_r+0x224>)
 8008fe0:	bb1b      	cbnz	r3, 800902a <_vfiprintf_r+0x1d6>
 8008fe2:	9b03      	ldr	r3, [sp, #12]
 8008fe4:	3307      	adds	r3, #7
 8008fe6:	f023 0307 	bic.w	r3, r3, #7
 8008fea:	3308      	adds	r3, #8
 8008fec:	9303      	str	r3, [sp, #12]
 8008fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ff0:	443b      	add	r3, r7
 8008ff2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ff4:	e76a      	b.n	8008ecc <_vfiprintf_r+0x78>
 8008ff6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	2001      	movs	r0, #1
 8008ffe:	e7a8      	b.n	8008f52 <_vfiprintf_r+0xfe>
 8009000:	2300      	movs	r3, #0
 8009002:	3401      	adds	r4, #1
 8009004:	9305      	str	r3, [sp, #20]
 8009006:	4619      	mov	r1, r3
 8009008:	f04f 0c0a 	mov.w	ip, #10
 800900c:	4620      	mov	r0, r4
 800900e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009012:	3a30      	subs	r2, #48	@ 0x30
 8009014:	2a09      	cmp	r2, #9
 8009016:	d903      	bls.n	8009020 <_vfiprintf_r+0x1cc>
 8009018:	2b00      	cmp	r3, #0
 800901a:	d0c6      	beq.n	8008faa <_vfiprintf_r+0x156>
 800901c:	9105      	str	r1, [sp, #20]
 800901e:	e7c4      	b.n	8008faa <_vfiprintf_r+0x156>
 8009020:	fb0c 2101 	mla	r1, ip, r1, r2
 8009024:	4604      	mov	r4, r0
 8009026:	2301      	movs	r3, #1
 8009028:	e7f0      	b.n	800900c <_vfiprintf_r+0x1b8>
 800902a:	ab03      	add	r3, sp, #12
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	462a      	mov	r2, r5
 8009030:	4b12      	ldr	r3, [pc, #72]	@ (800907c <_vfiprintf_r+0x228>)
 8009032:	a904      	add	r1, sp, #16
 8009034:	4630      	mov	r0, r6
 8009036:	f3af 8000 	nop.w
 800903a:	4607      	mov	r7, r0
 800903c:	1c78      	adds	r0, r7, #1
 800903e:	d1d6      	bne.n	8008fee <_vfiprintf_r+0x19a>
 8009040:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009042:	07d9      	lsls	r1, r3, #31
 8009044:	d405      	bmi.n	8009052 <_vfiprintf_r+0x1fe>
 8009046:	89ab      	ldrh	r3, [r5, #12]
 8009048:	059a      	lsls	r2, r3, #22
 800904a:	d402      	bmi.n	8009052 <_vfiprintf_r+0x1fe>
 800904c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800904e:	f7ff fdcf 	bl	8008bf0 <__retarget_lock_release_recursive>
 8009052:	89ab      	ldrh	r3, [r5, #12]
 8009054:	065b      	lsls	r3, r3, #25
 8009056:	f53f af1f 	bmi.w	8008e98 <_vfiprintf_r+0x44>
 800905a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800905c:	e71e      	b.n	8008e9c <_vfiprintf_r+0x48>
 800905e:	ab03      	add	r3, sp, #12
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	462a      	mov	r2, r5
 8009064:	4b05      	ldr	r3, [pc, #20]	@ (800907c <_vfiprintf_r+0x228>)
 8009066:	a904      	add	r1, sp, #16
 8009068:	4630      	mov	r0, r6
 800906a:	f000 f879 	bl	8009160 <_printf_i>
 800906e:	e7e4      	b.n	800903a <_vfiprintf_r+0x1e6>
 8009070:	080097d8 	.word	0x080097d8
 8009074:	080097e2 	.word	0x080097e2
 8009078:	00000000 	.word	0x00000000
 800907c:	08008e2f 	.word	0x08008e2f
 8009080:	080097de 	.word	0x080097de

08009084 <_printf_common>:
 8009084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009088:	4616      	mov	r6, r2
 800908a:	4698      	mov	r8, r3
 800908c:	688a      	ldr	r2, [r1, #8]
 800908e:	690b      	ldr	r3, [r1, #16]
 8009090:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009094:	4293      	cmp	r3, r2
 8009096:	bfb8      	it	lt
 8009098:	4613      	movlt	r3, r2
 800909a:	6033      	str	r3, [r6, #0]
 800909c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80090a0:	4607      	mov	r7, r0
 80090a2:	460c      	mov	r4, r1
 80090a4:	b10a      	cbz	r2, 80090aa <_printf_common+0x26>
 80090a6:	3301      	adds	r3, #1
 80090a8:	6033      	str	r3, [r6, #0]
 80090aa:	6823      	ldr	r3, [r4, #0]
 80090ac:	0699      	lsls	r1, r3, #26
 80090ae:	bf42      	ittt	mi
 80090b0:	6833      	ldrmi	r3, [r6, #0]
 80090b2:	3302      	addmi	r3, #2
 80090b4:	6033      	strmi	r3, [r6, #0]
 80090b6:	6825      	ldr	r5, [r4, #0]
 80090b8:	f015 0506 	ands.w	r5, r5, #6
 80090bc:	d106      	bne.n	80090cc <_printf_common+0x48>
 80090be:	f104 0a19 	add.w	sl, r4, #25
 80090c2:	68e3      	ldr	r3, [r4, #12]
 80090c4:	6832      	ldr	r2, [r6, #0]
 80090c6:	1a9b      	subs	r3, r3, r2
 80090c8:	42ab      	cmp	r3, r5
 80090ca:	dc26      	bgt.n	800911a <_printf_common+0x96>
 80090cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80090d0:	6822      	ldr	r2, [r4, #0]
 80090d2:	3b00      	subs	r3, #0
 80090d4:	bf18      	it	ne
 80090d6:	2301      	movne	r3, #1
 80090d8:	0692      	lsls	r2, r2, #26
 80090da:	d42b      	bmi.n	8009134 <_printf_common+0xb0>
 80090dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80090e0:	4641      	mov	r1, r8
 80090e2:	4638      	mov	r0, r7
 80090e4:	47c8      	blx	r9
 80090e6:	3001      	adds	r0, #1
 80090e8:	d01e      	beq.n	8009128 <_printf_common+0xa4>
 80090ea:	6823      	ldr	r3, [r4, #0]
 80090ec:	6922      	ldr	r2, [r4, #16]
 80090ee:	f003 0306 	and.w	r3, r3, #6
 80090f2:	2b04      	cmp	r3, #4
 80090f4:	bf02      	ittt	eq
 80090f6:	68e5      	ldreq	r5, [r4, #12]
 80090f8:	6833      	ldreq	r3, [r6, #0]
 80090fa:	1aed      	subeq	r5, r5, r3
 80090fc:	68a3      	ldr	r3, [r4, #8]
 80090fe:	bf0c      	ite	eq
 8009100:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009104:	2500      	movne	r5, #0
 8009106:	4293      	cmp	r3, r2
 8009108:	bfc4      	itt	gt
 800910a:	1a9b      	subgt	r3, r3, r2
 800910c:	18ed      	addgt	r5, r5, r3
 800910e:	2600      	movs	r6, #0
 8009110:	341a      	adds	r4, #26
 8009112:	42b5      	cmp	r5, r6
 8009114:	d11a      	bne.n	800914c <_printf_common+0xc8>
 8009116:	2000      	movs	r0, #0
 8009118:	e008      	b.n	800912c <_printf_common+0xa8>
 800911a:	2301      	movs	r3, #1
 800911c:	4652      	mov	r2, sl
 800911e:	4641      	mov	r1, r8
 8009120:	4638      	mov	r0, r7
 8009122:	47c8      	blx	r9
 8009124:	3001      	adds	r0, #1
 8009126:	d103      	bne.n	8009130 <_printf_common+0xac>
 8009128:	f04f 30ff 	mov.w	r0, #4294967295
 800912c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009130:	3501      	adds	r5, #1
 8009132:	e7c6      	b.n	80090c2 <_printf_common+0x3e>
 8009134:	18e1      	adds	r1, r4, r3
 8009136:	1c5a      	adds	r2, r3, #1
 8009138:	2030      	movs	r0, #48	@ 0x30
 800913a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800913e:	4422      	add	r2, r4
 8009140:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009144:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009148:	3302      	adds	r3, #2
 800914a:	e7c7      	b.n	80090dc <_printf_common+0x58>
 800914c:	2301      	movs	r3, #1
 800914e:	4622      	mov	r2, r4
 8009150:	4641      	mov	r1, r8
 8009152:	4638      	mov	r0, r7
 8009154:	47c8      	blx	r9
 8009156:	3001      	adds	r0, #1
 8009158:	d0e6      	beq.n	8009128 <_printf_common+0xa4>
 800915a:	3601      	adds	r6, #1
 800915c:	e7d9      	b.n	8009112 <_printf_common+0x8e>
	...

08009160 <_printf_i>:
 8009160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009164:	7e0f      	ldrb	r7, [r1, #24]
 8009166:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009168:	2f78      	cmp	r7, #120	@ 0x78
 800916a:	4691      	mov	r9, r2
 800916c:	4680      	mov	r8, r0
 800916e:	460c      	mov	r4, r1
 8009170:	469a      	mov	sl, r3
 8009172:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009176:	d807      	bhi.n	8009188 <_printf_i+0x28>
 8009178:	2f62      	cmp	r7, #98	@ 0x62
 800917a:	d80a      	bhi.n	8009192 <_printf_i+0x32>
 800917c:	2f00      	cmp	r7, #0
 800917e:	f000 80d1 	beq.w	8009324 <_printf_i+0x1c4>
 8009182:	2f58      	cmp	r7, #88	@ 0x58
 8009184:	f000 80b8 	beq.w	80092f8 <_printf_i+0x198>
 8009188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800918c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009190:	e03a      	b.n	8009208 <_printf_i+0xa8>
 8009192:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009196:	2b15      	cmp	r3, #21
 8009198:	d8f6      	bhi.n	8009188 <_printf_i+0x28>
 800919a:	a101      	add	r1, pc, #4	@ (adr r1, 80091a0 <_printf_i+0x40>)
 800919c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091a0:	080091f9 	.word	0x080091f9
 80091a4:	0800920d 	.word	0x0800920d
 80091a8:	08009189 	.word	0x08009189
 80091ac:	08009189 	.word	0x08009189
 80091b0:	08009189 	.word	0x08009189
 80091b4:	08009189 	.word	0x08009189
 80091b8:	0800920d 	.word	0x0800920d
 80091bc:	08009189 	.word	0x08009189
 80091c0:	08009189 	.word	0x08009189
 80091c4:	08009189 	.word	0x08009189
 80091c8:	08009189 	.word	0x08009189
 80091cc:	0800930b 	.word	0x0800930b
 80091d0:	08009237 	.word	0x08009237
 80091d4:	080092c5 	.word	0x080092c5
 80091d8:	08009189 	.word	0x08009189
 80091dc:	08009189 	.word	0x08009189
 80091e0:	0800932d 	.word	0x0800932d
 80091e4:	08009189 	.word	0x08009189
 80091e8:	08009237 	.word	0x08009237
 80091ec:	08009189 	.word	0x08009189
 80091f0:	08009189 	.word	0x08009189
 80091f4:	080092cd 	.word	0x080092cd
 80091f8:	6833      	ldr	r3, [r6, #0]
 80091fa:	1d1a      	adds	r2, r3, #4
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	6032      	str	r2, [r6, #0]
 8009200:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009204:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009208:	2301      	movs	r3, #1
 800920a:	e09c      	b.n	8009346 <_printf_i+0x1e6>
 800920c:	6833      	ldr	r3, [r6, #0]
 800920e:	6820      	ldr	r0, [r4, #0]
 8009210:	1d19      	adds	r1, r3, #4
 8009212:	6031      	str	r1, [r6, #0]
 8009214:	0606      	lsls	r6, r0, #24
 8009216:	d501      	bpl.n	800921c <_printf_i+0xbc>
 8009218:	681d      	ldr	r5, [r3, #0]
 800921a:	e003      	b.n	8009224 <_printf_i+0xc4>
 800921c:	0645      	lsls	r5, r0, #25
 800921e:	d5fb      	bpl.n	8009218 <_printf_i+0xb8>
 8009220:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009224:	2d00      	cmp	r5, #0
 8009226:	da03      	bge.n	8009230 <_printf_i+0xd0>
 8009228:	232d      	movs	r3, #45	@ 0x2d
 800922a:	426d      	negs	r5, r5
 800922c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009230:	4858      	ldr	r0, [pc, #352]	@ (8009394 <_printf_i+0x234>)
 8009232:	230a      	movs	r3, #10
 8009234:	e011      	b.n	800925a <_printf_i+0xfa>
 8009236:	6821      	ldr	r1, [r4, #0]
 8009238:	6833      	ldr	r3, [r6, #0]
 800923a:	0608      	lsls	r0, r1, #24
 800923c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009240:	d402      	bmi.n	8009248 <_printf_i+0xe8>
 8009242:	0649      	lsls	r1, r1, #25
 8009244:	bf48      	it	mi
 8009246:	b2ad      	uxthmi	r5, r5
 8009248:	2f6f      	cmp	r7, #111	@ 0x6f
 800924a:	4852      	ldr	r0, [pc, #328]	@ (8009394 <_printf_i+0x234>)
 800924c:	6033      	str	r3, [r6, #0]
 800924e:	bf14      	ite	ne
 8009250:	230a      	movne	r3, #10
 8009252:	2308      	moveq	r3, #8
 8009254:	2100      	movs	r1, #0
 8009256:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800925a:	6866      	ldr	r6, [r4, #4]
 800925c:	60a6      	str	r6, [r4, #8]
 800925e:	2e00      	cmp	r6, #0
 8009260:	db05      	blt.n	800926e <_printf_i+0x10e>
 8009262:	6821      	ldr	r1, [r4, #0]
 8009264:	432e      	orrs	r6, r5
 8009266:	f021 0104 	bic.w	r1, r1, #4
 800926a:	6021      	str	r1, [r4, #0]
 800926c:	d04b      	beq.n	8009306 <_printf_i+0x1a6>
 800926e:	4616      	mov	r6, r2
 8009270:	fbb5 f1f3 	udiv	r1, r5, r3
 8009274:	fb03 5711 	mls	r7, r3, r1, r5
 8009278:	5dc7      	ldrb	r7, [r0, r7]
 800927a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800927e:	462f      	mov	r7, r5
 8009280:	42bb      	cmp	r3, r7
 8009282:	460d      	mov	r5, r1
 8009284:	d9f4      	bls.n	8009270 <_printf_i+0x110>
 8009286:	2b08      	cmp	r3, #8
 8009288:	d10b      	bne.n	80092a2 <_printf_i+0x142>
 800928a:	6823      	ldr	r3, [r4, #0]
 800928c:	07df      	lsls	r7, r3, #31
 800928e:	d508      	bpl.n	80092a2 <_printf_i+0x142>
 8009290:	6923      	ldr	r3, [r4, #16]
 8009292:	6861      	ldr	r1, [r4, #4]
 8009294:	4299      	cmp	r1, r3
 8009296:	bfde      	ittt	le
 8009298:	2330      	movle	r3, #48	@ 0x30
 800929a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800929e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80092a2:	1b92      	subs	r2, r2, r6
 80092a4:	6122      	str	r2, [r4, #16]
 80092a6:	f8cd a000 	str.w	sl, [sp]
 80092aa:	464b      	mov	r3, r9
 80092ac:	aa03      	add	r2, sp, #12
 80092ae:	4621      	mov	r1, r4
 80092b0:	4640      	mov	r0, r8
 80092b2:	f7ff fee7 	bl	8009084 <_printf_common>
 80092b6:	3001      	adds	r0, #1
 80092b8:	d14a      	bne.n	8009350 <_printf_i+0x1f0>
 80092ba:	f04f 30ff 	mov.w	r0, #4294967295
 80092be:	b004      	add	sp, #16
 80092c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c4:	6823      	ldr	r3, [r4, #0]
 80092c6:	f043 0320 	orr.w	r3, r3, #32
 80092ca:	6023      	str	r3, [r4, #0]
 80092cc:	4832      	ldr	r0, [pc, #200]	@ (8009398 <_printf_i+0x238>)
 80092ce:	2778      	movs	r7, #120	@ 0x78
 80092d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80092d4:	6823      	ldr	r3, [r4, #0]
 80092d6:	6831      	ldr	r1, [r6, #0]
 80092d8:	061f      	lsls	r7, r3, #24
 80092da:	f851 5b04 	ldr.w	r5, [r1], #4
 80092de:	d402      	bmi.n	80092e6 <_printf_i+0x186>
 80092e0:	065f      	lsls	r7, r3, #25
 80092e2:	bf48      	it	mi
 80092e4:	b2ad      	uxthmi	r5, r5
 80092e6:	6031      	str	r1, [r6, #0]
 80092e8:	07d9      	lsls	r1, r3, #31
 80092ea:	bf44      	itt	mi
 80092ec:	f043 0320 	orrmi.w	r3, r3, #32
 80092f0:	6023      	strmi	r3, [r4, #0]
 80092f2:	b11d      	cbz	r5, 80092fc <_printf_i+0x19c>
 80092f4:	2310      	movs	r3, #16
 80092f6:	e7ad      	b.n	8009254 <_printf_i+0xf4>
 80092f8:	4826      	ldr	r0, [pc, #152]	@ (8009394 <_printf_i+0x234>)
 80092fa:	e7e9      	b.n	80092d0 <_printf_i+0x170>
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	f023 0320 	bic.w	r3, r3, #32
 8009302:	6023      	str	r3, [r4, #0]
 8009304:	e7f6      	b.n	80092f4 <_printf_i+0x194>
 8009306:	4616      	mov	r6, r2
 8009308:	e7bd      	b.n	8009286 <_printf_i+0x126>
 800930a:	6833      	ldr	r3, [r6, #0]
 800930c:	6825      	ldr	r5, [r4, #0]
 800930e:	6961      	ldr	r1, [r4, #20]
 8009310:	1d18      	adds	r0, r3, #4
 8009312:	6030      	str	r0, [r6, #0]
 8009314:	062e      	lsls	r6, r5, #24
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	d501      	bpl.n	800931e <_printf_i+0x1be>
 800931a:	6019      	str	r1, [r3, #0]
 800931c:	e002      	b.n	8009324 <_printf_i+0x1c4>
 800931e:	0668      	lsls	r0, r5, #25
 8009320:	d5fb      	bpl.n	800931a <_printf_i+0x1ba>
 8009322:	8019      	strh	r1, [r3, #0]
 8009324:	2300      	movs	r3, #0
 8009326:	6123      	str	r3, [r4, #16]
 8009328:	4616      	mov	r6, r2
 800932a:	e7bc      	b.n	80092a6 <_printf_i+0x146>
 800932c:	6833      	ldr	r3, [r6, #0]
 800932e:	1d1a      	adds	r2, r3, #4
 8009330:	6032      	str	r2, [r6, #0]
 8009332:	681e      	ldr	r6, [r3, #0]
 8009334:	6862      	ldr	r2, [r4, #4]
 8009336:	2100      	movs	r1, #0
 8009338:	4630      	mov	r0, r6
 800933a:	f7f6 ff49 	bl	80001d0 <memchr>
 800933e:	b108      	cbz	r0, 8009344 <_printf_i+0x1e4>
 8009340:	1b80      	subs	r0, r0, r6
 8009342:	6060      	str	r0, [r4, #4]
 8009344:	6863      	ldr	r3, [r4, #4]
 8009346:	6123      	str	r3, [r4, #16]
 8009348:	2300      	movs	r3, #0
 800934a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800934e:	e7aa      	b.n	80092a6 <_printf_i+0x146>
 8009350:	6923      	ldr	r3, [r4, #16]
 8009352:	4632      	mov	r2, r6
 8009354:	4649      	mov	r1, r9
 8009356:	4640      	mov	r0, r8
 8009358:	47d0      	blx	sl
 800935a:	3001      	adds	r0, #1
 800935c:	d0ad      	beq.n	80092ba <_printf_i+0x15a>
 800935e:	6823      	ldr	r3, [r4, #0]
 8009360:	079b      	lsls	r3, r3, #30
 8009362:	d413      	bmi.n	800938c <_printf_i+0x22c>
 8009364:	68e0      	ldr	r0, [r4, #12]
 8009366:	9b03      	ldr	r3, [sp, #12]
 8009368:	4298      	cmp	r0, r3
 800936a:	bfb8      	it	lt
 800936c:	4618      	movlt	r0, r3
 800936e:	e7a6      	b.n	80092be <_printf_i+0x15e>
 8009370:	2301      	movs	r3, #1
 8009372:	4632      	mov	r2, r6
 8009374:	4649      	mov	r1, r9
 8009376:	4640      	mov	r0, r8
 8009378:	47d0      	blx	sl
 800937a:	3001      	adds	r0, #1
 800937c:	d09d      	beq.n	80092ba <_printf_i+0x15a>
 800937e:	3501      	adds	r5, #1
 8009380:	68e3      	ldr	r3, [r4, #12]
 8009382:	9903      	ldr	r1, [sp, #12]
 8009384:	1a5b      	subs	r3, r3, r1
 8009386:	42ab      	cmp	r3, r5
 8009388:	dcf2      	bgt.n	8009370 <_printf_i+0x210>
 800938a:	e7eb      	b.n	8009364 <_printf_i+0x204>
 800938c:	2500      	movs	r5, #0
 800938e:	f104 0619 	add.w	r6, r4, #25
 8009392:	e7f5      	b.n	8009380 <_printf_i+0x220>
 8009394:	080097e9 	.word	0x080097e9
 8009398:	080097fa 	.word	0x080097fa

0800939c <__sflush_r>:
 800939c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a4:	0716      	lsls	r6, r2, #28
 80093a6:	4605      	mov	r5, r0
 80093a8:	460c      	mov	r4, r1
 80093aa:	d454      	bmi.n	8009456 <__sflush_r+0xba>
 80093ac:	684b      	ldr	r3, [r1, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	dc02      	bgt.n	80093b8 <__sflush_r+0x1c>
 80093b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	dd48      	ble.n	800944a <__sflush_r+0xae>
 80093b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093ba:	2e00      	cmp	r6, #0
 80093bc:	d045      	beq.n	800944a <__sflush_r+0xae>
 80093be:	2300      	movs	r3, #0
 80093c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80093c4:	682f      	ldr	r7, [r5, #0]
 80093c6:	6a21      	ldr	r1, [r4, #32]
 80093c8:	602b      	str	r3, [r5, #0]
 80093ca:	d030      	beq.n	800942e <__sflush_r+0x92>
 80093cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80093ce:	89a3      	ldrh	r3, [r4, #12]
 80093d0:	0759      	lsls	r1, r3, #29
 80093d2:	d505      	bpl.n	80093e0 <__sflush_r+0x44>
 80093d4:	6863      	ldr	r3, [r4, #4]
 80093d6:	1ad2      	subs	r2, r2, r3
 80093d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80093da:	b10b      	cbz	r3, 80093e0 <__sflush_r+0x44>
 80093dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80093de:	1ad2      	subs	r2, r2, r3
 80093e0:	2300      	movs	r3, #0
 80093e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093e4:	6a21      	ldr	r1, [r4, #32]
 80093e6:	4628      	mov	r0, r5
 80093e8:	47b0      	blx	r6
 80093ea:	1c43      	adds	r3, r0, #1
 80093ec:	89a3      	ldrh	r3, [r4, #12]
 80093ee:	d106      	bne.n	80093fe <__sflush_r+0x62>
 80093f0:	6829      	ldr	r1, [r5, #0]
 80093f2:	291d      	cmp	r1, #29
 80093f4:	d82b      	bhi.n	800944e <__sflush_r+0xb2>
 80093f6:	4a2a      	ldr	r2, [pc, #168]	@ (80094a0 <__sflush_r+0x104>)
 80093f8:	40ca      	lsrs	r2, r1
 80093fa:	07d6      	lsls	r6, r2, #31
 80093fc:	d527      	bpl.n	800944e <__sflush_r+0xb2>
 80093fe:	2200      	movs	r2, #0
 8009400:	6062      	str	r2, [r4, #4]
 8009402:	04d9      	lsls	r1, r3, #19
 8009404:	6922      	ldr	r2, [r4, #16]
 8009406:	6022      	str	r2, [r4, #0]
 8009408:	d504      	bpl.n	8009414 <__sflush_r+0x78>
 800940a:	1c42      	adds	r2, r0, #1
 800940c:	d101      	bne.n	8009412 <__sflush_r+0x76>
 800940e:	682b      	ldr	r3, [r5, #0]
 8009410:	b903      	cbnz	r3, 8009414 <__sflush_r+0x78>
 8009412:	6560      	str	r0, [r4, #84]	@ 0x54
 8009414:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009416:	602f      	str	r7, [r5, #0]
 8009418:	b1b9      	cbz	r1, 800944a <__sflush_r+0xae>
 800941a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800941e:	4299      	cmp	r1, r3
 8009420:	d002      	beq.n	8009428 <__sflush_r+0x8c>
 8009422:	4628      	mov	r0, r5
 8009424:	f7ff fbf4 	bl	8008c10 <_free_r>
 8009428:	2300      	movs	r3, #0
 800942a:	6363      	str	r3, [r4, #52]	@ 0x34
 800942c:	e00d      	b.n	800944a <__sflush_r+0xae>
 800942e:	2301      	movs	r3, #1
 8009430:	4628      	mov	r0, r5
 8009432:	47b0      	blx	r6
 8009434:	4602      	mov	r2, r0
 8009436:	1c50      	adds	r0, r2, #1
 8009438:	d1c9      	bne.n	80093ce <__sflush_r+0x32>
 800943a:	682b      	ldr	r3, [r5, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d0c6      	beq.n	80093ce <__sflush_r+0x32>
 8009440:	2b1d      	cmp	r3, #29
 8009442:	d001      	beq.n	8009448 <__sflush_r+0xac>
 8009444:	2b16      	cmp	r3, #22
 8009446:	d11e      	bne.n	8009486 <__sflush_r+0xea>
 8009448:	602f      	str	r7, [r5, #0]
 800944a:	2000      	movs	r0, #0
 800944c:	e022      	b.n	8009494 <__sflush_r+0xf8>
 800944e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009452:	b21b      	sxth	r3, r3
 8009454:	e01b      	b.n	800948e <__sflush_r+0xf2>
 8009456:	690f      	ldr	r7, [r1, #16]
 8009458:	2f00      	cmp	r7, #0
 800945a:	d0f6      	beq.n	800944a <__sflush_r+0xae>
 800945c:	0793      	lsls	r3, r2, #30
 800945e:	680e      	ldr	r6, [r1, #0]
 8009460:	bf08      	it	eq
 8009462:	694b      	ldreq	r3, [r1, #20]
 8009464:	600f      	str	r7, [r1, #0]
 8009466:	bf18      	it	ne
 8009468:	2300      	movne	r3, #0
 800946a:	eba6 0807 	sub.w	r8, r6, r7
 800946e:	608b      	str	r3, [r1, #8]
 8009470:	f1b8 0f00 	cmp.w	r8, #0
 8009474:	dde9      	ble.n	800944a <__sflush_r+0xae>
 8009476:	6a21      	ldr	r1, [r4, #32]
 8009478:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800947a:	4643      	mov	r3, r8
 800947c:	463a      	mov	r2, r7
 800947e:	4628      	mov	r0, r5
 8009480:	47b0      	blx	r6
 8009482:	2800      	cmp	r0, #0
 8009484:	dc08      	bgt.n	8009498 <__sflush_r+0xfc>
 8009486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800948a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800948e:	81a3      	strh	r3, [r4, #12]
 8009490:	f04f 30ff 	mov.w	r0, #4294967295
 8009494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009498:	4407      	add	r7, r0
 800949a:	eba8 0800 	sub.w	r8, r8, r0
 800949e:	e7e7      	b.n	8009470 <__sflush_r+0xd4>
 80094a0:	20400001 	.word	0x20400001

080094a4 <_fflush_r>:
 80094a4:	b538      	push	{r3, r4, r5, lr}
 80094a6:	690b      	ldr	r3, [r1, #16]
 80094a8:	4605      	mov	r5, r0
 80094aa:	460c      	mov	r4, r1
 80094ac:	b913      	cbnz	r3, 80094b4 <_fflush_r+0x10>
 80094ae:	2500      	movs	r5, #0
 80094b0:	4628      	mov	r0, r5
 80094b2:	bd38      	pop	{r3, r4, r5, pc}
 80094b4:	b118      	cbz	r0, 80094be <_fflush_r+0x1a>
 80094b6:	6a03      	ldr	r3, [r0, #32]
 80094b8:	b90b      	cbnz	r3, 80094be <_fflush_r+0x1a>
 80094ba:	f7ff f999 	bl	80087f0 <__sinit>
 80094be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d0f3      	beq.n	80094ae <_fflush_r+0xa>
 80094c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80094c8:	07d0      	lsls	r0, r2, #31
 80094ca:	d404      	bmi.n	80094d6 <_fflush_r+0x32>
 80094cc:	0599      	lsls	r1, r3, #22
 80094ce:	d402      	bmi.n	80094d6 <_fflush_r+0x32>
 80094d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094d2:	f7ff fb8c 	bl	8008bee <__retarget_lock_acquire_recursive>
 80094d6:	4628      	mov	r0, r5
 80094d8:	4621      	mov	r1, r4
 80094da:	f7ff ff5f 	bl	800939c <__sflush_r>
 80094de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80094e0:	07da      	lsls	r2, r3, #31
 80094e2:	4605      	mov	r5, r0
 80094e4:	d4e4      	bmi.n	80094b0 <_fflush_r+0xc>
 80094e6:	89a3      	ldrh	r3, [r4, #12]
 80094e8:	059b      	lsls	r3, r3, #22
 80094ea:	d4e1      	bmi.n	80094b0 <_fflush_r+0xc>
 80094ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094ee:	f7ff fb7f 	bl	8008bf0 <__retarget_lock_release_recursive>
 80094f2:	e7dd      	b.n	80094b0 <_fflush_r+0xc>

080094f4 <__swhatbuf_r>:
 80094f4:	b570      	push	{r4, r5, r6, lr}
 80094f6:	460c      	mov	r4, r1
 80094f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094fc:	2900      	cmp	r1, #0
 80094fe:	b096      	sub	sp, #88	@ 0x58
 8009500:	4615      	mov	r5, r2
 8009502:	461e      	mov	r6, r3
 8009504:	da0d      	bge.n	8009522 <__swhatbuf_r+0x2e>
 8009506:	89a3      	ldrh	r3, [r4, #12]
 8009508:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800950c:	f04f 0100 	mov.w	r1, #0
 8009510:	bf14      	ite	ne
 8009512:	2340      	movne	r3, #64	@ 0x40
 8009514:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009518:	2000      	movs	r0, #0
 800951a:	6031      	str	r1, [r6, #0]
 800951c:	602b      	str	r3, [r5, #0]
 800951e:	b016      	add	sp, #88	@ 0x58
 8009520:	bd70      	pop	{r4, r5, r6, pc}
 8009522:	466a      	mov	r2, sp
 8009524:	f000 f87c 	bl	8009620 <_fstat_r>
 8009528:	2800      	cmp	r0, #0
 800952a:	dbec      	blt.n	8009506 <__swhatbuf_r+0x12>
 800952c:	9901      	ldr	r1, [sp, #4]
 800952e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009532:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009536:	4259      	negs	r1, r3
 8009538:	4159      	adcs	r1, r3
 800953a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800953e:	e7eb      	b.n	8009518 <__swhatbuf_r+0x24>

08009540 <__smakebuf_r>:
 8009540:	898b      	ldrh	r3, [r1, #12]
 8009542:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009544:	079d      	lsls	r5, r3, #30
 8009546:	4606      	mov	r6, r0
 8009548:	460c      	mov	r4, r1
 800954a:	d507      	bpl.n	800955c <__smakebuf_r+0x1c>
 800954c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	6123      	str	r3, [r4, #16]
 8009554:	2301      	movs	r3, #1
 8009556:	6163      	str	r3, [r4, #20]
 8009558:	b003      	add	sp, #12
 800955a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800955c:	ab01      	add	r3, sp, #4
 800955e:	466a      	mov	r2, sp
 8009560:	f7ff ffc8 	bl	80094f4 <__swhatbuf_r>
 8009564:	9f00      	ldr	r7, [sp, #0]
 8009566:	4605      	mov	r5, r0
 8009568:	4639      	mov	r1, r7
 800956a:	4630      	mov	r0, r6
 800956c:	f7ff fbbc 	bl	8008ce8 <_malloc_r>
 8009570:	b948      	cbnz	r0, 8009586 <__smakebuf_r+0x46>
 8009572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009576:	059a      	lsls	r2, r3, #22
 8009578:	d4ee      	bmi.n	8009558 <__smakebuf_r+0x18>
 800957a:	f023 0303 	bic.w	r3, r3, #3
 800957e:	f043 0302 	orr.w	r3, r3, #2
 8009582:	81a3      	strh	r3, [r4, #12]
 8009584:	e7e2      	b.n	800954c <__smakebuf_r+0xc>
 8009586:	89a3      	ldrh	r3, [r4, #12]
 8009588:	6020      	str	r0, [r4, #0]
 800958a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800958e:	81a3      	strh	r3, [r4, #12]
 8009590:	9b01      	ldr	r3, [sp, #4]
 8009592:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009596:	b15b      	cbz	r3, 80095b0 <__smakebuf_r+0x70>
 8009598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800959c:	4630      	mov	r0, r6
 800959e:	f000 f851 	bl	8009644 <_isatty_r>
 80095a2:	b128      	cbz	r0, 80095b0 <__smakebuf_r+0x70>
 80095a4:	89a3      	ldrh	r3, [r4, #12]
 80095a6:	f023 0303 	bic.w	r3, r3, #3
 80095aa:	f043 0301 	orr.w	r3, r3, #1
 80095ae:	81a3      	strh	r3, [r4, #12]
 80095b0:	89a3      	ldrh	r3, [r4, #12]
 80095b2:	431d      	orrs	r5, r3
 80095b4:	81a5      	strh	r5, [r4, #12]
 80095b6:	e7cf      	b.n	8009558 <__smakebuf_r+0x18>

080095b8 <_putc_r>:
 80095b8:	b570      	push	{r4, r5, r6, lr}
 80095ba:	460d      	mov	r5, r1
 80095bc:	4614      	mov	r4, r2
 80095be:	4606      	mov	r6, r0
 80095c0:	b118      	cbz	r0, 80095ca <_putc_r+0x12>
 80095c2:	6a03      	ldr	r3, [r0, #32]
 80095c4:	b90b      	cbnz	r3, 80095ca <_putc_r+0x12>
 80095c6:	f7ff f913 	bl	80087f0 <__sinit>
 80095ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095cc:	07d8      	lsls	r0, r3, #31
 80095ce:	d405      	bmi.n	80095dc <_putc_r+0x24>
 80095d0:	89a3      	ldrh	r3, [r4, #12]
 80095d2:	0599      	lsls	r1, r3, #22
 80095d4:	d402      	bmi.n	80095dc <_putc_r+0x24>
 80095d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095d8:	f7ff fb09 	bl	8008bee <__retarget_lock_acquire_recursive>
 80095dc:	68a3      	ldr	r3, [r4, #8]
 80095de:	3b01      	subs	r3, #1
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	60a3      	str	r3, [r4, #8]
 80095e4:	da05      	bge.n	80095f2 <_putc_r+0x3a>
 80095e6:	69a2      	ldr	r2, [r4, #24]
 80095e8:	4293      	cmp	r3, r2
 80095ea:	db12      	blt.n	8009612 <_putc_r+0x5a>
 80095ec:	b2eb      	uxtb	r3, r5
 80095ee:	2b0a      	cmp	r3, #10
 80095f0:	d00f      	beq.n	8009612 <_putc_r+0x5a>
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	1c5a      	adds	r2, r3, #1
 80095f6:	6022      	str	r2, [r4, #0]
 80095f8:	701d      	strb	r5, [r3, #0]
 80095fa:	b2ed      	uxtb	r5, r5
 80095fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095fe:	07da      	lsls	r2, r3, #31
 8009600:	d405      	bmi.n	800960e <_putc_r+0x56>
 8009602:	89a3      	ldrh	r3, [r4, #12]
 8009604:	059b      	lsls	r3, r3, #22
 8009606:	d402      	bmi.n	800960e <_putc_r+0x56>
 8009608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800960a:	f7ff faf1 	bl	8008bf0 <__retarget_lock_release_recursive>
 800960e:	4628      	mov	r0, r5
 8009610:	bd70      	pop	{r4, r5, r6, pc}
 8009612:	4629      	mov	r1, r5
 8009614:	4622      	mov	r2, r4
 8009616:	4630      	mov	r0, r6
 8009618:	f7ff f9db 	bl	80089d2 <__swbuf_r>
 800961c:	4605      	mov	r5, r0
 800961e:	e7ed      	b.n	80095fc <_putc_r+0x44>

08009620 <_fstat_r>:
 8009620:	b538      	push	{r3, r4, r5, lr}
 8009622:	4d07      	ldr	r5, [pc, #28]	@ (8009640 <_fstat_r+0x20>)
 8009624:	2300      	movs	r3, #0
 8009626:	4604      	mov	r4, r0
 8009628:	4608      	mov	r0, r1
 800962a:	4611      	mov	r1, r2
 800962c:	602b      	str	r3, [r5, #0]
 800962e:	f7f7 fc13 	bl	8000e58 <_fstat>
 8009632:	1c43      	adds	r3, r0, #1
 8009634:	d102      	bne.n	800963c <_fstat_r+0x1c>
 8009636:	682b      	ldr	r3, [r5, #0]
 8009638:	b103      	cbz	r3, 800963c <_fstat_r+0x1c>
 800963a:	6023      	str	r3, [r4, #0]
 800963c:	bd38      	pop	{r3, r4, r5, pc}
 800963e:	bf00      	nop
 8009640:	2000236c 	.word	0x2000236c

08009644 <_isatty_r>:
 8009644:	b538      	push	{r3, r4, r5, lr}
 8009646:	4d06      	ldr	r5, [pc, #24]	@ (8009660 <_isatty_r+0x1c>)
 8009648:	2300      	movs	r3, #0
 800964a:	4604      	mov	r4, r0
 800964c:	4608      	mov	r0, r1
 800964e:	602b      	str	r3, [r5, #0]
 8009650:	f7f7 fc12 	bl	8000e78 <_isatty>
 8009654:	1c43      	adds	r3, r0, #1
 8009656:	d102      	bne.n	800965e <_isatty_r+0x1a>
 8009658:	682b      	ldr	r3, [r5, #0]
 800965a:	b103      	cbz	r3, 800965e <_isatty_r+0x1a>
 800965c:	6023      	str	r3, [r4, #0]
 800965e:	bd38      	pop	{r3, r4, r5, pc}
 8009660:	2000236c 	.word	0x2000236c

08009664 <_sbrk_r>:
 8009664:	b538      	push	{r3, r4, r5, lr}
 8009666:	4d06      	ldr	r5, [pc, #24]	@ (8009680 <_sbrk_r+0x1c>)
 8009668:	2300      	movs	r3, #0
 800966a:	4604      	mov	r4, r0
 800966c:	4608      	mov	r0, r1
 800966e:	602b      	str	r3, [r5, #0]
 8009670:	f7f7 fc1a 	bl	8000ea8 <_sbrk>
 8009674:	1c43      	adds	r3, r0, #1
 8009676:	d102      	bne.n	800967e <_sbrk_r+0x1a>
 8009678:	682b      	ldr	r3, [r5, #0]
 800967a:	b103      	cbz	r3, 800967e <_sbrk_r+0x1a>
 800967c:	6023      	str	r3, [r4, #0]
 800967e:	bd38      	pop	{r3, r4, r5, pc}
 8009680:	2000236c 	.word	0x2000236c

08009684 <_init>:
 8009684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009686:	bf00      	nop
 8009688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800968a:	bc08      	pop	{r3}
 800968c:	469e      	mov	lr, r3
 800968e:	4770      	bx	lr

08009690 <_fini>:
 8009690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009692:	bf00      	nop
 8009694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009696:	bc08      	pop	{r3}
 8009698:	469e      	mov	lr, r3
 800969a:	4770      	bx	lr
