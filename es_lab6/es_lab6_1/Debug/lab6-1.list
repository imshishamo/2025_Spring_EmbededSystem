
lab6-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b268  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800b3f8  0800b3f8  0000c3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b520  0800b520  0000d06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b520  0800b520  0000c520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b528  0800b528  0000d06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b528  0800b528  0000c528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b52c  0800b52c  0000c52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800b530  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002288  2000006c  0800b59c  0000d06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022f4  0800b59c  0000d2f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aed1  00000000  00000000  0000d09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051e6  00000000  00000000  00037f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027b0  00000000  00000000  0003d158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ef8  00000000  00000000  0003f908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006aba  00000000  00000000  00041800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bd5b  00000000  00000000  000482ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011db8c  00000000  00000000  00074015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00191ba1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b488  00000000  00000000  00191be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0019d06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b3e0 	.word	0x0800b3e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800b3e0 	.word	0x0800b3e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80005a4:	1d39      	adds	r1, r7, #4
 80005a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005aa:	2201      	movs	r2, #1
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <__io_putchar+0x20>)
 80005ae:	f005 fccf 	bl	8005f50 <HAL_UART_Transmit>
	return ch;
 80005b2:	687b      	ldr	r3, [r7, #4]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2000026c 	.word	0x2000026c

080005c0 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END 0 */

/* USER CODE END 0 */
uint16_t val;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	 val = HAL_ADC_GetValue(&hadc1);
 80005c8:	480a      	ldr	r0, [pc, #40]	@ (80005f4 <HAL_ADC_ConvCpltCallback+0x34>)
 80005ca:	f001 fe47 	bl	800225c <HAL_ADC_GetValue>
 80005ce:	4603      	mov	r3, r0
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <HAL_ADC_ConvCpltCallback+0x38>)
 80005d4:	801a      	strh	r2, [r3, #0]
	osSemaphoreRelease(myBinarySem01Handle);
 80005d6:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <HAL_ADC_ConvCpltCallback+0x3c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	f006 fec8 	bl	8007370 <osSemaphoreRelease>
	printf("%d\n", val);
 80005e0:	4b05      	ldr	r3, [pc, #20]	@ (80005f8 <HAL_ADC_ConvCpltCallback+0x38>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	4806      	ldr	r0, [pc, #24]	@ (8000600 <HAL_ADC_ConvCpltCallback+0x40>)
 80005e8:	f00a f880 	bl	800a6ec <iprintf>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000088 	.word	0x20000088
 80005f8:	2000086c 	.word	0x2000086c
 80005fc:	20000868 	.word	0x20000868
 8000600:	0800b420 	.word	0x0800b420

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f001 f91b 	bl	8001842 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f84e 	bl	80006ac <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000610:	f000 f8ae 	bl	8000770 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 fb0e 	bl	8000c34 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000618:	f000 f950 	bl	80008bc <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800061c:	f000 f986 	bl	800092c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000620:	f000 f9c2 	bl	80009a8 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000624:	f000 f9e6 	bl	80009f4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000628:	f000 fa76 	bl	8000b18 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800062c:	f000 faa4 	bl	8000b78 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000630:	f000 fad2 	bl	8000bd8 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000634:	f000 f8c8 	bl	80007c8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000638:	f000 fa1a 	bl	8000a70 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 800063c:	4811      	ldr	r0, [pc, #68]	@ (8000684 <main+0x80>)
 800063e:	f001 fcdf 	bl	8002000 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000642:	4811      	ldr	r0, [pc, #68]	@ (8000688 <main+0x84>)
 8000644:	f005 f934 	bl	80058b0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000648:	f006 fcc0 	bl	8006fcc <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 800064c:	4a0f      	ldr	r2, [pc, #60]	@ (800068c <main+0x88>)
 800064e:	2101      	movs	r1, #1
 8000650:	2001      	movs	r0, #1
 8000652:	f006 fdb2 	bl	80071ba <osSemaphoreNew>
 8000656:	4603      	mov	r3, r0
 8000658:	4a0d      	ldr	r2, [pc, #52]	@ (8000690 <main+0x8c>)
 800065a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800065c:	4a0d      	ldr	r2, [pc, #52]	@ (8000694 <main+0x90>)
 800065e:	2100      	movs	r1, #0
 8000660:	480d      	ldr	r0, [pc, #52]	@ (8000698 <main+0x94>)
 8000662:	f006 fcfd 	bl	8007060 <osThreadNew>
 8000666:	4603      	mov	r3, r0
 8000668:	4a0c      	ldr	r2, [pc, #48]	@ (800069c <main+0x98>)
 800066a:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800066c:	4a0c      	ldr	r2, [pc, #48]	@ (80006a0 <main+0x9c>)
 800066e:	2100      	movs	r1, #0
 8000670:	480c      	ldr	r0, [pc, #48]	@ (80006a4 <main+0xa0>)
 8000672:	f006 fcf5 	bl	8007060 <osThreadNew>
 8000676:	4603      	mov	r3, r0
 8000678:	4a0b      	ldr	r2, [pc, #44]	@ (80006a8 <main+0xa4>)
 800067a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800067c:	f006 fcca 	bl	8007014 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <main+0x7c>
 8000684:	20000088 	.word	0x20000088
 8000688:	20000220 	.word	0x20000220
 800068c:	0800b494 	.word	0x0800b494
 8000690:	20000868 	.word	0x20000868
 8000694:	0800b44c 	.word	0x0800b44c
 8000698:	08000f45 	.word	0x08000f45
 800069c:	20000860 	.word	0x20000860
 80006a0:	0800b470 	.word	0x0800b470
 80006a4:	08000f55 	.word	0x08000f55
 80006a8:	20000864 	.word	0x20000864

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b096      	sub	sp, #88	@ 0x58
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2244      	movs	r2, #68	@ 0x44
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f00a f86b 	bl	800a796 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	463b      	mov	r3, r7
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006d2:	f003 fc05 	bl	8003ee0 <HAL_PWREx_ControlVoltageScaling>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006dc:	f000 fc56 	bl	8000f8c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006e0:	f003 fbe0 	bl	8003ea4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006e4:	4b21      	ldr	r3, [pc, #132]	@ (800076c <SystemClock_Config+0xc0>)
 80006e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80006ea:	4a20      	ldr	r2, [pc, #128]	@ (800076c <SystemClock_Config+0xc0>)
 80006ec:	f023 0318 	bic.w	r3, r3, #24
 80006f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006f4:	2314      	movs	r3, #20
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000704:	2360      	movs	r3, #96	@ 0x60
 8000706:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000708:	2302      	movs	r3, #2
 800070a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800070c:	2301      	movs	r3, #1
 800070e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000710:	2301      	movs	r3, #1
 8000712:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000714:	2328      	movs	r3, #40	@ 0x28
 8000716:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000718:	2307      	movs	r3, #7
 800071a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000720:	2302      	movs	r3, #2
 8000722:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	4618      	mov	r0, r3
 800072a:	f003 fcfb 	bl	8004124 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000734:	f000 fc2a 	bl	8000f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2303      	movs	r3, #3
 800073e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800074c:	463b      	mov	r3, r7
 800074e:	2104      	movs	r1, #4
 8000750:	4618      	mov	r0, r3
 8000752:	f004 f8c3 	bl	80048dc <HAL_RCC_ClockConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800075c:	f000 fc16 	bl	8000f8c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000760:	f004 fdca 	bl	80052f8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000764:	bf00      	nop
 8000766:	3758      	adds	r7, #88	@ 0x58
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40021000 	.word	0x40021000

08000770 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b0a2      	sub	sp, #136	@ 0x88
 8000774:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000776:	463b      	mov	r3, r7
 8000778:	2288      	movs	r2, #136	@ 0x88
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f00a f80a 	bl	800a796 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000782:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000786:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000788:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800078c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800078e:	2301      	movs	r3, #1
 8000790:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000792:	2301      	movs	r3, #1
 8000794:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000796:	2318      	movs	r3, #24
 8000798:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800079a:	2307      	movs	r3, #7
 800079c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800079e:	2302      	movs	r3, #2
 80007a0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80007a6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80007aa:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ac:	463b      	mov	r3, r7
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 fab8 	bl	8004d24 <HAL_RCCEx_PeriphCLKConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 80007ba:	f000 fbe7 	bl	8000f8c <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3788      	adds	r7, #136	@ 0x88
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	@ 0x28
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
 80007e8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ea:	4b31      	ldr	r3, [pc, #196]	@ (80008b0 <MX_ADC1_Init+0xe8>)
 80007ec:	4a31      	ldr	r2, [pc, #196]	@ (80008b4 <MX_ADC1_Init+0xec>)
 80007ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007f0:	4b2f      	ldr	r3, [pc, #188]	@ (80008b0 <MX_ADC1_Init+0xe8>)
 80007f2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007f8:	4b2d      	ldr	r3, [pc, #180]	@ (80008b0 <MX_ADC1_Init+0xe8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007fe:	4b2c      	ldr	r3, [pc, #176]	@ (80008b0 <MX_ADC1_Init+0xe8>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000804:	4b2a      	ldr	r3, [pc, #168]	@ (80008b0 <MX_ADC1_Init+0xe8>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080a:	4b29      	ldr	r3, [pc, #164]	@ (80008b0 <MX_ADC1_Init+0xe8>)
 800080c:	2204      	movs	r2, #4
 800080e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000810:	4b27      	ldr	r3, [pc, #156]	@ (80008b0 <MX_ADC1_Init+0xe8>)
 8000812:	2200      	movs	r2, #0
 8000814:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000816:	4b26      	ldr	r3, [pc, #152]	@ (80008b0 <MX_ADC1_Init+0xe8>)
 8000818:	2200      	movs	r2, #0
 800081a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800081c:	4b24      	ldr	r3, [pc, #144]	@ (80008b0 <MX_ADC1_Init+0xe8>)
 800081e:	2201      	movs	r2, #1
 8000820:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000822:	4b23      	ldr	r3, [pc, #140]	@ (80008b0 <MX_ADC1_Init+0xe8>)
 8000824:	2200      	movs	r2, #0
 8000826:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800082a:	4b21      	ldr	r3, [pc, #132]	@ (80008b0 <MX_ADC1_Init+0xe8>)
 800082c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8000830:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000832:	4b1f      	ldr	r3, [pc, #124]	@ (80008b0 <MX_ADC1_Init+0xe8>)
 8000834:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000838:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800083a:	4b1d      	ldr	r3, [pc, #116]	@ (80008b0 <MX_ADC1_Init+0xe8>)
 800083c:	2200      	movs	r2, #0
 800083e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000842:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <MX_ADC1_Init+0xe8>)
 8000844:	2200      	movs	r2, #0
 8000846:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000848:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <MX_ADC1_Init+0xe8>)
 800084a:	2200      	movs	r2, #0
 800084c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000850:	4817      	ldr	r0, [pc, #92]	@ (80008b0 <MX_ADC1_Init+0xe8>)
 8000852:	f001 fa85 	bl	8001d60 <HAL_ADC_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800085c:	f000 fb96 	bl	8000f8c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4811      	ldr	r0, [pc, #68]	@ (80008b0 <MX_ADC1_Init+0xe8>)
 800086c:	f002 fc02 	bl	8003074 <HAL_ADCEx_MultiModeConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000876:	f000 fb89 	bl	8000f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800087a:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <MX_ADC1_Init+0xf0>)
 800087c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800087e:	2306      	movs	r3, #6
 8000880:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000886:	237f      	movs	r3, #127	@ 0x7f
 8000888:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800088a:	2304      	movs	r3, #4
 800088c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	4619      	mov	r1, r3
 8000896:	4806      	ldr	r0, [pc, #24]	@ (80008b0 <MX_ADC1_Init+0xe8>)
 8000898:	f001 ff1c 	bl	80026d4 <HAL_ADC_ConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80008a2:	f000 fb73 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	3728      	adds	r7, #40	@ 0x28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000088 	.word	0x20000088
 80008b4:	50040000 	.word	0x50040000
 80008b8:	c7520000 	.word	0xc7520000

080008bc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80008c0:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <MX_DFSDM1_Init+0x68>)
 80008c2:	4a19      	ldr	r2, [pc, #100]	@ (8000928 <MX_DFSDM1_Init+0x6c>)
 80008c4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80008c6:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <MX_DFSDM1_Init+0x68>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008cc:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <MX_DFSDM1_Init+0x68>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80008d2:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <MX_DFSDM1_Init+0x68>)
 80008d4:	2202      	movs	r2, #2
 80008d6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008d8:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <MX_DFSDM1_Init+0x68>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008de:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <MX_DFSDM1_Init+0x68>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <MX_DFSDM1_Init+0x68>)
 80008e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008ea:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80008ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000924 <MX_DFSDM1_Init+0x68>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <MX_DFSDM1_Init+0x68>)
 80008f4:	2204      	movs	r2, #4
 80008f6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <MX_DFSDM1_Init+0x68>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <MX_DFSDM1_Init+0x68>)
 8000900:	2201      	movs	r2, #1
 8000902:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000904:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <MX_DFSDM1_Init+0x68>)
 8000906:	2200      	movs	r2, #0
 8000908:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <MX_DFSDM1_Init+0x68>)
 800090c:	2200      	movs	r2, #0
 800090e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	@ (8000924 <MX_DFSDM1_Init+0x68>)
 8000912:	f002 fd71 	bl	80033f8 <HAL_DFSDM_ChannelInit>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800091c:	f000 fb36 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200000ec 	.word	0x200000ec
 8000928:	40016020 	.word	0x40016020

0800092c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <MX_I2C2_Init+0x74>)
 8000932:	4a1c      	ldr	r2, [pc, #112]	@ (80009a4 <MX_I2C2_Init+0x78>)
 8000934:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <MX_I2C2_Init+0x74>)
 8000938:	f640 6214 	movw	r2, #3604	@ 0xe14
 800093c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800093e:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <MX_I2C2_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000944:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <MX_I2C2_Init+0x74>)
 8000946:	2201      	movs	r2, #1
 8000948:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <MX_I2C2_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000950:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <MX_I2C2_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000956:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <MX_I2C2_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095c:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <MX_I2C2_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <MX_I2C2_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000968:	480d      	ldr	r0, [pc, #52]	@ (80009a0 <MX_I2C2_Init+0x74>)
 800096a:	f003 f836 	bl	80039da <HAL_I2C_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000974:	f000 fb0a 	bl	8000f8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000978:	2100      	movs	r1, #0
 800097a:	4809      	ldr	r0, [pc, #36]	@ (80009a0 <MX_I2C2_Init+0x74>)
 800097c:	f003 f8c8 	bl	8003b10 <HAL_I2CEx_ConfigAnalogFilter>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000986:	f000 fb01 	bl	8000f8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800098a:	2100      	movs	r1, #0
 800098c:	4804      	ldr	r0, [pc, #16]	@ (80009a0 <MX_I2C2_Init+0x74>)
 800098e:	f003 f90a 	bl	8003ba6 <HAL_I2CEx_ConfigDigitalFilter>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000998:	f000 faf8 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000124 	.word	0x20000124
 80009a4:	40005800 	.word	0x40005800

080009a8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <MX_QUADSPI_Init+0x44>)
 80009ae:	4a10      	ldr	r2, [pc, #64]	@ (80009f0 <MX_QUADSPI_Init+0x48>)
 80009b0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <MX_QUADSPI_Init+0x44>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <MX_QUADSPI_Init+0x44>)
 80009ba:	2204      	movs	r2, #4
 80009bc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <MX_QUADSPI_Init+0x44>)
 80009c0:	2210      	movs	r2, #16
 80009c2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80009c4:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <MX_QUADSPI_Init+0x44>)
 80009c6:	2217      	movs	r2, #23
 80009c8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <MX_QUADSPI_Init+0x44>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <MX_QUADSPI_Init+0x44>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	@ (80009ec <MX_QUADSPI_Init+0x44>)
 80009d8:	f003 fae8 	bl	8003fac <HAL_QSPI_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80009e2:	f000 fad3 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000178 	.word	0x20000178
 80009f0:	a0001000 	.word	0xa0001000

080009f4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a68 <MX_SPI3_Init+0x74>)
 80009fa:	4a1c      	ldr	r2, [pc, #112]	@ (8000a6c <MX_SPI3_Init+0x78>)
 80009fc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a04:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a06:	4b18      	ldr	r3, [pc, #96]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a0e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000a12:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a14:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a20:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a26:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a40:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a42:	2207      	movs	r2, #7
 8000a44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a4e:	2208      	movs	r2, #8
 8000a50:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a54:	f004 fe32 	bl	80056bc <HAL_SPI_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a5e:	f000 fa95 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200001bc 	.word	0x200001bc
 8000a6c:	40003c00 	.word	0x40003c00

08000a70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a76:	f107 0310 	add.w	r3, r7, #16
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a8e:	4b20      	ldr	r3, [pc, #128]	@ (8000b10 <MX_TIM1_Init+0xa0>)
 8000a90:	4a20      	ldr	r2, [pc, #128]	@ (8000b14 <MX_TIM1_Init+0xa4>)
 8000a92:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 8000a94:	4b1e      	ldr	r3, [pc, #120]	@ (8000b10 <MX_TIM1_Init+0xa0>)
 8000a96:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000a9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b10 <MX_TIM1_Init+0xa0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b10 <MX_TIM1_Init+0xa0>)
 8000aa4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000aa8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	@ (8000b10 <MX_TIM1_Init+0xa0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	@ (8000b10 <MX_TIM1_Init+0xa0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab6:	4b16      	ldr	r3, [pc, #88]	@ (8000b10 <MX_TIM1_Init+0xa0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000abc:	4814      	ldr	r0, [pc, #80]	@ (8000b10 <MX_TIM1_Init+0xa0>)
 8000abe:	f004 fea0 	bl	8005802 <HAL_TIM_Base_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000ac8:	f000 fa60 	bl	8000f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000acc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ad2:	f107 0310 	add.w	r3, r7, #16
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480d      	ldr	r0, [pc, #52]	@ (8000b10 <MX_TIM1_Init+0xa0>)
 8000ada:	f004 ff59 	bl	8005990 <HAL_TIM_ConfigClockSource>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000ae4:	f000 fa52 	bl	8000f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ae8:	2320      	movs	r3, #32
 8000aea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	4619      	mov	r1, r3
 8000af8:	4805      	ldr	r0, [pc, #20]	@ (8000b10 <MX_TIM1_Init+0xa0>)
 8000afa:	f005 f953 	bl	8005da4 <HAL_TIMEx_MasterConfigSynchronization>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b04:	f000 fa42 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	3720      	adds	r7, #32
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000220 	.word	0x20000220
 8000b14:	40012c00 	.word	0x40012c00

08000b18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b1e:	4a15      	ldr	r2, [pc, #84]	@ (8000b74 <MX_USART1_UART_Init+0x5c>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b22:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b5c:	f005 f9aa 	bl	8005eb4 <HAL_UART_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b66:	f000 fa11 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2000026c 	.word	0x2000026c
 8000b74:	40013800 	.word	0x40013800

08000b78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <MX_USART3_UART_Init+0x58>)
 8000b7e:	4a15      	ldr	r2, [pc, #84]	@ (8000bd4 <MX_USART3_UART_Init+0x5c>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b82:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <MX_USART3_UART_Init+0x58>)
 8000b84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <MX_USART3_UART_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <MX_USART3_UART_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <MX_USART3_UART_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <MX_USART3_UART_Init+0x58>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <MX_USART3_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <MX_USART3_UART_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <MX_USART3_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <MX_USART3_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <MX_USART3_UART_Init+0x58>)
 8000bbc:	f005 f97a 	bl	8005eb4 <HAL_UART_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bc6:	f000 f9e1 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200002f4 	.word	0x200002f4
 8000bd4:	40004800 	.word	0x40004800

08000bd8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bde:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000be2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000be4:	4b12      	ldr	r3, [pc, #72]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be6:	2206      	movs	r2, #6
 8000be8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bec:	2202      	movs	r2, #2
 8000bee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1c:	f003 f80f 	bl	8003c3e <HAL_PCD_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c26:	f000 f9b1 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000037c 	.word	0x2000037c

08000c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	@ 0x28
 8000c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c4a:	4bb9      	ldr	r3, [pc, #740]	@ (8000f30 <MX_GPIO_Init+0x2fc>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4e:	4ab8      	ldr	r2, [pc, #736]	@ (8000f30 <MX_GPIO_Init+0x2fc>)
 8000c50:	f043 0310 	orr.w	r3, r3, #16
 8000c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c56:	4bb6      	ldr	r3, [pc, #728]	@ (8000f30 <MX_GPIO_Init+0x2fc>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5a:	f003 0310 	and.w	r3, r3, #16
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c62:	4bb3      	ldr	r3, [pc, #716]	@ (8000f30 <MX_GPIO_Init+0x2fc>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c66:	4ab2      	ldr	r2, [pc, #712]	@ (8000f30 <MX_GPIO_Init+0x2fc>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c6e:	4bb0      	ldr	r3, [pc, #704]	@ (8000f30 <MX_GPIO_Init+0x2fc>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	4bad      	ldr	r3, [pc, #692]	@ (8000f30 <MX_GPIO_Init+0x2fc>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7e:	4aac      	ldr	r2, [pc, #688]	@ (8000f30 <MX_GPIO_Init+0x2fc>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c86:	4baa      	ldr	r3, [pc, #680]	@ (8000f30 <MX_GPIO_Init+0x2fc>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	4ba7      	ldr	r3, [pc, #668]	@ (8000f30 <MX_GPIO_Init+0x2fc>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c96:	4aa6      	ldr	r2, [pc, #664]	@ (8000f30 <MX_GPIO_Init+0x2fc>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c9e:	4ba4      	ldr	r3, [pc, #656]	@ (8000f30 <MX_GPIO_Init+0x2fc>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000caa:	4ba1      	ldr	r3, [pc, #644]	@ (8000f30 <MX_GPIO_Init+0x2fc>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cae:	4aa0      	ldr	r2, [pc, #640]	@ (8000f30 <MX_GPIO_Init+0x2fc>)
 8000cb0:	f043 0308 	orr.w	r3, r3, #8
 8000cb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb6:	4b9e      	ldr	r3, [pc, #632]	@ (8000f30 <MX_GPIO_Init+0x2fc>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cba:	f003 0308 	and.w	r3, r3, #8
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000cc8:	489a      	ldr	r0, [pc, #616]	@ (8000f34 <MX_GPIO_Init+0x300>)
 8000cca:	f002 fe4b 	bl	8003964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000cd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cd8:	f002 fe44 	bl	8003964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000ce2:	4895      	ldr	r0, [pc, #596]	@ (8000f38 <MX_GPIO_Init+0x304>)
 8000ce4:	f002 fe3e 	bl	8003964 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000cee:	4893      	ldr	r0, [pc, #588]	@ (8000f3c <MX_GPIO_Init+0x308>)
 8000cf0:	f002 fe38 	bl	8003964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cfa:	4890      	ldr	r0, [pc, #576]	@ (8000f3c <MX_GPIO_Init+0x308>)
 8000cfc:	f002 fe32 	bl	8003964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000d06:	488e      	ldr	r0, [pc, #568]	@ (8000f40 <MX_GPIO_Init+0x30c>)
 8000d08:	f002 fe2c 	bl	8003964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2120      	movs	r1, #32
 8000d10:	4889      	ldr	r0, [pc, #548]	@ (8000f38 <MX_GPIO_Init+0x304>)
 8000d12:	f002 fe27 	bl	8003964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	2101      	movs	r1, #1
 8000d1a:	4886      	ldr	r0, [pc, #536]	@ (8000f34 <MX_GPIO_Init+0x300>)
 8000d1c:	f002 fe22 	bl	8003964 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000d20:	f240 1315 	movw	r3, #277	@ 0x115
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	487e      	ldr	r0, [pc, #504]	@ (8000f34 <MX_GPIO_Init+0x300>)
 8000d3a:	f002 fc69 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000d3e:	236a      	movs	r3, #106	@ 0x6a
 8000d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d42:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	4878      	ldr	r0, [pc, #480]	@ (8000f34 <MX_GPIO_Init+0x300>)
 8000d54:	f002 fc5c 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000d58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d5e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4874      	ldr	r0, [pc, #464]	@ (8000f40 <MX_GPIO_Init+0x30c>)
 8000d70:	f002 fc4e 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000d74:	2303      	movs	r3, #3
 8000d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d84:	2308      	movs	r3, #8
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d92:	f002 fc3d 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000d96:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db2:	f002 fc2d 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000db6:	2308      	movs	r3, #8
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd4:	f002 fc1c 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000dd8:	23e0      	movs	r3, #224	@ 0xe0
 8000dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000de8:	2305      	movs	r3, #5
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df6:	f002 fc0b 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dfe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	484a      	ldr	r0, [pc, #296]	@ (8000f38 <MX_GPIO_Init+0x304>)
 8000e10:	f002 fbfe 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e14:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000e18:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4842      	ldr	r0, [pc, #264]	@ (8000f38 <MX_GPIO_Init+0x304>)
 8000e2e:	f002 fbef 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000e32:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000e36:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e38:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	483c      	ldr	r0, [pc, #240]	@ (8000f3c <MX_GPIO_Init+0x308>)
 8000e4a:	f002 fbe1 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000e4e:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	4835      	ldr	r0, [pc, #212]	@ (8000f3c <MX_GPIO_Init+0x308>)
 8000e68:	f002 fbd2 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000e6c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	482e      	ldr	r0, [pc, #184]	@ (8000f40 <MX_GPIO_Init+0x30c>)
 8000e86:	f002 fbc3 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000e8a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e90:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4827      	ldr	r0, [pc, #156]	@ (8000f40 <MX_GPIO_Init+0x30c>)
 8000ea2:	f002 fbb5 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	481e      	ldr	r0, [pc, #120]	@ (8000f3c <MX_GPIO_Init+0x308>)
 8000ec2:	f002 fba5 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000ec6:	2378      	movs	r3, #120	@ 0x78
 8000ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ed6:	2307      	movs	r3, #7
 8000ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4816      	ldr	r0, [pc, #88]	@ (8000f3c <MX_GPIO_Init+0x308>)
 8000ee2:	f002 fb95 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000ee6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eec:	2312      	movs	r3, #18
 8000eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ef8:	2304      	movs	r3, #4
 8000efa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4619      	mov	r1, r3
 8000f02:	480d      	ldr	r0, [pc, #52]	@ (8000f38 <MX_GPIO_Init+0x304>)
 8000f04:	f002 fb84 	bl	8003610 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2105      	movs	r1, #5
 8000f0c:	2017      	movs	r0, #23
 8000f0e:	f002 fa3c 	bl	800338a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f12:	2017      	movs	r0, #23
 8000f14:	f002 fa55 	bl	80033c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2105      	movs	r1, #5
 8000f1c:	2028      	movs	r0, #40	@ 0x28
 8000f1e:	f002 fa34 	bl	800338a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f22:	2028      	movs	r0, #40	@ 0x28
 8000f24:	f002 fa4d 	bl	80033c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	@ 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40021000 	.word	0x40021000
 8000f34:	48001000 	.word	0x48001000
 8000f38:	48000400 	.word	0x48000400
 8000f3c:	48000c00 	.word	0x48000c00
 8000f40:	48000800 	.word	0x48000800

08000f44 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f006 f919 	bl	8007184 <osDelay>
 8000f52:	e7fb      	b.n	8000f4c <StartDefaultTask+0x8>

08000f54 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	 /* USER CODE BEGIN StartADCTask */
  for(;;)
  {
	if (osSemaphoreAcquire(myBinarySem01Handle, osWaitForever) == osOK)
 8000f5c:	4b08      	ldr	r3, [pc, #32]	@ (8000f80 <StartTask02+0x2c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	4618      	mov	r0, r3
 8000f66:	f006 f9b1 	bl	80072cc <osSemaphoreAcquire>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1f5      	bne.n	8000f5c <StartTask02+0x8>
	{

		printf("ADC Value: %d\r\n", val);
 8000f70:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <StartTask02+0x30>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	4804      	ldr	r0, [pc, #16]	@ (8000f88 <StartTask02+0x34>)
 8000f78:	f009 fbb8 	bl	800a6ec <iprintf>
	if (osSemaphoreAcquire(myBinarySem01Handle, osWaitForever) == osOK)
 8000f7c:	e7ee      	b.n	8000f5c <StartTask02+0x8>
 8000f7e:	bf00      	nop
 8000f80:	20000868 	.word	0x20000868
 8000f84:	2000086c 	.word	0x2000086c
 8000f88:	0800b424 	.word	0x0800b424

08000f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <Error_Handler+0x8>

08000f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <HAL_MspInit+0x4c>)
 8000fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fa2:	4a10      	ldr	r2, [pc, #64]	@ (8000fe4 <HAL_MspInit+0x4c>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000faa:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <HAL_MspInit+0x4c>)
 8000fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe4 <HAL_MspInit+0x4c>)
 8000fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fba:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe4 <HAL_MspInit+0x4c>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fc2:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <HAL_MspInit+0x4c>)
 8000fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	210f      	movs	r1, #15
 8000fd2:	f06f 0001 	mvn.w	r0, #1
 8000fd6:	f002 f9d8 	bl	800338a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08c      	sub	sp, #48	@ 0x30
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a31      	ldr	r2, [pc, #196]	@ (80010cc <HAL_ADC_MspInit+0xe4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d15c      	bne.n	80010c4 <HAL_ADC_MspInit+0xdc>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800100a:	4b31      	ldr	r3, [pc, #196]	@ (80010d0 <HAL_ADC_MspInit+0xe8>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100e:	4a30      	ldr	r2, [pc, #192]	@ (80010d0 <HAL_ADC_MspInit+0xe8>)
 8001010:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001014:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001016:	4b2e      	ldr	r3, [pc, #184]	@ (80010d0 <HAL_ADC_MspInit+0xe8>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	4b2b      	ldr	r3, [pc, #172]	@ (80010d0 <HAL_ADC_MspInit+0xe8>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001026:	4a2a      	ldr	r2, [pc, #168]	@ (80010d0 <HAL_ADC_MspInit+0xe8>)
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800102e:	4b28      	ldr	r3, [pc, #160]	@ (80010d0 <HAL_ADC_MspInit+0xe8>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	4b25      	ldr	r3, [pc, #148]	@ (80010d0 <HAL_ADC_MspInit+0xe8>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103e:	4a24      	ldr	r2, [pc, #144]	@ (80010d0 <HAL_ADC_MspInit+0xe8>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001046:	4b22      	ldr	r3, [pc, #136]	@ (80010d0 <HAL_ADC_MspInit+0xe8>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <HAL_ADC_MspInit+0xe8>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001056:	4a1e      	ldr	r2, [pc, #120]	@ (80010d0 <HAL_ADC_MspInit+0xe8>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105e:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <HAL_ADC_MspInit+0xe8>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800106a:	233f      	movs	r3, #63	@ 0x3f
 800106c:	61fb      	str	r3, [r7, #28]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800106e:	230b      	movs	r3, #11
 8001070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001076:	f107 031c 	add.w	r3, r7, #28
 800107a:	4619      	mov	r1, r3
 800107c:	4815      	ldr	r0, [pc, #84]	@ (80010d4 <HAL_ADC_MspInit+0xec>)
 800107e:	f002 fac7 	bl	8003610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001082:	2310      	movs	r3, #16
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001086:	230b      	movs	r3, #11
 8001088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4619      	mov	r1, r3
 8001094:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001098:	f002 faba 	bl	8003610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 800109c:	2302      	movs	r3, #2
 800109e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010a0:	230b      	movs	r3, #11
 80010a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	4619      	mov	r1, r3
 80010ae:	480a      	ldr	r0, [pc, #40]	@ (80010d8 <HAL_ADC_MspInit+0xf0>)
 80010b0:	f002 faae 	bl	8003610 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2105      	movs	r1, #5
 80010b8:	2012      	movs	r0, #18
 80010ba:	f002 f966 	bl	800338a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80010be:	2012      	movs	r0, #18
 80010c0:	f002 f97f 	bl	80033c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80010c4:	bf00      	nop
 80010c6:	3730      	adds	r7, #48	@ 0x30
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	50040000 	.word	0x50040000
 80010d0:	40021000 	.word	0x40021000
 80010d4:	48000800 	.word	0x48000800
 80010d8:	48000400 	.word	0x48000400

080010dc <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b0ac      	sub	sp, #176	@ 0xb0
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2288      	movs	r2, #136	@ 0x88
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f009 fb4a 	bl	800a796 <memset>
  if(DFSDM1_Init == 0)
 8001102:	4b25      	ldr	r3, [pc, #148]	@ (8001198 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d142      	bne.n	8001190 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800110a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800110e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001110:	2300      	movs	r3, #0
 8001112:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4618      	mov	r0, r3
 800111c:	f003 fe02 	bl	8004d24 <HAL_RCCEx_PeriphCLKConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001126:	f7ff ff31 	bl	8000f8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800112a:	4b1c      	ldr	r3, [pc, #112]	@ (800119c <HAL_DFSDM_ChannelMspInit+0xc0>)
 800112c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800112e:	4a1b      	ldr	r2, [pc, #108]	@ (800119c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001130:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001134:	6613      	str	r3, [r2, #96]	@ 0x60
 8001136:	4b19      	ldr	r3, [pc, #100]	@ (800119c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800113a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001142:	4b16      	ldr	r3, [pc, #88]	@ (800119c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	4a15      	ldr	r2, [pc, #84]	@ (800119c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001148:	f043 0310 	orr.w	r3, r3, #16
 800114c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114e:	4b13      	ldr	r3, [pc, #76]	@ (800119c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	f003 0310 	and.w	r3, r3, #16
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800115a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800115e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001174:	2306      	movs	r3, #6
 8001176:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800117a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800117e:	4619      	mov	r1, r3
 8001180:	4807      	ldr	r0, [pc, #28]	@ (80011a0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001182:	f002 fa45 	bl	8003610 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001186:	4b04      	ldr	r3, [pc, #16]	@ (8001198 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	3301      	adds	r3, #1
 800118c:	4a02      	ldr	r2, [pc, #8]	@ (8001198 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800118e:	6013      	str	r3, [r2, #0]
  }

}
 8001190:	bf00      	nop
 8001192:	37b0      	adds	r7, #176	@ 0xb0
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000870 	.word	0x20000870
 800119c:	40021000 	.word	0x40021000
 80011a0:	48001000 	.word	0x48001000

080011a4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b0ac      	sub	sp, #176	@ 0xb0
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2288      	movs	r2, #136	@ 0x88
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f009 fae6 	bl	800a796 <memset>
  if(hi2c->Instance==I2C2)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a21      	ldr	r2, [pc, #132]	@ (8001254 <HAL_I2C_MspInit+0xb0>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d13b      	bne.n	800124c <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011d4:	2380      	movs	r3, #128	@ 0x80
 80011d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80011d8:	2300      	movs	r3, #0
 80011da:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4618      	mov	r0, r3
 80011e2:	f003 fd9f 	bl	8004d24 <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011ec:	f7ff fece 	bl	8000f8c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f0:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <HAL_I2C_MspInit+0xb4>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f4:	4a18      	ldr	r2, [pc, #96]	@ (8001258 <HAL_I2C_MspInit+0xb4>)
 80011f6:	f043 0302 	orr.w	r3, r3, #2
 80011fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fc:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <HAL_I2C_MspInit+0xb4>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001208:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800120c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001210:	2312      	movs	r3, #18
 8001212:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001216:	2301      	movs	r3, #1
 8001218:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001222:	2304      	movs	r3, #4
 8001224:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001228:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800122c:	4619      	mov	r1, r3
 800122e:	480b      	ldr	r0, [pc, #44]	@ (800125c <HAL_I2C_MspInit+0xb8>)
 8001230:	f002 f9ee 	bl	8003610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <HAL_I2C_MspInit+0xb4>)
 8001236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001238:	4a07      	ldr	r2, [pc, #28]	@ (8001258 <HAL_I2C_MspInit+0xb4>)
 800123a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800123e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001240:	4b05      	ldr	r3, [pc, #20]	@ (8001258 <HAL_I2C_MspInit+0xb4>)
 8001242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001244:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800124c:	bf00      	nop
 800124e:	37b0      	adds	r7, #176	@ 0xb0
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40005800 	.word	0x40005800
 8001258:	40021000 	.word	0x40021000
 800125c:	48000400 	.word	0x48000400

08001260 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	@ 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a17      	ldr	r2, [pc, #92]	@ (80012dc <HAL_QSPI_MspInit+0x7c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d128      	bne.n	80012d4 <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001282:	4b17      	ldr	r3, [pc, #92]	@ (80012e0 <HAL_QSPI_MspInit+0x80>)
 8001284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001286:	4a16      	ldr	r2, [pc, #88]	@ (80012e0 <HAL_QSPI_MspInit+0x80>)
 8001288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800128c:	6513      	str	r3, [r2, #80]	@ 0x50
 800128e:	4b14      	ldr	r3, [pc, #80]	@ (80012e0 <HAL_QSPI_MspInit+0x80>)
 8001290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800129a:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <HAL_QSPI_MspInit+0x80>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129e:	4a10      	ldr	r2, [pc, #64]	@ (80012e0 <HAL_QSPI_MspInit+0x80>)
 80012a0:	f043 0310 	orr.w	r3, r3, #16
 80012a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a6:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <HAL_QSPI_MspInit+0x80>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012aa:	f003 0310 	and.w	r3, r3, #16
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80012b2:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80012b6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c0:	2303      	movs	r3, #3
 80012c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012c4:	230a      	movs	r3, #10
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <HAL_QSPI_MspInit+0x84>)
 80012d0:	f002 f99e 	bl	8003610 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80012d4:	bf00      	nop
 80012d6:	3728      	adds	r7, #40	@ 0x28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	a0001000 	.word	0xa0001000
 80012e0:	40021000 	.word	0x40021000
 80012e4:	48001000 	.word	0x48001000

080012e8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	@ 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a17      	ldr	r2, [pc, #92]	@ (8001364 <HAL_SPI_MspInit+0x7c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d128      	bne.n	800135c <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800130a:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <HAL_SPI_MspInit+0x80>)
 800130c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130e:	4a16      	ldr	r2, [pc, #88]	@ (8001368 <HAL_SPI_MspInit+0x80>)
 8001310:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001314:	6593      	str	r3, [r2, #88]	@ 0x58
 8001316:	4b14      	ldr	r3, [pc, #80]	@ (8001368 <HAL_SPI_MspInit+0x80>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <HAL_SPI_MspInit+0x80>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	4a10      	ldr	r2, [pc, #64]	@ (8001368 <HAL_SPI_MspInit+0x80>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132e:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <HAL_SPI_MspInit+0x80>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800133a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800134c:	2306      	movs	r3, #6
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	4805      	ldr	r0, [pc, #20]	@ (800136c <HAL_SPI_MspInit+0x84>)
 8001358:	f002 f95a 	bl	8003610 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 800135c:	bf00      	nop
 800135e:	3728      	adds	r7, #40	@ 0x28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40003c00 	.word	0x40003c00
 8001368:	40021000 	.word	0x40021000
 800136c:	48000800 	.word	0x48000800

08001370 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0a      	ldr	r2, [pc, #40]	@ (80013a8 <HAL_TIM_Base_MspInit+0x38>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d10b      	bne.n	800139a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001382:	4b0a      	ldr	r3, [pc, #40]	@ (80013ac <HAL_TIM_Base_MspInit+0x3c>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001386:	4a09      	ldr	r2, [pc, #36]	@ (80013ac <HAL_TIM_Base_MspInit+0x3c>)
 8001388:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800138c:	6613      	str	r3, [r2, #96]	@ 0x60
 800138e:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <HAL_TIM_Base_MspInit+0x3c>)
 8001390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001392:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40012c00 	.word	0x40012c00
 80013ac:	40021000 	.word	0x40021000

080013b0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b0ae      	sub	sp, #184	@ 0xb8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	2288      	movs	r2, #136	@ 0x88
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f009 f9e0 	bl	800a796 <memset>
  if(huart->Instance==USART1)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a42      	ldr	r2, [pc, #264]	@ (80014e4 <HAL_UART_MspInit+0x134>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d13b      	bne.n	8001458 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013e4:	2300      	movs	r3, #0
 80013e6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	4618      	mov	r0, r3
 80013ee:	f003 fc99 	bl	8004d24 <HAL_RCCEx_PeriphCLKConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013f8:	f7ff fdc8 	bl	8000f8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013fc:	4b3a      	ldr	r3, [pc, #232]	@ (80014e8 <HAL_UART_MspInit+0x138>)
 80013fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001400:	4a39      	ldr	r2, [pc, #228]	@ (80014e8 <HAL_UART_MspInit+0x138>)
 8001402:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001406:	6613      	str	r3, [r2, #96]	@ 0x60
 8001408:	4b37      	ldr	r3, [pc, #220]	@ (80014e8 <HAL_UART_MspInit+0x138>)
 800140a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800140c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001410:	61bb      	str	r3, [r7, #24]
 8001412:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001414:	4b34      	ldr	r3, [pc, #208]	@ (80014e8 <HAL_UART_MspInit+0x138>)
 8001416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001418:	4a33      	ldr	r2, [pc, #204]	@ (80014e8 <HAL_UART_MspInit+0x138>)
 800141a:	f043 0302 	orr.w	r3, r3, #2
 800141e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001420:	4b31      	ldr	r3, [pc, #196]	@ (80014e8 <HAL_UART_MspInit+0x138>)
 8001422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800142c:	23c0      	movs	r3, #192	@ 0xc0
 800142e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001444:	2307      	movs	r3, #7
 8001446:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800144e:	4619      	mov	r1, r3
 8001450:	4826      	ldr	r0, [pc, #152]	@ (80014ec <HAL_UART_MspInit+0x13c>)
 8001452:	f002 f8dd 	bl	8003610 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001456:	e040      	b.n	80014da <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a24      	ldr	r2, [pc, #144]	@ (80014f0 <HAL_UART_MspInit+0x140>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d13b      	bne.n	80014da <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001462:	2304      	movs	r3, #4
 8001464:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001466:	2300      	movs	r3, #0
 8001468:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	4618      	mov	r0, r3
 8001470:	f003 fc58 	bl	8004d24 <HAL_RCCEx_PeriphCLKConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800147a:	f7ff fd87 	bl	8000f8c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800147e:	4b1a      	ldr	r3, [pc, #104]	@ (80014e8 <HAL_UART_MspInit+0x138>)
 8001480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001482:	4a19      	ldr	r2, [pc, #100]	@ (80014e8 <HAL_UART_MspInit+0x138>)
 8001484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001488:	6593      	str	r3, [r2, #88]	@ 0x58
 800148a:	4b17      	ldr	r3, [pc, #92]	@ (80014e8 <HAL_UART_MspInit+0x138>)
 800148c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001496:	4b14      	ldr	r3, [pc, #80]	@ (80014e8 <HAL_UART_MspInit+0x138>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149a:	4a13      	ldr	r2, [pc, #76]	@ (80014e8 <HAL_UART_MspInit+0x138>)
 800149c:	f043 0308 	orr.w	r3, r3, #8
 80014a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a2:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <HAL_UART_MspInit+0x138>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80014ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014c8:	2307      	movs	r3, #7
 80014ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ce:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014d2:	4619      	mov	r1, r3
 80014d4:	4807      	ldr	r0, [pc, #28]	@ (80014f4 <HAL_UART_MspInit+0x144>)
 80014d6:	f002 f89b 	bl	8003610 <HAL_GPIO_Init>
}
 80014da:	bf00      	nop
 80014dc:	37b8      	adds	r7, #184	@ 0xb8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40013800 	.word	0x40013800
 80014e8:	40021000 	.word	0x40021000
 80014ec:	48000400 	.word	0x48000400
 80014f0:	40004800 	.word	0x40004800
 80014f4:	48000c00 	.word	0x48000c00

080014f8 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	@ 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001518:	d154      	bne.n	80015c4 <HAL_PCD_MspInit+0xcc>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	4b2c      	ldr	r3, [pc, #176]	@ (80015cc <HAL_PCD_MspInit+0xd4>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	4a2b      	ldr	r2, [pc, #172]	@ (80015cc <HAL_PCD_MspInit+0xd4>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001526:	4b29      	ldr	r3, [pc, #164]	@ (80015cc <HAL_PCD_MspInit+0xd4>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001532:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001538:	2300      	movs	r3, #0
 800153a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800154a:	f002 f861 	bl	8003610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800154e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155c:	2303      	movs	r3, #3
 800155e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001560:	230a      	movs	r3, #10
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4619      	mov	r1, r3
 800156a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800156e:	f002 f84f 	bl	8003610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001572:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <HAL_PCD_MspInit+0xd4>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001576:	4a15      	ldr	r2, [pc, #84]	@ (80015cc <HAL_PCD_MspInit+0xd4>)
 8001578:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800157c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157e:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <HAL_PCD_MspInit+0xd4>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <HAL_PCD_MspInit+0xd4>)
 800158c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800158e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d114      	bne.n	80015c0 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <HAL_PCD_MspInit+0xd4>)
 8001598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159a:	4a0c      	ldr	r2, [pc, #48]	@ (80015cc <HAL_PCD_MspInit+0xd4>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80015a2:	4b0a      	ldr	r3, [pc, #40]	@ (80015cc <HAL_PCD_MspInit+0xd4>)
 80015a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80015ae:	f002 fced 	bl	8003f8c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <HAL_PCD_MspInit+0xd4>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b6:	4a05      	ldr	r2, [pc, #20]	@ (80015cc <HAL_PCD_MspInit+0xd4>)
 80015b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015bc:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80015be:	e001      	b.n	80015c4 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80015c0:	f002 fce4 	bl	8003f8c <HAL_PWREx_EnableVddUSB>
}
 80015c4:	bf00      	nop
 80015c6:	3728      	adds	r7, #40	@ 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40021000 	.word	0x40021000

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <NMI_Handler+0x4>

080015d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <MemManage_Handler+0x4>

080015e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <BusFault_Handler+0x4>

080015f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <UsageFault_Handler+0x4>

080015f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160a:	f000 f96f 	bl	80018ec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800160e:	f007 fe31 	bl	8009274 <xTaskGetSchedulerState>
 8001612:	4603      	mov	r3, r0
 8001614:	2b01      	cmp	r3, #1
 8001616:	d001      	beq.n	800161c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001618:	f008 fd26 	bl	800a068 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}

08001620 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001624:	4802      	ldr	r0, [pc, #8]	@ (8001630 <ADC1_2_IRQHandler+0x10>)
 8001626:	f000 fe27 	bl	8002278 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000088 	.word	0x20000088

08001634 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001638:	2020      	movs	r0, #32
 800163a:	f002 f9ab 	bl	8003994 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800163e:	2040      	movs	r0, #64	@ 0x40
 8001640:	f002 f9a8 	bl	8003994 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001644:	2080      	movs	r0, #128	@ 0x80
 8001646:	f002 f9a5 	bl	8003994 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800164a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800164e:	f002 f9a1 	bl	8003994 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}

08001656 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800165a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800165e:	f002 f999 	bl	8003994 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001662:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001666:	f002 f995 	bl	8003994 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800166a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800166e:	f002 f991 	bl	8003994 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001672:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001676:	f002 f98d 	bl	8003994 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800167a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800167e:	f002 f989 	bl	8003994 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}

08001686 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	e00a      	b.n	80016ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001698:	f3af 8000 	nop.w
 800169c:	4601      	mov	r1, r0
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	1c5a      	adds	r2, r3, #1
 80016a2:	60ba      	str	r2, [r7, #8]
 80016a4:	b2ca      	uxtb	r2, r1
 80016a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	3301      	adds	r3, #1
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	dbf0      	blt.n	8001698 <_read+0x12>
  }

  return len;
 80016b6:	687b      	ldr	r3, [r7, #4]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	e009      	b.n	80016e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	1c5a      	adds	r2, r3, #1
 80016d6:	60ba      	str	r2, [r7, #8]
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe ff5e 	bl	800059c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	3301      	adds	r3, #1
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	dbf1      	blt.n	80016d2 <_write+0x12>
  }
  return len;
 80016ee:	687b      	ldr	r3, [r7, #4]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <_close>:

int _close(int file)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001700:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001720:	605a      	str	r2, [r3, #4]
  return 0;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <_isatty>:

int _isatty(int file)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001738:	2301      	movs	r3, #1
}
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001746:	b480      	push	{r7}
 8001748:	b085      	sub	sp, #20
 800174a:	af00      	add	r7, sp, #0
 800174c:	60f8      	str	r0, [r7, #12]
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001768:	4a14      	ldr	r2, [pc, #80]	@ (80017bc <_sbrk+0x5c>)
 800176a:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <_sbrk+0x60>)
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001774:	4b13      	ldr	r3, [pc, #76]	@ (80017c4 <_sbrk+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d102      	bne.n	8001782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800177c:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <_sbrk+0x64>)
 800177e:	4a12      	ldr	r2, [pc, #72]	@ (80017c8 <_sbrk+0x68>)
 8001780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001782:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	429a      	cmp	r2, r3
 800178e:	d207      	bcs.n	80017a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001790:	f009 f850 	bl	800a834 <__errno>
 8001794:	4603      	mov	r3, r0
 8001796:	220c      	movs	r2, #12
 8001798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
 800179e:	e009      	b.n	80017b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a0:	4b08      	ldr	r3, [pc, #32]	@ (80017c4 <_sbrk+0x64>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017a6:	4b07      	ldr	r3, [pc, #28]	@ (80017c4 <_sbrk+0x64>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	4a05      	ldr	r2, [pc, #20]	@ (80017c4 <_sbrk+0x64>)
 80017b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017b2:	68fb      	ldr	r3, [r7, #12]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20018000 	.word	0x20018000
 80017c0:	00000400 	.word	0x00000400
 80017c4:	20000874 	.word	0x20000874
 80017c8:	200022f8 	.word	0x200022f8

080017cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017d0:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <SystemInit+0x20>)
 80017d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017d6:	4a05      	ldr	r2, [pc, #20]	@ (80017ec <SystemInit+0x20>)
 80017d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
   ldr   sp, =_estack    /* Set stack pointer */
 80017f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001828 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017f4:	f7ff ffea 	bl	80017cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f8:	480c      	ldr	r0, [pc, #48]	@ (800182c <LoopForever+0x6>)
  ldr r1, =_edata
 80017fa:	490d      	ldr	r1, [pc, #52]	@ (8001830 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001834 <LoopForever+0xe>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001800:	e002      	b.n	8001808 <LoopCopyDataInit>

08001802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001806:	3304      	adds	r3, #4

08001808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800180c:	d3f9      	bcc.n	8001802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180e:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001810:	4c0a      	ldr	r4, [pc, #40]	@ (800183c <LoopForever+0x16>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001814:	e001      	b.n	800181a <LoopFillZerobss>

08001816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001818:	3204      	adds	r2, #4

0800181a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800181c:	d3fb      	bcc.n	8001816 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800181e:	f009 f80f 	bl	800a840 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001822:	f7fe feef 	bl	8000604 <main>

08001826 <LoopForever>:

LoopForever:
    b LoopForever
 8001826:	e7fe      	b.n	8001826 <LoopForever>
   ldr   sp, =_estack    /* Set stack pointer */
 8001828:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001830:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001834:	0800b530 	.word	0x0800b530
  ldr r2, =_sbss
 8001838:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800183c:	200022f4 	.word	0x200022f4

08001840 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001840:	e7fe      	b.n	8001840 <ADC3_IRQHandler>

08001842 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184c:	2003      	movs	r0, #3
 800184e:	f001 fd91 	bl	8003374 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001852:	200f      	movs	r0, #15
 8001854:	f000 f80e 	bl	8001874 <HAL_InitTick>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d002      	beq.n	8001864 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	71fb      	strb	r3, [r7, #7]
 8001862:	e001      	b.n	8001868 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001864:	f7ff fb98 	bl	8000f98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001868:	79fb      	ldrb	r3, [r7, #7]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001880:	4b17      	ldr	r3, [pc, #92]	@ (80018e0 <HAL_InitTick+0x6c>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d023      	beq.n	80018d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001888:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <HAL_InitTick+0x70>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b14      	ldr	r3, [pc, #80]	@ (80018e0 <HAL_InitTick+0x6c>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001896:	fbb3 f3f1 	udiv	r3, r3, r1
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f001 fd9d 	bl	80033de <HAL_SYSTICK_Config>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10f      	bne.n	80018ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b0f      	cmp	r3, #15
 80018ae:	d809      	bhi.n	80018c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b0:	2200      	movs	r2, #0
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	f001 fd67 	bl	800338a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018bc:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <HAL_InitTick+0x74>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e007      	b.n	80018d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
 80018c8:	e004      	b.n	80018d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	73fb      	strb	r3, [r7, #15]
 80018ce:	e001      	b.n	80018d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000008 	.word	0x20000008
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000004 	.word	0x20000004

080018ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018f0:	4b06      	ldr	r3, [pc, #24]	@ (800190c <HAL_IncTick+0x20>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <HAL_IncTick+0x24>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	4a04      	ldr	r2, [pc, #16]	@ (8001910 <HAL_IncTick+0x24>)
 80018fe:	6013      	str	r3, [r2, #0]
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000008 	.word	0x20000008
 8001910:	20000878 	.word	0x20000878

08001914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return uwTick;
 8001918:	4b03      	ldr	r3, [pc, #12]	@ (8001928 <HAL_GetTick+0x14>)
 800191a:	681b      	ldr	r3, [r3, #0]
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000878 	.word	0x20000878

0800192c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001934:	f7ff ffee 	bl	8001914 <HAL_GetTick>
 8001938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001944:	d005      	beq.n	8001952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001946:	4b0a      	ldr	r3, [pc, #40]	@ (8001970 <HAL_Delay+0x44>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4413      	add	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001952:	bf00      	nop
 8001954:	f7ff ffde 	bl	8001914 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	429a      	cmp	r2, r3
 8001962:	d8f7      	bhi.n	8001954 <HAL_Delay+0x28>
  {
  }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000008 	.word	0x20000008

08001974 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	609a      	str	r2, [r3, #8]
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	609a      	str	r2, [r3, #8]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019dc:	b480      	push	{r7}
 80019de:	b087      	sub	sp, #28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	3360      	adds	r3, #96	@ 0x60
 80019ee:	461a      	mov	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b08      	ldr	r3, [pc, #32]	@ (8001a20 <LL_ADC_SetOffset+0x44>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a14:	bf00      	nop
 8001a16:	371c      	adds	r7, #28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	03fff000 	.word	0x03fff000

08001a24 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3360      	adds	r3, #96	@ 0x60
 8001a32:	461a      	mov	r2, r3
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b087      	sub	sp, #28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	3360      	adds	r3, #96	@ 0x60
 8001a60:	461a      	mov	r2, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	431a      	orrs	r2, r3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a7a:	bf00      	nop
 8001a7c:	371c      	adds	r7, #28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	3330      	adds	r3, #48	@ 0x30
 8001abc:	461a      	mov	r2, r3
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	0a1b      	lsrs	r3, r3, #8
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	4413      	add	r3, r2
 8001aca:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	f003 031f 	and.w	r3, r3, #31
 8001ad6:	211f      	movs	r1, #31
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	401a      	ands	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	0e9b      	lsrs	r3, r3, #26
 8001ae4:	f003 011f 	and.w	r1, r3, #31
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	f003 031f 	and.w	r3, r3, #31
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	431a      	orrs	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001af8:	bf00      	nop
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b10:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e000      	b.n	8001b1e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b087      	sub	sp, #28
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	3314      	adds	r3, #20
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	0e5b      	lsrs	r3, r3, #25
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	4413      	add	r3, r2
 8001b48:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	0d1b      	lsrs	r3, r3, #20
 8001b52:	f003 031f 	and.w	r3, r3, #31
 8001b56:	2107      	movs	r1, #7
 8001b58:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	401a      	ands	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	0d1b      	lsrs	r3, r3, #20
 8001b64:	f003 031f 	and.w	r3, r3, #31
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b74:	bf00      	nop
 8001b76:	371c      	adds	r7, #28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0318 	and.w	r3, r3, #24
 8001ba2:	4908      	ldr	r1, [pc, #32]	@ (8001bc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ba4:	40d9      	lsrs	r1, r3
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	400b      	ands	r3, r1
 8001baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	0007ffff 	.word	0x0007ffff

08001bc8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 031f 	and.w	r3, r3, #31
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6093      	str	r3, [r2, #8]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c38:	d101      	bne.n	8001c3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c60:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c88:	d101      	bne.n	8001c8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cb0:	f043 0201 	orr.w	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <LL_ADC_IsEnabled+0x18>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <LL_ADC_IsEnabled+0x1a>
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cfa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cfe:	f043 0204 	orr.w	r2, r3, #4
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d101      	bne.n	8001d2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d101      	bne.n	8001d50 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b089      	sub	sp, #36	@ 0x24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e130      	b.n	8001fdc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d109      	bne.n	8001d9c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff f92d 	bl	8000fe8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff3f 	bl	8001c24 <LL_ADC_IsDeepPowerDownEnabled>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d004      	beq.n	8001db6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff25 	bl	8001c00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff ff5a 	bl	8001c74 <LL_ADC_IsInternalRegulatorEnabled>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d115      	bne.n	8001df2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ff3e 	bl	8001c4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dd0:	4b84      	ldr	r3, [pc, #528]	@ (8001fe4 <HAL_ADC_Init+0x284>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	099b      	lsrs	r3, r3, #6
 8001dd6:	4a84      	ldr	r2, [pc, #528]	@ (8001fe8 <HAL_ADC_Init+0x288>)
 8001dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ddc:	099b      	lsrs	r3, r3, #6
 8001dde:	3301      	adds	r3, #1
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001de4:	e002      	b.n	8001dec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f9      	bne.n	8001de6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ff3c 	bl	8001c74 <LL_ADC_IsInternalRegulatorEnabled>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10d      	bne.n	8001e1e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e06:	f043 0210 	orr.w	r2, r3, #16
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e12:	f043 0201 	orr.w	r2, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff ff75 	bl	8001d12 <LL_ADC_REG_IsConversionOngoing>
 8001e28:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f040 80c9 	bne.w	8001fca <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f040 80c5 	bne.w	8001fca <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e44:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e48:	f043 0202 	orr.w	r2, r3, #2
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff35 	bl	8001cc4 <LL_ADC_IsEnabled>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d115      	bne.n	8001e8c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e60:	4862      	ldr	r0, [pc, #392]	@ (8001fec <HAL_ADC_Init+0x28c>)
 8001e62:	f7ff ff2f 	bl	8001cc4 <LL_ADC_IsEnabled>
 8001e66:	4604      	mov	r4, r0
 8001e68:	4861      	ldr	r0, [pc, #388]	@ (8001ff0 <HAL_ADC_Init+0x290>)
 8001e6a:	f7ff ff2b 	bl	8001cc4 <LL_ADC_IsEnabled>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	431c      	orrs	r4, r3
 8001e72:	4860      	ldr	r0, [pc, #384]	@ (8001ff4 <HAL_ADC_Init+0x294>)
 8001e74:	f7ff ff26 	bl	8001cc4 <LL_ADC_IsEnabled>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4323      	orrs	r3, r4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d105      	bne.n	8001e8c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	4619      	mov	r1, r3
 8001e86:	485c      	ldr	r0, [pc, #368]	@ (8001ff8 <HAL_ADC_Init+0x298>)
 8001e88:	f7ff fd74 	bl	8001974 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7e5b      	ldrb	r3, [r3, #25]
 8001e90:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e96:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e9c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001ea2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eaa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d106      	bne.n	8001ec8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	045b      	lsls	r3, r3, #17
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d009      	beq.n	8001ee4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001edc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	4b44      	ldr	r3, [pc, #272]	@ (8001ffc <HAL_ADC_Init+0x29c>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	69b9      	ldr	r1, [r7, #24]
 8001ef4:	430b      	orrs	r3, r1
 8001ef6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff1b 	bl	8001d38 <LL_ADC_INJ_IsConversionOngoing>
 8001f02:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d13d      	bne.n	8001f86 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d13a      	bne.n	8001f86 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f14:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f1c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f2c:	f023 0302 	bic.w	r3, r3, #2
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	69b9      	ldr	r1, [r7, #24]
 8001f36:	430b      	orrs	r3, r1
 8001f38:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d118      	bne.n	8001f76 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f4e:	f023 0304 	bic.w	r3, r3, #4
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f60:	4311      	orrs	r1, r2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f66:	430a      	orrs	r2, r1
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	611a      	str	r2, [r3, #16]
 8001f74:	e007      	b.n	8001f86 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0201 	bic.w	r2, r2, #1
 8001f84:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f94:	f023 010f 	bic.w	r1, r3, #15
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	1e5a      	subs	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fa6:	e007      	b.n	8001fb8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 020f 	bic.w	r2, r2, #15
 8001fb6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fbc:	f023 0303 	bic.w	r3, r3, #3
 8001fc0:	f043 0201 	orr.w	r2, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	655a      	str	r2, [r3, #84]	@ 0x54
 8001fc8:	e007      	b.n	8001fda <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fce:	f043 0210 	orr.w	r2, r3, #16
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fda:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3724      	adds	r7, #36	@ 0x24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd90      	pop	{r4, r7, pc}
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	053e2d63 	.word	0x053e2d63
 8001fec:	50040000 	.word	0x50040000
 8001ff0:	50040100 	.word	0x50040100
 8001ff4:	50040200 	.word	0x50040200
 8001ff8:	50040300 	.word	0x50040300
 8001ffc:	fff0c007 	.word	0xfff0c007

08002000 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002008:	4891      	ldr	r0, [pc, #580]	@ (8002250 <HAL_ADC_Start_IT+0x250>)
 800200a:	f7ff fddd 	bl	8001bc8 <LL_ADC_GetMultimode>
 800200e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fe7c 	bl	8001d12 <LL_ADC_REG_IsConversionOngoing>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	f040 8110 	bne.w	8002242 <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <HAL_ADC_Start_IT+0x30>
 800202c:	2302      	movs	r3, #2
 800202e:	e10b      	b.n	8002248 <HAL_ADC_Start_IT+0x248>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 ff3d 	bl	8002eb8 <ADC_Enable>
 800203e:	4603      	mov	r3, r0
 8002040:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002042:	7dfb      	ldrb	r3, [r7, #23]
 8002044:	2b00      	cmp	r3, #0
 8002046:	f040 80f7 	bne.w	8002238 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002052:	f023 0301 	bic.w	r3, r3, #1
 8002056:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a7c      	ldr	r2, [pc, #496]	@ (8002254 <HAL_ADC_Start_IT+0x254>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d002      	beq.n	800206e <HAL_ADC_Start_IT+0x6e>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	e000      	b.n	8002070 <HAL_ADC_Start_IT+0x70>
 800206e:	4b7a      	ldr	r3, [pc, #488]	@ (8002258 <HAL_ADC_Start_IT+0x258>)
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	4293      	cmp	r3, r2
 8002076:	d002      	beq.n	800207e <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d105      	bne.n	800208a <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002082:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d006      	beq.n	80020a4 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209a:	f023 0206 	bic.w	r2, r3, #6
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80020a2:	e002      	b.n	80020aa <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	221c      	movs	r2, #28
 80020b0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 021c 	bic.w	r2, r2, #28
 80020c8:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d108      	bne.n	80020e4 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0208 	orr.w	r2, r2, #8
 80020e0:	605a      	str	r2, [r3, #4]
          break;
 80020e2:	e008      	b.n	80020f6 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0204 	orr.w	r2, r2, #4
 80020f2:	605a      	str	r2, [r3, #4]
          break;
 80020f4:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d107      	bne.n	800210e <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 0210 	orr.w	r2, r2, #16
 800210c:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a50      	ldr	r2, [pc, #320]	@ (8002254 <HAL_ADC_Start_IT+0x254>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d002      	beq.n	800211e <HAL_ADC_Start_IT+0x11e>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	e000      	b.n	8002120 <HAL_ADC_Start_IT+0x120>
 800211e:	4b4e      	ldr	r3, [pc, #312]	@ (8002258 <HAL_ADC_Start_IT+0x258>)
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	4293      	cmp	r3, r2
 8002126:	d008      	beq.n	800213a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	2b05      	cmp	r3, #5
 8002132:	d002      	beq.n	800213a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	2b09      	cmp	r3, #9
 8002138:	d13a      	bne.n	80021b0 <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d02d      	beq.n	80021a4 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800214c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002150:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	2b08      	cmp	r3, #8
 800215e:	d110      	bne.n	8002182 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0220 	bic.w	r2, r2, #32
 800216e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800217e:	605a      	str	r2, [r3, #4]
              break;
 8002180:	e010      	b.n	80021a4 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002190:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0220 	orr.w	r2, r2, #32
 80021a0:	605a      	str	r2, [r3, #4]
              break;
 80021a2:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fd9e 	bl	8001cea <LL_ADC_REG_StartConversion>
 80021ae:	e04a      	b.n	8002246 <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a24      	ldr	r2, [pc, #144]	@ (8002254 <HAL_ADC_Start_IT+0x254>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d002      	beq.n	80021cc <HAL_ADC_Start_IT+0x1cc>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	e000      	b.n	80021ce <HAL_ADC_Start_IT+0x1ce>
 80021cc:	4b22      	ldr	r3, [pc, #136]	@ (8002258 <HAL_ADC_Start_IT+0x258>)
 80021ce:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d034      	beq.n	8002246 <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021e4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d110      	bne.n	8002216 <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0220 	bic.w	r2, r2, #32
 8002202:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002212:	605a      	str	r2, [r3, #4]
              break;
 8002214:	e017      	b.n	8002246 <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002224:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 0220 	orr.w	r2, r2, #32
 8002234:	605a      	str	r2, [r3, #4]
              break;
 8002236:	e006      	b.n	8002246 <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002240:	e001      	b.n	8002246 <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002242:	2302      	movs	r3, #2
 8002244:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002246:	7dfb      	ldrb	r3, [r7, #23]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	50040300 	.word	0x50040300
 8002254:	50040100 	.word	0x50040100
 8002258:	50040000 	.word	0x50040000

0800225c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	@ 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002280:	2300      	movs	r3, #0
 8002282:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002294:	4882      	ldr	r0, [pc, #520]	@ (80024a0 <HAL_ADC_IRQHandler+0x228>)
 8002296:	f7ff fc97 	bl	8001bc8 <LL_ADC_GetMultimode>
 800229a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d017      	beq.n	80022d6 <HAL_ADC_IRQHandler+0x5e>
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d012      	beq.n	80022d6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d105      	bne.n	80022c8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c0:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fec9 	bl	8003060 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2202      	movs	r2, #2
 80022d4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d004      	beq.n	80022ea <HAL_ADC_IRQHandler+0x72>
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10a      	bne.n	8002300 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 8083 	beq.w	80023fc <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d07d      	beq.n	80023fc <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	2b00      	cmp	r3, #0
 800230a:	d105      	bne.n	8002318 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002310:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fbb2 	bl	8001a86 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d062      	beq.n	80023ee <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a5d      	ldr	r2, [pc, #372]	@ (80024a4 <HAL_ADC_IRQHandler+0x22c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d002      	beq.n	8002338 <HAL_ADC_IRQHandler+0xc0>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	e000      	b.n	800233a <HAL_ADC_IRQHandler+0xc2>
 8002338:	4b5b      	ldr	r3, [pc, #364]	@ (80024a8 <HAL_ADC_IRQHandler+0x230>)
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	4293      	cmp	r3, r2
 8002340:	d008      	beq.n	8002354 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	2b05      	cmp	r3, #5
 800234c:	d002      	beq.n	8002354 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2b09      	cmp	r3, #9
 8002352:	d104      	bne.n	800235e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	623b      	str	r3, [r7, #32]
 800235c:	e00c      	b.n	8002378 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a50      	ldr	r2, [pc, #320]	@ (80024a4 <HAL_ADC_IRQHandler+0x22c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d002      	beq.n	800236e <HAL_ADC_IRQHandler+0xf6>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	e000      	b.n	8002370 <HAL_ADC_IRQHandler+0xf8>
 800236e:	4b4e      	ldr	r3, [pc, #312]	@ (80024a8 <HAL_ADC_IRQHandler+0x230>)
 8002370:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d135      	bne.n	80023ee <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b08      	cmp	r3, #8
 800238e:	d12e      	bne.n	80023ee <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fcbc 	bl	8001d12 <LL_ADC_REG_IsConversionOngoing>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d11a      	bne.n	80023d6 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 020c 	bic.w	r2, r2, #12
 80023ae:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d112      	bne.n	80023ee <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023cc:	f043 0201 	orr.w	r2, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80023d4:	e00b      	b.n	80023ee <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023da:	f043 0210 	orr.w	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e6:	f043 0201 	orr.w	r2, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7fe f8e6 	bl	80005c0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	220c      	movs	r2, #12
 80023fa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f003 0320 	and.w	r3, r3, #32
 8002402:	2b00      	cmp	r3, #0
 8002404:	d004      	beq.n	8002410 <HAL_ADC_IRQHandler+0x198>
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10b      	bne.n	8002428 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 809f 	beq.w	800255a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 8099 	beq.w	800255a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	2b00      	cmp	r3, #0
 8002432:	d105      	bne.n	8002440 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002438:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fb5d 	bl	8001b04 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800244a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fb18 	bl	8001a86 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002456:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a11      	ldr	r2, [pc, #68]	@ (80024a4 <HAL_ADC_IRQHandler+0x22c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d002      	beq.n	8002468 <HAL_ADC_IRQHandler+0x1f0>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	e000      	b.n	800246a <HAL_ADC_IRQHandler+0x1f2>
 8002468:	4b0f      	ldr	r3, [pc, #60]	@ (80024a8 <HAL_ADC_IRQHandler+0x230>)
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	4293      	cmp	r3, r2
 8002470:	d008      	beq.n	8002484 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2b06      	cmp	r3, #6
 800247c:	d002      	beq.n	8002484 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2b07      	cmp	r3, #7
 8002482:	d104      	bne.n	800248e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	623b      	str	r3, [r7, #32]
 800248c:	e013      	b.n	80024b6 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a04      	ldr	r2, [pc, #16]	@ (80024a4 <HAL_ADC_IRQHandler+0x22c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d009      	beq.n	80024ac <HAL_ADC_IRQHandler+0x234>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	e007      	b.n	80024ae <HAL_ADC_IRQHandler+0x236>
 800249e:	bf00      	nop
 80024a0:	50040300 	.word	0x50040300
 80024a4:	50040100 	.word	0x50040100
 80024a8:	50040000 	.word	0x50040000
 80024ac:	4b7d      	ldr	r3, [pc, #500]	@ (80026a4 <HAL_ADC_IRQHandler+0x42c>)
 80024ae:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d047      	beq.n	800254c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d007      	beq.n	80024d6 <HAL_ADC_IRQHandler+0x25e>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d03f      	beq.n	800254c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d13a      	bne.n	800254c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024e0:	2b40      	cmp	r3, #64	@ 0x40
 80024e2:	d133      	bne.n	800254c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d12e      	bne.n	800254c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fc20 	bl	8001d38 <LL_ADC_INJ_IsConversionOngoing>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d11a      	bne.n	8002534 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800250c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002512:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800251e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d112      	bne.n	800254c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252a:	f043 0201 	orr.w	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	655a      	str	r2, [r3, #84]	@ 0x54
 8002532:	e00b      	b.n	800254c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002538:	f043 0210 	orr.w	r2, r3, #16
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002544:	f043 0201 	orr.w	r2, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 fd5f 	bl	8003010 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2260      	movs	r2, #96	@ 0x60
 8002558:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002560:	2b00      	cmp	r3, #0
 8002562:	d011      	beq.n	8002588 <HAL_ADC_IRQHandler+0x310>
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00c      	beq.n	8002588 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002572:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f896 	bl	80026ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2280      	movs	r2, #128	@ 0x80
 8002586:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258e:	2b00      	cmp	r3, #0
 8002590:	d012      	beq.n	80025b8 <HAL_ADC_IRQHandler+0x340>
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00d      	beq.n	80025b8 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 fd45 	bl	8003038 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d012      	beq.n	80025e8 <HAL_ADC_IRQHandler+0x370>
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00d      	beq.n	80025e8 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 fd37 	bl	800304c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d036      	beq.n	8002660 <HAL_ADC_IRQHandler+0x3e8>
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d031      	beq.n	8002660 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002604:	2301      	movs	r3, #1
 8002606:	627b      	str	r3, [r7, #36]	@ 0x24
 8002608:	e014      	b.n	8002634 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002610:	4825      	ldr	r0, [pc, #148]	@ (80026a8 <HAL_ADC_IRQHandler+0x430>)
 8002612:	f7ff fae7 	bl	8001be4 <LL_ADC_GetMultiDMATransfer>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00b      	beq.n	8002634 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800261c:	2301      	movs	r3, #1
 800261e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002620:	e008      	b.n	8002634 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002630:	2301      	movs	r3, #1
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	2b01      	cmp	r3, #1
 8002638:	d10e      	bne.n	8002658 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264a:	f043 0202 	orr.w	r2, r3, #2
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f834 	bl	80026c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2210      	movs	r2, #16
 800265e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002666:	2b00      	cmp	r3, #0
 8002668:	d018      	beq.n	800269c <HAL_ADC_IRQHandler+0x424>
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002670:	2b00      	cmp	r3, #0
 8002672:	d013      	beq.n	800269c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002678:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002684:	f043 0208 	orr.w	r2, r3, #8
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002694:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fcc4 	bl	8003024 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800269c:	bf00      	nop
 800269e:	3728      	adds	r7, #40	@ 0x28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	50040000 	.word	0x50040000
 80026a8:	50040300 	.word	0x50040300

080026ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b0b6      	sub	sp, #216	@ 0xd8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x22>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e3c9      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x7b6>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fb05 	bl	8001d12 <LL_ADC_REG_IsConversionOngoing>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	f040 83aa 	bne.w	8002e64 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b05      	cmp	r3, #5
 800271e:	d824      	bhi.n	800276a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	3b02      	subs	r3, #2
 8002726:	2b03      	cmp	r3, #3
 8002728:	d81b      	bhi.n	8002762 <HAL_ADC_ConfigChannel+0x8e>
 800272a:	a201      	add	r2, pc, #4	@ (adr r2, 8002730 <HAL_ADC_ConfigChannel+0x5c>)
 800272c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002730:	08002741 	.word	0x08002741
 8002734:	08002749 	.word	0x08002749
 8002738:	08002751 	.word	0x08002751
 800273c:	08002759 	.word	0x08002759
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002740:	230c      	movs	r3, #12
 8002742:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002746:	e010      	b.n	800276a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002748:	2312      	movs	r3, #18
 800274a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800274e:	e00c      	b.n	800276a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002750:	2318      	movs	r3, #24
 8002752:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002756:	e008      	b.n	800276a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002758:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800275c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002760:	e003      	b.n	800276a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002762:	2306      	movs	r3, #6
 8002764:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002768:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002778:	f7ff f998 	bl	8001aac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fac6 	bl	8001d12 <LL_ADC_REG_IsConversionOngoing>
 8002786:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fad2 	bl	8001d38 <LL_ADC_INJ_IsConversionOngoing>
 8002794:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002798:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800279c:	2b00      	cmp	r3, #0
 800279e:	f040 81a4 	bne.w	8002aea <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f040 819f 	bne.w	8002aea <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	6819      	ldr	r1, [r3, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	461a      	mov	r2, r3
 80027ba:	f7ff f9b6 	bl	8001b2a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	695a      	ldr	r2, [r3, #20]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	08db      	lsrs	r3, r3, #3
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d00a      	beq.n	80027f6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	6919      	ldr	r1, [r3, #16]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027f0:	f7ff f8f4 	bl	80019dc <LL_ADC_SetOffset>
 80027f4:	e179      	b.n	8002aea <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff f911 	bl	8001a24 <LL_ADC_GetOffsetChannel>
 8002802:	4603      	mov	r3, r0
 8002804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x14e>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2100      	movs	r1, #0
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff f906 	bl	8001a24 <LL_ADC_GetOffsetChannel>
 8002818:	4603      	mov	r3, r0
 800281a:	0e9b      	lsrs	r3, r3, #26
 800281c:	f003 021f 	and.w	r2, r3, #31
 8002820:	e01e      	b.n	8002860 <HAL_ADC_ConfigChannel+0x18c>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2100      	movs	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff f8fb 	bl	8001a24 <LL_ADC_GetOffsetChannel>
 800282e:	4603      	mov	r3, r0
 8002830:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002840:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002844:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002848:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002850:	2320      	movs	r3, #32
 8002852:	e004      	b.n	800285e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002854:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002858:	fab3 f383 	clz	r3, r3
 800285c:	b2db      	uxtb	r3, r3
 800285e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002868:	2b00      	cmp	r3, #0
 800286a:	d105      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x1a4>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	0e9b      	lsrs	r3, r3, #26
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	e018      	b.n	80028aa <HAL_ADC_ConfigChannel+0x1d6>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800288c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002890:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002894:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800289c:	2320      	movs	r3, #32
 800289e:	e004      	b.n	80028aa <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80028a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d106      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2200      	movs	r2, #0
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff f8ca 	bl	8001a50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2101      	movs	r1, #1
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff f8ae 	bl	8001a24 <LL_ADC_GetOffsetChannel>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10a      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x214>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2101      	movs	r1, #1
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff f8a3 	bl	8001a24 <LL_ADC_GetOffsetChannel>
 80028de:	4603      	mov	r3, r0
 80028e0:	0e9b      	lsrs	r3, r3, #26
 80028e2:	f003 021f 	and.w	r2, r3, #31
 80028e6:	e01e      	b.n	8002926 <HAL_ADC_ConfigChannel+0x252>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2101      	movs	r1, #1
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff f898 	bl	8001a24 <LL_ADC_GetOffsetChannel>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002906:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800290a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800290e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002916:	2320      	movs	r3, #32
 8002918:	e004      	b.n	8002924 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800291a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292e:	2b00      	cmp	r3, #0
 8002930:	d105      	bne.n	800293e <HAL_ADC_ConfigChannel+0x26a>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	0e9b      	lsrs	r3, r3, #26
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	e018      	b.n	8002970 <HAL_ADC_ConfigChannel+0x29c>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002952:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002956:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800295a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002962:	2320      	movs	r3, #32
 8002964:	e004      	b.n	8002970 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002966:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002970:	429a      	cmp	r2, r3
 8002972:	d106      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2200      	movs	r2, #0
 800297a:	2101      	movs	r1, #1
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff f867 	bl	8001a50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2102      	movs	r1, #2
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff f84b 	bl	8001a24 <LL_ADC_GetOffsetChannel>
 800298e:	4603      	mov	r3, r0
 8002990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10a      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x2da>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2102      	movs	r1, #2
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff f840 	bl	8001a24 <LL_ADC_GetOffsetChannel>
 80029a4:	4603      	mov	r3, r0
 80029a6:	0e9b      	lsrs	r3, r3, #26
 80029a8:	f003 021f 	and.w	r2, r3, #31
 80029ac:	e01e      	b.n	80029ec <HAL_ADC_ConfigChannel+0x318>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2102      	movs	r1, #2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff f835 	bl	8001a24 <LL_ADC_GetOffsetChannel>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80029cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80029d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80029dc:	2320      	movs	r3, #32
 80029de:	e004      	b.n	80029ea <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80029e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029e4:	fab3 f383 	clz	r3, r3
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d105      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x330>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	0e9b      	lsrs	r3, r3, #26
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	e014      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x35a>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002a12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002a18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002a20:	2320      	movs	r3, #32
 8002a22:	e004      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d106      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2200      	movs	r2, #0
 8002a38:	2102      	movs	r1, #2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff f808 	bl	8001a50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2103      	movs	r1, #3
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe ffec 	bl	8001a24 <LL_ADC_GetOffsetChannel>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10a      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x398>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2103      	movs	r1, #3
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fe ffe1 	bl	8001a24 <LL_ADC_GetOffsetChannel>
 8002a62:	4603      	mov	r3, r0
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	f003 021f 	and.w	r2, r3, #31
 8002a6a:	e017      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x3c8>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2103      	movs	r1, #3
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fe ffd6 	bl	8001a24 <LL_ADC_GetOffsetChannel>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002a84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a86:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002a88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002a8e:	2320      	movs	r3, #32
 8002a90:	e003      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002a92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d105      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x3e0>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0e9b      	lsrs	r3, r3, #26
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	e011      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x404>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002ac2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ac4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002ac6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002acc:	2320      	movs	r3, #32
 8002ace:	e003      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002ad0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d106      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2103      	movs	r1, #3
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fe ffb3 	bl	8001a50 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff f8e8 	bl	8001cc4 <LL_ADC_IsEnabled>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f040 8140 	bne.w	8002d7c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	6819      	ldr	r1, [r3, #0]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	f7ff f839 	bl	8001b80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	4a8f      	ldr	r2, [pc, #572]	@ (8002d50 <HAL_ADC_ConfigChannel+0x67c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	f040 8131 	bne.w	8002d7c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10b      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x46e>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	0e9b      	lsrs	r3, r3, #26
 8002b30:	3301      	adds	r3, #1
 8002b32:	f003 031f 	and.w	r3, r3, #31
 8002b36:	2b09      	cmp	r3, #9
 8002b38:	bf94      	ite	ls
 8002b3a:	2301      	movls	r3, #1
 8002b3c:	2300      	movhi	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	e019      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x4a2>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002b50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b52:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002b54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002b5a:	2320      	movs	r3, #32
 8002b5c:	e003      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002b5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b60:	fab3 f383 	clz	r3, r3
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	3301      	adds	r3, #1
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	2b09      	cmp	r3, #9
 8002b6e:	bf94      	ite	ls
 8002b70:	2301      	movls	r3, #1
 8002b72:	2300      	movhi	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d079      	beq.n	8002c6e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d107      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x4c2>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	0e9b      	lsrs	r3, r3, #26
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	069b      	lsls	r3, r3, #26
 8002b90:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b94:	e015      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x4ee>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b9e:	fa93 f3a3 	rbit	r3, r3
 8002ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002ba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ba6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002ba8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002bae:	2320      	movs	r3, #32
 8002bb0:	e003      	b.n	8002bba <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002bb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bb4:	fab3 f383 	clz	r3, r3
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	3301      	adds	r3, #1
 8002bbc:	069b      	lsls	r3, r3, #26
 8002bbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d109      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x50e>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	0e9b      	lsrs	r3, r3, #26
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f003 031f 	and.w	r3, r3, #31
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002be0:	e017      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x53e>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bf2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002bfa:	2320      	movs	r3, #32
 8002bfc:	e003      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002bfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c00:	fab3 f383 	clz	r3, r3
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	3301      	adds	r3, #1
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c12:	ea42 0103 	orr.w	r1, r2, r3
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10a      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x564>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	0e9b      	lsrs	r3, r3, #26
 8002c28:	3301      	adds	r3, #1
 8002c2a:	f003 021f 	and.w	r2, r3, #31
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	051b      	lsls	r3, r3, #20
 8002c36:	e018      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x596>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c40:	fa93 f3a3 	rbit	r3, r3
 8002c44:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c48:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002c50:	2320      	movs	r3, #32
 8002c52:	e003      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c56:	fab3 f383 	clz	r3, r3
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	f003 021f 	and.w	r2, r3, #31
 8002c62:	4613      	mov	r3, r2
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	4413      	add	r3, r2
 8002c68:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	e081      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d107      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x5b6>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	0e9b      	lsrs	r3, r3, #26
 8002c80:	3301      	adds	r3, #1
 8002c82:	069b      	lsls	r3, r3, #26
 8002c84:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c88:	e015      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x5e2>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	e003      	b.n	8002cae <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca8:	fab3 f383 	clz	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	069b      	lsls	r3, r3, #26
 8002cb2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d109      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x602>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	0e9b      	lsrs	r3, r3, #26
 8002cc8:	3301      	adds	r3, #1
 8002cca:	f003 031f 	and.w	r3, r3, #31
 8002cce:	2101      	movs	r1, #1
 8002cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd4:	e017      	b.n	8002d06 <HAL_ADC_ConfigChannel+0x632>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	61bb      	str	r3, [r7, #24]
  return result;
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002cee:	2320      	movs	r3, #32
 8002cf0:	e003      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	fab3 f383 	clz	r3, r3
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	f003 031f 	and.w	r3, r3, #31
 8002d00:	2101      	movs	r1, #1
 8002d02:	fa01 f303 	lsl.w	r3, r1, r3
 8002d06:	ea42 0103 	orr.w	r1, r2, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10d      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x65e>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	0e9b      	lsrs	r3, r3, #26
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	f003 021f 	and.w	r2, r3, #31
 8002d22:	4613      	mov	r3, r2
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4413      	add	r3, r2
 8002d28:	3b1e      	subs	r3, #30
 8002d2a:	051b      	lsls	r3, r3, #20
 8002d2c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d30:	e01e      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x69c>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	fa93 f3a3 	rbit	r3, r3
 8002d3e:	60fb      	str	r3, [r7, #12]
  return result;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d104      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002d4a:	2320      	movs	r3, #32
 8002d4c:	e006      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x688>
 8002d4e:	bf00      	nop
 8002d50:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	fab3 f383 	clz	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	f003 021f 	and.w	r2, r3, #31
 8002d62:	4613      	mov	r3, r2
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	4413      	add	r3, r2
 8002d68:	3b1e      	subs	r3, #30
 8002d6a:	051b      	lsls	r3, r3, #20
 8002d6c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d70:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d76:	4619      	mov	r1, r3
 8002d78:	f7fe fed7 	bl	8001b2a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	4b44      	ldr	r3, [pc, #272]	@ (8002e94 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d07a      	beq.n	8002e7e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d88:	4843      	ldr	r0, [pc, #268]	@ (8002e98 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d8a:	f7fe fe19 	bl	80019c0 <LL_ADC_GetCommonPathInternalCh>
 8002d8e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a41      	ldr	r2, [pc, #260]	@ (8002e9c <HAL_ADC_ConfigChannel+0x7c8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d12c      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002da0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d126      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a3c      	ldr	r2, [pc, #240]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d004      	beq.n	8002dbc <HAL_ADC_ConfigChannel+0x6e8>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a3b      	ldr	r2, [pc, #236]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d15d      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002dc0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4834      	ldr	r0, [pc, #208]	@ (8002e98 <HAL_ADC_ConfigChannel+0x7c4>)
 8002dc8:	f7fe fde7 	bl	800199a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dcc:	4b36      	ldr	r3, [pc, #216]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x7d4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	099b      	lsrs	r3, r3, #6
 8002dd2:	4a36      	ldr	r2, [pc, #216]	@ (8002eac <HAL_ADC_ConfigChannel+0x7d8>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	099b      	lsrs	r3, r3, #6
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002de6:	e002      	b.n	8002dee <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1f9      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002df4:	e040      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a2d      	ldr	r2, [pc, #180]	@ (8002eb0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d118      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d112      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a23      	ldr	r2, [pc, #140]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d004      	beq.n	8002e20 <HAL_ADC_ConfigChannel+0x74c>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a22      	ldr	r2, [pc, #136]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d12d      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e24:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e28:	4619      	mov	r1, r3
 8002e2a:	481b      	ldr	r0, [pc, #108]	@ (8002e98 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e2c:	f7fe fdb5 	bl	800199a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e30:	e024      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a1f      	ldr	r2, [pc, #124]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d120      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d11a      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a14      	ldr	r2, [pc, #80]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d115      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e56:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	480e      	ldr	r0, [pc, #56]	@ (8002e98 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e5e:	f7fe fd9c 	bl	800199a <LL_ADC_SetCommonPathInternalCh>
 8002e62:	e00c      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e68:	f043 0220 	orr.w	r2, r3, #32
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002e76:	e002      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e78:	bf00      	nop
 8002e7a:	e000      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e7c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e86:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	37d8      	adds	r7, #216	@ 0xd8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	80080000 	.word	0x80080000
 8002e98:	50040300 	.word	0x50040300
 8002e9c:	c7520000 	.word	0xc7520000
 8002ea0:	50040000 	.word	0x50040000
 8002ea4:	50040200 	.word	0x50040200
 8002ea8:	20000000 	.word	0x20000000
 8002eac:	053e2d63 	.word	0x053e2d63
 8002eb0:	cb840000 	.word	0xcb840000
 8002eb4:	80000001 	.word	0x80000001

08002eb8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fe fefb 	bl	8001cc4 <LL_ADC_IsEnabled>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d169      	bne.n	8002fa8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	4b36      	ldr	r3, [pc, #216]	@ (8002fb4 <ADC_Enable+0xfc>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00d      	beq.n	8002efe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee6:	f043 0210 	orr.w	r2, r3, #16
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef2:	f043 0201 	orr.w	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e055      	b.n	8002faa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe feca 	bl	8001c9c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f08:	482b      	ldr	r0, [pc, #172]	@ (8002fb8 <ADC_Enable+0x100>)
 8002f0a:	f7fe fd59 	bl	80019c0 <LL_ADC_GetCommonPathInternalCh>
 8002f0e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d013      	beq.n	8002f40 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f18:	4b28      	ldr	r3, [pc, #160]	@ (8002fbc <ADC_Enable+0x104>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	099b      	lsrs	r3, r3, #6
 8002f1e:	4a28      	ldr	r2, [pc, #160]	@ (8002fc0 <ADC_Enable+0x108>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	4613      	mov	r3, r2
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f32:	e002      	b.n	8002f3a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1f9      	bne.n	8002f34 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f40:	f7fe fce8 	bl	8001914 <HAL_GetTick>
 8002f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f46:	e028      	b.n	8002f9a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fe feb9 	bl	8001cc4 <LL_ADC_IsEnabled>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d104      	bne.n	8002f62 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fe fe9d 	bl	8001c9c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f62:	f7fe fcd7 	bl	8001914 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d914      	bls.n	8002f9a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d00d      	beq.n	8002f9a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f82:	f043 0210 	orr.w	r2, r3, #16
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8e:	f043 0201 	orr.w	r2, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e007      	b.n	8002faa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d1cf      	bne.n	8002f48 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	8000003f 	.word	0x8000003f
 8002fb8:	50040300 	.word	0x50040300
 8002fbc:	20000000 	.word	0x20000000
 8002fc0:	053e2d63 	.word	0x053e2d63

08002fc4 <LL_ADC_IsEnabled>:
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <LL_ADC_IsEnabled+0x18>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <LL_ADC_IsEnabled+0x1a>
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <LL_ADC_REG_IsConversionOngoing>:
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d101      	bne.n	8003002 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b09f      	sub	sp, #124	@ 0x7c
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800308e:	2302      	movs	r3, #2
 8003090:	e093      	b.n	80031ba <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800309a:	2300      	movs	r3, #0
 800309c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800309e:	2300      	movs	r3, #0
 80030a0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a47      	ldr	r2, [pc, #284]	@ (80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d102      	bne.n	80030b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80030ac:	4b46      	ldr	r3, [pc, #280]	@ (80031c8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	e001      	b.n	80030b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80030b2:	2300      	movs	r3, #0
 80030b4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10b      	bne.n	80030d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c0:	f043 0220 	orr.w	r2, r3, #32
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e072      	b.n	80031ba <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff ff87 	bl	8002fea <LL_ADC_REG_IsConversionOngoing>
 80030dc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff ff81 	bl	8002fea <LL_ADC_REG_IsConversionOngoing>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d154      	bne.n	8003198 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80030ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d151      	bne.n	8003198 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030f4:	4b35      	ldr	r3, [pc, #212]	@ (80031cc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80030f6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d02c      	beq.n	800315a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003100:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003112:	035b      	lsls	r3, r3, #13
 8003114:	430b      	orrs	r3, r1
 8003116:	431a      	orrs	r2, r3
 8003118:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800311a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800311c:	4829      	ldr	r0, [pc, #164]	@ (80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800311e:	f7ff ff51 	bl	8002fc4 <LL_ADC_IsEnabled>
 8003122:	4604      	mov	r4, r0
 8003124:	4828      	ldr	r0, [pc, #160]	@ (80031c8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003126:	f7ff ff4d 	bl	8002fc4 <LL_ADC_IsEnabled>
 800312a:	4603      	mov	r3, r0
 800312c:	431c      	orrs	r4, r3
 800312e:	4828      	ldr	r0, [pc, #160]	@ (80031d0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003130:	f7ff ff48 	bl	8002fc4 <LL_ADC_IsEnabled>
 8003134:	4603      	mov	r3, r0
 8003136:	4323      	orrs	r3, r4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d137      	bne.n	80031ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800313c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003144:	f023 030f 	bic.w	r3, r3, #15
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	6811      	ldr	r1, [r2, #0]
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	6892      	ldr	r2, [r2, #8]
 8003150:	430a      	orrs	r2, r1
 8003152:	431a      	orrs	r2, r3
 8003154:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003156:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003158:	e028      	b.n	80031ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800315a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003162:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003164:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003166:	4817      	ldr	r0, [pc, #92]	@ (80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003168:	f7ff ff2c 	bl	8002fc4 <LL_ADC_IsEnabled>
 800316c:	4604      	mov	r4, r0
 800316e:	4816      	ldr	r0, [pc, #88]	@ (80031c8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003170:	f7ff ff28 	bl	8002fc4 <LL_ADC_IsEnabled>
 8003174:	4603      	mov	r3, r0
 8003176:	431c      	orrs	r4, r3
 8003178:	4815      	ldr	r0, [pc, #84]	@ (80031d0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800317a:	f7ff ff23 	bl	8002fc4 <LL_ADC_IsEnabled>
 800317e:	4603      	mov	r3, r0
 8003180:	4323      	orrs	r3, r4
 8003182:	2b00      	cmp	r3, #0
 8003184:	d112      	bne.n	80031ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800318e:	f023 030f 	bic.w	r3, r3, #15
 8003192:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003194:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003196:	e009      	b.n	80031ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800319c:	f043 0220 	orr.w	r2, r3, #32
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80031aa:	e000      	b.n	80031ae <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80031b6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	377c      	adds	r7, #124	@ 0x7c
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd90      	pop	{r4, r7, pc}
 80031c2:	bf00      	nop
 80031c4:	50040000 	.word	0x50040000
 80031c8:	50040100 	.word	0x50040100
 80031cc:	50040300 	.word	0x50040300
 80031d0:	50040200 	.word	0x50040200

080031d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003218 <__NVIC_SetPriorityGrouping+0x44>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031f0:	4013      	ands	r3, r2
 80031f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003206:	4a04      	ldr	r2, [pc, #16]	@ (8003218 <__NVIC_SetPriorityGrouping+0x44>)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	60d3      	str	r3, [r2, #12]
}
 800320c:	bf00      	nop
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003220:	4b04      	ldr	r3, [pc, #16]	@ (8003234 <__NVIC_GetPriorityGrouping+0x18>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	0a1b      	lsrs	r3, r3, #8
 8003226:	f003 0307 	and.w	r3, r3, #7
}
 800322a:	4618      	mov	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	2b00      	cmp	r3, #0
 8003248:	db0b      	blt.n	8003262 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	f003 021f 	and.w	r2, r3, #31
 8003250:	4907      	ldr	r1, [pc, #28]	@ (8003270 <__NVIC_EnableIRQ+0x38>)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	2001      	movs	r0, #1
 800325a:	fa00 f202 	lsl.w	r2, r0, r2
 800325e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	e000e100 	.word	0xe000e100

08003274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	6039      	str	r1, [r7, #0]
 800327e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003284:	2b00      	cmp	r3, #0
 8003286:	db0a      	blt.n	800329e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	b2da      	uxtb	r2, r3
 800328c:	490c      	ldr	r1, [pc, #48]	@ (80032c0 <__NVIC_SetPriority+0x4c>)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	0112      	lsls	r2, r2, #4
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	440b      	add	r3, r1
 8003298:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800329c:	e00a      	b.n	80032b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	4908      	ldr	r1, [pc, #32]	@ (80032c4 <__NVIC_SetPriority+0x50>)
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	3b04      	subs	r3, #4
 80032ac:	0112      	lsls	r2, r2, #4
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	440b      	add	r3, r1
 80032b2:	761a      	strb	r2, [r3, #24]
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	e000e100 	.word	0xe000e100
 80032c4:	e000ed00 	.word	0xe000ed00

080032c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b089      	sub	sp, #36	@ 0x24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f1c3 0307 	rsb	r3, r3, #7
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	bf28      	it	cs
 80032e6:	2304      	movcs	r3, #4
 80032e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3304      	adds	r3, #4
 80032ee:	2b06      	cmp	r3, #6
 80032f0:	d902      	bls.n	80032f8 <NVIC_EncodePriority+0x30>
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	3b03      	subs	r3, #3
 80032f6:	e000      	b.n	80032fa <NVIC_EncodePriority+0x32>
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43da      	mvns	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	401a      	ands	r2, r3
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003310:	f04f 31ff 	mov.w	r1, #4294967295
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	fa01 f303 	lsl.w	r3, r1, r3
 800331a:	43d9      	mvns	r1, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003320:	4313      	orrs	r3, r2
         );
}
 8003322:	4618      	mov	r0, r3
 8003324:	3724      	adds	r7, #36	@ 0x24
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
	...

08003330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3b01      	subs	r3, #1
 800333c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003340:	d301      	bcc.n	8003346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003342:	2301      	movs	r3, #1
 8003344:	e00f      	b.n	8003366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003346:	4a0a      	ldr	r2, [pc, #40]	@ (8003370 <SysTick_Config+0x40>)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3b01      	subs	r3, #1
 800334c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800334e:	210f      	movs	r1, #15
 8003350:	f04f 30ff 	mov.w	r0, #4294967295
 8003354:	f7ff ff8e 	bl	8003274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003358:	4b05      	ldr	r3, [pc, #20]	@ (8003370 <SysTick_Config+0x40>)
 800335a:	2200      	movs	r2, #0
 800335c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800335e:	4b04      	ldr	r3, [pc, #16]	@ (8003370 <SysTick_Config+0x40>)
 8003360:	2207      	movs	r2, #7
 8003362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	e000e010 	.word	0xe000e010

08003374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff ff29 	bl	80031d4 <__NVIC_SetPriorityGrouping>
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b086      	sub	sp, #24
 800338e:	af00      	add	r7, sp, #0
 8003390:	4603      	mov	r3, r0
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800339c:	f7ff ff3e 	bl	800321c <__NVIC_GetPriorityGrouping>
 80033a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	6978      	ldr	r0, [r7, #20]
 80033a8:	f7ff ff8e 	bl	80032c8 <NVIC_EncodePriority>
 80033ac:	4602      	mov	r2, r0
 80033ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b2:	4611      	mov	r1, r2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ff5d 	bl	8003274 <__NVIC_SetPriority>
}
 80033ba:	bf00      	nop
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	4603      	mov	r3, r0
 80033ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ff31 	bl	8003238 <__NVIC_EnableIRQ>
}
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff ffa2 	bl	8003330 <SysTick_Config>
 80033ec:	4603      	mov	r3, r0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e0ac      	b.n	8003564 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f8b2 	bl	8003578 <DFSDM_GetChannelFromInstance>
 8003414:	4603      	mov	r3, r0
 8003416:	4a55      	ldr	r2, [pc, #340]	@ (800356c <HAL_DFSDM_ChannelInit+0x174>)
 8003418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e09f      	b.n	8003564 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7fd fe59 	bl	80010dc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800342a:	4b51      	ldr	r3, [pc, #324]	@ (8003570 <HAL_DFSDM_ChannelInit+0x178>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3301      	adds	r3, #1
 8003430:	4a4f      	ldr	r2, [pc, #316]	@ (8003570 <HAL_DFSDM_ChannelInit+0x178>)
 8003432:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003434:	4b4e      	ldr	r3, [pc, #312]	@ (8003570 <HAL_DFSDM_ChannelInit+0x178>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d125      	bne.n	8003488 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800343c:	4b4d      	ldr	r3, [pc, #308]	@ (8003574 <HAL_DFSDM_ChannelInit+0x17c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a4c      	ldr	r2, [pc, #304]	@ (8003574 <HAL_DFSDM_ChannelInit+0x17c>)
 8003442:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003446:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003448:	4b4a      	ldr	r3, [pc, #296]	@ (8003574 <HAL_DFSDM_ChannelInit+0x17c>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4948      	ldr	r1, [pc, #288]	@ (8003574 <HAL_DFSDM_ChannelInit+0x17c>)
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003456:	4b47      	ldr	r3, [pc, #284]	@ (8003574 <HAL_DFSDM_ChannelInit+0x17c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a46      	ldr	r2, [pc, #280]	@ (8003574 <HAL_DFSDM_ChannelInit+0x17c>)
 800345c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003460:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	791b      	ldrb	r3, [r3, #4]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d108      	bne.n	800347c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800346a:	4b42      	ldr	r3, [pc, #264]	@ (8003574 <HAL_DFSDM_ChannelInit+0x17c>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	3b01      	subs	r3, #1
 8003474:	041b      	lsls	r3, r3, #16
 8003476:	493f      	ldr	r1, [pc, #252]	@ (8003574 <HAL_DFSDM_ChannelInit+0x17c>)
 8003478:	4313      	orrs	r3, r2
 800347a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800347c:	4b3d      	ldr	r3, [pc, #244]	@ (8003574 <HAL_DFSDM_ChannelInit+0x17c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a3c      	ldr	r2, [pc, #240]	@ (8003574 <HAL_DFSDM_ChannelInit+0x17c>)
 8003482:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003486:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003496:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6819      	ldr	r1, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80034a6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80034ac:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 020f 	bic.w	r2, r2, #15
 80034c4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6819      	ldr	r1, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80034ec:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6899      	ldr	r1, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fc:	3b01      	subs	r3, #1
 80034fe:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f002 0207 	and.w	r2, r2, #7
 8003518:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6859      	ldr	r1, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003524:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003544:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f000 f810 	bl	8003578 <DFSDM_GetChannelFromInstance>
 8003558:	4602      	mov	r2, r0
 800355a:	4904      	ldr	r1, [pc, #16]	@ (800356c <HAL_DFSDM_ChannelInit+0x174>)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20000880 	.word	0x20000880
 8003570:	2000087c 	.word	0x2000087c
 8003574:	40016000 	.word	0x40016000

08003578 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a1c      	ldr	r2, [pc, #112]	@ (80035f4 <DFSDM_GetChannelFromInstance+0x7c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d102      	bne.n	800358e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	e02b      	b.n	80035e6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a19      	ldr	r2, [pc, #100]	@ (80035f8 <DFSDM_GetChannelFromInstance+0x80>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d102      	bne.n	800359c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003596:	2301      	movs	r3, #1
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	e024      	b.n	80035e6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a17      	ldr	r2, [pc, #92]	@ (80035fc <DFSDM_GetChannelFromInstance+0x84>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d102      	bne.n	80035aa <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80035a4:	2302      	movs	r3, #2
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	e01d      	b.n	80035e6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a14      	ldr	r2, [pc, #80]	@ (8003600 <DFSDM_GetChannelFromInstance+0x88>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d102      	bne.n	80035b8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80035b2:	2304      	movs	r3, #4
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	e016      	b.n	80035e6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a12      	ldr	r2, [pc, #72]	@ (8003604 <DFSDM_GetChannelFromInstance+0x8c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d102      	bne.n	80035c6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80035c0:	2305      	movs	r3, #5
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	e00f      	b.n	80035e6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a0f      	ldr	r2, [pc, #60]	@ (8003608 <DFSDM_GetChannelFromInstance+0x90>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d102      	bne.n	80035d4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80035ce:	2306      	movs	r3, #6
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	e008      	b.n	80035e6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a0d      	ldr	r2, [pc, #52]	@ (800360c <DFSDM_GetChannelFromInstance+0x94>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d102      	bne.n	80035e2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80035dc:	2307      	movs	r3, #7
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	e001      	b.n	80035e6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80035e2:	2303      	movs	r3, #3
 80035e4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80035e6:	68fb      	ldr	r3, [r7, #12]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	40016000 	.word	0x40016000
 80035f8:	40016020 	.word	0x40016020
 80035fc:	40016040 	.word	0x40016040
 8003600:	40016080 	.word	0x40016080
 8003604:	400160a0 	.word	0x400160a0
 8003608:	400160c0 	.word	0x400160c0
 800360c:	400160e0 	.word	0x400160e0

08003610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800361e:	e17f      	b.n	8003920 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	2101      	movs	r1, #1
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	fa01 f303 	lsl.w	r3, r1, r3
 800362c:	4013      	ands	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 8171 	beq.w	800391a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	2b01      	cmp	r3, #1
 8003642:	d005      	beq.n	8003650 <HAL_GPIO_Init+0x40>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 0303 	and.w	r3, r3, #3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d130      	bne.n	80036b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	2203      	movs	r2, #3
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4013      	ands	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003686:	2201      	movs	r2, #1
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4013      	ands	r3, r2
 8003694:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	091b      	lsrs	r3, r3, #4
 800369c:	f003 0201 	and.w	r2, r3, #1
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	2b03      	cmp	r3, #3
 80036bc:	d118      	bne.n	80036f0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80036c4:	2201      	movs	r2, #1
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4013      	ands	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	08db      	lsrs	r3, r3, #3
 80036da:	f003 0201 	and.w	r2, r3, #1
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 0303 	and.w	r3, r3, #3
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d017      	beq.n	800372c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	2203      	movs	r2, #3
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d123      	bne.n	8003780 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	08da      	lsrs	r2, r3, #3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3208      	adds	r2, #8
 8003740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003744:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	220f      	movs	r2, #15
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4013      	ands	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	08da      	lsrs	r2, r3, #3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3208      	adds	r2, #8
 800377a:	6939      	ldr	r1, [r7, #16]
 800377c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	2203      	movs	r2, #3
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4013      	ands	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0203 	and.w	r2, r3, #3
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80ac 	beq.w	800391a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003940 <HAL_GPIO_Init+0x330>)
 80037c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c6:	4a5e      	ldr	r2, [pc, #376]	@ (8003940 <HAL_GPIO_Init+0x330>)
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80037ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003940 <HAL_GPIO_Init+0x330>)
 80037d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037da:	4a5a      	ldr	r2, [pc, #360]	@ (8003944 <HAL_GPIO_Init+0x334>)
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	089b      	lsrs	r3, r3, #2
 80037e0:	3302      	adds	r3, #2
 80037e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	220f      	movs	r2, #15
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	43db      	mvns	r3, r3
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4013      	ands	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003804:	d025      	beq.n	8003852 <HAL_GPIO_Init+0x242>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a4f      	ldr	r2, [pc, #316]	@ (8003948 <HAL_GPIO_Init+0x338>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d01f      	beq.n	800384e <HAL_GPIO_Init+0x23e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a4e      	ldr	r2, [pc, #312]	@ (800394c <HAL_GPIO_Init+0x33c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d019      	beq.n	800384a <HAL_GPIO_Init+0x23a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a4d      	ldr	r2, [pc, #308]	@ (8003950 <HAL_GPIO_Init+0x340>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d013      	beq.n	8003846 <HAL_GPIO_Init+0x236>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a4c      	ldr	r2, [pc, #304]	@ (8003954 <HAL_GPIO_Init+0x344>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00d      	beq.n	8003842 <HAL_GPIO_Init+0x232>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a4b      	ldr	r2, [pc, #300]	@ (8003958 <HAL_GPIO_Init+0x348>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d007      	beq.n	800383e <HAL_GPIO_Init+0x22e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a4a      	ldr	r2, [pc, #296]	@ (800395c <HAL_GPIO_Init+0x34c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d101      	bne.n	800383a <HAL_GPIO_Init+0x22a>
 8003836:	2306      	movs	r3, #6
 8003838:	e00c      	b.n	8003854 <HAL_GPIO_Init+0x244>
 800383a:	2307      	movs	r3, #7
 800383c:	e00a      	b.n	8003854 <HAL_GPIO_Init+0x244>
 800383e:	2305      	movs	r3, #5
 8003840:	e008      	b.n	8003854 <HAL_GPIO_Init+0x244>
 8003842:	2304      	movs	r3, #4
 8003844:	e006      	b.n	8003854 <HAL_GPIO_Init+0x244>
 8003846:	2303      	movs	r3, #3
 8003848:	e004      	b.n	8003854 <HAL_GPIO_Init+0x244>
 800384a:	2302      	movs	r3, #2
 800384c:	e002      	b.n	8003854 <HAL_GPIO_Init+0x244>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <HAL_GPIO_Init+0x244>
 8003852:	2300      	movs	r3, #0
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	f002 0203 	and.w	r2, r2, #3
 800385a:	0092      	lsls	r2, r2, #2
 800385c:	4093      	lsls	r3, r2
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003864:	4937      	ldr	r1, [pc, #220]	@ (8003944 <HAL_GPIO_Init+0x334>)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	089b      	lsrs	r3, r3, #2
 800386a:	3302      	adds	r3, #2
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003872:	4b3b      	ldr	r3, [pc, #236]	@ (8003960 <HAL_GPIO_Init+0x350>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	43db      	mvns	r3, r3
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4013      	ands	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003896:	4a32      	ldr	r2, [pc, #200]	@ (8003960 <HAL_GPIO_Init+0x350>)
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800389c:	4b30      	ldr	r3, [pc, #192]	@ (8003960 <HAL_GPIO_Init+0x350>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	43db      	mvns	r3, r3
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4013      	ands	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4313      	orrs	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038c0:	4a27      	ldr	r2, [pc, #156]	@ (8003960 <HAL_GPIO_Init+0x350>)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80038c6:	4b26      	ldr	r3, [pc, #152]	@ (8003960 <HAL_GPIO_Init+0x350>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	43db      	mvns	r3, r3
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4013      	ands	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003960 <HAL_GPIO_Init+0x350>)
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80038f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003960 <HAL_GPIO_Init+0x350>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	43db      	mvns	r3, r3
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4013      	ands	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4313      	orrs	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003914:	4a12      	ldr	r2, [pc, #72]	@ (8003960 <HAL_GPIO_Init+0x350>)
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	3301      	adds	r3, #1
 800391e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	fa22 f303 	lsr.w	r3, r2, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	f47f ae78 	bne.w	8003620 <HAL_GPIO_Init+0x10>
  }
}
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	40021000 	.word	0x40021000
 8003944:	40010000 	.word	0x40010000
 8003948:	48000400 	.word	0x48000400
 800394c:	48000800 	.word	0x48000800
 8003950:	48000c00 	.word	0x48000c00
 8003954:	48001000 	.word	0x48001000
 8003958:	48001400 	.word	0x48001400
 800395c:	48001800 	.word	0x48001800
 8003960:	40010400 	.word	0x40010400

08003964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	807b      	strh	r3, [r7, #2]
 8003970:	4613      	mov	r3, r2
 8003972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003974:	787b      	ldrb	r3, [r7, #1]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800397a:	887a      	ldrh	r2, [r7, #2]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003980:	e002      	b.n	8003988 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003982:	887a      	ldrh	r2, [r7, #2]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800399e:	4b08      	ldr	r3, [pc, #32]	@ (80039c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	4013      	ands	r3, r2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d006      	beq.n	80039b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039aa:	4a05      	ldr	r2, [pc, #20]	@ (80039c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039ac:	88fb      	ldrh	r3, [r7, #6]
 80039ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039b0:	88fb      	ldrh	r3, [r7, #6]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 f806 	bl	80039c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80039b8:	bf00      	nop
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40010400 	.word	0x40010400

080039c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e08d      	b.n	8003b08 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d106      	bne.n	8003a06 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7fd fbcf 	bl	80011a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2224      	movs	r2, #36	@ 0x24
 8003a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0201 	bic.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a2a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a3a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d107      	bne.n	8003a54 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a50:	609a      	str	r2, [r3, #8]
 8003a52:	e006      	b.n	8003a62 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003a60:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d108      	bne.n	8003a7c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a78:	605a      	str	r2, [r3, #4]
 8003a7a:	e007      	b.n	8003a8c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a8a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6812      	ldr	r2, [r2, #0]
 8003a96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a9e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003aae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691a      	ldr	r2, [r3, #16]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69d9      	ldr	r1, [r3, #28]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1a      	ldr	r2, [r3, #32]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0201 	orr.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	d138      	bne.n	8003b98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e032      	b.n	8003b9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2224      	movs	r2, #36	@ 0x24
 8003b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0201 	bic.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6819      	ldr	r1, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	e000      	b.n	8003b9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b98:	2302      	movs	r3, #2
  }
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b085      	sub	sp, #20
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b20      	cmp	r3, #32
 8003bba:	d139      	bne.n	8003c30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e033      	b.n	8003c32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2224      	movs	r2, #36	@ 0x24
 8003bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0201 	bic.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003bf8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	021b      	lsls	r3, r3, #8
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	e000      	b.n	8003c32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c30:	2302      	movs	r3, #2
  }
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b086      	sub	sp, #24
 8003c42:	af02      	add	r7, sp, #8
 8003c44:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e101      	b.n	8003e54 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d106      	bne.n	8003c6a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7fd fc47 	bl	80014f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f002 fef1 	bl	8006a64 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	7c1a      	ldrb	r2, [r3, #16]
 8003c8a:	f88d 2000 	strb.w	r2, [sp]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c92:	f002 feba 	bl	8006a0a <USB_CoreInit>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d005      	beq.n	8003ca8 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0d5      	b.n	8003e54 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2100      	movs	r1, #0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f002 fee9 	bl	8006a86 <USB_SetCurrentMode>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e0c6      	b.n	8003e54 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	73fb      	strb	r3, [r7, #15]
 8003cca:	e04a      	b.n	8003d62 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ccc:	7bfa      	ldrb	r2, [r7, #15]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	3315      	adds	r3, #21
 8003cdc:	2201      	movs	r2, #1
 8003cde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ce0:	7bfa      	ldrb	r2, [r7, #15]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	3314      	adds	r3, #20
 8003cf0:	7bfa      	ldrb	r2, [r7, #15]
 8003cf2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003cf4:	7bfa      	ldrb	r2, [r7, #15]
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	b298      	uxth	r0, r3
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	332e      	adds	r3, #46	@ 0x2e
 8003d08:	4602      	mov	r2, r0
 8003d0a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d0c:	7bfa      	ldrb	r2, [r7, #15]
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	3318      	adds	r3, #24
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d20:	7bfa      	ldrb	r2, [r7, #15]
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	4613      	mov	r3, r2
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	331c      	adds	r3, #28
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d34:	7bfa      	ldrb	r2, [r7, #15]
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	3320      	adds	r3, #32
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d48:	7bfa      	ldrb	r2, [r7, #15]
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	4413      	add	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	3324      	adds	r3, #36	@ 0x24
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	73fb      	strb	r3, [r7, #15]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	791b      	ldrb	r3, [r3, #4]
 8003d66:	7bfa      	ldrb	r2, [r7, #15]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d3af      	bcc.n	8003ccc <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	73fb      	strb	r3, [r7, #15]
 8003d70:	e044      	b.n	8003dfc <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d72:	7bfa      	ldrb	r2, [r7, #15]
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003d84:	2200      	movs	r2, #0
 8003d86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d88:	7bfa      	ldrb	r2, [r7, #15]
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003d9a:	7bfa      	ldrb	r2, [r7, #15]
 8003d9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d9e:	7bfa      	ldrb	r2, [r7, #15]
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	4613      	mov	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	440b      	add	r3, r1
 8003dac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003db0:	2200      	movs	r2, #0
 8003db2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003db4:	7bfa      	ldrb	r2, [r7, #15]
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003dca:	7bfa      	ldrb	r2, [r7, #15]
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003de0:	7bfa      	ldrb	r2, [r7, #15]
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	4613      	mov	r3, r2
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	791b      	ldrb	r3, [r3, #4]
 8003e00:	7bfa      	ldrb	r2, [r7, #15]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d3b5      	bcc.n	8003d72 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	7c1a      	ldrb	r2, [r3, #16]
 8003e0e:	f88d 2000 	strb.w	r2, [sp]
 8003e12:	3304      	adds	r3, #4
 8003e14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e16:	f002 fe83 	bl	8006b20 <USB_DevInit>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e013      	b.n	8003e54 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	7b1b      	ldrb	r3, [r3, #12]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d102      	bne.n	8003e48 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f80a 	bl	8003e5c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f003 f828 	bl	8006ea2 <USB_DevDisconnect>

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e8e:	f043 0303 	orr.w	r3, r3, #3
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ea8:	4b05      	ldr	r3, [pc, #20]	@ (8003ec0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a04      	ldr	r2, [pc, #16]	@ (8003ec0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eb2:	6013      	str	r3, [r2, #0]
}
 8003eb4:	bf00      	nop
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40007000 	.word	0x40007000

08003ec4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ec8:	4b04      	ldr	r3, [pc, #16]	@ (8003edc <HAL_PWREx_GetVoltageRange+0x18>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40007000 	.word	0x40007000

08003ee0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eee:	d130      	bne.n	8003f52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ef0:	4b23      	ldr	r3, [pc, #140]	@ (8003f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003efc:	d038      	beq.n	8003f70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003efe:	4b20      	ldr	r3, [pc, #128]	@ (8003f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f06:	4a1e      	ldr	r2, [pc, #120]	@ (8003f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003f84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2232      	movs	r2, #50	@ 0x32
 8003f14:	fb02 f303 	mul.w	r3, r2, r3
 8003f18:	4a1b      	ldr	r2, [pc, #108]	@ (8003f88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	0c9b      	lsrs	r3, r3, #18
 8003f20:	3301      	adds	r3, #1
 8003f22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f24:	e002      	b.n	8003f2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f2c:	4b14      	ldr	r3, [pc, #80]	@ (8003f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f38:	d102      	bne.n	8003f40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1f2      	bne.n	8003f26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f40:	4b0f      	ldr	r3, [pc, #60]	@ (8003f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f4c:	d110      	bne.n	8003f70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e00f      	b.n	8003f72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f52:	4b0b      	ldr	r3, [pc, #44]	@ (8003f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f5e:	d007      	beq.n	8003f70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f60:	4b07      	ldr	r3, [pc, #28]	@ (8003f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f68:	4a05      	ldr	r2, [pc, #20]	@ (8003f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40007000 	.word	0x40007000
 8003f84:	20000000 	.word	0x20000000
 8003f88:	431bde83 	.word	0x431bde83

08003f8c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003f90:	4b05      	ldr	r3, [pc, #20]	@ (8003fa8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4a04      	ldr	r2, [pc, #16]	@ (8003fa8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003f96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f9a:	6053      	str	r3, [r2, #4]
}
 8003f9c:	bf00      	nop
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40007000 	.word	0x40007000

08003fac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003fb4:	f7fd fcae 	bl	8001914 <HAL_GetTick>
 8003fb8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e063      	b.n	800408c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10b      	bne.n	8003fe8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7fd f941 	bl	8001260 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003fde:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f858 	bl	8004098 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	021a      	lsls	r2, r3, #8
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	2120      	movs	r1, #32
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f850 	bl	80040b4 <QSPI_WaitFlagStateUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004018:	7afb      	ldrb	r3, [r7, #11]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d131      	bne.n	8004082 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004028:	f023 0310 	bic.w	r3, r3, #16
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6852      	ldr	r2, [r2, #4]
 8004030:	0611      	lsls	r1, r2, #24
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	68d2      	ldr	r2, [r2, #12]
 8004036:	4311      	orrs	r1, r2
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	430b      	orrs	r3, r1
 800403e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	4b13      	ldr	r3, [pc, #76]	@ (8004094 <HAL_QSPI_Init+0xe8>)
 8004048:	4013      	ands	r3, r2
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6912      	ldr	r2, [r2, #16]
 800404e:	0411      	lsls	r1, r2, #16
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6952      	ldr	r2, [r2, #20]
 8004054:	4311      	orrs	r1, r2
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6992      	ldr	r2, [r2, #24]
 800405a:	4311      	orrs	r1, r2
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6812      	ldr	r2, [r2, #0]
 8004060:	430b      	orrs	r3, r1
 8004062:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800408a:	7afb      	ldrb	r3, [r7, #11]
}
 800408c:	4618      	mov	r0, r3
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	ffe0f8fe 	.word	0xffe0f8fe

08004098 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	4613      	mov	r3, r2
 80040c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80040c4:	e01a      	b.n	80040fc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040cc:	d016      	beq.n	80040fc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ce:	f7fd fc21 	bl	8001914 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d302      	bcc.n	80040e4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10b      	bne.n	80040fc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2204      	movs	r2, #4
 80040e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f0:	f043 0201 	orr.w	r2, r3, #1
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e00e      	b.n	800411a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	4013      	ands	r3, r2
 8004106:	2b00      	cmp	r3, #0
 8004108:	bf14      	ite	ne
 800410a:	2301      	movne	r3, #1
 800410c:	2300      	moveq	r3, #0
 800410e:	b2db      	uxtb	r3, r3
 8004110:	461a      	mov	r2, r3
 8004112:	79fb      	ldrb	r3, [r7, #7]
 8004114:	429a      	cmp	r2, r3
 8004116:	d1d6      	bne.n	80040c6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e3ca      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004136:	4b97      	ldr	r3, [pc, #604]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
 800413e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004140:	4b94      	ldr	r3, [pc, #592]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0303 	and.w	r3, r3, #3
 8004148:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0310 	and.w	r3, r3, #16
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 80e4 	beq.w	8004320 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d007      	beq.n	800416e <HAL_RCC_OscConfig+0x4a>
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	2b0c      	cmp	r3, #12
 8004162:	f040 808b 	bne.w	800427c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b01      	cmp	r3, #1
 800416a:	f040 8087 	bne.w	800427c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800416e:	4b89      	ldr	r3, [pc, #548]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <HAL_RCC_OscConfig+0x62>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e3a2      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1a      	ldr	r2, [r3, #32]
 800418a:	4b82      	ldr	r3, [pc, #520]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d004      	beq.n	80041a0 <HAL_RCC_OscConfig+0x7c>
 8004196:	4b7f      	ldr	r3, [pc, #508]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800419e:	e005      	b.n	80041ac <HAL_RCC_OscConfig+0x88>
 80041a0:	4b7c      	ldr	r3, [pc, #496]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 80041a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041a6:	091b      	lsrs	r3, r3, #4
 80041a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d223      	bcs.n	80041f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fd55 	bl	8004c64 <RCC_SetFlashLatencyFromMSIRange>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e383      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041c4:	4b73      	ldr	r3, [pc, #460]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a72      	ldr	r2, [pc, #456]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 80041ca:	f043 0308 	orr.w	r3, r3, #8
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	4b70      	ldr	r3, [pc, #448]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	496d      	ldr	r1, [pc, #436]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041e2:	4b6c      	ldr	r3, [pc, #432]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	021b      	lsls	r3, r3, #8
 80041f0:	4968      	ldr	r1, [pc, #416]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	604b      	str	r3, [r1, #4]
 80041f6:	e025      	b.n	8004244 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041f8:	4b66      	ldr	r3, [pc, #408]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a65      	ldr	r2, [pc, #404]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 80041fe:	f043 0308 	orr.w	r3, r3, #8
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	4b63      	ldr	r3, [pc, #396]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	4960      	ldr	r1, [pc, #384]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 8004212:	4313      	orrs	r3, r2
 8004214:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004216:	4b5f      	ldr	r3, [pc, #380]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	495b      	ldr	r1, [pc, #364]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 8004226:	4313      	orrs	r3, r2
 8004228:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d109      	bne.n	8004244 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fd15 	bl	8004c64 <RCC_SetFlashLatencyFromMSIRange>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e343      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004244:	f000 fc4a 	bl	8004adc <HAL_RCC_GetSysClockFreq>
 8004248:	4602      	mov	r2, r0
 800424a:	4b52      	ldr	r3, [pc, #328]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	091b      	lsrs	r3, r3, #4
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	4950      	ldr	r1, [pc, #320]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 8004256:	5ccb      	ldrb	r3, [r1, r3]
 8004258:	f003 031f 	and.w	r3, r3, #31
 800425c:	fa22 f303 	lsr.w	r3, r2, r3
 8004260:	4a4e      	ldr	r2, [pc, #312]	@ (800439c <HAL_RCC_OscConfig+0x278>)
 8004262:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004264:	4b4e      	ldr	r3, [pc, #312]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f7fd fb03 	bl	8001874 <HAL_InitTick>
 800426e:	4603      	mov	r3, r0
 8004270:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004272:	7bfb      	ldrb	r3, [r7, #15]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d052      	beq.n	800431e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	e327      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d032      	beq.n	80042ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004284:	4b43      	ldr	r3, [pc, #268]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a42      	ldr	r2, [pc, #264]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004290:	f7fd fb40 	bl	8001914 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004298:	f7fd fb3c 	bl	8001914 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e310      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042aa:	4b3a      	ldr	r3, [pc, #232]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042b6:	4b37      	ldr	r3, [pc, #220]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a36      	ldr	r2, [pc, #216]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 80042bc:	f043 0308 	orr.w	r3, r3, #8
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	4b34      	ldr	r3, [pc, #208]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	4931      	ldr	r1, [pc, #196]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042d4:	4b2f      	ldr	r3, [pc, #188]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	021b      	lsls	r3, r3, #8
 80042e2:	492c      	ldr	r1, [pc, #176]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	604b      	str	r3, [r1, #4]
 80042e8:	e01a      	b.n	8004320 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042ea:	4b2a      	ldr	r3, [pc, #168]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a29      	ldr	r2, [pc, #164]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 80042f0:	f023 0301 	bic.w	r3, r3, #1
 80042f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042f6:	f7fd fb0d 	bl	8001914 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042fe:	f7fd fb09 	bl	8001914 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e2dd      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004310:	4b20      	ldr	r3, [pc, #128]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f0      	bne.n	80042fe <HAL_RCC_OscConfig+0x1da>
 800431c:	e000      	b.n	8004320 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800431e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d074      	beq.n	8004416 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	2b08      	cmp	r3, #8
 8004330:	d005      	beq.n	800433e <HAL_RCC_OscConfig+0x21a>
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	2b0c      	cmp	r3, #12
 8004336:	d10e      	bne.n	8004356 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2b03      	cmp	r3, #3
 800433c:	d10b      	bne.n	8004356 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800433e:	4b15      	ldr	r3, [pc, #84]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d064      	beq.n	8004414 <HAL_RCC_OscConfig+0x2f0>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d160      	bne.n	8004414 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e2ba      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800435e:	d106      	bne.n	800436e <HAL_RCC_OscConfig+0x24a>
 8004360:	4b0c      	ldr	r3, [pc, #48]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a0b      	ldr	r2, [pc, #44]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 8004366:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	e026      	b.n	80043bc <HAL_RCC_OscConfig+0x298>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004376:	d115      	bne.n	80043a4 <HAL_RCC_OscConfig+0x280>
 8004378:	4b06      	ldr	r3, [pc, #24]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a05      	ldr	r2, [pc, #20]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 800437e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	4b03      	ldr	r3, [pc, #12]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a02      	ldr	r2, [pc, #8]	@ (8004394 <HAL_RCC_OscConfig+0x270>)
 800438a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	e014      	b.n	80043bc <HAL_RCC_OscConfig+0x298>
 8004392:	bf00      	nop
 8004394:	40021000 	.word	0x40021000
 8004398:	0800b4a4 	.word	0x0800b4a4
 800439c:	20000000 	.word	0x20000000
 80043a0:	20000004 	.word	0x20000004
 80043a4:	4ba0      	ldr	r3, [pc, #640]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a9f      	ldr	r2, [pc, #636]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 80043aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	4b9d      	ldr	r3, [pc, #628]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a9c      	ldr	r2, [pc, #624]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 80043b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d013      	beq.n	80043ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c4:	f7fd faa6 	bl	8001914 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043cc:	f7fd faa2 	bl	8001914 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b64      	cmp	r3, #100	@ 0x64
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e276      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043de:	4b92      	ldr	r3, [pc, #584]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0x2a8>
 80043ea:	e014      	b.n	8004416 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7fd fa92 	bl	8001914 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043f4:	f7fd fa8e 	bl	8001914 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b64      	cmp	r3, #100	@ 0x64
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e262      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004406:	4b88      	ldr	r3, [pc, #544]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f0      	bne.n	80043f4 <HAL_RCC_OscConfig+0x2d0>
 8004412:	e000      	b.n	8004416 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d060      	beq.n	80044e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2b04      	cmp	r3, #4
 8004426:	d005      	beq.n	8004434 <HAL_RCC_OscConfig+0x310>
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	2b0c      	cmp	r3, #12
 800442c:	d119      	bne.n	8004462 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d116      	bne.n	8004462 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004434:	4b7c      	ldr	r3, [pc, #496]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <HAL_RCC_OscConfig+0x328>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e23f      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800444c:	4b76      	ldr	r3, [pc, #472]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	061b      	lsls	r3, r3, #24
 800445a:	4973      	ldr	r1, [pc, #460]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 800445c:	4313      	orrs	r3, r2
 800445e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004460:	e040      	b.n	80044e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d023      	beq.n	80044b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800446a:	4b6f      	ldr	r3, [pc, #444]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a6e      	ldr	r2, [pc, #440]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 8004470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004476:	f7fd fa4d 	bl	8001914 <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800447e:	f7fd fa49 	bl	8001914 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e21d      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004490:	4b65      	ldr	r3, [pc, #404]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0f0      	beq.n	800447e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449c:	4b62      	ldr	r3, [pc, #392]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	061b      	lsls	r3, r3, #24
 80044aa:	495f      	ldr	r1, [pc, #380]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	604b      	str	r3, [r1, #4]
 80044b0:	e018      	b.n	80044e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044b2:	4b5d      	ldr	r3, [pc, #372]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a5c      	ldr	r2, [pc, #368]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 80044b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044be:	f7fd fa29 	bl	8001914 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c6:	f7fd fa25 	bl	8001914 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e1f9      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044d8:	4b53      	ldr	r3, [pc, #332]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f0      	bne.n	80044c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d03c      	beq.n	800456a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d01c      	beq.n	8004532 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044f8:	4b4b      	ldr	r3, [pc, #300]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 80044fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044fe:	4a4a      	ldr	r2, [pc, #296]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 8004500:	f043 0301 	orr.w	r3, r3, #1
 8004504:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004508:	f7fd fa04 	bl	8001914 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004510:	f7fd fa00 	bl	8001914 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e1d4      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004522:	4b41      	ldr	r3, [pc, #260]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 8004524:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0ef      	beq.n	8004510 <HAL_RCC_OscConfig+0x3ec>
 8004530:	e01b      	b.n	800456a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004532:	4b3d      	ldr	r3, [pc, #244]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 8004534:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004538:	4a3b      	ldr	r2, [pc, #236]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004542:	f7fd f9e7 	bl	8001914 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800454a:	f7fd f9e3 	bl	8001914 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e1b7      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800455c:	4b32      	ldr	r3, [pc, #200]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 800455e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1ef      	bne.n	800454a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0304 	and.w	r3, r3, #4
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 80a6 	beq.w	80046c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004578:	2300      	movs	r3, #0
 800457a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800457c:	4b2a      	ldr	r3, [pc, #168]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 800457e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10d      	bne.n	80045a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004588:	4b27      	ldr	r3, [pc, #156]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 800458a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458c:	4a26      	ldr	r2, [pc, #152]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 800458e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004592:	6593      	str	r3, [r2, #88]	@ 0x58
 8004594:	4b24      	ldr	r3, [pc, #144]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 8004596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a0:	2301      	movs	r3, #1
 80045a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a4:	4b21      	ldr	r3, [pc, #132]	@ (800462c <HAL_RCC_OscConfig+0x508>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d118      	bne.n	80045e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045b0:	4b1e      	ldr	r3, [pc, #120]	@ (800462c <HAL_RCC_OscConfig+0x508>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a1d      	ldr	r2, [pc, #116]	@ (800462c <HAL_RCC_OscConfig+0x508>)
 80045b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045bc:	f7fd f9aa 	bl	8001914 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c4:	f7fd f9a6 	bl	8001914 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e17a      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045d6:	4b15      	ldr	r3, [pc, #84]	@ (800462c <HAL_RCC_OscConfig+0x508>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0f0      	beq.n	80045c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d108      	bne.n	80045fc <HAL_RCC_OscConfig+0x4d8>
 80045ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 80045ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045fa:	e029      	b.n	8004650 <HAL_RCC_OscConfig+0x52c>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2b05      	cmp	r3, #5
 8004602:	d115      	bne.n	8004630 <HAL_RCC_OscConfig+0x50c>
 8004604:	4b08      	ldr	r3, [pc, #32]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460a:	4a07      	ldr	r2, [pc, #28]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 800460c:	f043 0304 	orr.w	r3, r3, #4
 8004610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004614:	4b04      	ldr	r3, [pc, #16]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800461a:	4a03      	ldr	r2, [pc, #12]	@ (8004628 <HAL_RCC_OscConfig+0x504>)
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004624:	e014      	b.n	8004650 <HAL_RCC_OscConfig+0x52c>
 8004626:	bf00      	nop
 8004628:	40021000 	.word	0x40021000
 800462c:	40007000 	.word	0x40007000
 8004630:	4b9c      	ldr	r3, [pc, #624]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 8004632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004636:	4a9b      	ldr	r2, [pc, #620]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 8004638:	f023 0301 	bic.w	r3, r3, #1
 800463c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004640:	4b98      	ldr	r3, [pc, #608]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004646:	4a97      	ldr	r2, [pc, #604]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 8004648:	f023 0304 	bic.w	r3, r3, #4
 800464c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d016      	beq.n	8004686 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004658:	f7fd f95c 	bl	8001914 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800465e:	e00a      	b.n	8004676 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004660:	f7fd f958 	bl	8001914 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e12a      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004676:	4b8b      	ldr	r3, [pc, #556]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 8004678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0ed      	beq.n	8004660 <HAL_RCC_OscConfig+0x53c>
 8004684:	e015      	b.n	80046b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004686:	f7fd f945 	bl	8001914 <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800468c:	e00a      	b.n	80046a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468e:	f7fd f941 	bl	8001914 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f241 3288 	movw	r2, #5000	@ 0x1388
 800469c:	4293      	cmp	r3, r2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e113      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046a4:	4b7f      	ldr	r3, [pc, #508]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1ed      	bne.n	800468e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046b2:	7ffb      	ldrb	r3, [r7, #31]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d105      	bne.n	80046c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b8:	4b7a      	ldr	r3, [pc, #488]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 80046ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046bc:	4a79      	ldr	r2, [pc, #484]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 80046be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046c2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 80fe 	beq.w	80048ca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	f040 80d0 	bne.w	8004878 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80046d8:	4b72      	ldr	r3, [pc, #456]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f003 0203 	and.w	r2, r3, #3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d130      	bne.n	800474e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f6:	3b01      	subs	r3, #1
 80046f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d127      	bne.n	800474e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004708:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800470a:	429a      	cmp	r2, r3
 800470c:	d11f      	bne.n	800474e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004718:	2a07      	cmp	r2, #7
 800471a:	bf14      	ite	ne
 800471c:	2201      	movne	r2, #1
 800471e:	2200      	moveq	r2, #0
 8004720:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004722:	4293      	cmp	r3, r2
 8004724:	d113      	bne.n	800474e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004730:	085b      	lsrs	r3, r3, #1
 8004732:	3b01      	subs	r3, #1
 8004734:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004736:	429a      	cmp	r2, r3
 8004738:	d109      	bne.n	800474e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004744:	085b      	lsrs	r3, r3, #1
 8004746:	3b01      	subs	r3, #1
 8004748:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800474a:	429a      	cmp	r2, r3
 800474c:	d06e      	beq.n	800482c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	2b0c      	cmp	r3, #12
 8004752:	d069      	beq.n	8004828 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004754:	4b53      	ldr	r3, [pc, #332]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d105      	bne.n	800476c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004760:	4b50      	ldr	r3, [pc, #320]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e0ad      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004770:	4b4c      	ldr	r3, [pc, #304]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a4b      	ldr	r2, [pc, #300]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 8004776:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800477a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800477c:	f7fd f8ca 	bl	8001914 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004784:	f7fd f8c6 	bl	8001914 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e09a      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004796:	4b43      	ldr	r3, [pc, #268]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f0      	bne.n	8004784 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047a2:	4b40      	ldr	r3, [pc, #256]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	4b40      	ldr	r3, [pc, #256]	@ (80048a8 <HAL_RCC_OscConfig+0x784>)
 80047a8:	4013      	ands	r3, r2
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80047b2:	3a01      	subs	r2, #1
 80047b4:	0112      	lsls	r2, r2, #4
 80047b6:	4311      	orrs	r1, r2
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80047bc:	0212      	lsls	r2, r2, #8
 80047be:	4311      	orrs	r1, r2
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047c4:	0852      	lsrs	r2, r2, #1
 80047c6:	3a01      	subs	r2, #1
 80047c8:	0552      	lsls	r2, r2, #21
 80047ca:	4311      	orrs	r1, r2
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80047d0:	0852      	lsrs	r2, r2, #1
 80047d2:	3a01      	subs	r2, #1
 80047d4:	0652      	lsls	r2, r2, #25
 80047d6:	4311      	orrs	r1, r2
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80047dc:	0912      	lsrs	r2, r2, #4
 80047de:	0452      	lsls	r2, r2, #17
 80047e0:	430a      	orrs	r2, r1
 80047e2:	4930      	ldr	r1, [pc, #192]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80047e8:	4b2e      	ldr	r3, [pc, #184]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a2d      	ldr	r2, [pc, #180]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 80047ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047f4:	4b2b      	ldr	r3, [pc, #172]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4a2a      	ldr	r2, [pc, #168]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 80047fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004800:	f7fd f888 	bl	8001914 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004808:	f7fd f884 	bl	8001914 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e058      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800481a:	4b22      	ldr	r3, [pc, #136]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004826:	e050      	b.n	80048ca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e04f      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800482c:	4b1d      	ldr	r3, [pc, #116]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d148      	bne.n	80048ca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004838:	4b1a      	ldr	r3, [pc, #104]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a19      	ldr	r2, [pc, #100]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 800483e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004842:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004844:	4b17      	ldr	r3, [pc, #92]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	4a16      	ldr	r2, [pc, #88]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 800484a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800484e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004850:	f7fd f860 	bl	8001914 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004858:	f7fd f85c 	bl	8001914 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e030      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800486a:	4b0e      	ldr	r3, [pc, #56]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0f0      	beq.n	8004858 <HAL_RCC_OscConfig+0x734>
 8004876:	e028      	b.n	80048ca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	2b0c      	cmp	r3, #12
 800487c:	d023      	beq.n	80048c6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800487e:	4b09      	ldr	r3, [pc, #36]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a08      	ldr	r2, [pc, #32]	@ (80048a4 <HAL_RCC_OscConfig+0x780>)
 8004884:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488a:	f7fd f843 	bl	8001914 <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004890:	e00c      	b.n	80048ac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004892:	f7fd f83f 	bl	8001914 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d905      	bls.n	80048ac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e013      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
 80048a4:	40021000 	.word	0x40021000
 80048a8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ac:	4b09      	ldr	r3, [pc, #36]	@ (80048d4 <HAL_RCC_OscConfig+0x7b0>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1ec      	bne.n	8004892 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80048b8:	4b06      	ldr	r3, [pc, #24]	@ (80048d4 <HAL_RCC_OscConfig+0x7b0>)
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	4905      	ldr	r1, [pc, #20]	@ (80048d4 <HAL_RCC_OscConfig+0x7b0>)
 80048be:	4b06      	ldr	r3, [pc, #24]	@ (80048d8 <HAL_RCC_OscConfig+0x7b4>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	60cb      	str	r3, [r1, #12]
 80048c4:	e001      	b.n	80048ca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3720      	adds	r7, #32
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40021000 	.word	0x40021000
 80048d8:	feeefffc 	.word	0xfeeefffc

080048dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0e7      	b.n	8004ac0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048f0:	4b75      	ldr	r3, [pc, #468]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1ec>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d910      	bls.n	8004920 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fe:	4b72      	ldr	r3, [pc, #456]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f023 0207 	bic.w	r2, r3, #7
 8004906:	4970      	ldr	r1, [pc, #448]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	4313      	orrs	r3, r2
 800490c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800490e:	4b6e      	ldr	r3, [pc, #440]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d001      	beq.n	8004920 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0cf      	b.n	8004ac0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d010      	beq.n	800494e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	4b66      	ldr	r3, [pc, #408]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004938:	429a      	cmp	r2, r3
 800493a:	d908      	bls.n	800494e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800493c:	4b63      	ldr	r3, [pc, #396]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	4960      	ldr	r1, [pc, #384]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 800494a:	4313      	orrs	r3, r2
 800494c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d04c      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b03      	cmp	r3, #3
 8004960:	d107      	bne.n	8004972 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004962:	4b5a      	ldr	r3, [pc, #360]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d121      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e0a6      	b.n	8004ac0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d107      	bne.n	800498a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800497a:	4b54      	ldr	r3, [pc, #336]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d115      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e09a      	b.n	8004ac0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d107      	bne.n	80049a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004992:	4b4e      	ldr	r3, [pc, #312]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e08e      	b.n	8004ac0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049a2:	4b4a      	ldr	r3, [pc, #296]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e086      	b.n	8004ac0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049b2:	4b46      	ldr	r3, [pc, #280]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f023 0203 	bic.w	r2, r3, #3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	4943      	ldr	r1, [pc, #268]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c4:	f7fc ffa6 	bl	8001914 <HAL_GetTick>
 80049c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ca:	e00a      	b.n	80049e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049cc:	f7fc ffa2 	bl	8001914 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049da:	4293      	cmp	r3, r2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e06e      	b.n	8004ac0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e2:	4b3a      	ldr	r3, [pc, #232]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 020c 	and.w	r2, r3, #12
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d1eb      	bne.n	80049cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d010      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	4b31      	ldr	r3, [pc, #196]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d208      	bcs.n	8004a22 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a10:	4b2e      	ldr	r3, [pc, #184]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	492b      	ldr	r1, [pc, #172]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a22:	4b29      	ldr	r3, [pc, #164]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d210      	bcs.n	8004a52 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a30:	4b25      	ldr	r3, [pc, #148]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f023 0207 	bic.w	r2, r3, #7
 8004a38:	4923      	ldr	r1, [pc, #140]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a40:	4b21      	ldr	r3, [pc, #132]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d001      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e036      	b.n	8004ac0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d008      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	4918      	ldr	r1, [pc, #96]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d009      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a7c:	4b13      	ldr	r3, [pc, #76]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	4910      	ldr	r1, [pc, #64]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a90:	f000 f824 	bl	8004adc <HAL_RCC_GetSysClockFreq>
 8004a94:	4602      	mov	r2, r0
 8004a96:	4b0d      	ldr	r3, [pc, #52]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	091b      	lsrs	r3, r3, #4
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	490b      	ldr	r1, [pc, #44]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1f4>)
 8004aa2:	5ccb      	ldrb	r3, [r1, r3]
 8004aa4:	f003 031f 	and.w	r3, r3, #31
 8004aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8004aac:	4a09      	ldr	r2, [pc, #36]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1f8>)
 8004aae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ab0:	4b09      	ldr	r3, [pc, #36]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1fc>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fc fedd 	bl	8001874 <HAL_InitTick>
 8004aba:	4603      	mov	r3, r0
 8004abc:	72fb      	strb	r3, [r7, #11]

  return status;
 8004abe:	7afb      	ldrb	r3, [r7, #11]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40022000 	.word	0x40022000
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	0800b4a4 	.word	0x0800b4a4
 8004ad4:	20000000 	.word	0x20000000
 8004ad8:	20000004 	.word	0x20000004

08004adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b089      	sub	sp, #36	@ 0x24
 8004ae0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	61fb      	str	r3, [r7, #28]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aea:	4b3e      	ldr	r3, [pc, #248]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004af4:	4b3b      	ldr	r3, [pc, #236]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f003 0303 	and.w	r3, r3, #3
 8004afc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <HAL_RCC_GetSysClockFreq+0x34>
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	2b0c      	cmp	r3, #12
 8004b08:	d121      	bne.n	8004b4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d11e      	bne.n	8004b4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b10:	4b34      	ldr	r3, [pc, #208]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d107      	bne.n	8004b2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b1c:	4b31      	ldr	r3, [pc, #196]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b22:	0a1b      	lsrs	r3, r3, #8
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	61fb      	str	r3, [r7, #28]
 8004b2a:	e005      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b2c:	4b2d      	ldr	r3, [pc, #180]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	091b      	lsrs	r3, r3, #4
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b38:	4a2b      	ldr	r2, [pc, #172]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10d      	bne.n	8004b64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b4c:	e00a      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d102      	bne.n	8004b5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b54:	4b25      	ldr	r3, [pc, #148]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x110>)
 8004b56:	61bb      	str	r3, [r7, #24]
 8004b58:	e004      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d101      	bne.n	8004b64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b60:	4b23      	ldr	r3, [pc, #140]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	2b0c      	cmp	r3, #12
 8004b68:	d134      	bne.n	8004bd4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d003      	beq.n	8004b82 <HAL_RCC_GetSysClockFreq+0xa6>
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d003      	beq.n	8004b88 <HAL_RCC_GetSysClockFreq+0xac>
 8004b80:	e005      	b.n	8004b8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b82:	4b1a      	ldr	r3, [pc, #104]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x110>)
 8004b84:	617b      	str	r3, [r7, #20]
      break;
 8004b86:	e005      	b.n	8004b94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b88:	4b19      	ldr	r3, [pc, #100]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b8a:	617b      	str	r3, [r7, #20]
      break;
 8004b8c:	e002      	b.n	8004b94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	617b      	str	r3, [r7, #20]
      break;
 8004b92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b94:	4b13      	ldr	r3, [pc, #76]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	091b      	lsrs	r3, r3, #4
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ba2:	4b10      	ldr	r3, [pc, #64]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	0a1b      	lsrs	r3, r3, #8
 8004ba8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	fb03 f202 	mul.w	r2, r3, r2
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bba:	4b0a      	ldr	r3, [pc, #40]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	0e5b      	lsrs	r3, r3, #25
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004bd4:	69bb      	ldr	r3, [r7, #24]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3724      	adds	r7, #36	@ 0x24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40021000 	.word	0x40021000
 8004be8:	0800b4bc 	.word	0x0800b4bc
 8004bec:	00f42400 	.word	0x00f42400
 8004bf0:	007a1200 	.word	0x007a1200

08004bf4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf8:	4b03      	ldr	r3, [pc, #12]	@ (8004c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	20000000 	.word	0x20000000

08004c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c10:	f7ff fff0 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 8004c14:	4602      	mov	r2, r0
 8004c16:	4b06      	ldr	r3, [pc, #24]	@ (8004c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	0a1b      	lsrs	r3, r3, #8
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	4904      	ldr	r1, [pc, #16]	@ (8004c34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c22:	5ccb      	ldrb	r3, [r1, r3]
 8004c24:	f003 031f 	and.w	r3, r3, #31
 8004c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40021000 	.word	0x40021000
 8004c34:	0800b4b4 	.word	0x0800b4b4

08004c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c3c:	f7ff ffda 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 8004c40:	4602      	mov	r2, r0
 8004c42:	4b06      	ldr	r3, [pc, #24]	@ (8004c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	0adb      	lsrs	r3, r3, #11
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	4904      	ldr	r1, [pc, #16]	@ (8004c60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c4e:	5ccb      	ldrb	r3, [r1, r3]
 8004c50:	f003 031f 	and.w	r3, r3, #31
 8004c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	0800b4b4 	.word	0x0800b4b4

08004c64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c70:	4b2a      	ldr	r3, [pc, #168]	@ (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c7c:	f7ff f922 	bl	8003ec4 <HAL_PWREx_GetVoltageRange>
 8004c80:	6178      	str	r0, [r7, #20]
 8004c82:	e014      	b.n	8004cae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c84:	4b25      	ldr	r3, [pc, #148]	@ (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c88:	4a24      	ldr	r2, [pc, #144]	@ (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c90:	4b22      	ldr	r3, [pc, #136]	@ (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c9c:	f7ff f912 	bl	8003ec4 <HAL_PWREx_GetVoltageRange>
 8004ca0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ca8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cac:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cb4:	d10b      	bne.n	8004cce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b80      	cmp	r3, #128	@ 0x80
 8004cba:	d919      	bls.n	8004cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2ba0      	cmp	r3, #160	@ 0xa0
 8004cc0:	d902      	bls.n	8004cc8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	e013      	b.n	8004cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cc8:	2301      	movs	r3, #1
 8004cca:	613b      	str	r3, [r7, #16]
 8004ccc:	e010      	b.n	8004cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b80      	cmp	r3, #128	@ 0x80
 8004cd2:	d902      	bls.n	8004cda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	613b      	str	r3, [r7, #16]
 8004cd8:	e00a      	b.n	8004cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b80      	cmp	r3, #128	@ 0x80
 8004cde:	d102      	bne.n	8004ce6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	613b      	str	r3, [r7, #16]
 8004ce4:	e004      	b.n	8004cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b70      	cmp	r3, #112	@ 0x70
 8004cea:	d101      	bne.n	8004cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cec:	2301      	movs	r3, #1
 8004cee:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f023 0207 	bic.w	r2, r3, #7
 8004cf8:	4909      	ldr	r1, [pc, #36]	@ (8004d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d00:	4b07      	ldr	r3, [pc, #28]	@ (8004d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d001      	beq.n	8004d12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e000      	b.n	8004d14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	40022000 	.word	0x40022000

08004d24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d30:	2300      	movs	r3, #0
 8004d32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d041      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d44:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d48:	d02a      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d4a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d4e:	d824      	bhi.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d54:	d008      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d5a:	d81e      	bhi.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d64:	d010      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d66:	e018      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d68:	4b86      	ldr	r3, [pc, #536]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	4a85      	ldr	r2, [pc, #532]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d72:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d74:	e015      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3304      	adds	r3, #4
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 facb 	bl	8005318 <RCCEx_PLLSAI1_Config>
 8004d82:	4603      	mov	r3, r0
 8004d84:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d86:	e00c      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3320      	adds	r3, #32
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fbb6 	bl	8005500 <RCCEx_PLLSAI2_Config>
 8004d94:	4603      	mov	r3, r0
 8004d96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d98:	e003      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	74fb      	strb	r3, [r7, #19]
      break;
 8004d9e:	e000      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004da0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004da2:	7cfb      	ldrb	r3, [r7, #19]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10b      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004da8:	4b76      	ldr	r3, [pc, #472]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004db6:	4973      	ldr	r1, [pc, #460]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004dbe:	e001      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc0:	7cfb      	ldrb	r3, [r7, #19]
 8004dc2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d041      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dd4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004dd8:	d02a      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004dda:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004dde:	d824      	bhi.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004de0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004de4:	d008      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004de6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004dea:	d81e      	bhi.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00a      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004df0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004df4:	d010      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004df6:	e018      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004df8:	4b62      	ldr	r3, [pc, #392]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	4a61      	ldr	r2, [pc, #388]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e02:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e04:	e015      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fa83 	bl	8005318 <RCCEx_PLLSAI1_Config>
 8004e12:	4603      	mov	r3, r0
 8004e14:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e16:	e00c      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3320      	adds	r3, #32
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fb6e 	bl	8005500 <RCCEx_PLLSAI2_Config>
 8004e24:	4603      	mov	r3, r0
 8004e26:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e28:	e003      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	74fb      	strb	r3, [r7, #19]
      break;
 8004e2e:	e000      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004e30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e32:	7cfb      	ldrb	r3, [r7, #19]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10b      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e38:	4b52      	ldr	r3, [pc, #328]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e3e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e46:	494f      	ldr	r1, [pc, #316]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004e4e:	e001      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e50:	7cfb      	ldrb	r3, [r7, #19]
 8004e52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 80a0 	beq.w	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e62:	2300      	movs	r3, #0
 8004e64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e66:	4b47      	ldr	r3, [pc, #284]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004e76:	2300      	movs	r3, #0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00d      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e7c:	4b41      	ldr	r3, [pc, #260]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e80:	4a40      	ldr	r2, [pc, #256]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e86:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e88:	4b3e      	ldr	r3, [pc, #248]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e90:	60bb      	str	r3, [r7, #8]
 8004e92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e94:	2301      	movs	r3, #1
 8004e96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e98:	4b3b      	ldr	r3, [pc, #236]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a3a      	ldr	r2, [pc, #232]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ea2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ea4:	f7fc fd36 	bl	8001914 <HAL_GetTick>
 8004ea8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004eaa:	e009      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eac:	f7fc fd32 	bl	8001914 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d902      	bls.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	74fb      	strb	r3, [r7, #19]
        break;
 8004ebe:	e005      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ec0:	4b31      	ldr	r3, [pc, #196]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0ef      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ecc:	7cfb      	ldrb	r3, [r7, #19]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d15c      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ed2:	4b2c      	ldr	r3, [pc, #176]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004edc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01f      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d019      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ef0:	4b24      	ldr	r3, [pc, #144]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004efa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004efc:	4b21      	ldr	r3, [pc, #132]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f02:	4a20      	ldr	r2, [pc, #128]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f12:	4a1c      	ldr	r2, [pc, #112]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f1c:	4a19      	ldr	r2, [pc, #100]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d016      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2e:	f7fc fcf1 	bl	8001914 <HAL_GetTick>
 8004f32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f34:	e00b      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f36:	f7fc fced 	bl	8001914 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d902      	bls.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	74fb      	strb	r3, [r7, #19]
            break;
 8004f4c:	e006      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0ec      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004f5c:	7cfb      	ldrb	r3, [r7, #19]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10c      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f62:	4b08      	ldr	r3, [pc, #32]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f72:	4904      	ldr	r1, [pc, #16]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f7a:	e009      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f7c:	7cfb      	ldrb	r3, [r7, #19]
 8004f7e:	74bb      	strb	r3, [r7, #18]
 8004f80:	e006      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f82:	bf00      	nop
 8004f84:	40021000 	.word	0x40021000
 8004f88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f8c:	7cfb      	ldrb	r3, [r7, #19]
 8004f8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f90:	7c7b      	ldrb	r3, [r7, #17]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d105      	bne.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f96:	4b9e      	ldr	r3, [pc, #632]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f9a:	4a9d      	ldr	r2, [pc, #628]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fa0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fae:	4b98      	ldr	r3, [pc, #608]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb4:	f023 0203 	bic.w	r2, r3, #3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fbc:	4994      	ldr	r1, [pc, #592]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fd0:	4b8f      	ldr	r3, [pc, #572]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd6:	f023 020c 	bic.w	r2, r3, #12
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fde:	498c      	ldr	r1, [pc, #560]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ff2:	4b87      	ldr	r3, [pc, #540]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005000:	4983      	ldr	r1, [pc, #524]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0308 	and.w	r3, r3, #8
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005014:	4b7e      	ldr	r3, [pc, #504]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800501a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005022:	497b      	ldr	r1, [pc, #492]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005024:	4313      	orrs	r3, r2
 8005026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0310 	and.w	r3, r3, #16
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005036:	4b76      	ldr	r3, [pc, #472]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800503c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005044:	4972      	ldr	r1, [pc, #456]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005058:	4b6d      	ldr	r3, [pc, #436]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800505a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005066:	496a      	ldr	r1, [pc, #424]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800507a:	4b65      	ldr	r3, [pc, #404]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800507c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005080:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005088:	4961      	ldr	r1, [pc, #388]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800508a:	4313      	orrs	r3, r2
 800508c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800509c:	4b5c      	ldr	r3, [pc, #368]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800509e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050aa:	4959      	ldr	r1, [pc, #356]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050be:	4b54      	ldr	r3, [pc, #336]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050cc:	4950      	ldr	r1, [pc, #320]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00a      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050e0:	4b4b      	ldr	r3, [pc, #300]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ee:	4948      	ldr	r1, [pc, #288]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005102:	4b43      	ldr	r3, [pc, #268]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005108:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005110:	493f      	ldr	r1, [pc, #252]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d028      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005124:	4b3a      	ldr	r3, [pc, #232]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800512a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005132:	4937      	ldr	r1, [pc, #220]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005134:	4313      	orrs	r3, r2
 8005136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800513e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005142:	d106      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005144:	4b32      	ldr	r3, [pc, #200]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	4a31      	ldr	r2, [pc, #196]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800514a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800514e:	60d3      	str	r3, [r2, #12]
 8005150:	e011      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005156:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800515a:	d10c      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3304      	adds	r3, #4
 8005160:	2101      	movs	r1, #1
 8005162:	4618      	mov	r0, r3
 8005164:	f000 f8d8 	bl	8005318 <RCCEx_PLLSAI1_Config>
 8005168:	4603      	mov	r3, r0
 800516a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800516c:	7cfb      	ldrb	r3, [r7, #19]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005172:	7cfb      	ldrb	r3, [r7, #19]
 8005174:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d028      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005182:	4b23      	ldr	r3, [pc, #140]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005188:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005190:	491f      	ldr	r1, [pc, #124]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051a0:	d106      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	4a1a      	ldr	r2, [pc, #104]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051ac:	60d3      	str	r3, [r2, #12]
 80051ae:	e011      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051b8:	d10c      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3304      	adds	r3, #4
 80051be:	2101      	movs	r1, #1
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 f8a9 	bl	8005318 <RCCEx_PLLSAI1_Config>
 80051c6:	4603      	mov	r3, r0
 80051c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051ca:	7cfb      	ldrb	r3, [r7, #19]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80051d0:	7cfb      	ldrb	r3, [r7, #19]
 80051d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d02b      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ee:	4908      	ldr	r1, [pc, #32]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051fe:	d109      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005200:	4b03      	ldr	r3, [pc, #12]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	4a02      	ldr	r2, [pc, #8]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800520a:	60d3      	str	r3, [r2, #12]
 800520c:	e014      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800520e:	bf00      	nop
 8005210:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005218:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800521c:	d10c      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	3304      	adds	r3, #4
 8005222:	2101      	movs	r1, #1
 8005224:	4618      	mov	r0, r3
 8005226:	f000 f877 	bl	8005318 <RCCEx_PLLSAI1_Config>
 800522a:	4603      	mov	r3, r0
 800522c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800522e:	7cfb      	ldrb	r3, [r7, #19]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005234:	7cfb      	ldrb	r3, [r7, #19]
 8005236:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d02f      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005244:	4b2b      	ldr	r3, [pc, #172]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005252:	4928      	ldr	r1, [pc, #160]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005254:	4313      	orrs	r3, r2
 8005256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800525e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005262:	d10d      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3304      	adds	r3, #4
 8005268:	2102      	movs	r1, #2
 800526a:	4618      	mov	r0, r3
 800526c:	f000 f854 	bl	8005318 <RCCEx_PLLSAI1_Config>
 8005270:	4603      	mov	r3, r0
 8005272:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005274:	7cfb      	ldrb	r3, [r7, #19]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d014      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800527a:	7cfb      	ldrb	r3, [r7, #19]
 800527c:	74bb      	strb	r3, [r7, #18]
 800527e:	e011      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005284:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005288:	d10c      	bne.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	3320      	adds	r3, #32
 800528e:	2102      	movs	r1, #2
 8005290:	4618      	mov	r0, r3
 8005292:	f000 f935 	bl	8005500 <RCCEx_PLLSAI2_Config>
 8005296:	4603      	mov	r3, r0
 8005298:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800529a:	7cfb      	ldrb	r3, [r7, #19]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80052a0:	7cfb      	ldrb	r3, [r7, #19]
 80052a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052b0:	4b10      	ldr	r3, [pc, #64]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052be:	490d      	ldr	r1, [pc, #52]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00b      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052d2:	4b08      	ldr	r3, [pc, #32]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052e2:	4904      	ldr	r1, [pc, #16]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40021000 	.word	0x40021000

080052f8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80052fc:	4b05      	ldr	r3, [pc, #20]	@ (8005314 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a04      	ldr	r2, [pc, #16]	@ (8005314 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005302:	f043 0304 	orr.w	r3, r3, #4
 8005306:	6013      	str	r3, [r2, #0]
}
 8005308:	bf00      	nop
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40021000 	.word	0x40021000

08005318 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005326:	4b75      	ldr	r3, [pc, #468]	@ (80054fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d018      	beq.n	8005364 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005332:	4b72      	ldr	r3, [pc, #456]	@ (80054fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f003 0203 	and.w	r2, r3, #3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d10d      	bne.n	800535e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
       ||
 8005346:	2b00      	cmp	r3, #0
 8005348:	d009      	beq.n	800535e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800534a:	4b6c      	ldr	r3, [pc, #432]	@ (80054fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	091b      	lsrs	r3, r3, #4
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
       ||
 800535a:	429a      	cmp	r2, r3
 800535c:	d047      	beq.n	80053ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	73fb      	strb	r3, [r7, #15]
 8005362:	e044      	b.n	80053ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b03      	cmp	r3, #3
 800536a:	d018      	beq.n	800539e <RCCEx_PLLSAI1_Config+0x86>
 800536c:	2b03      	cmp	r3, #3
 800536e:	d825      	bhi.n	80053bc <RCCEx_PLLSAI1_Config+0xa4>
 8005370:	2b01      	cmp	r3, #1
 8005372:	d002      	beq.n	800537a <RCCEx_PLLSAI1_Config+0x62>
 8005374:	2b02      	cmp	r3, #2
 8005376:	d009      	beq.n	800538c <RCCEx_PLLSAI1_Config+0x74>
 8005378:	e020      	b.n	80053bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800537a:	4b60      	ldr	r3, [pc, #384]	@ (80054fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d11d      	bne.n	80053c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800538a:	e01a      	b.n	80053c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800538c:	4b5b      	ldr	r3, [pc, #364]	@ (80054fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005394:	2b00      	cmp	r3, #0
 8005396:	d116      	bne.n	80053c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800539c:	e013      	b.n	80053c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800539e:	4b57      	ldr	r3, [pc, #348]	@ (80054fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10f      	bne.n	80053ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053aa:	4b54      	ldr	r3, [pc, #336]	@ (80054fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053ba:	e006      	b.n	80053ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	73fb      	strb	r3, [r7, #15]
      break;
 80053c0:	e004      	b.n	80053cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053c2:	bf00      	nop
 80053c4:	e002      	b.n	80053cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053c6:	bf00      	nop
 80053c8:	e000      	b.n	80053cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10d      	bne.n	80053ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053d2:	4b4a      	ldr	r3, [pc, #296]	@ (80054fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6819      	ldr	r1, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	011b      	lsls	r3, r3, #4
 80053e6:	430b      	orrs	r3, r1
 80053e8:	4944      	ldr	r1, [pc, #272]	@ (80054fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d17d      	bne.n	80054f0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053f4:	4b41      	ldr	r3, [pc, #260]	@ (80054fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a40      	ldr	r2, [pc, #256]	@ (80054fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005400:	f7fc fa88 	bl	8001914 <HAL_GetTick>
 8005404:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005406:	e009      	b.n	800541c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005408:	f7fc fa84 	bl	8001914 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d902      	bls.n	800541c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	73fb      	strb	r3, [r7, #15]
        break;
 800541a:	e005      	b.n	8005428 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800541c:	4b37      	ldr	r3, [pc, #220]	@ (80054fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1ef      	bne.n	8005408 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005428:	7bfb      	ldrb	r3, [r7, #15]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d160      	bne.n	80054f0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d111      	bne.n	8005458 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005434:	4b31      	ldr	r3, [pc, #196]	@ (80054fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800543c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6892      	ldr	r2, [r2, #8]
 8005444:	0211      	lsls	r1, r2, #8
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	68d2      	ldr	r2, [r2, #12]
 800544a:	0912      	lsrs	r2, r2, #4
 800544c:	0452      	lsls	r2, r2, #17
 800544e:	430a      	orrs	r2, r1
 8005450:	492a      	ldr	r1, [pc, #168]	@ (80054fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005452:	4313      	orrs	r3, r2
 8005454:	610b      	str	r3, [r1, #16]
 8005456:	e027      	b.n	80054a8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d112      	bne.n	8005484 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800545e:	4b27      	ldr	r3, [pc, #156]	@ (80054fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005466:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	6892      	ldr	r2, [r2, #8]
 800546e:	0211      	lsls	r1, r2, #8
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6912      	ldr	r2, [r2, #16]
 8005474:	0852      	lsrs	r2, r2, #1
 8005476:	3a01      	subs	r2, #1
 8005478:	0552      	lsls	r2, r2, #21
 800547a:	430a      	orrs	r2, r1
 800547c:	491f      	ldr	r1, [pc, #124]	@ (80054fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800547e:	4313      	orrs	r3, r2
 8005480:	610b      	str	r3, [r1, #16]
 8005482:	e011      	b.n	80054a8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005484:	4b1d      	ldr	r3, [pc, #116]	@ (80054fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800548c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6892      	ldr	r2, [r2, #8]
 8005494:	0211      	lsls	r1, r2, #8
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6952      	ldr	r2, [r2, #20]
 800549a:	0852      	lsrs	r2, r2, #1
 800549c:	3a01      	subs	r2, #1
 800549e:	0652      	lsls	r2, r2, #25
 80054a0:	430a      	orrs	r2, r1
 80054a2:	4916      	ldr	r1, [pc, #88]	@ (80054fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80054a8:	4b14      	ldr	r3, [pc, #80]	@ (80054fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a13      	ldr	r2, [pc, #76]	@ (80054fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80054b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b4:	f7fc fa2e 	bl	8001914 <HAL_GetTick>
 80054b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054ba:	e009      	b.n	80054d0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054bc:	f7fc fa2a 	bl	8001914 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d902      	bls.n	80054d0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	73fb      	strb	r3, [r7, #15]
          break;
 80054ce:	e005      	b.n	80054dc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054d0:	4b0a      	ldr	r3, [pc, #40]	@ (80054fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0ef      	beq.n	80054bc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d106      	bne.n	80054f0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054e2:	4b06      	ldr	r3, [pc, #24]	@ (80054fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e4:	691a      	ldr	r2, [r3, #16]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	4904      	ldr	r1, [pc, #16]	@ (80054fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	40021000 	.word	0x40021000

08005500 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800550e:	4b6a      	ldr	r3, [pc, #424]	@ (80056b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d018      	beq.n	800554c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800551a:	4b67      	ldr	r3, [pc, #412]	@ (80056b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f003 0203 	and.w	r2, r3, #3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d10d      	bne.n	8005546 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
       ||
 800552e:	2b00      	cmp	r3, #0
 8005530:	d009      	beq.n	8005546 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005532:	4b61      	ldr	r3, [pc, #388]	@ (80056b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	091b      	lsrs	r3, r3, #4
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	1c5a      	adds	r2, r3, #1
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
       ||
 8005542:	429a      	cmp	r2, r3
 8005544:	d047      	beq.n	80055d6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	73fb      	strb	r3, [r7, #15]
 800554a:	e044      	b.n	80055d6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b03      	cmp	r3, #3
 8005552:	d018      	beq.n	8005586 <RCCEx_PLLSAI2_Config+0x86>
 8005554:	2b03      	cmp	r3, #3
 8005556:	d825      	bhi.n	80055a4 <RCCEx_PLLSAI2_Config+0xa4>
 8005558:	2b01      	cmp	r3, #1
 800555a:	d002      	beq.n	8005562 <RCCEx_PLLSAI2_Config+0x62>
 800555c:	2b02      	cmp	r3, #2
 800555e:	d009      	beq.n	8005574 <RCCEx_PLLSAI2_Config+0x74>
 8005560:	e020      	b.n	80055a4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005562:	4b55      	ldr	r3, [pc, #340]	@ (80056b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d11d      	bne.n	80055aa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005572:	e01a      	b.n	80055aa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005574:	4b50      	ldr	r3, [pc, #320]	@ (80056b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800557c:	2b00      	cmp	r3, #0
 800557e:	d116      	bne.n	80055ae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005584:	e013      	b.n	80055ae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005586:	4b4c      	ldr	r3, [pc, #304]	@ (80056b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10f      	bne.n	80055b2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005592:	4b49      	ldr	r3, [pc, #292]	@ (80056b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d109      	bne.n	80055b2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055a2:	e006      	b.n	80055b2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	73fb      	strb	r3, [r7, #15]
      break;
 80055a8:	e004      	b.n	80055b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055aa:	bf00      	nop
 80055ac:	e002      	b.n	80055b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055ae:	bf00      	nop
 80055b0:	e000      	b.n	80055b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10d      	bne.n	80055d6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055ba:	4b3f      	ldr	r3, [pc, #252]	@ (80056b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6819      	ldr	r1, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	3b01      	subs	r3, #1
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	430b      	orrs	r3, r1
 80055d0:	4939      	ldr	r1, [pc, #228]	@ (80056b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d167      	bne.n	80056ac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80055dc:	4b36      	ldr	r3, [pc, #216]	@ (80056b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a35      	ldr	r2, [pc, #212]	@ (80056b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e8:	f7fc f994 	bl	8001914 <HAL_GetTick>
 80055ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055ee:	e009      	b.n	8005604 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055f0:	f7fc f990 	bl	8001914 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d902      	bls.n	8005604 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	73fb      	strb	r3, [r7, #15]
        break;
 8005602:	e005      	b.n	8005610 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005604:	4b2c      	ldr	r3, [pc, #176]	@ (80056b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1ef      	bne.n	80055f0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005610:	7bfb      	ldrb	r3, [r7, #15]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d14a      	bne.n	80056ac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d111      	bne.n	8005640 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800561c:	4b26      	ldr	r3, [pc, #152]	@ (80056b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005624:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6892      	ldr	r2, [r2, #8]
 800562c:	0211      	lsls	r1, r2, #8
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	68d2      	ldr	r2, [r2, #12]
 8005632:	0912      	lsrs	r2, r2, #4
 8005634:	0452      	lsls	r2, r2, #17
 8005636:	430a      	orrs	r2, r1
 8005638:	491f      	ldr	r1, [pc, #124]	@ (80056b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800563a:	4313      	orrs	r3, r2
 800563c:	614b      	str	r3, [r1, #20]
 800563e:	e011      	b.n	8005664 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005640:	4b1d      	ldr	r3, [pc, #116]	@ (80056b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005648:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	6892      	ldr	r2, [r2, #8]
 8005650:	0211      	lsls	r1, r2, #8
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6912      	ldr	r2, [r2, #16]
 8005656:	0852      	lsrs	r2, r2, #1
 8005658:	3a01      	subs	r2, #1
 800565a:	0652      	lsls	r2, r2, #25
 800565c:	430a      	orrs	r2, r1
 800565e:	4916      	ldr	r1, [pc, #88]	@ (80056b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005660:	4313      	orrs	r3, r2
 8005662:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005664:	4b14      	ldr	r3, [pc, #80]	@ (80056b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a13      	ldr	r2, [pc, #76]	@ (80056b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800566a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800566e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005670:	f7fc f950 	bl	8001914 <HAL_GetTick>
 8005674:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005676:	e009      	b.n	800568c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005678:	f7fc f94c 	bl	8001914 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d902      	bls.n	800568c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	73fb      	strb	r3, [r7, #15]
          break;
 800568a:	e005      	b.n	8005698 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800568c:	4b0a      	ldr	r3, [pc, #40]	@ (80056b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0ef      	beq.n	8005678 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d106      	bne.n	80056ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800569e:	4b06      	ldr	r3, [pc, #24]	@ (80056b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a0:	695a      	ldr	r2, [r3, #20]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	4904      	ldr	r1, [pc, #16]	@ (80056b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	40021000 	.word	0x40021000

080056bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e095      	b.n	80057fa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d108      	bne.n	80056e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056de:	d009      	beq.n	80056f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	61da      	str	r2, [r3, #28]
 80056e6:	e005      	b.n	80056f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d106      	bne.n	8005714 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7fb fdea 	bl	80012e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800572a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005734:	d902      	bls.n	800573c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005736:	2300      	movs	r3, #0
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	e002      	b.n	8005742 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800573c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005740:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800574a:	d007      	beq.n	800575c <HAL_SPI_Init+0xa0>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005754:	d002      	beq.n	800575c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	431a      	orrs	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800579e:	ea42 0103 	orr.w	r1, r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	0c1b      	lsrs	r3, r3, #16
 80057b8:	f003 0204 	and.w	r2, r3, #4
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c0:	f003 0310 	and.w	r3, r3, #16
 80057c4:	431a      	orrs	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ca:	f003 0308 	and.w	r3, r3, #8
 80057ce:	431a      	orrs	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80057d8:	ea42 0103 	orr.w	r1, r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b082      	sub	sp, #8
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e049      	b.n	80058a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d106      	bne.n	800582e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7fb fda1 	bl	8001370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2202      	movs	r2, #2
 8005832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3304      	adds	r3, #4
 800583e:	4619      	mov	r1, r3
 8005840:	4610      	mov	r0, r2
 8005842:	f000 f96f 	bl	8005b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d001      	beq.n	80058c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e04f      	b.n	8005968 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0201 	orr.w	r2, r2, #1
 80058de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a23      	ldr	r2, [pc, #140]	@ (8005974 <HAL_TIM_Base_Start_IT+0xc4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d01d      	beq.n	8005926 <HAL_TIM_Base_Start_IT+0x76>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058f2:	d018      	beq.n	8005926 <HAL_TIM_Base_Start_IT+0x76>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005978 <HAL_TIM_Base_Start_IT+0xc8>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d013      	beq.n	8005926 <HAL_TIM_Base_Start_IT+0x76>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a1e      	ldr	r2, [pc, #120]	@ (800597c <HAL_TIM_Base_Start_IT+0xcc>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00e      	beq.n	8005926 <HAL_TIM_Base_Start_IT+0x76>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1c      	ldr	r2, [pc, #112]	@ (8005980 <HAL_TIM_Base_Start_IT+0xd0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d009      	beq.n	8005926 <HAL_TIM_Base_Start_IT+0x76>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a1b      	ldr	r2, [pc, #108]	@ (8005984 <HAL_TIM_Base_Start_IT+0xd4>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d004      	beq.n	8005926 <HAL_TIM_Base_Start_IT+0x76>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a19      	ldr	r2, [pc, #100]	@ (8005988 <HAL_TIM_Base_Start_IT+0xd8>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d115      	bne.n	8005952 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	4b17      	ldr	r3, [pc, #92]	@ (800598c <HAL_TIM_Base_Start_IT+0xdc>)
 800592e:	4013      	ands	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2b06      	cmp	r3, #6
 8005936:	d015      	beq.n	8005964 <HAL_TIM_Base_Start_IT+0xb4>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800593e:	d011      	beq.n	8005964 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0201 	orr.w	r2, r2, #1
 800594e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005950:	e008      	b.n	8005964 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f042 0201 	orr.w	r2, r2, #1
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	e000      	b.n	8005966 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005964:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr
 8005974:	40012c00 	.word	0x40012c00
 8005978:	40000400 	.word	0x40000400
 800597c:	40000800 	.word	0x40000800
 8005980:	40000c00 	.word	0x40000c00
 8005984:	40013400 	.word	0x40013400
 8005988:	40014000 	.word	0x40014000
 800598c:	00010007 	.word	0x00010007

08005990 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d101      	bne.n	80059ac <HAL_TIM_ConfigClockSource+0x1c>
 80059a8:	2302      	movs	r3, #2
 80059aa:	e0b6      	b.n	8005b1a <HAL_TIM_ConfigClockSource+0x18a>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80059ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059e8:	d03e      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0xd8>
 80059ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059ee:	f200 8087 	bhi.w	8005b00 <HAL_TIM_ConfigClockSource+0x170>
 80059f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059f6:	f000 8086 	beq.w	8005b06 <HAL_TIM_ConfigClockSource+0x176>
 80059fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059fe:	d87f      	bhi.n	8005b00 <HAL_TIM_ConfigClockSource+0x170>
 8005a00:	2b70      	cmp	r3, #112	@ 0x70
 8005a02:	d01a      	beq.n	8005a3a <HAL_TIM_ConfigClockSource+0xaa>
 8005a04:	2b70      	cmp	r3, #112	@ 0x70
 8005a06:	d87b      	bhi.n	8005b00 <HAL_TIM_ConfigClockSource+0x170>
 8005a08:	2b60      	cmp	r3, #96	@ 0x60
 8005a0a:	d050      	beq.n	8005aae <HAL_TIM_ConfigClockSource+0x11e>
 8005a0c:	2b60      	cmp	r3, #96	@ 0x60
 8005a0e:	d877      	bhi.n	8005b00 <HAL_TIM_ConfigClockSource+0x170>
 8005a10:	2b50      	cmp	r3, #80	@ 0x50
 8005a12:	d03c      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0xfe>
 8005a14:	2b50      	cmp	r3, #80	@ 0x50
 8005a16:	d873      	bhi.n	8005b00 <HAL_TIM_ConfigClockSource+0x170>
 8005a18:	2b40      	cmp	r3, #64	@ 0x40
 8005a1a:	d058      	beq.n	8005ace <HAL_TIM_ConfigClockSource+0x13e>
 8005a1c:	2b40      	cmp	r3, #64	@ 0x40
 8005a1e:	d86f      	bhi.n	8005b00 <HAL_TIM_ConfigClockSource+0x170>
 8005a20:	2b30      	cmp	r3, #48	@ 0x30
 8005a22:	d064      	beq.n	8005aee <HAL_TIM_ConfigClockSource+0x15e>
 8005a24:	2b30      	cmp	r3, #48	@ 0x30
 8005a26:	d86b      	bhi.n	8005b00 <HAL_TIM_ConfigClockSource+0x170>
 8005a28:	2b20      	cmp	r3, #32
 8005a2a:	d060      	beq.n	8005aee <HAL_TIM_ConfigClockSource+0x15e>
 8005a2c:	2b20      	cmp	r3, #32
 8005a2e:	d867      	bhi.n	8005b00 <HAL_TIM_ConfigClockSource+0x170>
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d05c      	beq.n	8005aee <HAL_TIM_ConfigClockSource+0x15e>
 8005a34:	2b10      	cmp	r3, #16
 8005a36:	d05a      	beq.n	8005aee <HAL_TIM_ConfigClockSource+0x15e>
 8005a38:	e062      	b.n	8005b00 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a4a:	f000 f98b 	bl	8005d64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	609a      	str	r2, [r3, #8]
      break;
 8005a66:	e04f      	b.n	8005b08 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a78:	f000 f974 	bl	8005d64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a8a:	609a      	str	r2, [r3, #8]
      break;
 8005a8c:	e03c      	b.n	8005b08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	f000 f8e8 	bl	8005c70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2150      	movs	r1, #80	@ 0x50
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 f941 	bl	8005d2e <TIM_ITRx_SetConfig>
      break;
 8005aac:	e02c      	b.n	8005b08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aba:	461a      	mov	r2, r3
 8005abc:	f000 f907 	bl	8005cce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2160      	movs	r1, #96	@ 0x60
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 f931 	bl	8005d2e <TIM_ITRx_SetConfig>
      break;
 8005acc:	e01c      	b.n	8005b08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ada:	461a      	mov	r2, r3
 8005adc:	f000 f8c8 	bl	8005c70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2140      	movs	r1, #64	@ 0x40
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 f921 	bl	8005d2e <TIM_ITRx_SetConfig>
      break;
 8005aec:	e00c      	b.n	8005b08 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4619      	mov	r1, r3
 8005af8:	4610      	mov	r0, r2
 8005afa:	f000 f918 	bl	8005d2e <TIM_ITRx_SetConfig>
      break;
 8005afe:	e003      	b.n	8005b08 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	73fb      	strb	r3, [r7, #15]
      break;
 8005b04:	e000      	b.n	8005b08 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005b06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
	...

08005b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a46      	ldr	r2, [pc, #280]	@ (8005c50 <TIM_Base_SetConfig+0x12c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d013      	beq.n	8005b64 <TIM_Base_SetConfig+0x40>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b42:	d00f      	beq.n	8005b64 <TIM_Base_SetConfig+0x40>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a43      	ldr	r2, [pc, #268]	@ (8005c54 <TIM_Base_SetConfig+0x130>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d00b      	beq.n	8005b64 <TIM_Base_SetConfig+0x40>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a42      	ldr	r2, [pc, #264]	@ (8005c58 <TIM_Base_SetConfig+0x134>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d007      	beq.n	8005b64 <TIM_Base_SetConfig+0x40>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a41      	ldr	r2, [pc, #260]	@ (8005c5c <TIM_Base_SetConfig+0x138>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d003      	beq.n	8005b64 <TIM_Base_SetConfig+0x40>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a40      	ldr	r2, [pc, #256]	@ (8005c60 <TIM_Base_SetConfig+0x13c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d108      	bne.n	8005b76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a35      	ldr	r2, [pc, #212]	@ (8005c50 <TIM_Base_SetConfig+0x12c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d01f      	beq.n	8005bbe <TIM_Base_SetConfig+0x9a>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b84:	d01b      	beq.n	8005bbe <TIM_Base_SetConfig+0x9a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a32      	ldr	r2, [pc, #200]	@ (8005c54 <TIM_Base_SetConfig+0x130>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d017      	beq.n	8005bbe <TIM_Base_SetConfig+0x9a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a31      	ldr	r2, [pc, #196]	@ (8005c58 <TIM_Base_SetConfig+0x134>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d013      	beq.n	8005bbe <TIM_Base_SetConfig+0x9a>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a30      	ldr	r2, [pc, #192]	@ (8005c5c <TIM_Base_SetConfig+0x138>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00f      	beq.n	8005bbe <TIM_Base_SetConfig+0x9a>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a2f      	ldr	r2, [pc, #188]	@ (8005c60 <TIM_Base_SetConfig+0x13c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d00b      	beq.n	8005bbe <TIM_Base_SetConfig+0x9a>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a2e      	ldr	r2, [pc, #184]	@ (8005c64 <TIM_Base_SetConfig+0x140>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d007      	beq.n	8005bbe <TIM_Base_SetConfig+0x9a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a2d      	ldr	r2, [pc, #180]	@ (8005c68 <TIM_Base_SetConfig+0x144>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d003      	beq.n	8005bbe <TIM_Base_SetConfig+0x9a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a2c      	ldr	r2, [pc, #176]	@ (8005c6c <TIM_Base_SetConfig+0x148>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d108      	bne.n	8005bd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a16      	ldr	r2, [pc, #88]	@ (8005c50 <TIM_Base_SetConfig+0x12c>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d00f      	beq.n	8005c1c <TIM_Base_SetConfig+0xf8>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a18      	ldr	r2, [pc, #96]	@ (8005c60 <TIM_Base_SetConfig+0x13c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00b      	beq.n	8005c1c <TIM_Base_SetConfig+0xf8>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a17      	ldr	r2, [pc, #92]	@ (8005c64 <TIM_Base_SetConfig+0x140>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d007      	beq.n	8005c1c <TIM_Base_SetConfig+0xf8>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a16      	ldr	r2, [pc, #88]	@ (8005c68 <TIM_Base_SetConfig+0x144>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d003      	beq.n	8005c1c <TIM_Base_SetConfig+0xf8>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a15      	ldr	r2, [pc, #84]	@ (8005c6c <TIM_Base_SetConfig+0x148>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d103      	bne.n	8005c24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d105      	bne.n	8005c42 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	f023 0201 	bic.w	r2, r3, #1
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	611a      	str	r2, [r3, #16]
  }
}
 8005c42:	bf00      	nop
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	40012c00 	.word	0x40012c00
 8005c54:	40000400 	.word	0x40000400
 8005c58:	40000800 	.word	0x40000800
 8005c5c:	40000c00 	.word	0x40000c00
 8005c60:	40013400 	.word	0x40013400
 8005c64:	40014000 	.word	0x40014000
 8005c68:	40014400 	.word	0x40014400
 8005c6c:	40014800 	.word	0x40014800

08005c70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	f023 0201 	bic.w	r2, r3, #1
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	011b      	lsls	r3, r3, #4
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f023 030a 	bic.w	r3, r3, #10
 8005cac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	621a      	str	r2, [r3, #32]
}
 8005cc2:	bf00      	nop
 8005cc4:	371c      	adds	r7, #28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b087      	sub	sp, #28
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	60f8      	str	r0, [r7, #12]
 8005cd6:	60b9      	str	r1, [r7, #8]
 8005cd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	f023 0210 	bic.w	r2, r3, #16
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	031b      	lsls	r3, r3, #12
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	011b      	lsls	r3, r3, #4
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	621a      	str	r2, [r3, #32]
}
 8005d22:	bf00      	nop
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b085      	sub	sp, #20
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
 8005d36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	f043 0307 	orr.w	r3, r3, #7
 8005d50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	609a      	str	r2, [r3, #8]
}
 8005d58:	bf00      	nop
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	021a      	lsls	r2, r3, #8
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	431a      	orrs	r2, r3
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	609a      	str	r2, [r3, #8]
}
 8005d98:	bf00      	nop
 8005d9a:	371c      	adds	r7, #28
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d101      	bne.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005db8:	2302      	movs	r3, #2
 8005dba:	e068      	b.n	8005e8e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a2e      	ldr	r2, [pc, #184]	@ (8005e9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d004      	beq.n	8005df0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a2d      	ldr	r2, [pc, #180]	@ (8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d108      	bne.n	8005e02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005df6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a1e      	ldr	r2, [pc, #120]	@ (8005e9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d01d      	beq.n	8005e62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e2e:	d018      	beq.n	8005e62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a1b      	ldr	r2, [pc, #108]	@ (8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d013      	beq.n	8005e62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d00e      	beq.n	8005e62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a18      	ldr	r2, [pc, #96]	@ (8005eac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d009      	beq.n	8005e62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a13      	ldr	r2, [pc, #76]	@ (8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d004      	beq.n	8005e62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a14      	ldr	r2, [pc, #80]	@ (8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d10c      	bne.n	8005e7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	40012c00 	.word	0x40012c00
 8005ea0:	40013400 	.word	0x40013400
 8005ea4:	40000400 	.word	0x40000400
 8005ea8:	40000800 	.word	0x40000800
 8005eac:	40000c00 	.word	0x40000c00
 8005eb0:	40014000 	.word	0x40014000

08005eb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e040      	b.n	8005f48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d106      	bne.n	8005edc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7fb fa6a 	bl	80013b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2224      	movs	r2, #36	@ 0x24
 8005ee0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0201 	bic.w	r2, r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d002      	beq.n	8005f00 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fb6a 	bl	80065d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f8af 	bl	8006064 <UART_SetConfig>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e01b      	b.n	8005f48 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689a      	ldr	r2, [r3, #8]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0201 	orr.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 fbe9 	bl	8006718 <UART_CheckIdleState>
 8005f46:	4603      	mov	r3, r0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08a      	sub	sp, #40	@ 0x28
 8005f54:	af02      	add	r7, sp, #8
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	603b      	str	r3, [r7, #0]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d177      	bne.n	8006058 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <HAL_UART_Transmit+0x24>
 8005f6e:	88fb      	ldrh	r3, [r7, #6]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e070      	b.n	800605a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2221      	movs	r2, #33	@ 0x21
 8005f84:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f86:	f7fb fcc5 	bl	8001914 <HAL_GetTick>
 8005f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	88fa      	ldrh	r2, [r7, #6]
 8005f90:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	88fa      	ldrh	r2, [r7, #6]
 8005f98:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fa4:	d108      	bne.n	8005fb8 <HAL_UART_Transmit+0x68>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d104      	bne.n	8005fb8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	61bb      	str	r3, [r7, #24]
 8005fb6:	e003      	b.n	8005fc0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fc0:	e02f      	b.n	8006022 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2180      	movs	r1, #128	@ 0x80
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 fc4b 	bl	8006868 <UART_WaitOnFlagUntilTimeout>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d004      	beq.n	8005fe2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e03b      	b.n	800605a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10b      	bne.n	8006000 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	881a      	ldrh	r2, [r3, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ff4:	b292      	uxth	r2, r2
 8005ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	3302      	adds	r3, #2
 8005ffc:	61bb      	str	r3, [r7, #24]
 8005ffe:	e007      	b.n	8006010 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	781a      	ldrb	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	3301      	adds	r3, #1
 800600e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006016:	b29b      	uxth	r3, r3
 8006018:	3b01      	subs	r3, #1
 800601a:	b29a      	uxth	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006028:	b29b      	uxth	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1c9      	bne.n	8005fc2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2200      	movs	r2, #0
 8006036:	2140      	movs	r1, #64	@ 0x40
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 fc15 	bl	8006868 <UART_WaitOnFlagUntilTimeout>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d004      	beq.n	800604e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2220      	movs	r2, #32
 8006048:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e005      	b.n	800605a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2220      	movs	r2, #32
 8006052:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	e000      	b.n	800605a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006058:	2302      	movs	r3, #2
  }
}
 800605a:	4618      	mov	r0, r3
 800605c:	3720      	adds	r7, #32
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006068:	b08a      	sub	sp, #40	@ 0x28
 800606a:	af00      	add	r7, sp, #0
 800606c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	431a      	orrs	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	431a      	orrs	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	4313      	orrs	r3, r2
 800608a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4ba4      	ldr	r3, [pc, #656]	@ (8006324 <UART_SetConfig+0x2c0>)
 8006094:	4013      	ands	r3, r2
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	6812      	ldr	r2, [r2, #0]
 800609a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800609c:	430b      	orrs	r3, r1
 800609e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	68da      	ldr	r2, [r3, #12]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a99      	ldr	r2, [pc, #612]	@ (8006328 <UART_SetConfig+0x2c4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d004      	beq.n	80060d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060cc:	4313      	orrs	r3, r2
 80060ce:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060e0:	430a      	orrs	r2, r1
 80060e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a90      	ldr	r2, [pc, #576]	@ (800632c <UART_SetConfig+0x2c8>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d126      	bne.n	800613c <UART_SetConfig+0xd8>
 80060ee:	4b90      	ldr	r3, [pc, #576]	@ (8006330 <UART_SetConfig+0x2cc>)
 80060f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f4:	f003 0303 	and.w	r3, r3, #3
 80060f8:	2b03      	cmp	r3, #3
 80060fa:	d81b      	bhi.n	8006134 <UART_SetConfig+0xd0>
 80060fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006104 <UART_SetConfig+0xa0>)
 80060fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006102:	bf00      	nop
 8006104:	08006115 	.word	0x08006115
 8006108:	08006125 	.word	0x08006125
 800610c:	0800611d 	.word	0x0800611d
 8006110:	0800612d 	.word	0x0800612d
 8006114:	2301      	movs	r3, #1
 8006116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800611a:	e116      	b.n	800634a <UART_SetConfig+0x2e6>
 800611c:	2302      	movs	r3, #2
 800611e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006122:	e112      	b.n	800634a <UART_SetConfig+0x2e6>
 8006124:	2304      	movs	r3, #4
 8006126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800612a:	e10e      	b.n	800634a <UART_SetConfig+0x2e6>
 800612c:	2308      	movs	r3, #8
 800612e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006132:	e10a      	b.n	800634a <UART_SetConfig+0x2e6>
 8006134:	2310      	movs	r3, #16
 8006136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800613a:	e106      	b.n	800634a <UART_SetConfig+0x2e6>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a7c      	ldr	r2, [pc, #496]	@ (8006334 <UART_SetConfig+0x2d0>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d138      	bne.n	80061b8 <UART_SetConfig+0x154>
 8006146:	4b7a      	ldr	r3, [pc, #488]	@ (8006330 <UART_SetConfig+0x2cc>)
 8006148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800614c:	f003 030c 	and.w	r3, r3, #12
 8006150:	2b0c      	cmp	r3, #12
 8006152:	d82d      	bhi.n	80061b0 <UART_SetConfig+0x14c>
 8006154:	a201      	add	r2, pc, #4	@ (adr r2, 800615c <UART_SetConfig+0xf8>)
 8006156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615a:	bf00      	nop
 800615c:	08006191 	.word	0x08006191
 8006160:	080061b1 	.word	0x080061b1
 8006164:	080061b1 	.word	0x080061b1
 8006168:	080061b1 	.word	0x080061b1
 800616c:	080061a1 	.word	0x080061a1
 8006170:	080061b1 	.word	0x080061b1
 8006174:	080061b1 	.word	0x080061b1
 8006178:	080061b1 	.word	0x080061b1
 800617c:	08006199 	.word	0x08006199
 8006180:	080061b1 	.word	0x080061b1
 8006184:	080061b1 	.word	0x080061b1
 8006188:	080061b1 	.word	0x080061b1
 800618c:	080061a9 	.word	0x080061a9
 8006190:	2300      	movs	r3, #0
 8006192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006196:	e0d8      	b.n	800634a <UART_SetConfig+0x2e6>
 8006198:	2302      	movs	r3, #2
 800619a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800619e:	e0d4      	b.n	800634a <UART_SetConfig+0x2e6>
 80061a0:	2304      	movs	r3, #4
 80061a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061a6:	e0d0      	b.n	800634a <UART_SetConfig+0x2e6>
 80061a8:	2308      	movs	r3, #8
 80061aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ae:	e0cc      	b.n	800634a <UART_SetConfig+0x2e6>
 80061b0:	2310      	movs	r3, #16
 80061b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061b6:	e0c8      	b.n	800634a <UART_SetConfig+0x2e6>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a5e      	ldr	r2, [pc, #376]	@ (8006338 <UART_SetConfig+0x2d4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d125      	bne.n	800620e <UART_SetConfig+0x1aa>
 80061c2:	4b5b      	ldr	r3, [pc, #364]	@ (8006330 <UART_SetConfig+0x2cc>)
 80061c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80061cc:	2b30      	cmp	r3, #48	@ 0x30
 80061ce:	d016      	beq.n	80061fe <UART_SetConfig+0x19a>
 80061d0:	2b30      	cmp	r3, #48	@ 0x30
 80061d2:	d818      	bhi.n	8006206 <UART_SetConfig+0x1a2>
 80061d4:	2b20      	cmp	r3, #32
 80061d6:	d00a      	beq.n	80061ee <UART_SetConfig+0x18a>
 80061d8:	2b20      	cmp	r3, #32
 80061da:	d814      	bhi.n	8006206 <UART_SetConfig+0x1a2>
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d002      	beq.n	80061e6 <UART_SetConfig+0x182>
 80061e0:	2b10      	cmp	r3, #16
 80061e2:	d008      	beq.n	80061f6 <UART_SetConfig+0x192>
 80061e4:	e00f      	b.n	8006206 <UART_SetConfig+0x1a2>
 80061e6:	2300      	movs	r3, #0
 80061e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ec:	e0ad      	b.n	800634a <UART_SetConfig+0x2e6>
 80061ee:	2302      	movs	r3, #2
 80061f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061f4:	e0a9      	b.n	800634a <UART_SetConfig+0x2e6>
 80061f6:	2304      	movs	r3, #4
 80061f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061fc:	e0a5      	b.n	800634a <UART_SetConfig+0x2e6>
 80061fe:	2308      	movs	r3, #8
 8006200:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006204:	e0a1      	b.n	800634a <UART_SetConfig+0x2e6>
 8006206:	2310      	movs	r3, #16
 8006208:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800620c:	e09d      	b.n	800634a <UART_SetConfig+0x2e6>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a4a      	ldr	r2, [pc, #296]	@ (800633c <UART_SetConfig+0x2d8>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d125      	bne.n	8006264 <UART_SetConfig+0x200>
 8006218:	4b45      	ldr	r3, [pc, #276]	@ (8006330 <UART_SetConfig+0x2cc>)
 800621a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800621e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006222:	2bc0      	cmp	r3, #192	@ 0xc0
 8006224:	d016      	beq.n	8006254 <UART_SetConfig+0x1f0>
 8006226:	2bc0      	cmp	r3, #192	@ 0xc0
 8006228:	d818      	bhi.n	800625c <UART_SetConfig+0x1f8>
 800622a:	2b80      	cmp	r3, #128	@ 0x80
 800622c:	d00a      	beq.n	8006244 <UART_SetConfig+0x1e0>
 800622e:	2b80      	cmp	r3, #128	@ 0x80
 8006230:	d814      	bhi.n	800625c <UART_SetConfig+0x1f8>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <UART_SetConfig+0x1d8>
 8006236:	2b40      	cmp	r3, #64	@ 0x40
 8006238:	d008      	beq.n	800624c <UART_SetConfig+0x1e8>
 800623a:	e00f      	b.n	800625c <UART_SetConfig+0x1f8>
 800623c:	2300      	movs	r3, #0
 800623e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006242:	e082      	b.n	800634a <UART_SetConfig+0x2e6>
 8006244:	2302      	movs	r3, #2
 8006246:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800624a:	e07e      	b.n	800634a <UART_SetConfig+0x2e6>
 800624c:	2304      	movs	r3, #4
 800624e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006252:	e07a      	b.n	800634a <UART_SetConfig+0x2e6>
 8006254:	2308      	movs	r3, #8
 8006256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800625a:	e076      	b.n	800634a <UART_SetConfig+0x2e6>
 800625c:	2310      	movs	r3, #16
 800625e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006262:	e072      	b.n	800634a <UART_SetConfig+0x2e6>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a35      	ldr	r2, [pc, #212]	@ (8006340 <UART_SetConfig+0x2dc>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d12a      	bne.n	80062c4 <UART_SetConfig+0x260>
 800626e:	4b30      	ldr	r3, [pc, #192]	@ (8006330 <UART_SetConfig+0x2cc>)
 8006270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006274:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006278:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800627c:	d01a      	beq.n	80062b4 <UART_SetConfig+0x250>
 800627e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006282:	d81b      	bhi.n	80062bc <UART_SetConfig+0x258>
 8006284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006288:	d00c      	beq.n	80062a4 <UART_SetConfig+0x240>
 800628a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800628e:	d815      	bhi.n	80062bc <UART_SetConfig+0x258>
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <UART_SetConfig+0x238>
 8006294:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006298:	d008      	beq.n	80062ac <UART_SetConfig+0x248>
 800629a:	e00f      	b.n	80062bc <UART_SetConfig+0x258>
 800629c:	2300      	movs	r3, #0
 800629e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062a2:	e052      	b.n	800634a <UART_SetConfig+0x2e6>
 80062a4:	2302      	movs	r3, #2
 80062a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062aa:	e04e      	b.n	800634a <UART_SetConfig+0x2e6>
 80062ac:	2304      	movs	r3, #4
 80062ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062b2:	e04a      	b.n	800634a <UART_SetConfig+0x2e6>
 80062b4:	2308      	movs	r3, #8
 80062b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062ba:	e046      	b.n	800634a <UART_SetConfig+0x2e6>
 80062bc:	2310      	movs	r3, #16
 80062be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062c2:	e042      	b.n	800634a <UART_SetConfig+0x2e6>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a17      	ldr	r2, [pc, #92]	@ (8006328 <UART_SetConfig+0x2c4>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d13a      	bne.n	8006344 <UART_SetConfig+0x2e0>
 80062ce:	4b18      	ldr	r3, [pc, #96]	@ (8006330 <UART_SetConfig+0x2cc>)
 80062d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80062d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062dc:	d01a      	beq.n	8006314 <UART_SetConfig+0x2b0>
 80062de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062e2:	d81b      	bhi.n	800631c <UART_SetConfig+0x2b8>
 80062e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062e8:	d00c      	beq.n	8006304 <UART_SetConfig+0x2a0>
 80062ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062ee:	d815      	bhi.n	800631c <UART_SetConfig+0x2b8>
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <UART_SetConfig+0x298>
 80062f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062f8:	d008      	beq.n	800630c <UART_SetConfig+0x2a8>
 80062fa:	e00f      	b.n	800631c <UART_SetConfig+0x2b8>
 80062fc:	2300      	movs	r3, #0
 80062fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006302:	e022      	b.n	800634a <UART_SetConfig+0x2e6>
 8006304:	2302      	movs	r3, #2
 8006306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800630a:	e01e      	b.n	800634a <UART_SetConfig+0x2e6>
 800630c:	2304      	movs	r3, #4
 800630e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006312:	e01a      	b.n	800634a <UART_SetConfig+0x2e6>
 8006314:	2308      	movs	r3, #8
 8006316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800631a:	e016      	b.n	800634a <UART_SetConfig+0x2e6>
 800631c:	2310      	movs	r3, #16
 800631e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006322:	e012      	b.n	800634a <UART_SetConfig+0x2e6>
 8006324:	efff69f3 	.word	0xefff69f3
 8006328:	40008000 	.word	0x40008000
 800632c:	40013800 	.word	0x40013800
 8006330:	40021000 	.word	0x40021000
 8006334:	40004400 	.word	0x40004400
 8006338:	40004800 	.word	0x40004800
 800633c:	40004c00 	.word	0x40004c00
 8006340:	40005000 	.word	0x40005000
 8006344:	2310      	movs	r3, #16
 8006346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a9f      	ldr	r2, [pc, #636]	@ (80065cc <UART_SetConfig+0x568>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d17a      	bne.n	800644a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006354:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006358:	2b08      	cmp	r3, #8
 800635a:	d824      	bhi.n	80063a6 <UART_SetConfig+0x342>
 800635c:	a201      	add	r2, pc, #4	@ (adr r2, 8006364 <UART_SetConfig+0x300>)
 800635e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006362:	bf00      	nop
 8006364:	08006389 	.word	0x08006389
 8006368:	080063a7 	.word	0x080063a7
 800636c:	08006391 	.word	0x08006391
 8006370:	080063a7 	.word	0x080063a7
 8006374:	08006397 	.word	0x08006397
 8006378:	080063a7 	.word	0x080063a7
 800637c:	080063a7 	.word	0x080063a7
 8006380:	080063a7 	.word	0x080063a7
 8006384:	0800639f 	.word	0x0800639f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006388:	f7fe fc40 	bl	8004c0c <HAL_RCC_GetPCLK1Freq>
 800638c:	61f8      	str	r0, [r7, #28]
        break;
 800638e:	e010      	b.n	80063b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006390:	4b8f      	ldr	r3, [pc, #572]	@ (80065d0 <UART_SetConfig+0x56c>)
 8006392:	61fb      	str	r3, [r7, #28]
        break;
 8006394:	e00d      	b.n	80063b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006396:	f7fe fba1 	bl	8004adc <HAL_RCC_GetSysClockFreq>
 800639a:	61f8      	str	r0, [r7, #28]
        break;
 800639c:	e009      	b.n	80063b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800639e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063a2:	61fb      	str	r3, [r7, #28]
        break;
 80063a4:	e005      	b.n	80063b2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80063b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 80fb 	beq.w	80065b0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	4613      	mov	r3, r2
 80063c0:	005b      	lsls	r3, r3, #1
 80063c2:	4413      	add	r3, r2
 80063c4:	69fa      	ldr	r2, [r7, #28]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d305      	bcc.n	80063d6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063d0:	69fa      	ldr	r2, [r7, #28]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d903      	bls.n	80063de <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80063dc:	e0e8      	b.n	80065b0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	2200      	movs	r2, #0
 80063e2:	461c      	mov	r4, r3
 80063e4:	4615      	mov	r5, r2
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	f04f 0300 	mov.w	r3, #0
 80063ee:	022b      	lsls	r3, r5, #8
 80063f0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80063f4:	0222      	lsls	r2, r4, #8
 80063f6:	68f9      	ldr	r1, [r7, #12]
 80063f8:	6849      	ldr	r1, [r1, #4]
 80063fa:	0849      	lsrs	r1, r1, #1
 80063fc:	2000      	movs	r0, #0
 80063fe:	4688      	mov	r8, r1
 8006400:	4681      	mov	r9, r0
 8006402:	eb12 0a08 	adds.w	sl, r2, r8
 8006406:	eb43 0b09 	adc.w	fp, r3, r9
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	603b      	str	r3, [r7, #0]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006418:	4650      	mov	r0, sl
 800641a:	4659      	mov	r1, fp
 800641c:	f7f9 ff28 	bl	8000270 <__aeabi_uldivmod>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	4613      	mov	r3, r2
 8006426:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800642e:	d308      	bcc.n	8006442 <UART_SetConfig+0x3de>
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006436:	d204      	bcs.n	8006442 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	60da      	str	r2, [r3, #12]
 8006440:	e0b6      	b.n	80065b0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006448:	e0b2      	b.n	80065b0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006452:	d15e      	bne.n	8006512 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006454:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006458:	2b08      	cmp	r3, #8
 800645a:	d828      	bhi.n	80064ae <UART_SetConfig+0x44a>
 800645c:	a201      	add	r2, pc, #4	@ (adr r2, 8006464 <UART_SetConfig+0x400>)
 800645e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006462:	bf00      	nop
 8006464:	08006489 	.word	0x08006489
 8006468:	08006491 	.word	0x08006491
 800646c:	08006499 	.word	0x08006499
 8006470:	080064af 	.word	0x080064af
 8006474:	0800649f 	.word	0x0800649f
 8006478:	080064af 	.word	0x080064af
 800647c:	080064af 	.word	0x080064af
 8006480:	080064af 	.word	0x080064af
 8006484:	080064a7 	.word	0x080064a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006488:	f7fe fbc0 	bl	8004c0c <HAL_RCC_GetPCLK1Freq>
 800648c:	61f8      	str	r0, [r7, #28]
        break;
 800648e:	e014      	b.n	80064ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006490:	f7fe fbd2 	bl	8004c38 <HAL_RCC_GetPCLK2Freq>
 8006494:	61f8      	str	r0, [r7, #28]
        break;
 8006496:	e010      	b.n	80064ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006498:	4b4d      	ldr	r3, [pc, #308]	@ (80065d0 <UART_SetConfig+0x56c>)
 800649a:	61fb      	str	r3, [r7, #28]
        break;
 800649c:	e00d      	b.n	80064ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800649e:	f7fe fb1d 	bl	8004adc <HAL_RCC_GetSysClockFreq>
 80064a2:	61f8      	str	r0, [r7, #28]
        break;
 80064a4:	e009      	b.n	80064ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064aa:	61fb      	str	r3, [r7, #28]
        break;
 80064ac:	e005      	b.n	80064ba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80064b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d077      	beq.n	80065b0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	005a      	lsls	r2, r3, #1
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	085b      	lsrs	r3, r3, #1
 80064ca:	441a      	add	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	2b0f      	cmp	r3, #15
 80064da:	d916      	bls.n	800650a <UART_SetConfig+0x4a6>
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064e2:	d212      	bcs.n	800650a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	f023 030f 	bic.w	r3, r3, #15
 80064ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	085b      	lsrs	r3, r3, #1
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	f003 0307 	and.w	r3, r3, #7
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	8afb      	ldrh	r3, [r7, #22]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	8afa      	ldrh	r2, [r7, #22]
 8006506:	60da      	str	r2, [r3, #12]
 8006508:	e052      	b.n	80065b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006510:	e04e      	b.n	80065b0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006512:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006516:	2b08      	cmp	r3, #8
 8006518:	d827      	bhi.n	800656a <UART_SetConfig+0x506>
 800651a:	a201      	add	r2, pc, #4	@ (adr r2, 8006520 <UART_SetConfig+0x4bc>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	08006545 	.word	0x08006545
 8006524:	0800654d 	.word	0x0800654d
 8006528:	08006555 	.word	0x08006555
 800652c:	0800656b 	.word	0x0800656b
 8006530:	0800655b 	.word	0x0800655b
 8006534:	0800656b 	.word	0x0800656b
 8006538:	0800656b 	.word	0x0800656b
 800653c:	0800656b 	.word	0x0800656b
 8006540:	08006563 	.word	0x08006563
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006544:	f7fe fb62 	bl	8004c0c <HAL_RCC_GetPCLK1Freq>
 8006548:	61f8      	str	r0, [r7, #28]
        break;
 800654a:	e014      	b.n	8006576 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800654c:	f7fe fb74 	bl	8004c38 <HAL_RCC_GetPCLK2Freq>
 8006550:	61f8      	str	r0, [r7, #28]
        break;
 8006552:	e010      	b.n	8006576 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006554:	4b1e      	ldr	r3, [pc, #120]	@ (80065d0 <UART_SetConfig+0x56c>)
 8006556:	61fb      	str	r3, [r7, #28]
        break;
 8006558:	e00d      	b.n	8006576 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800655a:	f7fe fabf 	bl	8004adc <HAL_RCC_GetSysClockFreq>
 800655e:	61f8      	str	r0, [r7, #28]
        break;
 8006560:	e009      	b.n	8006576 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006562:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006566:	61fb      	str	r3, [r7, #28]
        break;
 8006568:	e005      	b.n	8006576 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800656a:	2300      	movs	r3, #0
 800656c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006574:	bf00      	nop
    }

    if (pclk != 0U)
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d019      	beq.n	80065b0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	085a      	lsrs	r2, r3, #1
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	441a      	add	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	fbb2 f3f3 	udiv	r3, r2, r3
 800658e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	2b0f      	cmp	r3, #15
 8006594:	d909      	bls.n	80065aa <UART_SetConfig+0x546>
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800659c:	d205      	bcs.n	80065aa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	60da      	str	r2, [r3, #12]
 80065a8:	e002      	b.n	80065b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80065bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3728      	adds	r7, #40	@ 0x28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065ca:	bf00      	nop
 80065cc:	40008000 	.word	0x40008000
 80065d0:	00f42400 	.word	0x00f42400

080065d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e0:	f003 0308 	and.w	r3, r3, #8
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00a      	beq.n	80065fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00a      	beq.n	8006642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006646:	f003 0304 	and.w	r3, r3, #4
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00a      	beq.n	8006664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006668:	f003 0310 	and.w	r3, r3, #16
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00a      	beq.n	8006686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800668a:	f003 0320 	and.w	r3, r3, #32
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00a      	beq.n	80066a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	430a      	orrs	r2, r1
 80066a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d01a      	beq.n	80066ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066d2:	d10a      	bne.n	80066ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	605a      	str	r2, [r3, #4]
  }
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b098      	sub	sp, #96	@ 0x60
 800671c:	af02      	add	r7, sp, #8
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006728:	f7fb f8f4 	bl	8001914 <HAL_GetTick>
 800672c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0308 	and.w	r3, r3, #8
 8006738:	2b08      	cmp	r3, #8
 800673a:	d12e      	bne.n	800679a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800673c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006744:	2200      	movs	r2, #0
 8006746:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f88c 	bl	8006868 <UART_WaitOnFlagUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d021      	beq.n	800679a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800675e:	e853 3f00 	ldrex	r3, [r3]
 8006762:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800676a:	653b      	str	r3, [r7, #80]	@ 0x50
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	461a      	mov	r2, r3
 8006772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006774:	647b      	str	r3, [r7, #68]	@ 0x44
 8006776:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006778:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800677a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800677c:	e841 2300 	strex	r3, r2, [r1]
 8006780:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1e6      	bne.n	8006756 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2220      	movs	r2, #32
 800678c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e062      	b.n	8006860 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0304 	and.w	r3, r3, #4
 80067a4:	2b04      	cmp	r3, #4
 80067a6:	d149      	bne.n	800683c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067b0:	2200      	movs	r2, #0
 80067b2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f856 	bl	8006868 <UART_WaitOnFlagUntilTimeout>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d03c      	beq.n	800683c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ca:	e853 3f00 	ldrex	r3, [r3]
 80067ce:	623b      	str	r3, [r7, #32]
   return(result);
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	461a      	mov	r2, r3
 80067de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80067e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067e8:	e841 2300 	strex	r3, r2, [r1]
 80067ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1e6      	bne.n	80067c2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3308      	adds	r3, #8
 80067fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	e853 3f00 	ldrex	r3, [r3]
 8006802:	60fb      	str	r3, [r7, #12]
   return(result);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 0301 	bic.w	r3, r3, #1
 800680a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3308      	adds	r3, #8
 8006812:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006814:	61fa      	str	r2, [r7, #28]
 8006816:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006818:	69b9      	ldr	r1, [r7, #24]
 800681a:	69fa      	ldr	r2, [r7, #28]
 800681c:	e841 2300 	strex	r3, r2, [r1]
 8006820:	617b      	str	r3, [r7, #20]
   return(result);
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1e5      	bne.n	80067f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2220      	movs	r2, #32
 800682c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e011      	b.n	8006860 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2220      	movs	r2, #32
 8006840:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2220      	movs	r2, #32
 8006846:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3758      	adds	r7, #88	@ 0x58
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	603b      	str	r3, [r7, #0]
 8006874:	4613      	mov	r3, r2
 8006876:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006878:	e04f      	b.n	800691a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006880:	d04b      	beq.n	800691a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006882:	f7fb f847 	bl	8001914 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	429a      	cmp	r2, r3
 8006890:	d302      	bcc.n	8006898 <UART_WaitOnFlagUntilTimeout+0x30>
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d101      	bne.n	800689c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e04e      	b.n	800693a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0304 	and.w	r3, r3, #4
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d037      	beq.n	800691a <UART_WaitOnFlagUntilTimeout+0xb2>
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2b80      	cmp	r3, #128	@ 0x80
 80068ae:	d034      	beq.n	800691a <UART_WaitOnFlagUntilTimeout+0xb2>
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2b40      	cmp	r3, #64	@ 0x40
 80068b4:	d031      	beq.n	800691a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	f003 0308 	and.w	r3, r3, #8
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d110      	bne.n	80068e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2208      	movs	r2, #8
 80068ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f000 f838 	bl	8006942 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2208      	movs	r2, #8
 80068d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e029      	b.n	800693a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068f4:	d111      	bne.n	800691a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 f81e 	bl	8006942 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2220      	movs	r2, #32
 800690a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e00f      	b.n	800693a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69da      	ldr	r2, [r3, #28]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	4013      	ands	r3, r2
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	429a      	cmp	r2, r3
 8006928:	bf0c      	ite	eq
 800692a:	2301      	moveq	r3, #1
 800692c:	2300      	movne	r3, #0
 800692e:	b2db      	uxtb	r3, r3
 8006930:	461a      	mov	r2, r3
 8006932:	79fb      	ldrb	r3, [r7, #7]
 8006934:	429a      	cmp	r2, r3
 8006936:	d0a0      	beq.n	800687a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006942:	b480      	push	{r7}
 8006944:	b095      	sub	sp, #84	@ 0x54
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006952:	e853 3f00 	ldrex	r3, [r3]
 8006956:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800695e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	461a      	mov	r2, r3
 8006966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006968:	643b      	str	r3, [r7, #64]	@ 0x40
 800696a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800696e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006970:	e841 2300 	strex	r3, r2, [r1]
 8006974:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1e6      	bne.n	800694a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3308      	adds	r3, #8
 8006982:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	e853 3f00 	ldrex	r3, [r3]
 800698a:	61fb      	str	r3, [r7, #28]
   return(result);
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	f023 0301 	bic.w	r3, r3, #1
 8006992:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3308      	adds	r3, #8
 800699a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800699c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800699e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069a4:	e841 2300 	strex	r3, r2, [r1]
 80069a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1e5      	bne.n	800697c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d118      	bne.n	80069ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	e853 3f00 	ldrex	r3, [r3]
 80069c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f023 0310 	bic.w	r3, r3, #16
 80069cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	461a      	mov	r2, r3
 80069d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069d6:	61bb      	str	r3, [r7, #24]
 80069d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069da:	6979      	ldr	r1, [r7, #20]
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	e841 2300 	strex	r3, r2, [r1]
 80069e2:	613b      	str	r3, [r7, #16]
   return(result);
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1e6      	bne.n	80069b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2220      	movs	r2, #32
 80069ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80069fe:	bf00      	nop
 8006a00:	3754      	adds	r7, #84	@ 0x54
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	f107 001c 	add.w	r0, r7, #28
 8006a18:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fa69 	bl	8006f00 <USB_CoreReset>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006a32:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	639a      	str	r2, [r3, #56]	@ 0x38
 8006a46:	e005      	b.n	8006a54 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a4c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a60:	b004      	add	sp, #16
 8006a62:	4770      	bx	lr

08006a64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f023 0201 	bic.w	r2, r3, #1
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	460b      	mov	r3, r1
 8006a90:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006aa2:	78fb      	ldrb	r3, [r7, #3]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d115      	bne.n	8006ad4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006ab4:	200a      	movs	r0, #10
 8006ab6:	f7fa ff39 	bl	800192c <HAL_Delay>
      ms += 10U;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	330a      	adds	r3, #10
 8006abe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fa0f 	bl	8006ee4 <USB_GetMode>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d01e      	beq.n	8006b0a <USB_SetCurrentMode+0x84>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2bc7      	cmp	r3, #199	@ 0xc7
 8006ad0:	d9f0      	bls.n	8006ab4 <USB_SetCurrentMode+0x2e>
 8006ad2:	e01a      	b.n	8006b0a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ad4:	78fb      	ldrb	r3, [r7, #3]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d115      	bne.n	8006b06 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006ae6:	200a      	movs	r0, #10
 8006ae8:	f7fa ff20 	bl	800192c <HAL_Delay>
      ms += 10U;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	330a      	adds	r3, #10
 8006af0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f9f6 	bl	8006ee4 <USB_GetMode>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d005      	beq.n	8006b0a <USB_SetCurrentMode+0x84>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2bc7      	cmp	r3, #199	@ 0xc7
 8006b02:	d9f0      	bls.n	8006ae6 <USB_SetCurrentMode+0x60>
 8006b04:	e001      	b.n	8006b0a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e005      	b.n	8006b16 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2bc8      	cmp	r3, #200	@ 0xc8
 8006b0e:	d101      	bne.n	8006b14 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e000      	b.n	8006b16 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
	...

08006b20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b20:	b084      	sub	sp, #16
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b086      	sub	sp, #24
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006b2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	613b      	str	r3, [r7, #16]
 8006b3e:	e009      	b.n	8006b54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	3340      	adds	r3, #64	@ 0x40
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	3301      	adds	r3, #1
 8006b52:	613b      	str	r3, [r7, #16]
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	2b0e      	cmp	r3, #14
 8006b58:	d9f2      	bls.n	8006b40 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b5a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d11c      	bne.n	8006b9c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b70:	f043 0302 	orr.w	r3, r3, #2
 8006b74:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b7a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	e005      	b.n	8006ba8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006bae:	461a      	mov	r2, r3
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006bb4:	2103      	movs	r1, #3
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f95a 	bl	8006e70 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006bbc:	2110      	movs	r1, #16
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f8f6 	bl	8006db0 <USB_FlushTxFifo>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f920 	bl	8006e14 <USB_FlushRxFifo>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006be4:	461a      	mov	r2, r3
 8006be6:	2300      	movs	r3, #0
 8006be8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	2300      	movs	r3, #0
 8006c00:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c02:	2300      	movs	r3, #0
 8006c04:	613b      	str	r3, [r7, #16]
 8006c06:	e043      	b.n	8006c90 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	015a      	lsls	r2, r3, #5
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c1e:	d118      	bne.n	8006c52 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10a      	bne.n	8006c3c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	015a      	lsls	r2, r3, #5
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c32:	461a      	mov	r2, r3
 8006c34:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c38:	6013      	str	r3, [r2, #0]
 8006c3a:	e013      	b.n	8006c64 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c48:	461a      	mov	r2, r3
 8006c4a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006c4e:	6013      	str	r3, [r2, #0]
 8006c50:	e008      	b.n	8006c64 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c5e:	461a      	mov	r2, r3
 8006c60:	2300      	movs	r3, #0
 8006c62:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c70:	461a      	mov	r2, r3
 8006c72:	2300      	movs	r3, #0
 8006c74:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	015a      	lsls	r2, r3, #5
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c82:	461a      	mov	r2, r3
 8006c84:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	613b      	str	r3, [r7, #16]
 8006c90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c94:	461a      	mov	r2, r3
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d3b5      	bcc.n	8006c08 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	613b      	str	r3, [r7, #16]
 8006ca0:	e043      	b.n	8006d2a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cb8:	d118      	bne.n	8006cec <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d10a      	bne.n	8006cd6 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	015a      	lsls	r2, r3, #5
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ccc:	461a      	mov	r2, r3
 8006cce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006cd2:	6013      	str	r3, [r2, #0]
 8006cd4:	e013      	b.n	8006cfe <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	015a      	lsls	r2, r3, #5
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	4413      	add	r3, r2
 8006cde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006ce8:	6013      	str	r3, [r2, #0]
 8006cea:	e008      	b.n	8006cfe <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	015a      	lsls	r2, r3, #5
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006d22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	3301      	adds	r3, #1
 8006d28:	613b      	str	r3, [r7, #16]
 8006d2a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006d2e:	461a      	mov	r2, r3
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d3b5      	bcc.n	8006ca2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d48:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006d56:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	f043 0210 	orr.w	r2, r3, #16
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	699a      	ldr	r2, [r3, #24]
 8006d68:	4b10      	ldr	r3, [pc, #64]	@ (8006dac <USB_DevInit+0x28c>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d70:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d005      	beq.n	8006d84 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	f043 0208 	orr.w	r2, r3, #8
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d84:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d107      	bne.n	8006d9c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d94:	f043 0304 	orr.w	r3, r3, #4
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3718      	adds	r7, #24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006da8:	b004      	add	sp, #16
 8006daa:	4770      	bx	lr
 8006dac:	803c3800 	.word	0x803c3800

08006db0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006dca:	d901      	bls.n	8006dd0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e01b      	b.n	8006e08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	daf2      	bge.n	8006dbe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	019b      	lsls	r3, r3, #6
 8006de0:	f043 0220 	orr.w	r2, r3, #32
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	3301      	adds	r3, #1
 8006dec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006df4:	d901      	bls.n	8006dfa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e006      	b.n	8006e08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f003 0320 	and.w	r3, r3, #32
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	d0f0      	beq.n	8006de8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	3301      	adds	r3, #1
 8006e24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e2c:	d901      	bls.n	8006e32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e018      	b.n	8006e64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	daf2      	bge.n	8006e20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2210      	movs	r2, #16
 8006e42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	3301      	adds	r3, #1
 8006e48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e50:	d901      	bls.n	8006e56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e006      	b.n	8006e64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	f003 0310 	and.w	r3, r3, #16
 8006e5e:	2b10      	cmp	r3, #16
 8006e60:	d0f0      	beq.n	8006e44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	78fb      	ldrb	r3, [r7, #3]
 8006e8a:	68f9      	ldr	r1, [r7, #12]
 8006e8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e90:	4313      	orrs	r3, r2
 8006e92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b085      	sub	sp, #20
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006ebc:	f023 0303 	bic.w	r3, r3, #3
 8006ec0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ed0:	f043 0302 	orr.w	r3, r3, #2
 8006ed4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	f003 0301 	and.w	r3, r3, #1
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f18:	d901      	bls.n	8006f1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e01b      	b.n	8006f56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	daf2      	bge.n	8006f0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	f043 0201 	orr.w	r2, r3, #1
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f42:	d901      	bls.n	8006f48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e006      	b.n	8006f56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d0f0      	beq.n	8006f36 <USB_CoreReset+0x36>

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
	...

08006f64 <__NVIC_SetPriority>:
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	6039      	str	r1, [r7, #0]
 8006f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	db0a      	blt.n	8006f8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	b2da      	uxtb	r2, r3
 8006f7c:	490c      	ldr	r1, [pc, #48]	@ (8006fb0 <__NVIC_SetPriority+0x4c>)
 8006f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f82:	0112      	lsls	r2, r2, #4
 8006f84:	b2d2      	uxtb	r2, r2
 8006f86:	440b      	add	r3, r1
 8006f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006f8c:	e00a      	b.n	8006fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	4908      	ldr	r1, [pc, #32]	@ (8006fb4 <__NVIC_SetPriority+0x50>)
 8006f94:	79fb      	ldrb	r3, [r7, #7]
 8006f96:	f003 030f 	and.w	r3, r3, #15
 8006f9a:	3b04      	subs	r3, #4
 8006f9c:	0112      	lsls	r2, r2, #4
 8006f9e:	b2d2      	uxtb	r2, r2
 8006fa0:	440b      	add	r3, r1
 8006fa2:	761a      	strb	r2, [r3, #24]
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	e000e100 	.word	0xe000e100
 8006fb4:	e000ed00 	.word	0xe000ed00

08006fb8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	f06f 0004 	mvn.w	r0, #4
 8006fc2:	f7ff ffcf 	bl	8006f64 <__NVIC_SetPriority>
#endif
}
 8006fc6:	bf00      	nop
 8006fc8:	bd80      	pop	{r7, pc}
	...

08006fcc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fd2:	f3ef 8305 	mrs	r3, IPSR
 8006fd6:	603b      	str	r3, [r7, #0]
  return(result);
 8006fd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d003      	beq.n	8006fe6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006fde:	f06f 0305 	mvn.w	r3, #5
 8006fe2:	607b      	str	r3, [r7, #4]
 8006fe4:	e00c      	b.n	8007000 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8007010 <osKernelInitialize+0x44>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d105      	bne.n	8006ffa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006fee:	4b08      	ldr	r3, [pc, #32]	@ (8007010 <osKernelInitialize+0x44>)
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	607b      	str	r3, [r7, #4]
 8006ff8:	e002      	b.n	8007000 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8006ffe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007000:	687b      	ldr	r3, [r7, #4]
}
 8007002:	4618      	mov	r0, r3
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	200008a0 	.word	0x200008a0

08007014 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800701a:	f3ef 8305 	mrs	r3, IPSR
 800701e:	603b      	str	r3, [r7, #0]
  return(result);
 8007020:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007026:	f06f 0305 	mvn.w	r3, #5
 800702a:	607b      	str	r3, [r7, #4]
 800702c:	e010      	b.n	8007050 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800702e:	4b0b      	ldr	r3, [pc, #44]	@ (800705c <osKernelStart+0x48>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d109      	bne.n	800704a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007036:	f7ff ffbf 	bl	8006fb8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800703a:	4b08      	ldr	r3, [pc, #32]	@ (800705c <osKernelStart+0x48>)
 800703c:	2202      	movs	r2, #2
 800703e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007040:	f001 fcca 	bl	80089d8 <vTaskStartScheduler>
      stat = osOK;
 8007044:	2300      	movs	r3, #0
 8007046:	607b      	str	r3, [r7, #4]
 8007048:	e002      	b.n	8007050 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800704a:	f04f 33ff 	mov.w	r3, #4294967295
 800704e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007050:	687b      	ldr	r3, [r7, #4]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	200008a0 	.word	0x200008a0

08007060 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007060:	b580      	push	{r7, lr}
 8007062:	b08e      	sub	sp, #56	@ 0x38
 8007064:	af04      	add	r7, sp, #16
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800706c:	2300      	movs	r3, #0
 800706e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007070:	f3ef 8305 	mrs	r3, IPSR
 8007074:	617b      	str	r3, [r7, #20]
  return(result);
 8007076:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007078:	2b00      	cmp	r3, #0
 800707a:	d17e      	bne.n	800717a <osThreadNew+0x11a>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d07b      	beq.n	800717a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007082:	2380      	movs	r3, #128	@ 0x80
 8007084:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007086:	2318      	movs	r3, #24
 8007088:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800708a:	2300      	movs	r3, #0
 800708c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800708e:	f04f 33ff 	mov.w	r3, #4294967295
 8007092:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d045      	beq.n	8007126 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d002      	beq.n	80070a8 <osThreadNew+0x48>
        name = attr->name;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d008      	beq.n	80070ce <osThreadNew+0x6e>
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	2b38      	cmp	r3, #56	@ 0x38
 80070c0:	d805      	bhi.n	80070ce <osThreadNew+0x6e>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <osThreadNew+0x72>
        return (NULL);
 80070ce:	2300      	movs	r3, #0
 80070d0:	e054      	b.n	800717c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d003      	beq.n	80070e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	089b      	lsrs	r3, r3, #2
 80070e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00e      	beq.n	8007108 <osThreadNew+0xa8>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	2b5b      	cmp	r3, #91	@ 0x5b
 80070f0:	d90a      	bls.n	8007108 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d006      	beq.n	8007108 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d002      	beq.n	8007108 <osThreadNew+0xa8>
        mem = 1;
 8007102:	2301      	movs	r3, #1
 8007104:	61bb      	str	r3, [r7, #24]
 8007106:	e010      	b.n	800712a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10c      	bne.n	800712a <osThreadNew+0xca>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d108      	bne.n	800712a <osThreadNew+0xca>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d104      	bne.n	800712a <osThreadNew+0xca>
          mem = 0;
 8007120:	2300      	movs	r3, #0
 8007122:	61bb      	str	r3, [r7, #24]
 8007124:	e001      	b.n	800712a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007126:	2300      	movs	r3, #0
 8007128:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d110      	bne.n	8007152 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007138:	9202      	str	r2, [sp, #8]
 800713a:	9301      	str	r3, [sp, #4]
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	6a3a      	ldr	r2, [r7, #32]
 8007144:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f001 fa6a 	bl	8008620 <xTaskCreateStatic>
 800714c:	4603      	mov	r3, r0
 800714e:	613b      	str	r3, [r7, #16]
 8007150:	e013      	b.n	800717a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d110      	bne.n	800717a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	b29a      	uxth	r2, r3
 800715c:	f107 0310 	add.w	r3, r7, #16
 8007160:	9301      	str	r3, [sp, #4]
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f001 fab8 	bl	80086e0 <xTaskCreate>
 8007170:	4603      	mov	r3, r0
 8007172:	2b01      	cmp	r3, #1
 8007174:	d001      	beq.n	800717a <osThreadNew+0x11a>
            hTask = NULL;
 8007176:	2300      	movs	r3, #0
 8007178:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800717a:	693b      	ldr	r3, [r7, #16]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3728      	adds	r7, #40	@ 0x28
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800718c:	f3ef 8305 	mrs	r3, IPSR
 8007190:	60bb      	str	r3, [r7, #8]
  return(result);
 8007192:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <osDelay+0x1c>
    stat = osErrorISR;
 8007198:	f06f 0305 	mvn.w	r3, #5
 800719c:	60fb      	str	r3, [r7, #12]
 800719e:	e007      	b.n	80071b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80071a0:	2300      	movs	r3, #0
 80071a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d002      	beq.n	80071b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f001 fbde 	bl	800896c <vTaskDelay>
    }
  }

  return (stat);
 80071b0:	68fb      	ldr	r3, [r7, #12]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b08a      	sub	sp, #40	@ 0x28
 80071be:	af02      	add	r7, sp, #8
 80071c0:	60f8      	str	r0, [r7, #12]
 80071c2:	60b9      	str	r1, [r7, #8]
 80071c4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80071c6:	2300      	movs	r3, #0
 80071c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071ca:	f3ef 8305 	mrs	r3, IPSR
 80071ce:	613b      	str	r3, [r7, #16]
  return(result);
 80071d0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d175      	bne.n	80072c2 <osSemaphoreNew+0x108>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d072      	beq.n	80072c2 <osSemaphoreNew+0x108>
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d86e      	bhi.n	80072c2 <osSemaphoreNew+0x108>
    mem = -1;
 80071e4:	f04f 33ff 	mov.w	r3, #4294967295
 80071e8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d015      	beq.n	800721c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d006      	beq.n	8007206 <osSemaphoreNew+0x4c>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	2b4f      	cmp	r3, #79	@ 0x4f
 80071fe:	d902      	bls.n	8007206 <osSemaphoreNew+0x4c>
        mem = 1;
 8007200:	2301      	movs	r3, #1
 8007202:	61bb      	str	r3, [r7, #24]
 8007204:	e00c      	b.n	8007220 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d108      	bne.n	8007220 <osSemaphoreNew+0x66>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d104      	bne.n	8007220 <osSemaphoreNew+0x66>
          mem = 0;
 8007216:	2300      	movs	r3, #0
 8007218:	61bb      	str	r3, [r7, #24]
 800721a:	e001      	b.n	8007220 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800721c:	2300      	movs	r3, #0
 800721e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007226:	d04c      	beq.n	80072c2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d128      	bne.n	8007280 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d10a      	bne.n	800724a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	2203      	movs	r2, #3
 800723a:	9200      	str	r2, [sp, #0]
 800723c:	2200      	movs	r2, #0
 800723e:	2100      	movs	r1, #0
 8007240:	2001      	movs	r0, #1
 8007242:	f000 fa2b 	bl	800769c <xQueueGenericCreateStatic>
 8007246:	61f8      	str	r0, [r7, #28]
 8007248:	e005      	b.n	8007256 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800724a:	2203      	movs	r2, #3
 800724c:	2100      	movs	r1, #0
 800724e:	2001      	movs	r0, #1
 8007250:	f000 faa1 	bl	8007796 <xQueueGenericCreate>
 8007254:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d022      	beq.n	80072a2 <osSemaphoreNew+0xe8>
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d01f      	beq.n	80072a2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007262:	2300      	movs	r3, #0
 8007264:	2200      	movs	r2, #0
 8007266:	2100      	movs	r1, #0
 8007268:	69f8      	ldr	r0, [r7, #28]
 800726a:	f000 fb61 	bl	8007930 <xQueueGenericSend>
 800726e:	4603      	mov	r3, r0
 8007270:	2b01      	cmp	r3, #1
 8007272:	d016      	beq.n	80072a2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007274:	69f8      	ldr	r0, [r7, #28]
 8007276:	f000 ffff 	bl	8008278 <vQueueDelete>
            hSemaphore = NULL;
 800727a:	2300      	movs	r3, #0
 800727c:	61fb      	str	r3, [r7, #28]
 800727e:	e010      	b.n	80072a2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d108      	bne.n	8007298 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	461a      	mov	r2, r3
 800728c:	68b9      	ldr	r1, [r7, #8]
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 fadf 	bl	8007852 <xQueueCreateCountingSemaphoreStatic>
 8007294:	61f8      	str	r0, [r7, #28]
 8007296:	e004      	b.n	80072a2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007298:	68b9      	ldr	r1, [r7, #8]
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f000 fb12 	bl	80078c4 <xQueueCreateCountingSemaphore>
 80072a0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00c      	beq.n	80072c2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	e001      	b.n	80072ba <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80072b6:	2300      	movs	r3, #0
 80072b8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80072ba:	6979      	ldr	r1, [r7, #20]
 80072bc:	69f8      	ldr	r0, [r7, #28]
 80072be:	f001 f927 	bl	8008510 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80072c2:	69fb      	ldr	r3, [r7, #28]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3720      	adds	r7, #32
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80072da:	2300      	movs	r3, #0
 80072dc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d103      	bne.n	80072ec <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80072e4:	f06f 0303 	mvn.w	r3, #3
 80072e8:	617b      	str	r3, [r7, #20]
 80072ea:	e039      	b.n	8007360 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072ec:	f3ef 8305 	mrs	r3, IPSR
 80072f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80072f2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d022      	beq.n	800733e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80072fe:	f06f 0303 	mvn.w	r3, #3
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	e02c      	b.n	8007360 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8007306:	2300      	movs	r3, #0
 8007308:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800730a:	f107 0308 	add.w	r3, r7, #8
 800730e:	461a      	mov	r2, r3
 8007310:	2100      	movs	r1, #0
 8007312:	6938      	ldr	r0, [r7, #16]
 8007314:	f000 ff2e 	bl	8008174 <xQueueReceiveFromISR>
 8007318:	4603      	mov	r3, r0
 800731a:	2b01      	cmp	r3, #1
 800731c:	d003      	beq.n	8007326 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800731e:	f06f 0302 	mvn.w	r3, #2
 8007322:	617b      	str	r3, [r7, #20]
 8007324:	e01c      	b.n	8007360 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d019      	beq.n	8007360 <osSemaphoreAcquire+0x94>
 800732c:	4b0f      	ldr	r3, [pc, #60]	@ (800736c <osSemaphoreAcquire+0xa0>)
 800732e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	e010      	b.n	8007360 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6938      	ldr	r0, [r7, #16]
 8007342:	f000 fe07 	bl	8007f54 <xQueueSemaphoreTake>
 8007346:	4603      	mov	r3, r0
 8007348:	2b01      	cmp	r3, #1
 800734a:	d009      	beq.n	8007360 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d003      	beq.n	800735a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8007352:	f06f 0301 	mvn.w	r3, #1
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	e002      	b.n	8007360 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800735a:	f06f 0302 	mvn.w	r3, #2
 800735e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007360:	697b      	ldr	r3, [r7, #20]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	e000ed04 	.word	0xe000ed04

08007370 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800737c:	2300      	movs	r3, #0
 800737e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d103      	bne.n	800738e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007386:	f06f 0303 	mvn.w	r3, #3
 800738a:	617b      	str	r3, [r7, #20]
 800738c:	e02c      	b.n	80073e8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800738e:	f3ef 8305 	mrs	r3, IPSR
 8007392:	60fb      	str	r3, [r7, #12]
  return(result);
 8007394:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007396:	2b00      	cmp	r3, #0
 8007398:	d01a      	beq.n	80073d0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800739a:	2300      	movs	r3, #0
 800739c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800739e:	f107 0308 	add.w	r3, r7, #8
 80073a2:	4619      	mov	r1, r3
 80073a4:	6938      	ldr	r0, [r7, #16]
 80073a6:	f000 fc63 	bl	8007c70 <xQueueGiveFromISR>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d003      	beq.n	80073b8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80073b0:	f06f 0302 	mvn.w	r3, #2
 80073b4:	617b      	str	r3, [r7, #20]
 80073b6:	e017      	b.n	80073e8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d014      	beq.n	80073e8 <osSemaphoreRelease+0x78>
 80073be:	4b0d      	ldr	r3, [pc, #52]	@ (80073f4 <osSemaphoreRelease+0x84>)
 80073c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	e00b      	b.n	80073e8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80073d0:	2300      	movs	r3, #0
 80073d2:	2200      	movs	r2, #0
 80073d4:	2100      	movs	r1, #0
 80073d6:	6938      	ldr	r0, [r7, #16]
 80073d8:	f000 faaa 	bl	8007930 <xQueueGenericSend>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d002      	beq.n	80073e8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80073e2:	f06f 0302 	mvn.w	r3, #2
 80073e6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80073e8:	697b      	ldr	r3, [r7, #20]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3718      	adds	r7, #24
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	e000ed04 	.word	0xe000ed04

080073f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	4a07      	ldr	r2, [pc, #28]	@ (8007424 <vApplicationGetIdleTaskMemory+0x2c>)
 8007408:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	4a06      	ldr	r2, [pc, #24]	@ (8007428 <vApplicationGetIdleTaskMemory+0x30>)
 800740e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2280      	movs	r2, #128	@ 0x80
 8007414:	601a      	str	r2, [r3, #0]
}
 8007416:	bf00      	nop
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	200008a4 	.word	0x200008a4
 8007428:	20000900 	.word	0x20000900

0800742c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4a07      	ldr	r2, [pc, #28]	@ (8007458 <vApplicationGetTimerTaskMemory+0x2c>)
 800743c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	4a06      	ldr	r2, [pc, #24]	@ (800745c <vApplicationGetTimerTaskMemory+0x30>)
 8007442:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800744a:	601a      	str	r2, [r3, #0]
}
 800744c:	bf00      	nop
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	20000b00 	.word	0x20000b00
 800745c:	20000b5c 	.word	0x20000b5c

08007460 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f103 0208 	add.w	r2, r3, #8
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f04f 32ff 	mov.w	r2, #4294967295
 8007478:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f103 0208 	add.w	r2, r3, #8
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f103 0208 	add.w	r2, r3, #8
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80074ae:	bf00      	nop
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074ba:	b480      	push	{r7}
 80074bc:	b085      	sub	sp, #20
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	683a      	ldr	r2, [r7, #0]
 80074de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	601a      	str	r2, [r3, #0]
}
 80074f6:	bf00      	nop
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007502:	b480      	push	{r7}
 8007504:	b085      	sub	sp, #20
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007518:	d103      	bne.n	8007522 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	60fb      	str	r3, [r7, #12]
 8007520:	e00c      	b.n	800753c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	3308      	adds	r3, #8
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	e002      	b.n	8007530 <vListInsert+0x2e>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	60fb      	str	r3, [r7, #12]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	429a      	cmp	r2, r3
 800753a:	d2f6      	bcs.n	800752a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	685a      	ldr	r2, [r3, #4]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	683a      	ldr	r2, [r7, #0]
 8007556:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	601a      	str	r2, [r3, #0]
}
 8007568:	bf00      	nop
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	6892      	ldr	r2, [r2, #8]
 800758a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	6852      	ldr	r2, [r2, #4]
 8007594:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	429a      	cmp	r2, r3
 800759e:	d103      	bne.n	80075a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	1e5a      	subs	r2, r3, #1
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3714      	adds	r7, #20
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10b      	bne.n	80075f4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80075ee:	bf00      	nop
 80075f0:	bf00      	nop
 80075f2:	e7fd      	b.n	80075f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80075f4:	f002 fca8 	bl	8009f48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007600:	68f9      	ldr	r1, [r7, #12]
 8007602:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007604:	fb01 f303 	mul.w	r3, r1, r3
 8007608:	441a      	add	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007624:	3b01      	subs	r3, #1
 8007626:	68f9      	ldr	r1, [r7, #12]
 8007628:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800762a:	fb01 f303 	mul.w	r3, r1, r3
 800762e:	441a      	add	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	22ff      	movs	r2, #255	@ 0xff
 8007638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	22ff      	movs	r2, #255	@ 0xff
 8007640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d114      	bne.n	8007674 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d01a      	beq.n	8007688 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	3310      	adds	r3, #16
 8007656:	4618      	mov	r0, r3
 8007658:	f001 fc4c 	bl	8008ef4 <xTaskRemoveFromEventList>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d012      	beq.n	8007688 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007662:	4b0d      	ldr	r3, [pc, #52]	@ (8007698 <xQueueGenericReset+0xd0>)
 8007664:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007668:	601a      	str	r2, [r3, #0]
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	e009      	b.n	8007688 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	3310      	adds	r3, #16
 8007678:	4618      	mov	r0, r3
 800767a:	f7ff fef1 	bl	8007460 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	3324      	adds	r3, #36	@ 0x24
 8007682:	4618      	mov	r0, r3
 8007684:	f7ff feec 	bl	8007460 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007688:	f002 fc90 	bl	8009fac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800768c:	2301      	movs	r3, #1
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	e000ed04 	.word	0xe000ed04

0800769c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800769c:	b580      	push	{r7, lr}
 800769e:	b08e      	sub	sp, #56	@ 0x38
 80076a0:	af02      	add	r7, sp, #8
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10b      	bne.n	80076c8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80076c2:	bf00      	nop
 80076c4:	bf00      	nop
 80076c6:	e7fd      	b.n	80076c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10b      	bne.n	80076e6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80076ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80076e0:	bf00      	nop
 80076e2:	bf00      	nop
 80076e4:	e7fd      	b.n	80076e2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d002      	beq.n	80076f2 <xQueueGenericCreateStatic+0x56>
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d001      	beq.n	80076f6 <xQueueGenericCreateStatic+0x5a>
 80076f2:	2301      	movs	r3, #1
 80076f4:	e000      	b.n	80076f8 <xQueueGenericCreateStatic+0x5c>
 80076f6:	2300      	movs	r3, #0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10b      	bne.n	8007714 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80076fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007700:	f383 8811 	msr	BASEPRI, r3
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	623b      	str	r3, [r7, #32]
}
 800770e:	bf00      	nop
 8007710:	bf00      	nop
 8007712:	e7fd      	b.n	8007710 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d102      	bne.n	8007720 <xQueueGenericCreateStatic+0x84>
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d101      	bne.n	8007724 <xQueueGenericCreateStatic+0x88>
 8007720:	2301      	movs	r3, #1
 8007722:	e000      	b.n	8007726 <xQueueGenericCreateStatic+0x8a>
 8007724:	2300      	movs	r3, #0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10b      	bne.n	8007742 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	61fb      	str	r3, [r7, #28]
}
 800773c:	bf00      	nop
 800773e:	bf00      	nop
 8007740:	e7fd      	b.n	800773e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007742:	2350      	movs	r3, #80	@ 0x50
 8007744:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	2b50      	cmp	r3, #80	@ 0x50
 800774a:	d00b      	beq.n	8007764 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800774c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007750:	f383 8811 	msr	BASEPRI, r3
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	61bb      	str	r3, [r7, #24]
}
 800775e:	bf00      	nop
 8007760:	bf00      	nop
 8007762:	e7fd      	b.n	8007760 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007764:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800776a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00d      	beq.n	800778c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007778:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800777c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	4613      	mov	r3, r2
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	68b9      	ldr	r1, [r7, #8]
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 f840 	bl	800780c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800778c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800778e:	4618      	mov	r0, r3
 8007790:	3730      	adds	r7, #48	@ 0x30
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007796:	b580      	push	{r7, lr}
 8007798:	b08a      	sub	sp, #40	@ 0x28
 800779a:	af02      	add	r7, sp, #8
 800779c:	60f8      	str	r0, [r7, #12]
 800779e:	60b9      	str	r1, [r7, #8]
 80077a0:	4613      	mov	r3, r2
 80077a2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d10b      	bne.n	80077c2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80077aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	613b      	str	r3, [r7, #16]
}
 80077bc:	bf00      	nop
 80077be:	bf00      	nop
 80077c0:	e7fd      	b.n	80077be <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	fb02 f303 	mul.w	r3, r2, r3
 80077ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	3350      	adds	r3, #80	@ 0x50
 80077d0:	4618      	mov	r0, r3
 80077d2:	f002 fcdb 	bl	800a18c <pvPortMalloc>
 80077d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d011      	beq.n	8007802 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	3350      	adds	r3, #80	@ 0x50
 80077e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077f0:	79fa      	ldrb	r2, [r7, #7]
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	4613      	mov	r3, r2
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	68b9      	ldr	r1, [r7, #8]
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 f805 	bl	800780c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007802:	69bb      	ldr	r3, [r7, #24]
	}
 8007804:	4618      	mov	r0, r3
 8007806:	3720      	adds	r7, #32
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
 8007818:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d103      	bne.n	8007828 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	69ba      	ldr	r2, [r7, #24]
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	e002      	b.n	800782e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800783a:	2101      	movs	r1, #1
 800783c:	69b8      	ldr	r0, [r7, #24]
 800783e:	f7ff fec3 	bl	80075c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	78fa      	ldrb	r2, [r7, #3]
 8007846:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800784a:	bf00      	nop
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007852:	b580      	push	{r7, lr}
 8007854:	b08a      	sub	sp, #40	@ 0x28
 8007856:	af02      	add	r7, sp, #8
 8007858:	60f8      	str	r0, [r7, #12]
 800785a:	60b9      	str	r1, [r7, #8]
 800785c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10b      	bne.n	800787c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8007864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	61bb      	str	r3, [r7, #24]
}
 8007876:	bf00      	nop
 8007878:	bf00      	nop
 800787a:	e7fd      	b.n	8007878 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	429a      	cmp	r2, r3
 8007882:	d90b      	bls.n	800789c <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007888:	f383 8811 	msr	BASEPRI, r3
 800788c:	f3bf 8f6f 	isb	sy
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	617b      	str	r3, [r7, #20]
}
 8007896:	bf00      	nop
 8007898:	bf00      	nop
 800789a:	e7fd      	b.n	8007898 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800789c:	2302      	movs	r3, #2
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	2100      	movs	r1, #0
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f7ff fef8 	bl	800769c <xQueueGenericCreateStatic>
 80078ac:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80078ba:	69fb      	ldr	r3, [r7, #28]
	}
 80078bc:	4618      	mov	r0, r3
 80078be:	3720      	adds	r7, #32
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10b      	bne.n	80078ec <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	613b      	str	r3, [r7, #16]
}
 80078e6:	bf00      	nop
 80078e8:	bf00      	nop
 80078ea:	e7fd      	b.n	80078e8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d90b      	bls.n	800790c <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80078f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	60fb      	str	r3, [r7, #12]
}
 8007906:	bf00      	nop
 8007908:	bf00      	nop
 800790a:	e7fd      	b.n	8007908 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800790c:	2202      	movs	r2, #2
 800790e:	2100      	movs	r1, #0
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7ff ff40 	bl	8007796 <xQueueGenericCreate>
 8007916:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d002      	beq.n	8007924 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007924:	697b      	ldr	r3, [r7, #20]
	}
 8007926:	4618      	mov	r0, r3
 8007928:	3718      	adds	r7, #24
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
	...

08007930 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b08e      	sub	sp, #56	@ 0x38
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
 800793c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800793e:	2300      	movs	r3, #0
 8007940:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10b      	bne.n	8007964 <xQueueGenericSend+0x34>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800795e:	bf00      	nop
 8007960:	bf00      	nop
 8007962:	e7fd      	b.n	8007960 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d103      	bne.n	8007972 <xQueueGenericSend+0x42>
 800796a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796e:	2b00      	cmp	r3, #0
 8007970:	d101      	bne.n	8007976 <xQueueGenericSend+0x46>
 8007972:	2301      	movs	r3, #1
 8007974:	e000      	b.n	8007978 <xQueueGenericSend+0x48>
 8007976:	2300      	movs	r3, #0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10b      	bne.n	8007994 <xQueueGenericSend+0x64>
	__asm volatile
 800797c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800798e:	bf00      	nop
 8007990:	bf00      	nop
 8007992:	e7fd      	b.n	8007990 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	2b02      	cmp	r3, #2
 8007998:	d103      	bne.n	80079a2 <xQueueGenericSend+0x72>
 800799a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d101      	bne.n	80079a6 <xQueueGenericSend+0x76>
 80079a2:	2301      	movs	r3, #1
 80079a4:	e000      	b.n	80079a8 <xQueueGenericSend+0x78>
 80079a6:	2300      	movs	r3, #0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10b      	bne.n	80079c4 <xQueueGenericSend+0x94>
	__asm volatile
 80079ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b0:	f383 8811 	msr	BASEPRI, r3
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	623b      	str	r3, [r7, #32]
}
 80079be:	bf00      	nop
 80079c0:	bf00      	nop
 80079c2:	e7fd      	b.n	80079c0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079c4:	f001 fc56 	bl	8009274 <xTaskGetSchedulerState>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d102      	bne.n	80079d4 <xQueueGenericSend+0xa4>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <xQueueGenericSend+0xa8>
 80079d4:	2301      	movs	r3, #1
 80079d6:	e000      	b.n	80079da <xQueueGenericSend+0xaa>
 80079d8:	2300      	movs	r3, #0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10b      	bne.n	80079f6 <xQueueGenericSend+0xc6>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	61fb      	str	r3, [r7, #28]
}
 80079f0:	bf00      	nop
 80079f2:	bf00      	nop
 80079f4:	e7fd      	b.n	80079f2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079f6:	f002 faa7 	bl	8009f48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d302      	bcc.n	8007a0c <xQueueGenericSend+0xdc>
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d129      	bne.n	8007a60 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	68b9      	ldr	r1, [r7, #8]
 8007a10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a12:	f000 fc6d 	bl	80082f0 <prvCopyDataToQueue>
 8007a16:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d010      	beq.n	8007a42 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a22:	3324      	adds	r3, #36	@ 0x24
 8007a24:	4618      	mov	r0, r3
 8007a26:	f001 fa65 	bl	8008ef4 <xTaskRemoveFromEventList>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d013      	beq.n	8007a58 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007a30:	4b3f      	ldr	r3, [pc, #252]	@ (8007b30 <xQueueGenericSend+0x200>)
 8007a32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a36:	601a      	str	r2, [r3, #0]
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	e00a      	b.n	8007a58 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d007      	beq.n	8007a58 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007a48:	4b39      	ldr	r3, [pc, #228]	@ (8007b30 <xQueueGenericSend+0x200>)
 8007a4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a4e:	601a      	str	r2, [r3, #0]
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007a58:	f002 faa8 	bl	8009fac <vPortExitCritical>
				return pdPASS;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e063      	b.n	8007b28 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d103      	bne.n	8007a6e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a66:	f002 faa1 	bl	8009fac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	e05c      	b.n	8007b28 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d106      	bne.n	8007a82 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a74:	f107 0314 	add.w	r3, r7, #20
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f001 fa9f 	bl	8008fbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a82:	f002 fa93 	bl	8009fac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a86:	f001 f80f 	bl	8008aa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a8a:	f002 fa5d 	bl	8009f48 <vPortEnterCritical>
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a94:	b25b      	sxtb	r3, r3
 8007a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9a:	d103      	bne.n	8007aa4 <xQueueGenericSend+0x174>
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007aaa:	b25b      	sxtb	r3, r3
 8007aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab0:	d103      	bne.n	8007aba <xQueueGenericSend+0x18a>
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007aba:	f002 fa77 	bl	8009fac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007abe:	1d3a      	adds	r2, r7, #4
 8007ac0:	f107 0314 	add.w	r3, r7, #20
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f001 fa8e 	bl	8008fe8 <xTaskCheckForTimeOut>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d124      	bne.n	8007b1c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ad2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ad4:	f000 fd04 	bl	80084e0 <prvIsQueueFull>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d018      	beq.n	8007b10 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae0:	3310      	adds	r3, #16
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f001 f9b2 	bl	8008e50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007aec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007aee:	f000 fc8f 	bl	8008410 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007af2:	f000 ffe7 	bl	8008ac4 <xTaskResumeAll>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f47f af7c 	bne.w	80079f6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007afe:	4b0c      	ldr	r3, [pc, #48]	@ (8007b30 <xQueueGenericSend+0x200>)
 8007b00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	f3bf 8f4f 	dsb	sy
 8007b0a:	f3bf 8f6f 	isb	sy
 8007b0e:	e772      	b.n	80079f6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007b10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b12:	f000 fc7d 	bl	8008410 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b16:	f000 ffd5 	bl	8008ac4 <xTaskResumeAll>
 8007b1a:	e76c      	b.n	80079f6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007b1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b1e:	f000 fc77 	bl	8008410 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b22:	f000 ffcf 	bl	8008ac4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007b26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3738      	adds	r7, #56	@ 0x38
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	e000ed04 	.word	0xe000ed04

08007b34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b090      	sub	sp, #64	@ 0x40
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
 8007b40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10b      	bne.n	8007b64 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b50:	f383 8811 	msr	BASEPRI, r3
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007b5e:	bf00      	nop
 8007b60:	bf00      	nop
 8007b62:	e7fd      	b.n	8007b60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d103      	bne.n	8007b72 <xQueueGenericSendFromISR+0x3e>
 8007b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <xQueueGenericSendFromISR+0x42>
 8007b72:	2301      	movs	r3, #1
 8007b74:	e000      	b.n	8007b78 <xQueueGenericSendFromISR+0x44>
 8007b76:	2300      	movs	r3, #0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10b      	bne.n	8007b94 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007b8e:	bf00      	nop
 8007b90:	bf00      	nop
 8007b92:	e7fd      	b.n	8007b90 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d103      	bne.n	8007ba2 <xQueueGenericSendFromISR+0x6e>
 8007b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d101      	bne.n	8007ba6 <xQueueGenericSendFromISR+0x72>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e000      	b.n	8007ba8 <xQueueGenericSendFromISR+0x74>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10b      	bne.n	8007bc4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	623b      	str	r3, [r7, #32]
}
 8007bbe:	bf00      	nop
 8007bc0:	bf00      	nop
 8007bc2:	e7fd      	b.n	8007bc0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bc4:	f002 faa0 	bl	800a108 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007bc8:	f3ef 8211 	mrs	r2, BASEPRI
 8007bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	61fa      	str	r2, [r7, #28]
 8007bde:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007be0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007be2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d302      	bcc.n	8007bf6 <xQueueGenericSendFromISR+0xc2>
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d12f      	bne.n	8007c56 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007bfc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	68b9      	ldr	r1, [r7, #8]
 8007c0a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007c0c:	f000 fb70 	bl	80082f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c10:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c18:	d112      	bne.n	8007c40 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d016      	beq.n	8007c50 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c24:	3324      	adds	r3, #36	@ 0x24
 8007c26:	4618      	mov	r0, r3
 8007c28:	f001 f964 	bl	8008ef4 <xTaskRemoveFromEventList>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00e      	beq.n	8007c50 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00b      	beq.n	8007c50 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	e007      	b.n	8007c50 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007c44:	3301      	adds	r3, #1
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	b25a      	sxtb	r2, r3
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007c50:	2301      	movs	r3, #1
 8007c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007c54:	e001      	b.n	8007c5a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c56:	2300      	movs	r3, #0
 8007c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c5c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3740      	adds	r7, #64	@ 0x40
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b08e      	sub	sp, #56	@ 0x38
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10b      	bne.n	8007c9c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	623b      	str	r3, [r7, #32]
}
 8007c96:	bf00      	nop
 8007c98:	bf00      	nop
 8007c9a:	e7fd      	b.n	8007c98 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00b      	beq.n	8007cbc <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	61fb      	str	r3, [r7, #28]
}
 8007cb6:	bf00      	nop
 8007cb8:	bf00      	nop
 8007cba:	e7fd      	b.n	8007cb8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d103      	bne.n	8007ccc <xQueueGiveFromISR+0x5c>
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d101      	bne.n	8007cd0 <xQueueGiveFromISR+0x60>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e000      	b.n	8007cd2 <xQueueGiveFromISR+0x62>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10b      	bne.n	8007cee <xQueueGiveFromISR+0x7e>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	61bb      	str	r3, [r7, #24]
}
 8007ce8:	bf00      	nop
 8007cea:	bf00      	nop
 8007cec:	e7fd      	b.n	8007cea <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cee:	f002 fa0b 	bl	800a108 <vPortValidateInterruptPriority>
	__asm volatile
 8007cf2:	f3ef 8211 	mrs	r2, BASEPRI
 8007cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	617a      	str	r2, [r7, #20]
 8007d08:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007d0a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d12:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d22b      	bcs.n	8007d76 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2a:	1c5a      	adds	r2, r3, #1
 8007d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d2e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d30:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d38:	d112      	bne.n	8007d60 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d016      	beq.n	8007d70 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d44:	3324      	adds	r3, #36	@ 0x24
 8007d46:	4618      	mov	r0, r3
 8007d48:	f001 f8d4 	bl	8008ef4 <xTaskRemoveFromEventList>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00e      	beq.n	8007d70 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00b      	beq.n	8007d70 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	e007      	b.n	8007d70 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d64:	3301      	adds	r3, #1
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	b25a      	sxtb	r2, r3
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007d70:	2301      	movs	r3, #1
 8007d72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d74:	e001      	b.n	8007d7a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d76:	2300      	movs	r3, #0
 8007d78:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d7c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f383 8811 	msr	BASEPRI, r3
}
 8007d84:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3738      	adds	r7, #56	@ 0x38
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b08c      	sub	sp, #48	@ 0x30
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10b      	bne.n	8007dc2 <xQueueReceive+0x32>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	623b      	str	r3, [r7, #32]
}
 8007dbc:	bf00      	nop
 8007dbe:	bf00      	nop
 8007dc0:	e7fd      	b.n	8007dbe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d103      	bne.n	8007dd0 <xQueueReceive+0x40>
 8007dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <xQueueReceive+0x44>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e000      	b.n	8007dd6 <xQueueReceive+0x46>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10b      	bne.n	8007df2 <xQueueReceive+0x62>
	__asm volatile
 8007dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	61fb      	str	r3, [r7, #28]
}
 8007dec:	bf00      	nop
 8007dee:	bf00      	nop
 8007df0:	e7fd      	b.n	8007dee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007df2:	f001 fa3f 	bl	8009274 <xTaskGetSchedulerState>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d102      	bne.n	8007e02 <xQueueReceive+0x72>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <xQueueReceive+0x76>
 8007e02:	2301      	movs	r3, #1
 8007e04:	e000      	b.n	8007e08 <xQueueReceive+0x78>
 8007e06:	2300      	movs	r3, #0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10b      	bne.n	8007e24 <xQueueReceive+0x94>
	__asm volatile
 8007e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	61bb      	str	r3, [r7, #24]
}
 8007e1e:	bf00      	nop
 8007e20:	bf00      	nop
 8007e22:	e7fd      	b.n	8007e20 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e24:	f002 f890 	bl	8009f48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e2c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d01f      	beq.n	8007e74 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e34:	68b9      	ldr	r1, [r7, #8]
 8007e36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e38:	f000 fac4 	bl	80083c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3e:	1e5a      	subs	r2, r3, #1
 8007e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e42:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00f      	beq.n	8007e6c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e4e:	3310      	adds	r3, #16
 8007e50:	4618      	mov	r0, r3
 8007e52:	f001 f84f 	bl	8008ef4 <xTaskRemoveFromEventList>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d007      	beq.n	8007e6c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8007f50 <xQueueReceive+0x1c0>)
 8007e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	f3bf 8f4f 	dsb	sy
 8007e68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e6c:	f002 f89e 	bl	8009fac <vPortExitCritical>
				return pdPASS;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e069      	b.n	8007f48 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d103      	bne.n	8007e82 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e7a:	f002 f897 	bl	8009fac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	e062      	b.n	8007f48 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d106      	bne.n	8007e96 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e88:	f107 0310 	add.w	r3, r7, #16
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f001 f895 	bl	8008fbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e92:	2301      	movs	r3, #1
 8007e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e96:	f002 f889 	bl	8009fac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e9a:	f000 fe05 	bl	8008aa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e9e:	f002 f853 	bl	8009f48 <vPortEnterCritical>
 8007ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ea8:	b25b      	sxtb	r3, r3
 8007eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eae:	d103      	bne.n	8007eb8 <xQueueReceive+0x128>
 8007eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ebe:	b25b      	sxtb	r3, r3
 8007ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec4:	d103      	bne.n	8007ece <xQueueReceive+0x13e>
 8007ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ece:	f002 f86d 	bl	8009fac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ed2:	1d3a      	adds	r2, r7, #4
 8007ed4:	f107 0310 	add.w	r3, r7, #16
 8007ed8:	4611      	mov	r1, r2
 8007eda:	4618      	mov	r0, r3
 8007edc:	f001 f884 	bl	8008fe8 <xTaskCheckForTimeOut>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d123      	bne.n	8007f2e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ee6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ee8:	f000 fae4 	bl	80084b4 <prvIsQueueEmpty>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d017      	beq.n	8007f22 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef4:	3324      	adds	r3, #36	@ 0x24
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	4611      	mov	r1, r2
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 ffa8 	bl	8008e50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f02:	f000 fa85 	bl	8008410 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f06:	f000 fddd 	bl	8008ac4 <xTaskResumeAll>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d189      	bne.n	8007e24 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007f10:	4b0f      	ldr	r3, [pc, #60]	@ (8007f50 <xQueueReceive+0x1c0>)
 8007f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f16:	601a      	str	r2, [r3, #0]
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	e780      	b.n	8007e24 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f24:	f000 fa74 	bl	8008410 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f28:	f000 fdcc 	bl	8008ac4 <xTaskResumeAll>
 8007f2c:	e77a      	b.n	8007e24 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f30:	f000 fa6e 	bl	8008410 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f34:	f000 fdc6 	bl	8008ac4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f3a:	f000 fabb 	bl	80084b4 <prvIsQueueEmpty>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f43f af6f 	beq.w	8007e24 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f46:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3730      	adds	r7, #48	@ 0x30
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	e000ed04 	.word	0xe000ed04

08007f54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b08e      	sub	sp, #56	@ 0x38
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007f66:	2300      	movs	r3, #0
 8007f68:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10b      	bne.n	8007f88 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	623b      	str	r3, [r7, #32]
}
 8007f82:	bf00      	nop
 8007f84:	bf00      	nop
 8007f86:	e7fd      	b.n	8007f84 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00b      	beq.n	8007fa8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	61fb      	str	r3, [r7, #28]
}
 8007fa2:	bf00      	nop
 8007fa4:	bf00      	nop
 8007fa6:	e7fd      	b.n	8007fa4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fa8:	f001 f964 	bl	8009274 <xTaskGetSchedulerState>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d102      	bne.n	8007fb8 <xQueueSemaphoreTake+0x64>
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d101      	bne.n	8007fbc <xQueueSemaphoreTake+0x68>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e000      	b.n	8007fbe <xQueueSemaphoreTake+0x6a>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10b      	bne.n	8007fda <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	61bb      	str	r3, [r7, #24]
}
 8007fd4:	bf00      	nop
 8007fd6:	bf00      	nop
 8007fd8:	e7fd      	b.n	8007fd6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fda:	f001 ffb5 	bl	8009f48 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d024      	beq.n	8008034 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fec:	1e5a      	subs	r2, r3, #1
 8007fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d104      	bne.n	8008004 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007ffa:	f001 fab5 	bl	8009568 <pvTaskIncrementMutexHeldCount>
 8007ffe:	4602      	mov	r2, r0
 8008000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008002:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00f      	beq.n	800802c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800800c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800800e:	3310      	adds	r3, #16
 8008010:	4618      	mov	r0, r3
 8008012:	f000 ff6f 	bl	8008ef4 <xTaskRemoveFromEventList>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d007      	beq.n	800802c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800801c:	4b54      	ldr	r3, [pc, #336]	@ (8008170 <xQueueSemaphoreTake+0x21c>)
 800801e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800802c:	f001 ffbe 	bl	8009fac <vPortExitCritical>
				return pdPASS;
 8008030:	2301      	movs	r3, #1
 8008032:	e098      	b.n	8008166 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d112      	bne.n	8008060 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800803a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00b      	beq.n	8008058 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	617b      	str	r3, [r7, #20]
}
 8008052:	bf00      	nop
 8008054:	bf00      	nop
 8008056:	e7fd      	b.n	8008054 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008058:	f001 ffa8 	bl	8009fac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800805c:	2300      	movs	r3, #0
 800805e:	e082      	b.n	8008166 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008062:	2b00      	cmp	r3, #0
 8008064:	d106      	bne.n	8008074 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008066:	f107 030c 	add.w	r3, r7, #12
 800806a:	4618      	mov	r0, r3
 800806c:	f000 ffa6 	bl	8008fbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008070:	2301      	movs	r3, #1
 8008072:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008074:	f001 ff9a 	bl	8009fac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008078:	f000 fd16 	bl	8008aa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800807c:	f001 ff64 	bl	8009f48 <vPortEnterCritical>
 8008080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008082:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008086:	b25b      	sxtb	r3, r3
 8008088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808c:	d103      	bne.n	8008096 <xQueueSemaphoreTake+0x142>
 800808e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008090:	2200      	movs	r2, #0
 8008092:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008098:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800809c:	b25b      	sxtb	r3, r3
 800809e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a2:	d103      	bne.n	80080ac <xQueueSemaphoreTake+0x158>
 80080a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080ac:	f001 ff7e 	bl	8009fac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080b0:	463a      	mov	r2, r7
 80080b2:	f107 030c 	add.w	r3, r7, #12
 80080b6:	4611      	mov	r1, r2
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 ff95 	bl	8008fe8 <xTaskCheckForTimeOut>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d132      	bne.n	800812a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80080c6:	f000 f9f5 	bl	80084b4 <prvIsQueueEmpty>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d026      	beq.n	800811e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d109      	bne.n	80080ec <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80080d8:	f001 ff36 	bl	8009f48 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80080dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f001 f8e5 	bl	80092b0 <xTaskPriorityInherit>
 80080e6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80080e8:	f001 ff60 	bl	8009fac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ee:	3324      	adds	r3, #36	@ 0x24
 80080f0:	683a      	ldr	r2, [r7, #0]
 80080f2:	4611      	mov	r1, r2
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 feab 	bl	8008e50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80080fc:	f000 f988 	bl	8008410 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008100:	f000 fce0 	bl	8008ac4 <xTaskResumeAll>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	f47f af67 	bne.w	8007fda <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800810c:	4b18      	ldr	r3, [pc, #96]	@ (8008170 <xQueueSemaphoreTake+0x21c>)
 800810e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	e75d      	b.n	8007fda <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800811e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008120:	f000 f976 	bl	8008410 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008124:	f000 fcce 	bl	8008ac4 <xTaskResumeAll>
 8008128:	e757      	b.n	8007fda <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800812a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800812c:	f000 f970 	bl	8008410 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008130:	f000 fcc8 	bl	8008ac4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008134:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008136:	f000 f9bd 	bl	80084b4 <prvIsQueueEmpty>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	f43f af4c 	beq.w	8007fda <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00d      	beq.n	8008164 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008148:	f001 fefe 	bl	8009f48 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800814c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800814e:	f000 f8b7 	bl	80082c0 <prvGetDisinheritPriorityAfterTimeout>
 8008152:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800815a:	4618      	mov	r0, r3
 800815c:	f001 f980 	bl	8009460 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008160:	f001 ff24 	bl	8009fac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008164:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008166:	4618      	mov	r0, r3
 8008168:	3738      	adds	r7, #56	@ 0x38
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	e000ed04 	.word	0xe000ed04

08008174 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b08e      	sub	sp, #56	@ 0x38
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10b      	bne.n	80081a2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	623b      	str	r3, [r7, #32]
}
 800819c:	bf00      	nop
 800819e:	bf00      	nop
 80081a0:	e7fd      	b.n	800819e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d103      	bne.n	80081b0 <xQueueReceiveFromISR+0x3c>
 80081a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <xQueueReceiveFromISR+0x40>
 80081b0:	2301      	movs	r3, #1
 80081b2:	e000      	b.n	80081b6 <xQueueReceiveFromISR+0x42>
 80081b4:	2300      	movs	r3, #0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10b      	bne.n	80081d2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80081ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081be:	f383 8811 	msr	BASEPRI, r3
 80081c2:	f3bf 8f6f 	isb	sy
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	61fb      	str	r3, [r7, #28]
}
 80081cc:	bf00      	nop
 80081ce:	bf00      	nop
 80081d0:	e7fd      	b.n	80081ce <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081d2:	f001 ff99 	bl	800a108 <vPortValidateInterruptPriority>
	__asm volatile
 80081d6:	f3ef 8211 	mrs	r2, BASEPRI
 80081da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081de:	f383 8811 	msr	BASEPRI, r3
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	61ba      	str	r2, [r7, #24]
 80081ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80081ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d02f      	beq.n	800825e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80081fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008200:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008204:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008208:	68b9      	ldr	r1, [r7, #8]
 800820a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800820c:	f000 f8da 	bl	80083c4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008212:	1e5a      	subs	r2, r3, #1
 8008214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008216:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008218:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800821c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008220:	d112      	bne.n	8008248 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d016      	beq.n	8008258 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800822a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822c:	3310      	adds	r3, #16
 800822e:	4618      	mov	r0, r3
 8008230:	f000 fe60 	bl	8008ef4 <xTaskRemoveFromEventList>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00e      	beq.n	8008258 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00b      	beq.n	8008258 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	601a      	str	r2, [r3, #0]
 8008246:	e007      	b.n	8008258 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008248:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800824c:	3301      	adds	r3, #1
 800824e:	b2db      	uxtb	r3, r3
 8008250:	b25a      	sxtb	r2, r3
 8008252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008258:	2301      	movs	r3, #1
 800825a:	637b      	str	r3, [r7, #52]	@ 0x34
 800825c:	e001      	b.n	8008262 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800825e:	2300      	movs	r3, #0
 8008260:	637b      	str	r3, [r7, #52]	@ 0x34
 8008262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008264:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	f383 8811 	msr	BASEPRI, r3
}
 800826c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800826e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008270:	4618      	mov	r0, r3
 8008272:	3738      	adds	r7, #56	@ 0x38
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10b      	bne.n	80082a2 <vQueueDelete+0x2a>
	__asm volatile
 800828a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800828e:	f383 8811 	msr	BASEPRI, r3
 8008292:	f3bf 8f6f 	isb	sy
 8008296:	f3bf 8f4f 	dsb	sy
 800829a:	60bb      	str	r3, [r7, #8]
}
 800829c:	bf00      	nop
 800829e:	bf00      	nop
 80082a0:	e7fd      	b.n	800829e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 f95e 	bl	8008564 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d102      	bne.n	80082b8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f002 f838 	bl	800a328 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80082b8:	bf00      	nop
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d006      	beq.n	80082de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	e001      	b.n	80082e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80082de:	2300      	movs	r3, #0
 80082e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80082e2:	68fb      	ldr	r3, [r7, #12]
	}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80082fc:	2300      	movs	r3, #0
 80082fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008304:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10d      	bne.n	800832a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d14d      	bne.n	80083b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	4618      	mov	r0, r3
 800831c:	f001 f830 	bl	8009380 <xTaskPriorityDisinherit>
 8008320:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	609a      	str	r2, [r3, #8]
 8008328:	e043      	b.n	80083b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d119      	bne.n	8008364 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6858      	ldr	r0, [r3, #4]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008338:	461a      	mov	r2, r3
 800833a:	68b9      	ldr	r1, [r7, #8]
 800833c:	f002 faa7 	bl	800a88e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008348:	441a      	add	r2, r3
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	685a      	ldr	r2, [r3, #4]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	429a      	cmp	r2, r3
 8008358:	d32b      	bcc.n	80083b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	605a      	str	r2, [r3, #4]
 8008362:	e026      	b.n	80083b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	68d8      	ldr	r0, [r3, #12]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800836c:	461a      	mov	r2, r3
 800836e:	68b9      	ldr	r1, [r7, #8]
 8008370:	f002 fa8d 	bl	800a88e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	68da      	ldr	r2, [r3, #12]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800837c:	425b      	negs	r3, r3
 800837e:	441a      	add	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	68da      	ldr	r2, [r3, #12]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	429a      	cmp	r2, r3
 800838e:	d207      	bcs.n	80083a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	689a      	ldr	r2, [r3, #8]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008398:	425b      	negs	r3, r3
 800839a:	441a      	add	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d105      	bne.n	80083b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d002      	beq.n	80083b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	3b01      	subs	r3, #1
 80083b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	1c5a      	adds	r2, r3, #1
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80083ba:	697b      	ldr	r3, [r7, #20]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3718      	adds	r7, #24
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d018      	beq.n	8008408 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68da      	ldr	r2, [r3, #12]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083de:	441a      	add	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	68da      	ldr	r2, [r3, #12]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d303      	bcc.n	80083f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	68d9      	ldr	r1, [r3, #12]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008400:	461a      	mov	r2, r3
 8008402:	6838      	ldr	r0, [r7, #0]
 8008404:	f002 fa43 	bl	800a88e <memcpy>
	}
}
 8008408:	bf00      	nop
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008418:	f001 fd96 	bl	8009f48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008422:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008424:	e011      	b.n	800844a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800842a:	2b00      	cmp	r3, #0
 800842c:	d012      	beq.n	8008454 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3324      	adds	r3, #36	@ 0x24
 8008432:	4618      	mov	r0, r3
 8008434:	f000 fd5e 	bl	8008ef4 <xTaskRemoveFromEventList>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800843e:	f000 fe37 	bl	80090b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008442:	7bfb      	ldrb	r3, [r7, #15]
 8008444:	3b01      	subs	r3, #1
 8008446:	b2db      	uxtb	r3, r3
 8008448:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800844a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800844e:	2b00      	cmp	r3, #0
 8008450:	dce9      	bgt.n	8008426 <prvUnlockQueue+0x16>
 8008452:	e000      	b.n	8008456 <prvUnlockQueue+0x46>
					break;
 8008454:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	22ff      	movs	r2, #255	@ 0xff
 800845a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800845e:	f001 fda5 	bl	8009fac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008462:	f001 fd71 	bl	8009f48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800846c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800846e:	e011      	b.n	8008494 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d012      	beq.n	800849e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	3310      	adds	r3, #16
 800847c:	4618      	mov	r0, r3
 800847e:	f000 fd39 	bl	8008ef4 <xTaskRemoveFromEventList>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008488:	f000 fe12 	bl	80090b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800848c:	7bbb      	ldrb	r3, [r7, #14]
 800848e:	3b01      	subs	r3, #1
 8008490:	b2db      	uxtb	r3, r3
 8008492:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008494:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008498:	2b00      	cmp	r3, #0
 800849a:	dce9      	bgt.n	8008470 <prvUnlockQueue+0x60>
 800849c:	e000      	b.n	80084a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800849e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	22ff      	movs	r2, #255	@ 0xff
 80084a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80084a8:	f001 fd80 	bl	8009fac <vPortExitCritical>
}
 80084ac:	bf00      	nop
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084bc:	f001 fd44 	bl	8009f48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d102      	bne.n	80084ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80084c8:	2301      	movs	r3, #1
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	e001      	b.n	80084d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80084ce:	2300      	movs	r3, #0
 80084d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084d2:	f001 fd6b 	bl	8009fac <vPortExitCritical>

	return xReturn;
 80084d6:	68fb      	ldr	r3, [r7, #12]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084e8:	f001 fd2e 	bl	8009f48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d102      	bne.n	80084fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80084f8:	2301      	movs	r3, #1
 80084fa:	60fb      	str	r3, [r7, #12]
 80084fc:	e001      	b.n	8008502 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80084fe:	2300      	movs	r3, #0
 8008500:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008502:	f001 fd53 	bl	8009fac <vPortExitCritical>

	return xReturn;
 8008506:	68fb      	ldr	r3, [r7, #12]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800851a:	2300      	movs	r3, #0
 800851c:	60fb      	str	r3, [r7, #12]
 800851e:	e014      	b.n	800854a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008520:	4a0f      	ldr	r2, [pc, #60]	@ (8008560 <vQueueAddToRegistry+0x50>)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10b      	bne.n	8008544 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800852c:	490c      	ldr	r1, [pc, #48]	@ (8008560 <vQueueAddToRegistry+0x50>)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008536:	4a0a      	ldr	r2, [pc, #40]	@ (8008560 <vQueueAddToRegistry+0x50>)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	00db      	lsls	r3, r3, #3
 800853c:	4413      	add	r3, r2
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008542:	e006      	b.n	8008552 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	3301      	adds	r3, #1
 8008548:	60fb      	str	r3, [r7, #12]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2b07      	cmp	r3, #7
 800854e:	d9e7      	bls.n	8008520 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008550:	bf00      	nop
 8008552:	bf00      	nop
 8008554:	3714      	adds	r7, #20
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	20000f5c 	.word	0x20000f5c

08008564 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800856c:	2300      	movs	r3, #0
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	e016      	b.n	80085a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008572:	4a10      	ldr	r2, [pc, #64]	@ (80085b4 <vQueueUnregisterQueue+0x50>)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	00db      	lsls	r3, r3, #3
 8008578:	4413      	add	r3, r2
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	429a      	cmp	r2, r3
 8008580:	d10b      	bne.n	800859a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008582:	4a0c      	ldr	r2, [pc, #48]	@ (80085b4 <vQueueUnregisterQueue+0x50>)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2100      	movs	r1, #0
 8008588:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800858c:	4a09      	ldr	r2, [pc, #36]	@ (80085b4 <vQueueUnregisterQueue+0x50>)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	00db      	lsls	r3, r3, #3
 8008592:	4413      	add	r3, r2
 8008594:	2200      	movs	r2, #0
 8008596:	605a      	str	r2, [r3, #4]
				break;
 8008598:	e006      	b.n	80085a8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	3301      	adds	r3, #1
 800859e:	60fb      	str	r3, [r7, #12]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2b07      	cmp	r3, #7
 80085a4:	d9e5      	bls.n	8008572 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80085a6:	bf00      	nop
 80085a8:	bf00      	nop
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr
 80085b4:	20000f5c 	.word	0x20000f5c

080085b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b086      	sub	sp, #24
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80085c8:	f001 fcbe 	bl	8009f48 <vPortEnterCritical>
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80085d2:	b25b      	sxtb	r3, r3
 80085d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d8:	d103      	bne.n	80085e2 <vQueueWaitForMessageRestricted+0x2a>
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085e8:	b25b      	sxtb	r3, r3
 80085ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ee:	d103      	bne.n	80085f8 <vQueueWaitForMessageRestricted+0x40>
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085f8:	f001 fcd8 	bl	8009fac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008600:	2b00      	cmp	r3, #0
 8008602:	d106      	bne.n	8008612 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	3324      	adds	r3, #36	@ 0x24
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	68b9      	ldr	r1, [r7, #8]
 800860c:	4618      	mov	r0, r3
 800860e:	f000 fc45 	bl	8008e9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008612:	6978      	ldr	r0, [r7, #20]
 8008614:	f7ff fefc 	bl	8008410 <prvUnlockQueue>
	}
 8008618:	bf00      	nop
 800861a:	3718      	adds	r7, #24
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008620:	b580      	push	{r7, lr}
 8008622:	b08e      	sub	sp, #56	@ 0x38
 8008624:	af04      	add	r7, sp, #16
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
 800862c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800862e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10b      	bne.n	800864c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	623b      	str	r3, [r7, #32]
}
 8008646:	bf00      	nop
 8008648:	bf00      	nop
 800864a:	e7fd      	b.n	8008648 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800864c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10b      	bne.n	800866a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	61fb      	str	r3, [r7, #28]
}
 8008664:	bf00      	nop
 8008666:	bf00      	nop
 8008668:	e7fd      	b.n	8008666 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800866a:	235c      	movs	r3, #92	@ 0x5c
 800866c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	2b5c      	cmp	r3, #92	@ 0x5c
 8008672:	d00b      	beq.n	800868c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	61bb      	str	r3, [r7, #24]
}
 8008686:	bf00      	nop
 8008688:	bf00      	nop
 800868a:	e7fd      	b.n	8008688 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800868c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800868e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008690:	2b00      	cmp	r3, #0
 8008692:	d01e      	beq.n	80086d2 <xTaskCreateStatic+0xb2>
 8008694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008696:	2b00      	cmp	r3, #0
 8008698:	d01b      	beq.n	80086d2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800869a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800869c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800869e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086a2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a6:	2202      	movs	r2, #2
 80086a8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80086ac:	2300      	movs	r3, #0
 80086ae:	9303      	str	r3, [sp, #12]
 80086b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b2:	9302      	str	r3, [sp, #8]
 80086b4:	f107 0314 	add.w	r3, r7, #20
 80086b8:	9301      	str	r3, [sp, #4]
 80086ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	68b9      	ldr	r1, [r7, #8]
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 f850 	bl	800876a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80086cc:	f000 f8de 	bl	800888c <prvAddNewTaskToReadyList>
 80086d0:	e001      	b.n	80086d6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80086d2:	2300      	movs	r3, #0
 80086d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80086d6:	697b      	ldr	r3, [r7, #20]
	}
 80086d8:	4618      	mov	r0, r3
 80086da:	3728      	adds	r7, #40	@ 0x28
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b08c      	sub	sp, #48	@ 0x30
 80086e4:	af04      	add	r7, sp, #16
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	603b      	str	r3, [r7, #0]
 80086ec:	4613      	mov	r3, r2
 80086ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80086f0:	88fb      	ldrh	r3, [r7, #6]
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4618      	mov	r0, r3
 80086f6:	f001 fd49 	bl	800a18c <pvPortMalloc>
 80086fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00e      	beq.n	8008720 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008702:	205c      	movs	r0, #92	@ 0x5c
 8008704:	f001 fd42 	bl	800a18c <pvPortMalloc>
 8008708:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d003      	beq.n	8008718 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	631a      	str	r2, [r3, #48]	@ 0x30
 8008716:	e005      	b.n	8008724 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008718:	6978      	ldr	r0, [r7, #20]
 800871a:	f001 fe05 	bl	800a328 <vPortFree>
 800871e:	e001      	b.n	8008724 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008720:	2300      	movs	r3, #0
 8008722:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d017      	beq.n	800875a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008732:	88fa      	ldrh	r2, [r7, #6]
 8008734:	2300      	movs	r3, #0
 8008736:	9303      	str	r3, [sp, #12]
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	9302      	str	r3, [sp, #8]
 800873c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800873e:	9301      	str	r3, [sp, #4]
 8008740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	68b9      	ldr	r1, [r7, #8]
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f000 f80e 	bl	800876a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800874e:	69f8      	ldr	r0, [r7, #28]
 8008750:	f000 f89c 	bl	800888c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008754:	2301      	movs	r3, #1
 8008756:	61bb      	str	r3, [r7, #24]
 8008758:	e002      	b.n	8008760 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800875a:	f04f 33ff 	mov.w	r3, #4294967295
 800875e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008760:	69bb      	ldr	r3, [r7, #24]
	}
 8008762:	4618      	mov	r0, r3
 8008764:	3720      	adds	r7, #32
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b088      	sub	sp, #32
 800876e:	af00      	add	r7, sp, #0
 8008770:	60f8      	str	r0, [r7, #12]
 8008772:	60b9      	str	r1, [r7, #8]
 8008774:	607a      	str	r2, [r7, #4]
 8008776:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	461a      	mov	r2, r3
 8008782:	21a5      	movs	r1, #165	@ 0xa5
 8008784:	f002 f807 	bl	800a796 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008792:	3b01      	subs	r3, #1
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4413      	add	r3, r2
 8008798:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	f023 0307 	bic.w	r3, r3, #7
 80087a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	f003 0307 	and.w	r3, r3, #7
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00b      	beq.n	80087c4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80087ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	617b      	str	r3, [r7, #20]
}
 80087be:	bf00      	nop
 80087c0:	bf00      	nop
 80087c2:	e7fd      	b.n	80087c0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d01f      	beq.n	800880a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087ca:	2300      	movs	r3, #0
 80087cc:	61fb      	str	r3, [r7, #28]
 80087ce:	e012      	b.n	80087f6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	4413      	add	r3, r2
 80087d6:	7819      	ldrb	r1, [r3, #0]
 80087d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	4413      	add	r3, r2
 80087de:	3334      	adds	r3, #52	@ 0x34
 80087e0:	460a      	mov	r2, r1
 80087e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	4413      	add	r3, r2
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d006      	beq.n	80087fe <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	3301      	adds	r3, #1
 80087f4:	61fb      	str	r3, [r7, #28]
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	2b0f      	cmp	r3, #15
 80087fa:	d9e9      	bls.n	80087d0 <prvInitialiseNewTask+0x66>
 80087fc:	e000      	b.n	8008800 <prvInitialiseNewTask+0x96>
			{
				break;
 80087fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008802:	2200      	movs	r2, #0
 8008804:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008808:	e003      	b.n	8008812 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800880a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880c:	2200      	movs	r2, #0
 800880e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008814:	2b37      	cmp	r3, #55	@ 0x37
 8008816:	d901      	bls.n	800881c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008818:	2337      	movs	r3, #55	@ 0x37
 800881a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800881c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008820:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008824:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008826:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882a:	2200      	movs	r2, #0
 800882c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800882e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008830:	3304      	adds	r3, #4
 8008832:	4618      	mov	r0, r3
 8008834:	f7fe fe34 	bl	80074a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883a:	3318      	adds	r3, #24
 800883c:	4618      	mov	r0, r3
 800883e:	f7fe fe2f 	bl	80074a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008844:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008846:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800884a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800884e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008850:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008854:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008856:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885a:	2200      	movs	r2, #0
 800885c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800885e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	68f9      	ldr	r1, [r7, #12]
 800886a:	69b8      	ldr	r0, [r7, #24]
 800886c:	f001 fa3e 	bl	8009cec <pxPortInitialiseStack>
 8008870:	4602      	mov	r2, r0
 8008872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008874:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008878:	2b00      	cmp	r3, #0
 800887a:	d002      	beq.n	8008882 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800887c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800887e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008880:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008882:	bf00      	nop
 8008884:	3720      	adds	r7, #32
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
	...

0800888c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008894:	f001 fb58 	bl	8009f48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008898:	4b2d      	ldr	r3, [pc, #180]	@ (8008950 <prvAddNewTaskToReadyList+0xc4>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3301      	adds	r3, #1
 800889e:	4a2c      	ldr	r2, [pc, #176]	@ (8008950 <prvAddNewTaskToReadyList+0xc4>)
 80088a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80088a2:	4b2c      	ldr	r3, [pc, #176]	@ (8008954 <prvAddNewTaskToReadyList+0xc8>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d109      	bne.n	80088be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80088aa:	4a2a      	ldr	r2, [pc, #168]	@ (8008954 <prvAddNewTaskToReadyList+0xc8>)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80088b0:	4b27      	ldr	r3, [pc, #156]	@ (8008950 <prvAddNewTaskToReadyList+0xc4>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d110      	bne.n	80088da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80088b8:	f000 fc1e 	bl	80090f8 <prvInitialiseTaskLists>
 80088bc:	e00d      	b.n	80088da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80088be:	4b26      	ldr	r3, [pc, #152]	@ (8008958 <prvAddNewTaskToReadyList+0xcc>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d109      	bne.n	80088da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80088c6:	4b23      	ldr	r3, [pc, #140]	@ (8008954 <prvAddNewTaskToReadyList+0xc8>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d802      	bhi.n	80088da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80088d4:	4a1f      	ldr	r2, [pc, #124]	@ (8008954 <prvAddNewTaskToReadyList+0xc8>)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80088da:	4b20      	ldr	r3, [pc, #128]	@ (800895c <prvAddNewTaskToReadyList+0xd0>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3301      	adds	r3, #1
 80088e0:	4a1e      	ldr	r2, [pc, #120]	@ (800895c <prvAddNewTaskToReadyList+0xd0>)
 80088e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80088e4:	4b1d      	ldr	r3, [pc, #116]	@ (800895c <prvAddNewTaskToReadyList+0xd0>)
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088f0:	4b1b      	ldr	r3, [pc, #108]	@ (8008960 <prvAddNewTaskToReadyList+0xd4>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d903      	bls.n	8008900 <prvAddNewTaskToReadyList+0x74>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088fc:	4a18      	ldr	r2, [pc, #96]	@ (8008960 <prvAddNewTaskToReadyList+0xd4>)
 80088fe:	6013      	str	r3, [r2, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008904:	4613      	mov	r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4413      	add	r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	4a15      	ldr	r2, [pc, #84]	@ (8008964 <prvAddNewTaskToReadyList+0xd8>)
 800890e:	441a      	add	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	3304      	adds	r3, #4
 8008914:	4619      	mov	r1, r3
 8008916:	4610      	mov	r0, r2
 8008918:	f7fe fdcf 	bl	80074ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800891c:	f001 fb46 	bl	8009fac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008920:	4b0d      	ldr	r3, [pc, #52]	@ (8008958 <prvAddNewTaskToReadyList+0xcc>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d00e      	beq.n	8008946 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008928:	4b0a      	ldr	r3, [pc, #40]	@ (8008954 <prvAddNewTaskToReadyList+0xc8>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008932:	429a      	cmp	r2, r3
 8008934:	d207      	bcs.n	8008946 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008936:	4b0c      	ldr	r3, [pc, #48]	@ (8008968 <prvAddNewTaskToReadyList+0xdc>)
 8008938:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800893c:	601a      	str	r2, [r3, #0]
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008946:	bf00      	nop
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	20001470 	.word	0x20001470
 8008954:	20000f9c 	.word	0x20000f9c
 8008958:	2000147c 	.word	0x2000147c
 800895c:	2000148c 	.word	0x2000148c
 8008960:	20001478 	.word	0x20001478
 8008964:	20000fa0 	.word	0x20000fa0
 8008968:	e000ed04 	.word	0xe000ed04

0800896c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008974:	2300      	movs	r3, #0
 8008976:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d018      	beq.n	80089b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800897e:	4b14      	ldr	r3, [pc, #80]	@ (80089d0 <vTaskDelay+0x64>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00b      	beq.n	800899e <vTaskDelay+0x32>
	__asm volatile
 8008986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	60bb      	str	r3, [r7, #8]
}
 8008998:	bf00      	nop
 800899a:	bf00      	nop
 800899c:	e7fd      	b.n	800899a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800899e:	f000 f883 	bl	8008aa8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80089a2:	2100      	movs	r1, #0
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fdf3 	bl	8009590 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80089aa:	f000 f88b 	bl	8008ac4 <xTaskResumeAll>
 80089ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d107      	bne.n	80089c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80089b6:	4b07      	ldr	r3, [pc, #28]	@ (80089d4 <vTaskDelay+0x68>)
 80089b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089bc:	601a      	str	r2, [r3, #0]
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089c6:	bf00      	nop
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	20001498 	.word	0x20001498
 80089d4:	e000ed04 	.word	0xe000ed04

080089d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b08a      	sub	sp, #40	@ 0x28
 80089dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80089de:	2300      	movs	r3, #0
 80089e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80089e2:	2300      	movs	r3, #0
 80089e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80089e6:	463a      	mov	r2, r7
 80089e8:	1d39      	adds	r1, r7, #4
 80089ea:	f107 0308 	add.w	r3, r7, #8
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fe fd02 	bl	80073f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	9202      	str	r2, [sp, #8]
 80089fc:	9301      	str	r3, [sp, #4]
 80089fe:	2300      	movs	r3, #0
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	2300      	movs	r3, #0
 8008a04:	460a      	mov	r2, r1
 8008a06:	4922      	ldr	r1, [pc, #136]	@ (8008a90 <vTaskStartScheduler+0xb8>)
 8008a08:	4822      	ldr	r0, [pc, #136]	@ (8008a94 <vTaskStartScheduler+0xbc>)
 8008a0a:	f7ff fe09 	bl	8008620 <xTaskCreateStatic>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	4a21      	ldr	r2, [pc, #132]	@ (8008a98 <vTaskStartScheduler+0xc0>)
 8008a12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a14:	4b20      	ldr	r3, [pc, #128]	@ (8008a98 <vTaskStartScheduler+0xc0>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	617b      	str	r3, [r7, #20]
 8008a20:	e001      	b.n	8008a26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a22:	2300      	movs	r3, #0
 8008a24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d102      	bne.n	8008a32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008a2c:	f000 fe04 	bl	8009638 <xTimerCreateTimerTask>
 8008a30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d116      	bne.n	8008a66 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3c:	f383 8811 	msr	BASEPRI, r3
 8008a40:	f3bf 8f6f 	isb	sy
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	613b      	str	r3, [r7, #16]
}
 8008a4a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a4c:	4b13      	ldr	r3, [pc, #76]	@ (8008a9c <vTaskStartScheduler+0xc4>)
 8008a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a52:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a54:	4b12      	ldr	r3, [pc, #72]	@ (8008aa0 <vTaskStartScheduler+0xc8>)
 8008a56:	2201      	movs	r2, #1
 8008a58:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a5a:	4b12      	ldr	r3, [pc, #72]	@ (8008aa4 <vTaskStartScheduler+0xcc>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a60:	f001 f9ce 	bl	8009e00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a64:	e00f      	b.n	8008a86 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6c:	d10b      	bne.n	8008a86 <vTaskStartScheduler+0xae>
	__asm volatile
 8008a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	60fb      	str	r3, [r7, #12]
}
 8008a80:	bf00      	nop
 8008a82:	bf00      	nop
 8008a84:	e7fd      	b.n	8008a82 <vTaskStartScheduler+0xaa>
}
 8008a86:	bf00      	nop
 8008a88:	3718      	adds	r7, #24
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	0800b434 	.word	0x0800b434
 8008a94:	080090c9 	.word	0x080090c9
 8008a98:	20001494 	.word	0x20001494
 8008a9c:	20001490 	.word	0x20001490
 8008aa0:	2000147c 	.word	0x2000147c
 8008aa4:	20001474 	.word	0x20001474

08008aa8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008aac:	4b04      	ldr	r3, [pc, #16]	@ (8008ac0 <vTaskSuspendAll+0x18>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	4a03      	ldr	r2, [pc, #12]	@ (8008ac0 <vTaskSuspendAll+0x18>)
 8008ab4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008ab6:	bf00      	nop
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr
 8008ac0:	20001498 	.word	0x20001498

08008ac4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008aca:	2300      	movs	r3, #0
 8008acc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ad2:	4b42      	ldr	r3, [pc, #264]	@ (8008bdc <xTaskResumeAll+0x118>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10b      	bne.n	8008af2 <xTaskResumeAll+0x2e>
	__asm volatile
 8008ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	603b      	str	r3, [r7, #0]
}
 8008aec:	bf00      	nop
 8008aee:	bf00      	nop
 8008af0:	e7fd      	b.n	8008aee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008af2:	f001 fa29 	bl	8009f48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008af6:	4b39      	ldr	r3, [pc, #228]	@ (8008bdc <xTaskResumeAll+0x118>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	4a37      	ldr	r2, [pc, #220]	@ (8008bdc <xTaskResumeAll+0x118>)
 8008afe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b00:	4b36      	ldr	r3, [pc, #216]	@ (8008bdc <xTaskResumeAll+0x118>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d162      	bne.n	8008bce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b08:	4b35      	ldr	r3, [pc, #212]	@ (8008be0 <xTaskResumeAll+0x11c>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d05e      	beq.n	8008bce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b10:	e02f      	b.n	8008b72 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b12:	4b34      	ldr	r3, [pc, #208]	@ (8008be4 <xTaskResumeAll+0x120>)
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	3318      	adds	r3, #24
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fe fd28 	bl	8007574 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	3304      	adds	r3, #4
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7fe fd23 	bl	8007574 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b32:	4b2d      	ldr	r3, [pc, #180]	@ (8008be8 <xTaskResumeAll+0x124>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d903      	bls.n	8008b42 <xTaskResumeAll+0x7e>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b3e:	4a2a      	ldr	r2, [pc, #168]	@ (8008be8 <xTaskResumeAll+0x124>)
 8008b40:	6013      	str	r3, [r2, #0]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b46:	4613      	mov	r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4a27      	ldr	r2, [pc, #156]	@ (8008bec <xTaskResumeAll+0x128>)
 8008b50:	441a      	add	r2, r3
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	3304      	adds	r3, #4
 8008b56:	4619      	mov	r1, r3
 8008b58:	4610      	mov	r0, r2
 8008b5a:	f7fe fcae 	bl	80074ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b62:	4b23      	ldr	r3, [pc, #140]	@ (8008bf0 <xTaskResumeAll+0x12c>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d302      	bcc.n	8008b72 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008b6c:	4b21      	ldr	r3, [pc, #132]	@ (8008bf4 <xTaskResumeAll+0x130>)
 8008b6e:	2201      	movs	r2, #1
 8008b70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b72:	4b1c      	ldr	r3, [pc, #112]	@ (8008be4 <xTaskResumeAll+0x120>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1cb      	bne.n	8008b12 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b80:	f000 fb58 	bl	8009234 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008b84:	4b1c      	ldr	r3, [pc, #112]	@ (8008bf8 <xTaskResumeAll+0x134>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d010      	beq.n	8008bb2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b90:	f000 f846 	bl	8008c20 <xTaskIncrementTick>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d002      	beq.n	8008ba0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008b9a:	4b16      	ldr	r3, [pc, #88]	@ (8008bf4 <xTaskResumeAll+0x130>)
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1f1      	bne.n	8008b90 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008bac:	4b12      	ldr	r3, [pc, #72]	@ (8008bf8 <xTaskResumeAll+0x134>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008bb2:	4b10      	ldr	r3, [pc, #64]	@ (8008bf4 <xTaskResumeAll+0x130>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d009      	beq.n	8008bce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8008bfc <xTaskResumeAll+0x138>)
 8008bc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bc4:	601a      	str	r2, [r3, #0]
 8008bc6:	f3bf 8f4f 	dsb	sy
 8008bca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008bce:	f001 f9ed 	bl	8009fac <vPortExitCritical>

	return xAlreadyYielded;
 8008bd2:	68bb      	ldr	r3, [r7, #8]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	20001498 	.word	0x20001498
 8008be0:	20001470 	.word	0x20001470
 8008be4:	20001430 	.word	0x20001430
 8008be8:	20001478 	.word	0x20001478
 8008bec:	20000fa0 	.word	0x20000fa0
 8008bf0:	20000f9c 	.word	0x20000f9c
 8008bf4:	20001484 	.word	0x20001484
 8008bf8:	20001480 	.word	0x20001480
 8008bfc:	e000ed04 	.word	0xe000ed04

08008c00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008c06:	4b05      	ldr	r3, [pc, #20]	@ (8008c1c <xTaskGetTickCount+0x1c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008c0c:	687b      	ldr	r3, [r7, #4]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	370c      	adds	r7, #12
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	20001474 	.word	0x20001474

08008c20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c26:	2300      	movs	r3, #0
 8008c28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c2a:	4b4f      	ldr	r3, [pc, #316]	@ (8008d68 <xTaskIncrementTick+0x148>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f040 8090 	bne.w	8008d54 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c34:	4b4d      	ldr	r3, [pc, #308]	@ (8008d6c <xTaskIncrementTick+0x14c>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c3c:	4a4b      	ldr	r2, [pc, #300]	@ (8008d6c <xTaskIncrementTick+0x14c>)
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d121      	bne.n	8008c8c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c48:	4b49      	ldr	r3, [pc, #292]	@ (8008d70 <xTaskIncrementTick+0x150>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00b      	beq.n	8008c6a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	603b      	str	r3, [r7, #0]
}
 8008c64:	bf00      	nop
 8008c66:	bf00      	nop
 8008c68:	e7fd      	b.n	8008c66 <xTaskIncrementTick+0x46>
 8008c6a:	4b41      	ldr	r3, [pc, #260]	@ (8008d70 <xTaskIncrementTick+0x150>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	60fb      	str	r3, [r7, #12]
 8008c70:	4b40      	ldr	r3, [pc, #256]	@ (8008d74 <xTaskIncrementTick+0x154>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a3e      	ldr	r2, [pc, #248]	@ (8008d70 <xTaskIncrementTick+0x150>)
 8008c76:	6013      	str	r3, [r2, #0]
 8008c78:	4a3e      	ldr	r2, [pc, #248]	@ (8008d74 <xTaskIncrementTick+0x154>)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6013      	str	r3, [r2, #0]
 8008c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8008d78 <xTaskIncrementTick+0x158>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	3301      	adds	r3, #1
 8008c84:	4a3c      	ldr	r2, [pc, #240]	@ (8008d78 <xTaskIncrementTick+0x158>)
 8008c86:	6013      	str	r3, [r2, #0]
 8008c88:	f000 fad4 	bl	8009234 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8008d7c <xTaskIncrementTick+0x15c>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d349      	bcc.n	8008d2a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c96:	4b36      	ldr	r3, [pc, #216]	@ (8008d70 <xTaskIncrementTick+0x150>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d104      	bne.n	8008caa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ca0:	4b36      	ldr	r3, [pc, #216]	@ (8008d7c <xTaskIncrementTick+0x15c>)
 8008ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca6:	601a      	str	r2, [r3, #0]
					break;
 8008ca8:	e03f      	b.n	8008d2a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008caa:	4b31      	ldr	r3, [pc, #196]	@ (8008d70 <xTaskIncrementTick+0x150>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d203      	bcs.n	8008cca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008cc2:	4a2e      	ldr	r2, [pc, #184]	@ (8008d7c <xTaskIncrementTick+0x15c>)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008cc8:	e02f      	b.n	8008d2a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	3304      	adds	r3, #4
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7fe fc50 	bl	8007574 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d004      	beq.n	8008ce6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	3318      	adds	r3, #24
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fe fc47 	bl	8007574 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cea:	4b25      	ldr	r3, [pc, #148]	@ (8008d80 <xTaskIncrementTick+0x160>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d903      	bls.n	8008cfa <xTaskIncrementTick+0xda>
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cf6:	4a22      	ldr	r2, [pc, #136]	@ (8008d80 <xTaskIncrementTick+0x160>)
 8008cf8:	6013      	str	r3, [r2, #0]
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cfe:	4613      	mov	r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4413      	add	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4a1f      	ldr	r2, [pc, #124]	@ (8008d84 <xTaskIncrementTick+0x164>)
 8008d08:	441a      	add	r2, r3
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	3304      	adds	r3, #4
 8008d0e:	4619      	mov	r1, r3
 8008d10:	4610      	mov	r0, r2
 8008d12:	f7fe fbd2 	bl	80074ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8008d88 <xTaskIncrementTick+0x168>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d3b8      	bcc.n	8008c96 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008d24:	2301      	movs	r3, #1
 8008d26:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d28:	e7b5      	b.n	8008c96 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d2a:	4b17      	ldr	r3, [pc, #92]	@ (8008d88 <xTaskIncrementTick+0x168>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d30:	4914      	ldr	r1, [pc, #80]	@ (8008d84 <xTaskIncrementTick+0x164>)
 8008d32:	4613      	mov	r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	440b      	add	r3, r1
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d901      	bls.n	8008d46 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008d42:	2301      	movs	r3, #1
 8008d44:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008d46:	4b11      	ldr	r3, [pc, #68]	@ (8008d8c <xTaskIncrementTick+0x16c>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d007      	beq.n	8008d5e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	617b      	str	r3, [r7, #20]
 8008d52:	e004      	b.n	8008d5e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008d54:	4b0e      	ldr	r3, [pc, #56]	@ (8008d90 <xTaskIncrementTick+0x170>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	4a0d      	ldr	r2, [pc, #52]	@ (8008d90 <xTaskIncrementTick+0x170>)
 8008d5c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008d5e:	697b      	ldr	r3, [r7, #20]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3718      	adds	r7, #24
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	20001498 	.word	0x20001498
 8008d6c:	20001474 	.word	0x20001474
 8008d70:	20001428 	.word	0x20001428
 8008d74:	2000142c 	.word	0x2000142c
 8008d78:	20001488 	.word	0x20001488
 8008d7c:	20001490 	.word	0x20001490
 8008d80:	20001478 	.word	0x20001478
 8008d84:	20000fa0 	.word	0x20000fa0
 8008d88:	20000f9c 	.word	0x20000f9c
 8008d8c:	20001484 	.word	0x20001484
 8008d90:	20001480 	.word	0x20001480

08008d94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d9a:	4b28      	ldr	r3, [pc, #160]	@ (8008e3c <vTaskSwitchContext+0xa8>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d003      	beq.n	8008daa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008da2:	4b27      	ldr	r3, [pc, #156]	@ (8008e40 <vTaskSwitchContext+0xac>)
 8008da4:	2201      	movs	r2, #1
 8008da6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008da8:	e042      	b.n	8008e30 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008daa:	4b25      	ldr	r3, [pc, #148]	@ (8008e40 <vTaskSwitchContext+0xac>)
 8008dac:	2200      	movs	r2, #0
 8008dae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008db0:	4b24      	ldr	r3, [pc, #144]	@ (8008e44 <vTaskSwitchContext+0xb0>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	60fb      	str	r3, [r7, #12]
 8008db6:	e011      	b.n	8008ddc <vTaskSwitchContext+0x48>
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d10b      	bne.n	8008dd6 <vTaskSwitchContext+0x42>
	__asm volatile
 8008dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	607b      	str	r3, [r7, #4]
}
 8008dd0:	bf00      	nop
 8008dd2:	bf00      	nop
 8008dd4:	e7fd      	b.n	8008dd2 <vTaskSwitchContext+0x3e>
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	60fb      	str	r3, [r7, #12]
 8008ddc:	491a      	ldr	r1, [pc, #104]	@ (8008e48 <vTaskSwitchContext+0xb4>)
 8008dde:	68fa      	ldr	r2, [r7, #12]
 8008de0:	4613      	mov	r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	4413      	add	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	440b      	add	r3, r1
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d0e3      	beq.n	8008db8 <vTaskSwitchContext+0x24>
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	4613      	mov	r3, r2
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4413      	add	r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4a13      	ldr	r2, [pc, #76]	@ (8008e48 <vTaskSwitchContext+0xb4>)
 8008dfc:	4413      	add	r3, r2
 8008dfe:	60bb      	str	r3, [r7, #8]
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	605a      	str	r2, [r3, #4]
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	685a      	ldr	r2, [r3, #4]
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	3308      	adds	r3, #8
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d104      	bne.n	8008e20 <vTaskSwitchContext+0x8c>
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	605a      	str	r2, [r3, #4]
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	4a09      	ldr	r2, [pc, #36]	@ (8008e4c <vTaskSwitchContext+0xb8>)
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	4a06      	ldr	r2, [pc, #24]	@ (8008e44 <vTaskSwitchContext+0xb0>)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6013      	str	r3, [r2, #0]
}
 8008e30:	bf00      	nop
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr
 8008e3c:	20001498 	.word	0x20001498
 8008e40:	20001484 	.word	0x20001484
 8008e44:	20001478 	.word	0x20001478
 8008e48:	20000fa0 	.word	0x20000fa0
 8008e4c:	20000f9c 	.word	0x20000f9c

08008e50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10b      	bne.n	8008e78 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	60fb      	str	r3, [r7, #12]
}
 8008e72:	bf00      	nop
 8008e74:	bf00      	nop
 8008e76:	e7fd      	b.n	8008e74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e78:	4b07      	ldr	r3, [pc, #28]	@ (8008e98 <vTaskPlaceOnEventList+0x48>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	3318      	adds	r3, #24
 8008e7e:	4619      	mov	r1, r3
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f7fe fb3e 	bl	8007502 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e86:	2101      	movs	r1, #1
 8008e88:	6838      	ldr	r0, [r7, #0]
 8008e8a:	f000 fb81 	bl	8009590 <prvAddCurrentTaskToDelayedList>
}
 8008e8e:	bf00      	nop
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	20000f9c 	.word	0x20000f9c

08008e9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b086      	sub	sp, #24
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d10b      	bne.n	8008ec6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb2:	f383 8811 	msr	BASEPRI, r3
 8008eb6:	f3bf 8f6f 	isb	sy
 8008eba:	f3bf 8f4f 	dsb	sy
 8008ebe:	617b      	str	r3, [r7, #20]
}
 8008ec0:	bf00      	nop
 8008ec2:	bf00      	nop
 8008ec4:	e7fd      	b.n	8008ec2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8008ef0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3318      	adds	r3, #24
 8008ecc:	4619      	mov	r1, r3
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f7fe faf3 	bl	80074ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d002      	beq.n	8008ee0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008eda:	f04f 33ff 	mov.w	r3, #4294967295
 8008ede:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008ee0:	6879      	ldr	r1, [r7, #4]
 8008ee2:	68b8      	ldr	r0, [r7, #8]
 8008ee4:	f000 fb54 	bl	8009590 <prvAddCurrentTaskToDelayedList>
	}
 8008ee8:	bf00      	nop
 8008eea:	3718      	adds	r7, #24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	20000f9c 	.word	0x20000f9c

08008ef4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10b      	bne.n	8008f22 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0e:	f383 8811 	msr	BASEPRI, r3
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	60fb      	str	r3, [r7, #12]
}
 8008f1c:	bf00      	nop
 8008f1e:	bf00      	nop
 8008f20:	e7fd      	b.n	8008f1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	3318      	adds	r3, #24
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fe fb24 	bl	8007574 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8008fa4 <xTaskRemoveFromEventList+0xb0>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d11d      	bne.n	8008f70 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	3304      	adds	r3, #4
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7fe fb1b 	bl	8007574 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f42:	4b19      	ldr	r3, [pc, #100]	@ (8008fa8 <xTaskRemoveFromEventList+0xb4>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d903      	bls.n	8008f52 <xTaskRemoveFromEventList+0x5e>
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f4e:	4a16      	ldr	r2, [pc, #88]	@ (8008fa8 <xTaskRemoveFromEventList+0xb4>)
 8008f50:	6013      	str	r3, [r2, #0]
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f56:	4613      	mov	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4a13      	ldr	r2, [pc, #76]	@ (8008fac <xTaskRemoveFromEventList+0xb8>)
 8008f60:	441a      	add	r2, r3
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	3304      	adds	r3, #4
 8008f66:	4619      	mov	r1, r3
 8008f68:	4610      	mov	r0, r2
 8008f6a:	f7fe faa6 	bl	80074ba <vListInsertEnd>
 8008f6e:	e005      	b.n	8008f7c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	3318      	adds	r3, #24
 8008f74:	4619      	mov	r1, r3
 8008f76:	480e      	ldr	r0, [pc, #56]	@ (8008fb0 <xTaskRemoveFromEventList+0xbc>)
 8008f78:	f7fe fa9f 	bl	80074ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f80:	4b0c      	ldr	r3, [pc, #48]	@ (8008fb4 <xTaskRemoveFromEventList+0xc0>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d905      	bls.n	8008f96 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8008fb8 <xTaskRemoveFromEventList+0xc4>)
 8008f90:	2201      	movs	r2, #1
 8008f92:	601a      	str	r2, [r3, #0]
 8008f94:	e001      	b.n	8008f9a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008f96:	2300      	movs	r3, #0
 8008f98:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008f9a:	697b      	ldr	r3, [r7, #20]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3718      	adds	r7, #24
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	20001498 	.word	0x20001498
 8008fa8:	20001478 	.word	0x20001478
 8008fac:	20000fa0 	.word	0x20000fa0
 8008fb0:	20001430 	.word	0x20001430
 8008fb4:	20000f9c 	.word	0x20000f9c
 8008fb8:	20001484 	.word	0x20001484

08008fbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008fc4:	4b06      	ldr	r3, [pc, #24]	@ (8008fe0 <vTaskInternalSetTimeOutState+0x24>)
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008fcc:	4b05      	ldr	r3, [pc, #20]	@ (8008fe4 <vTaskInternalSetTimeOutState+0x28>)
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	605a      	str	r2, [r3, #4]
}
 8008fd4:	bf00      	nop
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr
 8008fe0:	20001488 	.word	0x20001488
 8008fe4:	20001474 	.word	0x20001474

08008fe8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b088      	sub	sp, #32
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10b      	bne.n	8009010 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ffc:	f383 8811 	msr	BASEPRI, r3
 8009000:	f3bf 8f6f 	isb	sy
 8009004:	f3bf 8f4f 	dsb	sy
 8009008:	613b      	str	r3, [r7, #16]
}
 800900a:	bf00      	nop
 800900c:	bf00      	nop
 800900e:	e7fd      	b.n	800900c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d10b      	bne.n	800902e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800901a:	f383 8811 	msr	BASEPRI, r3
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	60fb      	str	r3, [r7, #12]
}
 8009028:	bf00      	nop
 800902a:	bf00      	nop
 800902c:	e7fd      	b.n	800902a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800902e:	f000 ff8b 	bl	8009f48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009032:	4b1d      	ldr	r3, [pc, #116]	@ (80090a8 <xTaskCheckForTimeOut+0xc0>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	69ba      	ldr	r2, [r7, #24]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904a:	d102      	bne.n	8009052 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800904c:	2300      	movs	r3, #0
 800904e:	61fb      	str	r3, [r7, #28]
 8009050:	e023      	b.n	800909a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	4b15      	ldr	r3, [pc, #84]	@ (80090ac <xTaskCheckForTimeOut+0xc4>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	429a      	cmp	r2, r3
 800905c:	d007      	beq.n	800906e <xTaskCheckForTimeOut+0x86>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	69ba      	ldr	r2, [r7, #24]
 8009064:	429a      	cmp	r2, r3
 8009066:	d302      	bcc.n	800906e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009068:	2301      	movs	r3, #1
 800906a:	61fb      	str	r3, [r7, #28]
 800906c:	e015      	b.n	800909a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	697a      	ldr	r2, [r7, #20]
 8009074:	429a      	cmp	r2, r3
 8009076:	d20b      	bcs.n	8009090 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	1ad2      	subs	r2, r2, r3
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7ff ff99 	bl	8008fbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800908a:	2300      	movs	r3, #0
 800908c:	61fb      	str	r3, [r7, #28]
 800908e:	e004      	b.n	800909a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	2200      	movs	r2, #0
 8009094:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009096:	2301      	movs	r3, #1
 8009098:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800909a:	f000 ff87 	bl	8009fac <vPortExitCritical>

	return xReturn;
 800909e:	69fb      	ldr	r3, [r7, #28]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3720      	adds	r7, #32
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	20001474 	.word	0x20001474
 80090ac:	20001488 	.word	0x20001488

080090b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80090b0:	b480      	push	{r7}
 80090b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80090b4:	4b03      	ldr	r3, [pc, #12]	@ (80090c4 <vTaskMissedYield+0x14>)
 80090b6:	2201      	movs	r2, #1
 80090b8:	601a      	str	r2, [r3, #0]
}
 80090ba:	bf00      	nop
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr
 80090c4:	20001484 	.word	0x20001484

080090c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80090d0:	f000 f852 	bl	8009178 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80090d4:	4b06      	ldr	r3, [pc, #24]	@ (80090f0 <prvIdleTask+0x28>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d9f9      	bls.n	80090d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80090dc:	4b05      	ldr	r3, [pc, #20]	@ (80090f4 <prvIdleTask+0x2c>)
 80090de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090e2:	601a      	str	r2, [r3, #0]
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80090ec:	e7f0      	b.n	80090d0 <prvIdleTask+0x8>
 80090ee:	bf00      	nop
 80090f0:	20000fa0 	.word	0x20000fa0
 80090f4:	e000ed04 	.word	0xe000ed04

080090f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090fe:	2300      	movs	r3, #0
 8009100:	607b      	str	r3, [r7, #4]
 8009102:	e00c      	b.n	800911e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	4613      	mov	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	4413      	add	r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4a12      	ldr	r2, [pc, #72]	@ (8009158 <prvInitialiseTaskLists+0x60>)
 8009110:	4413      	add	r3, r2
 8009112:	4618      	mov	r0, r3
 8009114:	f7fe f9a4 	bl	8007460 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	3301      	adds	r3, #1
 800911c:	607b      	str	r3, [r7, #4]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2b37      	cmp	r3, #55	@ 0x37
 8009122:	d9ef      	bls.n	8009104 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009124:	480d      	ldr	r0, [pc, #52]	@ (800915c <prvInitialiseTaskLists+0x64>)
 8009126:	f7fe f99b 	bl	8007460 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800912a:	480d      	ldr	r0, [pc, #52]	@ (8009160 <prvInitialiseTaskLists+0x68>)
 800912c:	f7fe f998 	bl	8007460 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009130:	480c      	ldr	r0, [pc, #48]	@ (8009164 <prvInitialiseTaskLists+0x6c>)
 8009132:	f7fe f995 	bl	8007460 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009136:	480c      	ldr	r0, [pc, #48]	@ (8009168 <prvInitialiseTaskLists+0x70>)
 8009138:	f7fe f992 	bl	8007460 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800913c:	480b      	ldr	r0, [pc, #44]	@ (800916c <prvInitialiseTaskLists+0x74>)
 800913e:	f7fe f98f 	bl	8007460 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009142:	4b0b      	ldr	r3, [pc, #44]	@ (8009170 <prvInitialiseTaskLists+0x78>)
 8009144:	4a05      	ldr	r2, [pc, #20]	@ (800915c <prvInitialiseTaskLists+0x64>)
 8009146:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009148:	4b0a      	ldr	r3, [pc, #40]	@ (8009174 <prvInitialiseTaskLists+0x7c>)
 800914a:	4a05      	ldr	r2, [pc, #20]	@ (8009160 <prvInitialiseTaskLists+0x68>)
 800914c:	601a      	str	r2, [r3, #0]
}
 800914e:	bf00      	nop
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	20000fa0 	.word	0x20000fa0
 800915c:	20001400 	.word	0x20001400
 8009160:	20001414 	.word	0x20001414
 8009164:	20001430 	.word	0x20001430
 8009168:	20001444 	.word	0x20001444
 800916c:	2000145c 	.word	0x2000145c
 8009170:	20001428 	.word	0x20001428
 8009174:	2000142c 	.word	0x2000142c

08009178 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800917e:	e019      	b.n	80091b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009180:	f000 fee2 	bl	8009f48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009184:	4b10      	ldr	r3, [pc, #64]	@ (80091c8 <prvCheckTasksWaitingTermination+0x50>)
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	3304      	adds	r3, #4
 8009190:	4618      	mov	r0, r3
 8009192:	f7fe f9ef 	bl	8007574 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009196:	4b0d      	ldr	r3, [pc, #52]	@ (80091cc <prvCheckTasksWaitingTermination+0x54>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	3b01      	subs	r3, #1
 800919c:	4a0b      	ldr	r2, [pc, #44]	@ (80091cc <prvCheckTasksWaitingTermination+0x54>)
 800919e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80091a0:	4b0b      	ldr	r3, [pc, #44]	@ (80091d0 <prvCheckTasksWaitingTermination+0x58>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	3b01      	subs	r3, #1
 80091a6:	4a0a      	ldr	r2, [pc, #40]	@ (80091d0 <prvCheckTasksWaitingTermination+0x58>)
 80091a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80091aa:	f000 feff 	bl	8009fac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f810 	bl	80091d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091b4:	4b06      	ldr	r3, [pc, #24]	@ (80091d0 <prvCheckTasksWaitingTermination+0x58>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1e1      	bne.n	8009180 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80091bc:	bf00      	nop
 80091be:	bf00      	nop
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	20001444 	.word	0x20001444
 80091cc:	20001470 	.word	0x20001470
 80091d0:	20001458 	.word	0x20001458

080091d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d108      	bne.n	80091f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ea:	4618      	mov	r0, r3
 80091ec:	f001 f89c 	bl	800a328 <vPortFree>
				vPortFree( pxTCB );
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f001 f899 	bl	800a328 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80091f6:	e019      	b.n	800922c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d103      	bne.n	800920a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f001 f890 	bl	800a328 <vPortFree>
	}
 8009208:	e010      	b.n	800922c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009210:	2b02      	cmp	r3, #2
 8009212:	d00b      	beq.n	800922c <prvDeleteTCB+0x58>
	__asm volatile
 8009214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009218:	f383 8811 	msr	BASEPRI, r3
 800921c:	f3bf 8f6f 	isb	sy
 8009220:	f3bf 8f4f 	dsb	sy
 8009224:	60fb      	str	r3, [r7, #12]
}
 8009226:	bf00      	nop
 8009228:	bf00      	nop
 800922a:	e7fd      	b.n	8009228 <prvDeleteTCB+0x54>
	}
 800922c:	bf00      	nop
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800923a:	4b0c      	ldr	r3, [pc, #48]	@ (800926c <prvResetNextTaskUnblockTime+0x38>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d104      	bne.n	800924e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009244:	4b0a      	ldr	r3, [pc, #40]	@ (8009270 <prvResetNextTaskUnblockTime+0x3c>)
 8009246:	f04f 32ff 	mov.w	r2, #4294967295
 800924a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800924c:	e008      	b.n	8009260 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800924e:	4b07      	ldr	r3, [pc, #28]	@ (800926c <prvResetNextTaskUnblockTime+0x38>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	4a04      	ldr	r2, [pc, #16]	@ (8009270 <prvResetNextTaskUnblockTime+0x3c>)
 800925e:	6013      	str	r3, [r2, #0]
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr
 800926c:	20001428 	.word	0x20001428
 8009270:	20001490 	.word	0x20001490

08009274 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800927a:	4b0b      	ldr	r3, [pc, #44]	@ (80092a8 <xTaskGetSchedulerState+0x34>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d102      	bne.n	8009288 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009282:	2301      	movs	r3, #1
 8009284:	607b      	str	r3, [r7, #4]
 8009286:	e008      	b.n	800929a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009288:	4b08      	ldr	r3, [pc, #32]	@ (80092ac <xTaskGetSchedulerState+0x38>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d102      	bne.n	8009296 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009290:	2302      	movs	r3, #2
 8009292:	607b      	str	r3, [r7, #4]
 8009294:	e001      	b.n	800929a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009296:	2300      	movs	r3, #0
 8009298:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800929a:	687b      	ldr	r3, [r7, #4]
	}
 800929c:	4618      	mov	r0, r3
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr
 80092a8:	2000147c 	.word	0x2000147c
 80092ac:	20001498 	.word	0x20001498

080092b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80092bc:	2300      	movs	r3, #0
 80092be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d051      	beq.n	800936a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092ca:	4b2a      	ldr	r3, [pc, #168]	@ (8009374 <xTaskPriorityInherit+0xc4>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d241      	bcs.n	8009358 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	db06      	blt.n	80092ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092dc:	4b25      	ldr	r3, [pc, #148]	@ (8009374 <xTaskPriorityInherit+0xc4>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	6959      	ldr	r1, [r3, #20]
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092f2:	4613      	mov	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4413      	add	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	4a1f      	ldr	r2, [pc, #124]	@ (8009378 <xTaskPriorityInherit+0xc8>)
 80092fc:	4413      	add	r3, r2
 80092fe:	4299      	cmp	r1, r3
 8009300:	d122      	bne.n	8009348 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	3304      	adds	r3, #4
 8009306:	4618      	mov	r0, r3
 8009308:	f7fe f934 	bl	8007574 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800930c:	4b19      	ldr	r3, [pc, #100]	@ (8009374 <xTaskPriorityInherit+0xc4>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800931a:	4b18      	ldr	r3, [pc, #96]	@ (800937c <xTaskPriorityInherit+0xcc>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	429a      	cmp	r2, r3
 8009320:	d903      	bls.n	800932a <xTaskPriorityInherit+0x7a>
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009326:	4a15      	ldr	r2, [pc, #84]	@ (800937c <xTaskPriorityInherit+0xcc>)
 8009328:	6013      	str	r3, [r2, #0]
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800932e:	4613      	mov	r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4413      	add	r3, r2
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	4a10      	ldr	r2, [pc, #64]	@ (8009378 <xTaskPriorityInherit+0xc8>)
 8009338:	441a      	add	r2, r3
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	3304      	adds	r3, #4
 800933e:	4619      	mov	r1, r3
 8009340:	4610      	mov	r0, r2
 8009342:	f7fe f8ba 	bl	80074ba <vListInsertEnd>
 8009346:	e004      	b.n	8009352 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009348:	4b0a      	ldr	r3, [pc, #40]	@ (8009374 <xTaskPriorityInherit+0xc4>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009352:	2301      	movs	r3, #1
 8009354:	60fb      	str	r3, [r7, #12]
 8009356:	e008      	b.n	800936a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800935c:	4b05      	ldr	r3, [pc, #20]	@ (8009374 <xTaskPriorityInherit+0xc4>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009362:	429a      	cmp	r2, r3
 8009364:	d201      	bcs.n	800936a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009366:	2301      	movs	r3, #1
 8009368:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800936a:	68fb      	ldr	r3, [r7, #12]
	}
 800936c:	4618      	mov	r0, r3
 800936e:	3710      	adds	r7, #16
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	20000f9c 	.word	0x20000f9c
 8009378:	20000fa0 	.word	0x20000fa0
 800937c:	20001478 	.word	0x20001478

08009380 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009380:	b580      	push	{r7, lr}
 8009382:	b086      	sub	sp, #24
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800938c:	2300      	movs	r3, #0
 800938e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d058      	beq.n	8009448 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009396:	4b2f      	ldr	r3, [pc, #188]	@ (8009454 <xTaskPriorityDisinherit+0xd4>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	693a      	ldr	r2, [r7, #16]
 800939c:	429a      	cmp	r2, r3
 800939e:	d00b      	beq.n	80093b8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80093a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093a4:	f383 8811 	msr	BASEPRI, r3
 80093a8:	f3bf 8f6f 	isb	sy
 80093ac:	f3bf 8f4f 	dsb	sy
 80093b0:	60fb      	str	r3, [r7, #12]
}
 80093b2:	bf00      	nop
 80093b4:	bf00      	nop
 80093b6:	e7fd      	b.n	80093b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10b      	bne.n	80093d8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	60bb      	str	r3, [r7, #8]
}
 80093d2:	bf00      	nop
 80093d4:	bf00      	nop
 80093d6:	e7fd      	b.n	80093d4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093dc:	1e5a      	subs	r2, r3, #1
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d02c      	beq.n	8009448 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d128      	bne.n	8009448 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	3304      	adds	r3, #4
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7fe f8ba 	bl	8007574 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800940c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009418:	4b0f      	ldr	r3, [pc, #60]	@ (8009458 <xTaskPriorityDisinherit+0xd8>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	429a      	cmp	r2, r3
 800941e:	d903      	bls.n	8009428 <xTaskPriorityDisinherit+0xa8>
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009424:	4a0c      	ldr	r2, [pc, #48]	@ (8009458 <xTaskPriorityDisinherit+0xd8>)
 8009426:	6013      	str	r3, [r2, #0]
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800942c:	4613      	mov	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4a09      	ldr	r2, [pc, #36]	@ (800945c <xTaskPriorityDisinherit+0xdc>)
 8009436:	441a      	add	r2, r3
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	3304      	adds	r3, #4
 800943c:	4619      	mov	r1, r3
 800943e:	4610      	mov	r0, r2
 8009440:	f7fe f83b 	bl	80074ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009444:	2301      	movs	r3, #1
 8009446:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009448:	697b      	ldr	r3, [r7, #20]
	}
 800944a:	4618      	mov	r0, r3
 800944c:	3718      	adds	r7, #24
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	20000f9c 	.word	0x20000f9c
 8009458:	20001478 	.word	0x20001478
 800945c:	20000fa0 	.word	0x20000fa0

08009460 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009460:	b580      	push	{r7, lr}
 8009462:	b088      	sub	sp, #32
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800946e:	2301      	movs	r3, #1
 8009470:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d06c      	beq.n	8009552 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800947c:	2b00      	cmp	r3, #0
 800947e:	d10b      	bne.n	8009498 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009484:	f383 8811 	msr	BASEPRI, r3
 8009488:	f3bf 8f6f 	isb	sy
 800948c:	f3bf 8f4f 	dsb	sy
 8009490:	60fb      	str	r3, [r7, #12]
}
 8009492:	bf00      	nop
 8009494:	bf00      	nop
 8009496:	e7fd      	b.n	8009494 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800949c:	683a      	ldr	r2, [r7, #0]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d902      	bls.n	80094a8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	61fb      	str	r3, [r7, #28]
 80094a6:	e002      	b.n	80094ae <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094ac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b2:	69fa      	ldr	r2, [r7, #28]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d04c      	beq.n	8009552 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094bc:	697a      	ldr	r2, [r7, #20]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d147      	bne.n	8009552 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80094c2:	4b26      	ldr	r3, [pc, #152]	@ (800955c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	69ba      	ldr	r2, [r7, #24]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d10b      	bne.n	80094e4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80094cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d0:	f383 8811 	msr	BASEPRI, r3
 80094d4:	f3bf 8f6f 	isb	sy
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	60bb      	str	r3, [r7, #8]
}
 80094de:	bf00      	nop
 80094e0:	bf00      	nop
 80094e2:	e7fd      	b.n	80094e0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	69fa      	ldr	r2, [r7, #28]
 80094ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	db04      	blt.n	8009502 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	6959      	ldr	r1, [r3, #20]
 8009506:	693a      	ldr	r2, [r7, #16]
 8009508:	4613      	mov	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	4413      	add	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4a13      	ldr	r2, [pc, #76]	@ (8009560 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009512:	4413      	add	r3, r2
 8009514:	4299      	cmp	r1, r3
 8009516:	d11c      	bne.n	8009552 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	3304      	adds	r3, #4
 800951c:	4618      	mov	r0, r3
 800951e:	f7fe f829 	bl	8007574 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009526:	4b0f      	ldr	r3, [pc, #60]	@ (8009564 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	429a      	cmp	r2, r3
 800952c:	d903      	bls.n	8009536 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009532:	4a0c      	ldr	r2, [pc, #48]	@ (8009564 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009534:	6013      	str	r3, [r2, #0]
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800953a:	4613      	mov	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4413      	add	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4a07      	ldr	r2, [pc, #28]	@ (8009560 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009544:	441a      	add	r2, r3
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	3304      	adds	r3, #4
 800954a:	4619      	mov	r1, r3
 800954c:	4610      	mov	r0, r2
 800954e:	f7fd ffb4 	bl	80074ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009552:	bf00      	nop
 8009554:	3720      	adds	r7, #32
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	20000f9c 	.word	0x20000f9c
 8009560:	20000fa0 	.word	0x20000fa0
 8009564:	20001478 	.word	0x20001478

08009568 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009568:	b480      	push	{r7}
 800956a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800956c:	4b07      	ldr	r3, [pc, #28]	@ (800958c <pvTaskIncrementMutexHeldCount+0x24>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d004      	beq.n	800957e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009574:	4b05      	ldr	r3, [pc, #20]	@ (800958c <pvTaskIncrementMutexHeldCount+0x24>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800957a:	3201      	adds	r2, #1
 800957c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800957e:	4b03      	ldr	r3, [pc, #12]	@ (800958c <pvTaskIncrementMutexHeldCount+0x24>)
 8009580:	681b      	ldr	r3, [r3, #0]
	}
 8009582:	4618      	mov	r0, r3
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	20000f9c 	.word	0x20000f9c

08009590 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800959a:	4b21      	ldr	r3, [pc, #132]	@ (8009620 <prvAddCurrentTaskToDelayedList+0x90>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095a0:	4b20      	ldr	r3, [pc, #128]	@ (8009624 <prvAddCurrentTaskToDelayedList+0x94>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	3304      	adds	r3, #4
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7fd ffe4 	bl	8007574 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b2:	d10a      	bne.n	80095ca <prvAddCurrentTaskToDelayedList+0x3a>
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d007      	beq.n	80095ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095ba:	4b1a      	ldr	r3, [pc, #104]	@ (8009624 <prvAddCurrentTaskToDelayedList+0x94>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	3304      	adds	r3, #4
 80095c0:	4619      	mov	r1, r3
 80095c2:	4819      	ldr	r0, [pc, #100]	@ (8009628 <prvAddCurrentTaskToDelayedList+0x98>)
 80095c4:	f7fd ff79 	bl	80074ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80095c8:	e026      	b.n	8009618 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4413      	add	r3, r2
 80095d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80095d2:	4b14      	ldr	r3, [pc, #80]	@ (8009624 <prvAddCurrentTaskToDelayedList+0x94>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68ba      	ldr	r2, [r7, #8]
 80095d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d209      	bcs.n	80095f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095e2:	4b12      	ldr	r3, [pc, #72]	@ (800962c <prvAddCurrentTaskToDelayedList+0x9c>)
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009624 <prvAddCurrentTaskToDelayedList+0x94>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3304      	adds	r3, #4
 80095ec:	4619      	mov	r1, r3
 80095ee:	4610      	mov	r0, r2
 80095f0:	f7fd ff87 	bl	8007502 <vListInsert>
}
 80095f4:	e010      	b.n	8009618 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095f6:	4b0e      	ldr	r3, [pc, #56]	@ (8009630 <prvAddCurrentTaskToDelayedList+0xa0>)
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	4b0a      	ldr	r3, [pc, #40]	@ (8009624 <prvAddCurrentTaskToDelayedList+0x94>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	3304      	adds	r3, #4
 8009600:	4619      	mov	r1, r3
 8009602:	4610      	mov	r0, r2
 8009604:	f7fd ff7d 	bl	8007502 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009608:	4b0a      	ldr	r3, [pc, #40]	@ (8009634 <prvAddCurrentTaskToDelayedList+0xa4>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	429a      	cmp	r2, r3
 8009610:	d202      	bcs.n	8009618 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009612:	4a08      	ldr	r2, [pc, #32]	@ (8009634 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	6013      	str	r3, [r2, #0]
}
 8009618:	bf00      	nop
 800961a:	3710      	adds	r7, #16
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	20001474 	.word	0x20001474
 8009624:	20000f9c 	.word	0x20000f9c
 8009628:	2000145c 	.word	0x2000145c
 800962c:	2000142c 	.word	0x2000142c
 8009630:	20001428 	.word	0x20001428
 8009634:	20001490 	.word	0x20001490

08009638 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b08a      	sub	sp, #40	@ 0x28
 800963c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800963e:	2300      	movs	r3, #0
 8009640:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009642:	f000 fb13 	bl	8009c6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009646:	4b1d      	ldr	r3, [pc, #116]	@ (80096bc <xTimerCreateTimerTask+0x84>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d021      	beq.n	8009692 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800964e:	2300      	movs	r3, #0
 8009650:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009652:	2300      	movs	r3, #0
 8009654:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009656:	1d3a      	adds	r2, r7, #4
 8009658:	f107 0108 	add.w	r1, r7, #8
 800965c:	f107 030c 	add.w	r3, r7, #12
 8009660:	4618      	mov	r0, r3
 8009662:	f7fd fee3 	bl	800742c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009666:	6879      	ldr	r1, [r7, #4]
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	9202      	str	r2, [sp, #8]
 800966e:	9301      	str	r3, [sp, #4]
 8009670:	2302      	movs	r3, #2
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	2300      	movs	r3, #0
 8009676:	460a      	mov	r2, r1
 8009678:	4911      	ldr	r1, [pc, #68]	@ (80096c0 <xTimerCreateTimerTask+0x88>)
 800967a:	4812      	ldr	r0, [pc, #72]	@ (80096c4 <xTimerCreateTimerTask+0x8c>)
 800967c:	f7fe ffd0 	bl	8008620 <xTaskCreateStatic>
 8009680:	4603      	mov	r3, r0
 8009682:	4a11      	ldr	r2, [pc, #68]	@ (80096c8 <xTimerCreateTimerTask+0x90>)
 8009684:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009686:	4b10      	ldr	r3, [pc, #64]	@ (80096c8 <xTimerCreateTimerTask+0x90>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d001      	beq.n	8009692 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800968e:	2301      	movs	r3, #1
 8009690:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d10b      	bne.n	80096b0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800969c:	f383 8811 	msr	BASEPRI, r3
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	f3bf 8f4f 	dsb	sy
 80096a8:	613b      	str	r3, [r7, #16]
}
 80096aa:	bf00      	nop
 80096ac:	bf00      	nop
 80096ae:	e7fd      	b.n	80096ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80096b0:	697b      	ldr	r3, [r7, #20]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3718      	adds	r7, #24
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	200014cc 	.word	0x200014cc
 80096c0:	0800b43c 	.word	0x0800b43c
 80096c4:	08009805 	.word	0x08009805
 80096c8:	200014d0 	.word	0x200014d0

080096cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b08a      	sub	sp, #40	@ 0x28
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	607a      	str	r2, [r7, #4]
 80096d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80096da:	2300      	movs	r3, #0
 80096dc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10b      	bne.n	80096fc <xTimerGenericCommand+0x30>
	__asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	623b      	str	r3, [r7, #32]
}
 80096f6:	bf00      	nop
 80096f8:	bf00      	nop
 80096fa:	e7fd      	b.n	80096f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80096fc:	4b19      	ldr	r3, [pc, #100]	@ (8009764 <xTimerGenericCommand+0x98>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d02a      	beq.n	800975a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	2b05      	cmp	r3, #5
 8009714:	dc18      	bgt.n	8009748 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009716:	f7ff fdad 	bl	8009274 <xTaskGetSchedulerState>
 800971a:	4603      	mov	r3, r0
 800971c:	2b02      	cmp	r3, #2
 800971e:	d109      	bne.n	8009734 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009720:	4b10      	ldr	r3, [pc, #64]	@ (8009764 <xTimerGenericCommand+0x98>)
 8009722:	6818      	ldr	r0, [r3, #0]
 8009724:	f107 0110 	add.w	r1, r7, #16
 8009728:	2300      	movs	r3, #0
 800972a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800972c:	f7fe f900 	bl	8007930 <xQueueGenericSend>
 8009730:	6278      	str	r0, [r7, #36]	@ 0x24
 8009732:	e012      	b.n	800975a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009734:	4b0b      	ldr	r3, [pc, #44]	@ (8009764 <xTimerGenericCommand+0x98>)
 8009736:	6818      	ldr	r0, [r3, #0]
 8009738:	f107 0110 	add.w	r1, r7, #16
 800973c:	2300      	movs	r3, #0
 800973e:	2200      	movs	r2, #0
 8009740:	f7fe f8f6 	bl	8007930 <xQueueGenericSend>
 8009744:	6278      	str	r0, [r7, #36]	@ 0x24
 8009746:	e008      	b.n	800975a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009748:	4b06      	ldr	r3, [pc, #24]	@ (8009764 <xTimerGenericCommand+0x98>)
 800974a:	6818      	ldr	r0, [r3, #0]
 800974c:	f107 0110 	add.w	r1, r7, #16
 8009750:	2300      	movs	r3, #0
 8009752:	683a      	ldr	r2, [r7, #0]
 8009754:	f7fe f9ee 	bl	8007b34 <xQueueGenericSendFromISR>
 8009758:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800975a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800975c:	4618      	mov	r0, r3
 800975e:	3728      	adds	r7, #40	@ 0x28
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	200014cc 	.word	0x200014cc

08009768 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b088      	sub	sp, #32
 800976c:	af02      	add	r7, sp, #8
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009772:	4b23      	ldr	r3, [pc, #140]	@ (8009800 <prvProcessExpiredTimer+0x98>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	3304      	adds	r3, #4
 8009780:	4618      	mov	r0, r3
 8009782:	f7fd fef7 	bl	8007574 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800978c:	f003 0304 	and.w	r3, r3, #4
 8009790:	2b00      	cmp	r3, #0
 8009792:	d023      	beq.n	80097dc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	699a      	ldr	r2, [r3, #24]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	18d1      	adds	r1, r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	683a      	ldr	r2, [r7, #0]
 80097a0:	6978      	ldr	r0, [r7, #20]
 80097a2:	f000 f8d5 	bl	8009950 <prvInsertTimerInActiveList>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d020      	beq.n	80097ee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097ac:	2300      	movs	r3, #0
 80097ae:	9300      	str	r3, [sp, #0]
 80097b0:	2300      	movs	r3, #0
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	2100      	movs	r1, #0
 80097b6:	6978      	ldr	r0, [r7, #20]
 80097b8:	f7ff ff88 	bl	80096cc <xTimerGenericCommand>
 80097bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d114      	bne.n	80097ee <prvProcessExpiredTimer+0x86>
	__asm volatile
 80097c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c8:	f383 8811 	msr	BASEPRI, r3
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	60fb      	str	r3, [r7, #12]
}
 80097d6:	bf00      	nop
 80097d8:	bf00      	nop
 80097da:	e7fd      	b.n	80097d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097e2:	f023 0301 	bic.w	r3, r3, #1
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	6a1b      	ldr	r3, [r3, #32]
 80097f2:	6978      	ldr	r0, [r7, #20]
 80097f4:	4798      	blx	r3
}
 80097f6:	bf00      	nop
 80097f8:	3718      	adds	r7, #24
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	200014c4 	.word	0x200014c4

08009804 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800980c:	f107 0308 	add.w	r3, r7, #8
 8009810:	4618      	mov	r0, r3
 8009812:	f000 f859 	bl	80098c8 <prvGetNextExpireTime>
 8009816:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	4619      	mov	r1, r3
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f000 f805 	bl	800982c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009822:	f000 f8d7 	bl	80099d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009826:	bf00      	nop
 8009828:	e7f0      	b.n	800980c <prvTimerTask+0x8>
	...

0800982c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009836:	f7ff f937 	bl	8008aa8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800983a:	f107 0308 	add.w	r3, r7, #8
 800983e:	4618      	mov	r0, r3
 8009840:	f000 f866 	bl	8009910 <prvSampleTimeNow>
 8009844:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d130      	bne.n	80098ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d10a      	bne.n	8009868 <prvProcessTimerOrBlockTask+0x3c>
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	429a      	cmp	r2, r3
 8009858:	d806      	bhi.n	8009868 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800985a:	f7ff f933 	bl	8008ac4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800985e:	68f9      	ldr	r1, [r7, #12]
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f7ff ff81 	bl	8009768 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009866:	e024      	b.n	80098b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d008      	beq.n	8009880 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800986e:	4b13      	ldr	r3, [pc, #76]	@ (80098bc <prvProcessTimerOrBlockTask+0x90>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d101      	bne.n	800987c <prvProcessTimerOrBlockTask+0x50>
 8009878:	2301      	movs	r3, #1
 800987a:	e000      	b.n	800987e <prvProcessTimerOrBlockTask+0x52>
 800987c:	2300      	movs	r3, #0
 800987e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009880:	4b0f      	ldr	r3, [pc, #60]	@ (80098c0 <prvProcessTimerOrBlockTask+0x94>)
 8009882:	6818      	ldr	r0, [r3, #0]
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	1ad3      	subs	r3, r2, r3
 800988a:	683a      	ldr	r2, [r7, #0]
 800988c:	4619      	mov	r1, r3
 800988e:	f7fe fe93 	bl	80085b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009892:	f7ff f917 	bl	8008ac4 <xTaskResumeAll>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d10a      	bne.n	80098b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800989c:	4b09      	ldr	r3, [pc, #36]	@ (80098c4 <prvProcessTimerOrBlockTask+0x98>)
 800989e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098a2:	601a      	str	r2, [r3, #0]
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	f3bf 8f6f 	isb	sy
}
 80098ac:	e001      	b.n	80098b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80098ae:	f7ff f909 	bl	8008ac4 <xTaskResumeAll>
}
 80098b2:	bf00      	nop
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	200014c8 	.word	0x200014c8
 80098c0:	200014cc 	.word	0x200014cc
 80098c4:	e000ed04 	.word	0xe000ed04

080098c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80098d0:	4b0e      	ldr	r3, [pc, #56]	@ (800990c <prvGetNextExpireTime+0x44>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d101      	bne.n	80098de <prvGetNextExpireTime+0x16>
 80098da:	2201      	movs	r2, #1
 80098dc:	e000      	b.n	80098e0 <prvGetNextExpireTime+0x18>
 80098de:	2200      	movs	r2, #0
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d105      	bne.n	80098f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098ec:	4b07      	ldr	r3, [pc, #28]	@ (800990c <prvGetNextExpireTime+0x44>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	60fb      	str	r3, [r7, #12]
 80098f6:	e001      	b.n	80098fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80098fc:	68fb      	ldr	r3, [r7, #12]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3714      	adds	r7, #20
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	200014c4 	.word	0x200014c4

08009910 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009918:	f7ff f972 	bl	8008c00 <xTaskGetTickCount>
 800991c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800991e:	4b0b      	ldr	r3, [pc, #44]	@ (800994c <prvSampleTimeNow+0x3c>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	429a      	cmp	r2, r3
 8009926:	d205      	bcs.n	8009934 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009928:	f000 f93a 	bl	8009ba0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	601a      	str	r2, [r3, #0]
 8009932:	e002      	b.n	800993a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800993a:	4a04      	ldr	r2, [pc, #16]	@ (800994c <prvSampleTimeNow+0x3c>)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009940:	68fb      	ldr	r3, [r7, #12]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	200014d4 	.word	0x200014d4

08009950 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b086      	sub	sp, #24
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	607a      	str	r2, [r7, #4]
 800995c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800995e:	2300      	movs	r3, #0
 8009960:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	68fa      	ldr	r2, [r7, #12]
 800996c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	429a      	cmp	r2, r3
 8009974:	d812      	bhi.n	800999c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	1ad2      	subs	r2, r2, r3
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	699b      	ldr	r3, [r3, #24]
 8009980:	429a      	cmp	r2, r3
 8009982:	d302      	bcc.n	800998a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009984:	2301      	movs	r3, #1
 8009986:	617b      	str	r3, [r7, #20]
 8009988:	e01b      	b.n	80099c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800998a:	4b10      	ldr	r3, [pc, #64]	@ (80099cc <prvInsertTimerInActiveList+0x7c>)
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	3304      	adds	r3, #4
 8009992:	4619      	mov	r1, r3
 8009994:	4610      	mov	r0, r2
 8009996:	f7fd fdb4 	bl	8007502 <vListInsert>
 800999a:	e012      	b.n	80099c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d206      	bcs.n	80099b2 <prvInsertTimerInActiveList+0x62>
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d302      	bcc.n	80099b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80099ac:	2301      	movs	r3, #1
 80099ae:	617b      	str	r3, [r7, #20]
 80099b0:	e007      	b.n	80099c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80099b2:	4b07      	ldr	r3, [pc, #28]	@ (80099d0 <prvInsertTimerInActiveList+0x80>)
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	3304      	adds	r3, #4
 80099ba:	4619      	mov	r1, r3
 80099bc:	4610      	mov	r0, r2
 80099be:	f7fd fda0 	bl	8007502 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80099c2:	697b      	ldr	r3, [r7, #20]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3718      	adds	r7, #24
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	200014c8 	.word	0x200014c8
 80099d0:	200014c4 	.word	0x200014c4

080099d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b08e      	sub	sp, #56	@ 0x38
 80099d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80099da:	e0ce      	b.n	8009b7a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	da19      	bge.n	8009a16 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80099e2:	1d3b      	adds	r3, r7, #4
 80099e4:	3304      	adds	r3, #4
 80099e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80099e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d10b      	bne.n	8009a06 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80099ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	61fb      	str	r3, [r7, #28]
}
 8009a00:	bf00      	nop
 8009a02:	bf00      	nop
 8009a04:	e7fd      	b.n	8009a02 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a0c:	6850      	ldr	r0, [r2, #4]
 8009a0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a10:	6892      	ldr	r2, [r2, #8]
 8009a12:	4611      	mov	r1, r2
 8009a14:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f2c0 80ae 	blt.w	8009b7a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a24:	695b      	ldr	r3, [r3, #20]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d004      	beq.n	8009a34 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a2c:	3304      	adds	r3, #4
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7fd fda0 	bl	8007574 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a34:	463b      	mov	r3, r7
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7ff ff6a 	bl	8009910 <prvSampleTimeNow>
 8009a3c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2b09      	cmp	r3, #9
 8009a42:	f200 8097 	bhi.w	8009b74 <prvProcessReceivedCommands+0x1a0>
 8009a46:	a201      	add	r2, pc, #4	@ (adr r2, 8009a4c <prvProcessReceivedCommands+0x78>)
 8009a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a4c:	08009a75 	.word	0x08009a75
 8009a50:	08009a75 	.word	0x08009a75
 8009a54:	08009a75 	.word	0x08009a75
 8009a58:	08009aeb 	.word	0x08009aeb
 8009a5c:	08009aff 	.word	0x08009aff
 8009a60:	08009b4b 	.word	0x08009b4b
 8009a64:	08009a75 	.word	0x08009a75
 8009a68:	08009a75 	.word	0x08009a75
 8009a6c:	08009aeb 	.word	0x08009aeb
 8009a70:	08009aff 	.word	0x08009aff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a7a:	f043 0301 	orr.w	r3, r3, #1
 8009a7e:	b2da      	uxtb	r2, r3
 8009a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8a:	699b      	ldr	r3, [r3, #24]
 8009a8c:	18d1      	adds	r1, r2, r3
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a94:	f7ff ff5c 	bl	8009950 <prvInsertTimerInActiveList>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d06c      	beq.n	8009b78 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009aa4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009aac:	f003 0304 	and.w	r3, r3, #4
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d061      	beq.n	8009b78 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ab4:	68ba      	ldr	r2, [r7, #8]
 8009ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	441a      	add	r2, r3
 8009abc:	2300      	movs	r3, #0
 8009abe:	9300      	str	r3, [sp, #0]
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ac6:	f7ff fe01 	bl	80096cc <xTimerGenericCommand>
 8009aca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d152      	bne.n	8009b78 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad6:	f383 8811 	msr	BASEPRI, r3
 8009ada:	f3bf 8f6f 	isb	sy
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	61bb      	str	r3, [r7, #24]
}
 8009ae4:	bf00      	nop
 8009ae6:	bf00      	nop
 8009ae8:	e7fd      	b.n	8009ae6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009af0:	f023 0301 	bic.w	r3, r3, #1
 8009af4:	b2da      	uxtb	r2, r3
 8009af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009afc:	e03d      	b.n	8009b7a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b04:	f043 0301 	orr.w	r3, r3, #1
 8009b08:	b2da      	uxtb	r2, r3
 8009b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009b10:	68ba      	ldr	r2, [r7, #8]
 8009b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b14:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b18:	699b      	ldr	r3, [r3, #24]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10b      	bne.n	8009b36 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	617b      	str	r3, [r7, #20]
}
 8009b30:	bf00      	nop
 8009b32:	bf00      	nop
 8009b34:	e7fd      	b.n	8009b32 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b38:	699a      	ldr	r2, [r3, #24]
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b3c:	18d1      	adds	r1, r2, r3
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b44:	f7ff ff04 	bl	8009950 <prvInsertTimerInActiveList>
					break;
 8009b48:	e017      	b.n	8009b7a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b50:	f003 0302 	and.w	r3, r3, #2
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d103      	bne.n	8009b60 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009b58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b5a:	f000 fbe5 	bl	800a328 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009b5e:	e00c      	b.n	8009b7a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b66:	f023 0301 	bic.w	r3, r3, #1
 8009b6a:	b2da      	uxtb	r2, r3
 8009b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009b72:	e002      	b.n	8009b7a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009b74:	bf00      	nop
 8009b76:	e000      	b.n	8009b7a <prvProcessReceivedCommands+0x1a6>
					break;
 8009b78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b7a:	4b08      	ldr	r3, [pc, #32]	@ (8009b9c <prvProcessReceivedCommands+0x1c8>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	1d39      	adds	r1, r7, #4
 8009b80:	2200      	movs	r2, #0
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7fe f904 	bl	8007d90 <xQueueReceive>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f47f af26 	bne.w	80099dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009b90:	bf00      	nop
 8009b92:	bf00      	nop
 8009b94:	3730      	adds	r7, #48	@ 0x30
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	200014cc 	.word	0x200014cc

08009ba0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b088      	sub	sp, #32
 8009ba4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ba6:	e049      	b.n	8009c3c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ba8:	4b2e      	ldr	r3, [pc, #184]	@ (8009c64 <prvSwitchTimerLists+0xc4>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bb2:	4b2c      	ldr	r3, [pc, #176]	@ (8009c64 <prvSwitchTimerLists+0xc4>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	3304      	adds	r3, #4
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7fd fcd7 	bl	8007574 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6a1b      	ldr	r3, [r3, #32]
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bd4:	f003 0304 	and.w	r3, r3, #4
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d02f      	beq.n	8009c3c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	699b      	ldr	r3, [r3, #24]
 8009be0:	693a      	ldr	r2, [r7, #16]
 8009be2:	4413      	add	r3, r2
 8009be4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d90e      	bls.n	8009c0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	68ba      	ldr	r2, [r7, #8]
 8009bf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	68fa      	ldr	r2, [r7, #12]
 8009bf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8009c64 <prvSwitchTimerLists+0xc4>)
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	3304      	adds	r3, #4
 8009c02:	4619      	mov	r1, r3
 8009c04:	4610      	mov	r0, r2
 8009c06:	f7fd fc7c 	bl	8007502 <vListInsert>
 8009c0a:	e017      	b.n	8009c3c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	2300      	movs	r3, #0
 8009c12:	693a      	ldr	r2, [r7, #16]
 8009c14:	2100      	movs	r1, #0
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f7ff fd58 	bl	80096cc <xTimerGenericCommand>
 8009c1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d10b      	bne.n	8009c3c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c28:	f383 8811 	msr	BASEPRI, r3
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	603b      	str	r3, [r7, #0]
}
 8009c36:	bf00      	nop
 8009c38:	bf00      	nop
 8009c3a:	e7fd      	b.n	8009c38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c3c:	4b09      	ldr	r3, [pc, #36]	@ (8009c64 <prvSwitchTimerLists+0xc4>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d1b0      	bne.n	8009ba8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009c46:	4b07      	ldr	r3, [pc, #28]	@ (8009c64 <prvSwitchTimerLists+0xc4>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009c4c:	4b06      	ldr	r3, [pc, #24]	@ (8009c68 <prvSwitchTimerLists+0xc8>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a04      	ldr	r2, [pc, #16]	@ (8009c64 <prvSwitchTimerLists+0xc4>)
 8009c52:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009c54:	4a04      	ldr	r2, [pc, #16]	@ (8009c68 <prvSwitchTimerLists+0xc8>)
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	6013      	str	r3, [r2, #0]
}
 8009c5a:	bf00      	nop
 8009c5c:	3718      	adds	r7, #24
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	200014c4 	.word	0x200014c4
 8009c68:	200014c8 	.word	0x200014c8

08009c6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009c72:	f000 f969 	bl	8009f48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c76:	4b15      	ldr	r3, [pc, #84]	@ (8009ccc <prvCheckForValidListAndQueue+0x60>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d120      	bne.n	8009cc0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c7e:	4814      	ldr	r0, [pc, #80]	@ (8009cd0 <prvCheckForValidListAndQueue+0x64>)
 8009c80:	f7fd fbee 	bl	8007460 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c84:	4813      	ldr	r0, [pc, #76]	@ (8009cd4 <prvCheckForValidListAndQueue+0x68>)
 8009c86:	f7fd fbeb 	bl	8007460 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c8a:	4b13      	ldr	r3, [pc, #76]	@ (8009cd8 <prvCheckForValidListAndQueue+0x6c>)
 8009c8c:	4a10      	ldr	r2, [pc, #64]	@ (8009cd0 <prvCheckForValidListAndQueue+0x64>)
 8009c8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c90:	4b12      	ldr	r3, [pc, #72]	@ (8009cdc <prvCheckForValidListAndQueue+0x70>)
 8009c92:	4a10      	ldr	r2, [pc, #64]	@ (8009cd4 <prvCheckForValidListAndQueue+0x68>)
 8009c94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009c96:	2300      	movs	r3, #0
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	4b11      	ldr	r3, [pc, #68]	@ (8009ce0 <prvCheckForValidListAndQueue+0x74>)
 8009c9c:	4a11      	ldr	r2, [pc, #68]	@ (8009ce4 <prvCheckForValidListAndQueue+0x78>)
 8009c9e:	2110      	movs	r1, #16
 8009ca0:	200a      	movs	r0, #10
 8009ca2:	f7fd fcfb 	bl	800769c <xQueueGenericCreateStatic>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	4a08      	ldr	r2, [pc, #32]	@ (8009ccc <prvCheckForValidListAndQueue+0x60>)
 8009caa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009cac:	4b07      	ldr	r3, [pc, #28]	@ (8009ccc <prvCheckForValidListAndQueue+0x60>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d005      	beq.n	8009cc0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009cb4:	4b05      	ldr	r3, [pc, #20]	@ (8009ccc <prvCheckForValidListAndQueue+0x60>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	490b      	ldr	r1, [pc, #44]	@ (8009ce8 <prvCheckForValidListAndQueue+0x7c>)
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7fe fc28 	bl	8008510 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009cc0:	f000 f974 	bl	8009fac <vPortExitCritical>
}
 8009cc4:	bf00      	nop
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	200014cc 	.word	0x200014cc
 8009cd0:	2000149c 	.word	0x2000149c
 8009cd4:	200014b0 	.word	0x200014b0
 8009cd8:	200014c4 	.word	0x200014c4
 8009cdc:	200014c8 	.word	0x200014c8
 8009ce0:	20001578 	.word	0x20001578
 8009ce4:	200014d8 	.word	0x200014d8
 8009ce8:	0800b444 	.word	0x0800b444

08009cec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	3b04      	subs	r3, #4
 8009cfc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009d04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	3b04      	subs	r3, #4
 8009d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	f023 0201 	bic.w	r2, r3, #1
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	3b04      	subs	r3, #4
 8009d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8009d50 <pxPortInitialiseStack+0x64>)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	3b14      	subs	r3, #20
 8009d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	3b04      	subs	r3, #4
 8009d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f06f 0202 	mvn.w	r2, #2
 8009d3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	3b20      	subs	r3, #32
 8009d40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009d42:	68fb      	ldr	r3, [r7, #12]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr
 8009d50:	08009d55 	.word	0x08009d55

08009d54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d5e:	4b13      	ldr	r3, [pc, #76]	@ (8009dac <prvTaskExitError+0x58>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d66:	d00b      	beq.n	8009d80 <prvTaskExitError+0x2c>
	__asm volatile
 8009d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d6c:	f383 8811 	msr	BASEPRI, r3
 8009d70:	f3bf 8f6f 	isb	sy
 8009d74:	f3bf 8f4f 	dsb	sy
 8009d78:	60fb      	str	r3, [r7, #12]
}
 8009d7a:	bf00      	nop
 8009d7c:	bf00      	nop
 8009d7e:	e7fd      	b.n	8009d7c <prvTaskExitError+0x28>
	__asm volatile
 8009d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d84:	f383 8811 	msr	BASEPRI, r3
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	60bb      	str	r3, [r7, #8]
}
 8009d92:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d94:	bf00      	nop
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d0fc      	beq.n	8009d96 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d9c:	bf00      	nop
 8009d9e:	bf00      	nop
 8009da0:	3714      	adds	r7, #20
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr
 8009daa:	bf00      	nop
 8009dac:	2000000c 	.word	0x2000000c

08009db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009db0:	4b07      	ldr	r3, [pc, #28]	@ (8009dd0 <pxCurrentTCBConst2>)
 8009db2:	6819      	ldr	r1, [r3, #0]
 8009db4:	6808      	ldr	r0, [r1, #0]
 8009db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dba:	f380 8809 	msr	PSP, r0
 8009dbe:	f3bf 8f6f 	isb	sy
 8009dc2:	f04f 0000 	mov.w	r0, #0
 8009dc6:	f380 8811 	msr	BASEPRI, r0
 8009dca:	4770      	bx	lr
 8009dcc:	f3af 8000 	nop.w

08009dd0 <pxCurrentTCBConst2>:
 8009dd0:	20000f9c 	.word	0x20000f9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009dd4:	bf00      	nop
 8009dd6:	bf00      	nop

08009dd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009dd8:	4808      	ldr	r0, [pc, #32]	@ (8009dfc <prvPortStartFirstTask+0x24>)
 8009dda:	6800      	ldr	r0, [r0, #0]
 8009ddc:	6800      	ldr	r0, [r0, #0]
 8009dde:	f380 8808 	msr	MSP, r0
 8009de2:	f04f 0000 	mov.w	r0, #0
 8009de6:	f380 8814 	msr	CONTROL, r0
 8009dea:	b662      	cpsie	i
 8009dec:	b661      	cpsie	f
 8009dee:	f3bf 8f4f 	dsb	sy
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	df00      	svc	0
 8009df8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009dfa:	bf00      	nop
 8009dfc:	e000ed08 	.word	0xe000ed08

08009e00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b086      	sub	sp, #24
 8009e04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009e06:	4b47      	ldr	r3, [pc, #284]	@ (8009f24 <xPortStartScheduler+0x124>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a47      	ldr	r2, [pc, #284]	@ (8009f28 <xPortStartScheduler+0x128>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d10b      	bne.n	8009e28 <xPortStartScheduler+0x28>
	__asm volatile
 8009e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e14:	f383 8811 	msr	BASEPRI, r3
 8009e18:	f3bf 8f6f 	isb	sy
 8009e1c:	f3bf 8f4f 	dsb	sy
 8009e20:	60fb      	str	r3, [r7, #12]
}
 8009e22:	bf00      	nop
 8009e24:	bf00      	nop
 8009e26:	e7fd      	b.n	8009e24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009e28:	4b3e      	ldr	r3, [pc, #248]	@ (8009f24 <xPortStartScheduler+0x124>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a3f      	ldr	r2, [pc, #252]	@ (8009f2c <xPortStartScheduler+0x12c>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d10b      	bne.n	8009e4a <xPortStartScheduler+0x4a>
	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	613b      	str	r3, [r7, #16]
}
 8009e44:	bf00      	nop
 8009e46:	bf00      	nop
 8009e48:	e7fd      	b.n	8009e46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e4a:	4b39      	ldr	r3, [pc, #228]	@ (8009f30 <xPortStartScheduler+0x130>)
 8009e4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	22ff      	movs	r2, #255	@ 0xff
 8009e5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e64:	78fb      	ldrb	r3, [r7, #3]
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009e6c:	b2da      	uxtb	r2, r3
 8009e6e:	4b31      	ldr	r3, [pc, #196]	@ (8009f34 <xPortStartScheduler+0x134>)
 8009e70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e72:	4b31      	ldr	r3, [pc, #196]	@ (8009f38 <xPortStartScheduler+0x138>)
 8009e74:	2207      	movs	r2, #7
 8009e76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e78:	e009      	b.n	8009e8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8009f38 <xPortStartScheduler+0x138>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	4a2d      	ldr	r2, [pc, #180]	@ (8009f38 <xPortStartScheduler+0x138>)
 8009e82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e84:	78fb      	ldrb	r3, [r7, #3]
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	005b      	lsls	r3, r3, #1
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e8e:	78fb      	ldrb	r3, [r7, #3]
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e96:	2b80      	cmp	r3, #128	@ 0x80
 8009e98:	d0ef      	beq.n	8009e7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e9a:	4b27      	ldr	r3, [pc, #156]	@ (8009f38 <xPortStartScheduler+0x138>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f1c3 0307 	rsb	r3, r3, #7
 8009ea2:	2b04      	cmp	r3, #4
 8009ea4:	d00b      	beq.n	8009ebe <xPortStartScheduler+0xbe>
	__asm volatile
 8009ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eaa:	f383 8811 	msr	BASEPRI, r3
 8009eae:	f3bf 8f6f 	isb	sy
 8009eb2:	f3bf 8f4f 	dsb	sy
 8009eb6:	60bb      	str	r3, [r7, #8]
}
 8009eb8:	bf00      	nop
 8009eba:	bf00      	nop
 8009ebc:	e7fd      	b.n	8009eba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8009f38 <xPortStartScheduler+0x138>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	021b      	lsls	r3, r3, #8
 8009ec4:	4a1c      	ldr	r2, [pc, #112]	@ (8009f38 <xPortStartScheduler+0x138>)
 8009ec6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8009f38 <xPortStartScheduler+0x138>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009ed0:	4a19      	ldr	r2, [pc, #100]	@ (8009f38 <xPortStartScheduler+0x138>)
 8009ed2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	b2da      	uxtb	r2, r3
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009edc:	4b17      	ldr	r3, [pc, #92]	@ (8009f3c <xPortStartScheduler+0x13c>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a16      	ldr	r2, [pc, #88]	@ (8009f3c <xPortStartScheduler+0x13c>)
 8009ee2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009ee6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ee8:	4b14      	ldr	r3, [pc, #80]	@ (8009f3c <xPortStartScheduler+0x13c>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a13      	ldr	r2, [pc, #76]	@ (8009f3c <xPortStartScheduler+0x13c>)
 8009eee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009ef2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ef4:	f000 f8da 	bl	800a0ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ef8:	4b11      	ldr	r3, [pc, #68]	@ (8009f40 <xPortStartScheduler+0x140>)
 8009efa:	2200      	movs	r2, #0
 8009efc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009efe:	f000 f8f9 	bl	800a0f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f02:	4b10      	ldr	r3, [pc, #64]	@ (8009f44 <xPortStartScheduler+0x144>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a0f      	ldr	r2, [pc, #60]	@ (8009f44 <xPortStartScheduler+0x144>)
 8009f08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009f0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009f0e:	f7ff ff63 	bl	8009dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f12:	f7fe ff3f 	bl	8008d94 <vTaskSwitchContext>
	prvTaskExitError();
 8009f16:	f7ff ff1d 	bl	8009d54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f1a:	2300      	movs	r3, #0
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3718      	adds	r7, #24
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	e000ed00 	.word	0xe000ed00
 8009f28:	410fc271 	.word	0x410fc271
 8009f2c:	410fc270 	.word	0x410fc270
 8009f30:	e000e400 	.word	0xe000e400
 8009f34:	200015c8 	.word	0x200015c8
 8009f38:	200015cc 	.word	0x200015cc
 8009f3c:	e000ed20 	.word	0xe000ed20
 8009f40:	2000000c 	.word	0x2000000c
 8009f44:	e000ef34 	.word	0xe000ef34

08009f48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	607b      	str	r3, [r7, #4]
}
 8009f60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f62:	4b10      	ldr	r3, [pc, #64]	@ (8009fa4 <vPortEnterCritical+0x5c>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	3301      	adds	r3, #1
 8009f68:	4a0e      	ldr	r2, [pc, #56]	@ (8009fa4 <vPortEnterCritical+0x5c>)
 8009f6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8009fa4 <vPortEnterCritical+0x5c>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d110      	bne.n	8009f96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f74:	4b0c      	ldr	r3, [pc, #48]	@ (8009fa8 <vPortEnterCritical+0x60>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00b      	beq.n	8009f96 <vPortEnterCritical+0x4e>
	__asm volatile
 8009f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	603b      	str	r3, [r7, #0]
}
 8009f90:	bf00      	nop
 8009f92:	bf00      	nop
 8009f94:	e7fd      	b.n	8009f92 <vPortEnterCritical+0x4a>
	}
}
 8009f96:	bf00      	nop
 8009f98:	370c      	adds	r7, #12
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	2000000c 	.word	0x2000000c
 8009fa8:	e000ed04 	.word	0xe000ed04

08009fac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009fb2:	4b12      	ldr	r3, [pc, #72]	@ (8009ffc <vPortExitCritical+0x50>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d10b      	bne.n	8009fd2 <vPortExitCritical+0x26>
	__asm volatile
 8009fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fbe:	f383 8811 	msr	BASEPRI, r3
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	f3bf 8f4f 	dsb	sy
 8009fca:	607b      	str	r3, [r7, #4]
}
 8009fcc:	bf00      	nop
 8009fce:	bf00      	nop
 8009fd0:	e7fd      	b.n	8009fce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8009ffc <vPortExitCritical+0x50>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	4a08      	ldr	r2, [pc, #32]	@ (8009ffc <vPortExitCritical+0x50>)
 8009fda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009fdc:	4b07      	ldr	r3, [pc, #28]	@ (8009ffc <vPortExitCritical+0x50>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d105      	bne.n	8009ff0 <vPortExitCritical+0x44>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	f383 8811 	msr	BASEPRI, r3
}
 8009fee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr
 8009ffc:	2000000c 	.word	0x2000000c

0800a000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a000:	f3ef 8009 	mrs	r0, PSP
 800a004:	f3bf 8f6f 	isb	sy
 800a008:	4b15      	ldr	r3, [pc, #84]	@ (800a060 <pxCurrentTCBConst>)
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	f01e 0f10 	tst.w	lr, #16
 800a010:	bf08      	it	eq
 800a012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a01a:	6010      	str	r0, [r2, #0]
 800a01c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a020:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a024:	f380 8811 	msr	BASEPRI, r0
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f7fe feb0 	bl	8008d94 <vTaskSwitchContext>
 800a034:	f04f 0000 	mov.w	r0, #0
 800a038:	f380 8811 	msr	BASEPRI, r0
 800a03c:	bc09      	pop	{r0, r3}
 800a03e:	6819      	ldr	r1, [r3, #0]
 800a040:	6808      	ldr	r0, [r1, #0]
 800a042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a046:	f01e 0f10 	tst.w	lr, #16
 800a04a:	bf08      	it	eq
 800a04c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a050:	f380 8809 	msr	PSP, r0
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	f3af 8000 	nop.w

0800a060 <pxCurrentTCBConst>:
 800a060:	20000f9c 	.word	0x20000f9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a064:	bf00      	nop
 800a066:	bf00      	nop

0800a068 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
	__asm volatile
 800a06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a072:	f383 8811 	msr	BASEPRI, r3
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	f3bf 8f4f 	dsb	sy
 800a07e:	607b      	str	r3, [r7, #4]
}
 800a080:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a082:	f7fe fdcd 	bl	8008c20 <xTaskIncrementTick>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d003      	beq.n	800a094 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a08c:	4b06      	ldr	r3, [pc, #24]	@ (800a0a8 <xPortSysTickHandler+0x40>)
 800a08e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a092:	601a      	str	r2, [r3, #0]
 800a094:	2300      	movs	r3, #0
 800a096:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	f383 8811 	msr	BASEPRI, r3
}
 800a09e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a0a0:	bf00      	nop
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	e000ed04 	.word	0xe000ed04

0800a0ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a0b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a0e0 <vPortSetupTimerInterrupt+0x34>)
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a0b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a0e4 <vPortSetupTimerInterrupt+0x38>)
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a0bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a0e8 <vPortSetupTimerInterrupt+0x3c>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a0a      	ldr	r2, [pc, #40]	@ (800a0ec <vPortSetupTimerInterrupt+0x40>)
 800a0c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0c6:	099b      	lsrs	r3, r3, #6
 800a0c8:	4a09      	ldr	r2, [pc, #36]	@ (800a0f0 <vPortSetupTimerInterrupt+0x44>)
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a0ce:	4b04      	ldr	r3, [pc, #16]	@ (800a0e0 <vPortSetupTimerInterrupt+0x34>)
 800a0d0:	2207      	movs	r2, #7
 800a0d2:	601a      	str	r2, [r3, #0]
}
 800a0d4:	bf00      	nop
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop
 800a0e0:	e000e010 	.word	0xe000e010
 800a0e4:	e000e018 	.word	0xe000e018
 800a0e8:	20000000 	.word	0x20000000
 800a0ec:	10624dd3 	.word	0x10624dd3
 800a0f0:	e000e014 	.word	0xe000e014

0800a0f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a0f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a104 <vPortEnableVFP+0x10>
 800a0f8:	6801      	ldr	r1, [r0, #0]
 800a0fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a0fe:	6001      	str	r1, [r0, #0]
 800a100:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a102:	bf00      	nop
 800a104:	e000ed88 	.word	0xe000ed88

0800a108 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a10e:	f3ef 8305 	mrs	r3, IPSR
 800a112:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2b0f      	cmp	r3, #15
 800a118:	d915      	bls.n	800a146 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a11a:	4a18      	ldr	r2, [pc, #96]	@ (800a17c <vPortValidateInterruptPriority+0x74>)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	4413      	add	r3, r2
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a124:	4b16      	ldr	r3, [pc, #88]	@ (800a180 <vPortValidateInterruptPriority+0x78>)
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	7afa      	ldrb	r2, [r7, #11]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d20b      	bcs.n	800a146 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a132:	f383 8811 	msr	BASEPRI, r3
 800a136:	f3bf 8f6f 	isb	sy
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	607b      	str	r3, [r7, #4]
}
 800a140:	bf00      	nop
 800a142:	bf00      	nop
 800a144:	e7fd      	b.n	800a142 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a146:	4b0f      	ldr	r3, [pc, #60]	@ (800a184 <vPortValidateInterruptPriority+0x7c>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a14e:	4b0e      	ldr	r3, [pc, #56]	@ (800a188 <vPortValidateInterruptPriority+0x80>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	429a      	cmp	r2, r3
 800a154:	d90b      	bls.n	800a16e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a15a:	f383 8811 	msr	BASEPRI, r3
 800a15e:	f3bf 8f6f 	isb	sy
 800a162:	f3bf 8f4f 	dsb	sy
 800a166:	603b      	str	r3, [r7, #0]
}
 800a168:	bf00      	nop
 800a16a:	bf00      	nop
 800a16c:	e7fd      	b.n	800a16a <vPortValidateInterruptPriority+0x62>
	}
 800a16e:	bf00      	nop
 800a170:	3714      	adds	r7, #20
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr
 800a17a:	bf00      	nop
 800a17c:	e000e3f0 	.word	0xe000e3f0
 800a180:	200015c8 	.word	0x200015c8
 800a184:	e000ed0c 	.word	0xe000ed0c
 800a188:	200015cc 	.word	0x200015cc

0800a18c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b08a      	sub	sp, #40	@ 0x28
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a194:	2300      	movs	r3, #0
 800a196:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a198:	f7fe fc86 	bl	8008aa8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a19c:	4b5c      	ldr	r3, [pc, #368]	@ (800a310 <pvPortMalloc+0x184>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a1a4:	f000 f924 	bl	800a3f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a1a8:	4b5a      	ldr	r3, [pc, #360]	@ (800a314 <pvPortMalloc+0x188>)
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4013      	ands	r3, r2
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f040 8095 	bne.w	800a2e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d01e      	beq.n	800a1fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a1bc:	2208      	movs	r2, #8
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f003 0307 	and.w	r3, r3, #7
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d015      	beq.n	800a1fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f023 0307 	bic.w	r3, r3, #7
 800a1d4:	3308      	adds	r3, #8
 800a1d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f003 0307 	and.w	r3, r3, #7
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00b      	beq.n	800a1fa <pvPortMalloc+0x6e>
	__asm volatile
 800a1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	617b      	str	r3, [r7, #20]
}
 800a1f4:	bf00      	nop
 800a1f6:	bf00      	nop
 800a1f8:	e7fd      	b.n	800a1f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d06f      	beq.n	800a2e0 <pvPortMalloc+0x154>
 800a200:	4b45      	ldr	r3, [pc, #276]	@ (800a318 <pvPortMalloc+0x18c>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	429a      	cmp	r2, r3
 800a208:	d86a      	bhi.n	800a2e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a20a:	4b44      	ldr	r3, [pc, #272]	@ (800a31c <pvPortMalloc+0x190>)
 800a20c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a20e:	4b43      	ldr	r3, [pc, #268]	@ (800a31c <pvPortMalloc+0x190>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a214:	e004      	b.n	800a220 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a218:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	429a      	cmp	r2, r3
 800a228:	d903      	bls.n	800a232 <pvPortMalloc+0xa6>
 800a22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d1f1      	bne.n	800a216 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a232:	4b37      	ldr	r3, [pc, #220]	@ (800a310 <pvPortMalloc+0x184>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a238:	429a      	cmp	r2, r3
 800a23a:	d051      	beq.n	800a2e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a23c:	6a3b      	ldr	r3, [r7, #32]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2208      	movs	r2, #8
 800a242:	4413      	add	r3, r2
 800a244:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	6a3b      	ldr	r3, [r7, #32]
 800a24c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a250:	685a      	ldr	r2, [r3, #4]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	1ad2      	subs	r2, r2, r3
 800a256:	2308      	movs	r3, #8
 800a258:	005b      	lsls	r3, r3, #1
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d920      	bls.n	800a2a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a25e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	4413      	add	r3, r2
 800a264:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	f003 0307 	and.w	r3, r3, #7
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00b      	beq.n	800a288 <pvPortMalloc+0xfc>
	__asm volatile
 800a270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a274:	f383 8811 	msr	BASEPRI, r3
 800a278:	f3bf 8f6f 	isb	sy
 800a27c:	f3bf 8f4f 	dsb	sy
 800a280:	613b      	str	r3, [r7, #16]
}
 800a282:	bf00      	nop
 800a284:	bf00      	nop
 800a286:	e7fd      	b.n	800a284 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a28a:	685a      	ldr	r2, [r3, #4]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	1ad2      	subs	r2, r2, r3
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a29a:	69b8      	ldr	r0, [r7, #24]
 800a29c:	f000 f90a 	bl	800a4b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a2a0:	4b1d      	ldr	r3, [pc, #116]	@ (800a318 <pvPortMalloc+0x18c>)
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	1ad3      	subs	r3, r2, r3
 800a2aa:	4a1b      	ldr	r2, [pc, #108]	@ (800a318 <pvPortMalloc+0x18c>)
 800a2ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a2ae:	4b1a      	ldr	r3, [pc, #104]	@ (800a318 <pvPortMalloc+0x18c>)
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	4b1b      	ldr	r3, [pc, #108]	@ (800a320 <pvPortMalloc+0x194>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d203      	bcs.n	800a2c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a2ba:	4b17      	ldr	r3, [pc, #92]	@ (800a318 <pvPortMalloc+0x18c>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a18      	ldr	r2, [pc, #96]	@ (800a320 <pvPortMalloc+0x194>)
 800a2c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c4:	685a      	ldr	r2, [r3, #4]
 800a2c6:	4b13      	ldr	r3, [pc, #76]	@ (800a314 <pvPortMalloc+0x188>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	431a      	orrs	r2, r3
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a2d6:	4b13      	ldr	r3, [pc, #76]	@ (800a324 <pvPortMalloc+0x198>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	4a11      	ldr	r2, [pc, #68]	@ (800a324 <pvPortMalloc+0x198>)
 800a2de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a2e0:	f7fe fbf0 	bl	8008ac4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	f003 0307 	and.w	r3, r3, #7
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00b      	beq.n	800a306 <pvPortMalloc+0x17a>
	__asm volatile
 800a2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f2:	f383 8811 	msr	BASEPRI, r3
 800a2f6:	f3bf 8f6f 	isb	sy
 800a2fa:	f3bf 8f4f 	dsb	sy
 800a2fe:	60fb      	str	r3, [r7, #12]
}
 800a300:	bf00      	nop
 800a302:	bf00      	nop
 800a304:	e7fd      	b.n	800a302 <pvPortMalloc+0x176>
	return pvReturn;
 800a306:	69fb      	ldr	r3, [r7, #28]
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3728      	adds	r7, #40	@ 0x28
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	20002190 	.word	0x20002190
 800a314:	200021a4 	.word	0x200021a4
 800a318:	20002194 	.word	0x20002194
 800a31c:	20002188 	.word	0x20002188
 800a320:	20002198 	.word	0x20002198
 800a324:	2000219c 	.word	0x2000219c

0800a328 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d04f      	beq.n	800a3da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a33a:	2308      	movs	r3, #8
 800a33c:	425b      	negs	r3, r3
 800a33e:	697a      	ldr	r2, [r7, #20]
 800a340:	4413      	add	r3, r2
 800a342:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	685a      	ldr	r2, [r3, #4]
 800a34c:	4b25      	ldr	r3, [pc, #148]	@ (800a3e4 <vPortFree+0xbc>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4013      	ands	r3, r2
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10b      	bne.n	800a36e <vPortFree+0x46>
	__asm volatile
 800a356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a35a:	f383 8811 	msr	BASEPRI, r3
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	60fb      	str	r3, [r7, #12]
}
 800a368:	bf00      	nop
 800a36a:	bf00      	nop
 800a36c:	e7fd      	b.n	800a36a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00b      	beq.n	800a38e <vPortFree+0x66>
	__asm volatile
 800a376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a37a:	f383 8811 	msr	BASEPRI, r3
 800a37e:	f3bf 8f6f 	isb	sy
 800a382:	f3bf 8f4f 	dsb	sy
 800a386:	60bb      	str	r3, [r7, #8]
}
 800a388:	bf00      	nop
 800a38a:	bf00      	nop
 800a38c:	e7fd      	b.n	800a38a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	685a      	ldr	r2, [r3, #4]
 800a392:	4b14      	ldr	r3, [pc, #80]	@ (800a3e4 <vPortFree+0xbc>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4013      	ands	r3, r2
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d01e      	beq.n	800a3da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d11a      	bne.n	800a3da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	685a      	ldr	r2, [r3, #4]
 800a3a8:	4b0e      	ldr	r3, [pc, #56]	@ (800a3e4 <vPortFree+0xbc>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	43db      	mvns	r3, r3
 800a3ae:	401a      	ands	r2, r3
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a3b4:	f7fe fb78 	bl	8008aa8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	685a      	ldr	r2, [r3, #4]
 800a3bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a3e8 <vPortFree+0xc0>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	4a09      	ldr	r2, [pc, #36]	@ (800a3e8 <vPortFree+0xc0>)
 800a3c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a3c6:	6938      	ldr	r0, [r7, #16]
 800a3c8:	f000 f874 	bl	800a4b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a3cc:	4b07      	ldr	r3, [pc, #28]	@ (800a3ec <vPortFree+0xc4>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	4a06      	ldr	r2, [pc, #24]	@ (800a3ec <vPortFree+0xc4>)
 800a3d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a3d6:	f7fe fb75 	bl	8008ac4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a3da:	bf00      	nop
 800a3dc:	3718      	adds	r7, #24
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	200021a4 	.word	0x200021a4
 800a3e8:	20002194 	.word	0x20002194
 800a3ec:	200021a0 	.word	0x200021a0

0800a3f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a3f6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800a3fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a3fc:	4b27      	ldr	r3, [pc, #156]	@ (800a49c <prvHeapInit+0xac>)
 800a3fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f003 0307 	and.w	r3, r3, #7
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00c      	beq.n	800a424 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	3307      	adds	r3, #7
 800a40e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f023 0307 	bic.w	r3, r3, #7
 800a416:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	4a1f      	ldr	r2, [pc, #124]	@ (800a49c <prvHeapInit+0xac>)
 800a420:	4413      	add	r3, r2
 800a422:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a428:	4a1d      	ldr	r2, [pc, #116]	@ (800a4a0 <prvHeapInit+0xb0>)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a42e:	4b1c      	ldr	r3, [pc, #112]	@ (800a4a0 <prvHeapInit+0xb0>)
 800a430:	2200      	movs	r2, #0
 800a432:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	4413      	add	r3, r2
 800a43a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a43c:	2208      	movs	r2, #8
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	1a9b      	subs	r3, r3, r2
 800a442:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f023 0307 	bic.w	r3, r3, #7
 800a44a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	4a15      	ldr	r2, [pc, #84]	@ (800a4a4 <prvHeapInit+0xb4>)
 800a450:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a452:	4b14      	ldr	r3, [pc, #80]	@ (800a4a4 <prvHeapInit+0xb4>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2200      	movs	r2, #0
 800a458:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a45a:	4b12      	ldr	r3, [pc, #72]	@ (800a4a4 <prvHeapInit+0xb4>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2200      	movs	r2, #0
 800a460:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	1ad2      	subs	r2, r2, r3
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a470:	4b0c      	ldr	r3, [pc, #48]	@ (800a4a4 <prvHeapInit+0xb4>)
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	4a0a      	ldr	r2, [pc, #40]	@ (800a4a8 <prvHeapInit+0xb8>)
 800a47e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	4a09      	ldr	r2, [pc, #36]	@ (800a4ac <prvHeapInit+0xbc>)
 800a486:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a488:	4b09      	ldr	r3, [pc, #36]	@ (800a4b0 <prvHeapInit+0xc0>)
 800a48a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a48e:	601a      	str	r2, [r3, #0]
}
 800a490:	bf00      	nop
 800a492:	3714      	adds	r7, #20
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr
 800a49c:	200015d0 	.word	0x200015d0
 800a4a0:	20002188 	.word	0x20002188
 800a4a4:	20002190 	.word	0x20002190
 800a4a8:	20002198 	.word	0x20002198
 800a4ac:	20002194 	.word	0x20002194
 800a4b0:	200021a4 	.word	0x200021a4

0800a4b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a4bc:	4b28      	ldr	r3, [pc, #160]	@ (800a560 <prvInsertBlockIntoFreeList+0xac>)
 800a4be:	60fb      	str	r3, [r7, #12]
 800a4c0:	e002      	b.n	800a4c8 <prvInsertBlockIntoFreeList+0x14>
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	60fb      	str	r3, [r7, #12]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d8f7      	bhi.n	800a4c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	68ba      	ldr	r2, [r7, #8]
 800a4dc:	4413      	add	r3, r2
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d108      	bne.n	800a4f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	685a      	ldr	r2, [r3, #4]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	441a      	add	r2, r3
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	68ba      	ldr	r2, [r7, #8]
 800a500:	441a      	add	r2, r3
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	429a      	cmp	r2, r3
 800a508:	d118      	bne.n	800a53c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	4b15      	ldr	r3, [pc, #84]	@ (800a564 <prvInsertBlockIntoFreeList+0xb0>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	429a      	cmp	r2, r3
 800a514:	d00d      	beq.n	800a532 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	685a      	ldr	r2, [r3, #4]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	441a      	add	r2, r3
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	601a      	str	r2, [r3, #0]
 800a530:	e008      	b.n	800a544 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a532:	4b0c      	ldr	r3, [pc, #48]	@ (800a564 <prvInsertBlockIntoFreeList+0xb0>)
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	601a      	str	r2, [r3, #0]
 800a53a:	e003      	b.n	800a544 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d002      	beq.n	800a552 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a552:	bf00      	nop
 800a554:	3714      	adds	r7, #20
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	20002188 	.word	0x20002188
 800a564:	20002190 	.word	0x20002190

0800a568 <std>:
 800a568:	2300      	movs	r3, #0
 800a56a:	b510      	push	{r4, lr}
 800a56c:	4604      	mov	r4, r0
 800a56e:	e9c0 3300 	strd	r3, r3, [r0]
 800a572:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a576:	6083      	str	r3, [r0, #8]
 800a578:	8181      	strh	r1, [r0, #12]
 800a57a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a57c:	81c2      	strh	r2, [r0, #14]
 800a57e:	6183      	str	r3, [r0, #24]
 800a580:	4619      	mov	r1, r3
 800a582:	2208      	movs	r2, #8
 800a584:	305c      	adds	r0, #92	@ 0x5c
 800a586:	f000 f906 	bl	800a796 <memset>
 800a58a:	4b0d      	ldr	r3, [pc, #52]	@ (800a5c0 <std+0x58>)
 800a58c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a58e:	4b0d      	ldr	r3, [pc, #52]	@ (800a5c4 <std+0x5c>)
 800a590:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a592:	4b0d      	ldr	r3, [pc, #52]	@ (800a5c8 <std+0x60>)
 800a594:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a596:	4b0d      	ldr	r3, [pc, #52]	@ (800a5cc <std+0x64>)
 800a598:	6323      	str	r3, [r4, #48]	@ 0x30
 800a59a:	4b0d      	ldr	r3, [pc, #52]	@ (800a5d0 <std+0x68>)
 800a59c:	6224      	str	r4, [r4, #32]
 800a59e:	429c      	cmp	r4, r3
 800a5a0:	d006      	beq.n	800a5b0 <std+0x48>
 800a5a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a5a6:	4294      	cmp	r4, r2
 800a5a8:	d002      	beq.n	800a5b0 <std+0x48>
 800a5aa:	33d0      	adds	r3, #208	@ 0xd0
 800a5ac:	429c      	cmp	r4, r3
 800a5ae:	d105      	bne.n	800a5bc <std+0x54>
 800a5b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a5b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5b8:	f000 b966 	b.w	800a888 <__retarget_lock_init_recursive>
 800a5bc:	bd10      	pop	{r4, pc}
 800a5be:	bf00      	nop
 800a5c0:	0800a711 	.word	0x0800a711
 800a5c4:	0800a733 	.word	0x0800a733
 800a5c8:	0800a76b 	.word	0x0800a76b
 800a5cc:	0800a78f 	.word	0x0800a78f
 800a5d0:	200021a8 	.word	0x200021a8

0800a5d4 <stdio_exit_handler>:
 800a5d4:	4a02      	ldr	r2, [pc, #8]	@ (800a5e0 <stdio_exit_handler+0xc>)
 800a5d6:	4903      	ldr	r1, [pc, #12]	@ (800a5e4 <stdio_exit_handler+0x10>)
 800a5d8:	4803      	ldr	r0, [pc, #12]	@ (800a5e8 <stdio_exit_handler+0x14>)
 800a5da:	f000 b869 	b.w	800a6b0 <_fwalk_sglue>
 800a5de:	bf00      	nop
 800a5e0:	20000010 	.word	0x20000010
 800a5e4:	0800b141 	.word	0x0800b141
 800a5e8:	20000020 	.word	0x20000020

0800a5ec <cleanup_stdio>:
 800a5ec:	6841      	ldr	r1, [r0, #4]
 800a5ee:	4b0c      	ldr	r3, [pc, #48]	@ (800a620 <cleanup_stdio+0x34>)
 800a5f0:	4299      	cmp	r1, r3
 800a5f2:	b510      	push	{r4, lr}
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	d001      	beq.n	800a5fc <cleanup_stdio+0x10>
 800a5f8:	f000 fda2 	bl	800b140 <_fflush_r>
 800a5fc:	68a1      	ldr	r1, [r4, #8]
 800a5fe:	4b09      	ldr	r3, [pc, #36]	@ (800a624 <cleanup_stdio+0x38>)
 800a600:	4299      	cmp	r1, r3
 800a602:	d002      	beq.n	800a60a <cleanup_stdio+0x1e>
 800a604:	4620      	mov	r0, r4
 800a606:	f000 fd9b 	bl	800b140 <_fflush_r>
 800a60a:	68e1      	ldr	r1, [r4, #12]
 800a60c:	4b06      	ldr	r3, [pc, #24]	@ (800a628 <cleanup_stdio+0x3c>)
 800a60e:	4299      	cmp	r1, r3
 800a610:	d004      	beq.n	800a61c <cleanup_stdio+0x30>
 800a612:	4620      	mov	r0, r4
 800a614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a618:	f000 bd92 	b.w	800b140 <_fflush_r>
 800a61c:	bd10      	pop	{r4, pc}
 800a61e:	bf00      	nop
 800a620:	200021a8 	.word	0x200021a8
 800a624:	20002210 	.word	0x20002210
 800a628:	20002278 	.word	0x20002278

0800a62c <global_stdio_init.part.0>:
 800a62c:	b510      	push	{r4, lr}
 800a62e:	4b0b      	ldr	r3, [pc, #44]	@ (800a65c <global_stdio_init.part.0+0x30>)
 800a630:	4c0b      	ldr	r4, [pc, #44]	@ (800a660 <global_stdio_init.part.0+0x34>)
 800a632:	4a0c      	ldr	r2, [pc, #48]	@ (800a664 <global_stdio_init.part.0+0x38>)
 800a634:	601a      	str	r2, [r3, #0]
 800a636:	4620      	mov	r0, r4
 800a638:	2200      	movs	r2, #0
 800a63a:	2104      	movs	r1, #4
 800a63c:	f7ff ff94 	bl	800a568 <std>
 800a640:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a644:	2201      	movs	r2, #1
 800a646:	2109      	movs	r1, #9
 800a648:	f7ff ff8e 	bl	800a568 <std>
 800a64c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a650:	2202      	movs	r2, #2
 800a652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a656:	2112      	movs	r1, #18
 800a658:	f7ff bf86 	b.w	800a568 <std>
 800a65c:	200022e0 	.word	0x200022e0
 800a660:	200021a8 	.word	0x200021a8
 800a664:	0800a5d5 	.word	0x0800a5d5

0800a668 <__sfp_lock_acquire>:
 800a668:	4801      	ldr	r0, [pc, #4]	@ (800a670 <__sfp_lock_acquire+0x8>)
 800a66a:	f000 b90e 	b.w	800a88a <__retarget_lock_acquire_recursive>
 800a66e:	bf00      	nop
 800a670:	200022e9 	.word	0x200022e9

0800a674 <__sfp_lock_release>:
 800a674:	4801      	ldr	r0, [pc, #4]	@ (800a67c <__sfp_lock_release+0x8>)
 800a676:	f000 b909 	b.w	800a88c <__retarget_lock_release_recursive>
 800a67a:	bf00      	nop
 800a67c:	200022e9 	.word	0x200022e9

0800a680 <__sinit>:
 800a680:	b510      	push	{r4, lr}
 800a682:	4604      	mov	r4, r0
 800a684:	f7ff fff0 	bl	800a668 <__sfp_lock_acquire>
 800a688:	6a23      	ldr	r3, [r4, #32]
 800a68a:	b11b      	cbz	r3, 800a694 <__sinit+0x14>
 800a68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a690:	f7ff bff0 	b.w	800a674 <__sfp_lock_release>
 800a694:	4b04      	ldr	r3, [pc, #16]	@ (800a6a8 <__sinit+0x28>)
 800a696:	6223      	str	r3, [r4, #32]
 800a698:	4b04      	ldr	r3, [pc, #16]	@ (800a6ac <__sinit+0x2c>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d1f5      	bne.n	800a68c <__sinit+0xc>
 800a6a0:	f7ff ffc4 	bl	800a62c <global_stdio_init.part.0>
 800a6a4:	e7f2      	b.n	800a68c <__sinit+0xc>
 800a6a6:	bf00      	nop
 800a6a8:	0800a5ed 	.word	0x0800a5ed
 800a6ac:	200022e0 	.word	0x200022e0

0800a6b0 <_fwalk_sglue>:
 800a6b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6b4:	4607      	mov	r7, r0
 800a6b6:	4688      	mov	r8, r1
 800a6b8:	4614      	mov	r4, r2
 800a6ba:	2600      	movs	r6, #0
 800a6bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6c0:	f1b9 0901 	subs.w	r9, r9, #1
 800a6c4:	d505      	bpl.n	800a6d2 <_fwalk_sglue+0x22>
 800a6c6:	6824      	ldr	r4, [r4, #0]
 800a6c8:	2c00      	cmp	r4, #0
 800a6ca:	d1f7      	bne.n	800a6bc <_fwalk_sglue+0xc>
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6d2:	89ab      	ldrh	r3, [r5, #12]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d907      	bls.n	800a6e8 <_fwalk_sglue+0x38>
 800a6d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6dc:	3301      	adds	r3, #1
 800a6de:	d003      	beq.n	800a6e8 <_fwalk_sglue+0x38>
 800a6e0:	4629      	mov	r1, r5
 800a6e2:	4638      	mov	r0, r7
 800a6e4:	47c0      	blx	r8
 800a6e6:	4306      	orrs	r6, r0
 800a6e8:	3568      	adds	r5, #104	@ 0x68
 800a6ea:	e7e9      	b.n	800a6c0 <_fwalk_sglue+0x10>

0800a6ec <iprintf>:
 800a6ec:	b40f      	push	{r0, r1, r2, r3}
 800a6ee:	b507      	push	{r0, r1, r2, lr}
 800a6f0:	4906      	ldr	r1, [pc, #24]	@ (800a70c <iprintf+0x20>)
 800a6f2:	ab04      	add	r3, sp, #16
 800a6f4:	6808      	ldr	r0, [r1, #0]
 800a6f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6fa:	6881      	ldr	r1, [r0, #8]
 800a6fc:	9301      	str	r3, [sp, #4]
 800a6fe:	f000 f9f7 	bl	800aaf0 <_vfiprintf_r>
 800a702:	b003      	add	sp, #12
 800a704:	f85d eb04 	ldr.w	lr, [sp], #4
 800a708:	b004      	add	sp, #16
 800a70a:	4770      	bx	lr
 800a70c:	2000001c 	.word	0x2000001c

0800a710 <__sread>:
 800a710:	b510      	push	{r4, lr}
 800a712:	460c      	mov	r4, r1
 800a714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a718:	f000 f868 	bl	800a7ec <_read_r>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	bfab      	itete	ge
 800a720:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a722:	89a3      	ldrhlt	r3, [r4, #12]
 800a724:	181b      	addge	r3, r3, r0
 800a726:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a72a:	bfac      	ite	ge
 800a72c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a72e:	81a3      	strhlt	r3, [r4, #12]
 800a730:	bd10      	pop	{r4, pc}

0800a732 <__swrite>:
 800a732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a736:	461f      	mov	r7, r3
 800a738:	898b      	ldrh	r3, [r1, #12]
 800a73a:	05db      	lsls	r3, r3, #23
 800a73c:	4605      	mov	r5, r0
 800a73e:	460c      	mov	r4, r1
 800a740:	4616      	mov	r6, r2
 800a742:	d505      	bpl.n	800a750 <__swrite+0x1e>
 800a744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a748:	2302      	movs	r3, #2
 800a74a:	2200      	movs	r2, #0
 800a74c:	f000 f83c 	bl	800a7c8 <_lseek_r>
 800a750:	89a3      	ldrh	r3, [r4, #12]
 800a752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a756:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a75a:	81a3      	strh	r3, [r4, #12]
 800a75c:	4632      	mov	r2, r6
 800a75e:	463b      	mov	r3, r7
 800a760:	4628      	mov	r0, r5
 800a762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a766:	f000 b853 	b.w	800a810 <_write_r>

0800a76a <__sseek>:
 800a76a:	b510      	push	{r4, lr}
 800a76c:	460c      	mov	r4, r1
 800a76e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a772:	f000 f829 	bl	800a7c8 <_lseek_r>
 800a776:	1c43      	adds	r3, r0, #1
 800a778:	89a3      	ldrh	r3, [r4, #12]
 800a77a:	bf15      	itete	ne
 800a77c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a77e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a782:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a786:	81a3      	strheq	r3, [r4, #12]
 800a788:	bf18      	it	ne
 800a78a:	81a3      	strhne	r3, [r4, #12]
 800a78c:	bd10      	pop	{r4, pc}

0800a78e <__sclose>:
 800a78e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a792:	f000 b809 	b.w	800a7a8 <_close_r>

0800a796 <memset>:
 800a796:	4402      	add	r2, r0
 800a798:	4603      	mov	r3, r0
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d100      	bne.n	800a7a0 <memset+0xa>
 800a79e:	4770      	bx	lr
 800a7a0:	f803 1b01 	strb.w	r1, [r3], #1
 800a7a4:	e7f9      	b.n	800a79a <memset+0x4>
	...

0800a7a8 <_close_r>:
 800a7a8:	b538      	push	{r3, r4, r5, lr}
 800a7aa:	4d06      	ldr	r5, [pc, #24]	@ (800a7c4 <_close_r+0x1c>)
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	4608      	mov	r0, r1
 800a7b2:	602b      	str	r3, [r5, #0]
 800a7b4:	f7f6 ffa0 	bl	80016f8 <_close>
 800a7b8:	1c43      	adds	r3, r0, #1
 800a7ba:	d102      	bne.n	800a7c2 <_close_r+0x1a>
 800a7bc:	682b      	ldr	r3, [r5, #0]
 800a7be:	b103      	cbz	r3, 800a7c2 <_close_r+0x1a>
 800a7c0:	6023      	str	r3, [r4, #0]
 800a7c2:	bd38      	pop	{r3, r4, r5, pc}
 800a7c4:	200022e4 	.word	0x200022e4

0800a7c8 <_lseek_r>:
 800a7c8:	b538      	push	{r3, r4, r5, lr}
 800a7ca:	4d07      	ldr	r5, [pc, #28]	@ (800a7e8 <_lseek_r+0x20>)
 800a7cc:	4604      	mov	r4, r0
 800a7ce:	4608      	mov	r0, r1
 800a7d0:	4611      	mov	r1, r2
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	602a      	str	r2, [r5, #0]
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	f7f6 ffb5 	bl	8001746 <_lseek>
 800a7dc:	1c43      	adds	r3, r0, #1
 800a7de:	d102      	bne.n	800a7e6 <_lseek_r+0x1e>
 800a7e0:	682b      	ldr	r3, [r5, #0]
 800a7e2:	b103      	cbz	r3, 800a7e6 <_lseek_r+0x1e>
 800a7e4:	6023      	str	r3, [r4, #0]
 800a7e6:	bd38      	pop	{r3, r4, r5, pc}
 800a7e8:	200022e4 	.word	0x200022e4

0800a7ec <_read_r>:
 800a7ec:	b538      	push	{r3, r4, r5, lr}
 800a7ee:	4d07      	ldr	r5, [pc, #28]	@ (800a80c <_read_r+0x20>)
 800a7f0:	4604      	mov	r4, r0
 800a7f2:	4608      	mov	r0, r1
 800a7f4:	4611      	mov	r1, r2
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	602a      	str	r2, [r5, #0]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	f7f6 ff43 	bl	8001686 <_read>
 800a800:	1c43      	adds	r3, r0, #1
 800a802:	d102      	bne.n	800a80a <_read_r+0x1e>
 800a804:	682b      	ldr	r3, [r5, #0]
 800a806:	b103      	cbz	r3, 800a80a <_read_r+0x1e>
 800a808:	6023      	str	r3, [r4, #0]
 800a80a:	bd38      	pop	{r3, r4, r5, pc}
 800a80c:	200022e4 	.word	0x200022e4

0800a810 <_write_r>:
 800a810:	b538      	push	{r3, r4, r5, lr}
 800a812:	4d07      	ldr	r5, [pc, #28]	@ (800a830 <_write_r+0x20>)
 800a814:	4604      	mov	r4, r0
 800a816:	4608      	mov	r0, r1
 800a818:	4611      	mov	r1, r2
 800a81a:	2200      	movs	r2, #0
 800a81c:	602a      	str	r2, [r5, #0]
 800a81e:	461a      	mov	r2, r3
 800a820:	f7f6 ff4e 	bl	80016c0 <_write>
 800a824:	1c43      	adds	r3, r0, #1
 800a826:	d102      	bne.n	800a82e <_write_r+0x1e>
 800a828:	682b      	ldr	r3, [r5, #0]
 800a82a:	b103      	cbz	r3, 800a82e <_write_r+0x1e>
 800a82c:	6023      	str	r3, [r4, #0]
 800a82e:	bd38      	pop	{r3, r4, r5, pc}
 800a830:	200022e4 	.word	0x200022e4

0800a834 <__errno>:
 800a834:	4b01      	ldr	r3, [pc, #4]	@ (800a83c <__errno+0x8>)
 800a836:	6818      	ldr	r0, [r3, #0]
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	2000001c 	.word	0x2000001c

0800a840 <__libc_init_array>:
 800a840:	b570      	push	{r4, r5, r6, lr}
 800a842:	4d0d      	ldr	r5, [pc, #52]	@ (800a878 <__libc_init_array+0x38>)
 800a844:	4c0d      	ldr	r4, [pc, #52]	@ (800a87c <__libc_init_array+0x3c>)
 800a846:	1b64      	subs	r4, r4, r5
 800a848:	10a4      	asrs	r4, r4, #2
 800a84a:	2600      	movs	r6, #0
 800a84c:	42a6      	cmp	r6, r4
 800a84e:	d109      	bne.n	800a864 <__libc_init_array+0x24>
 800a850:	4d0b      	ldr	r5, [pc, #44]	@ (800a880 <__libc_init_array+0x40>)
 800a852:	4c0c      	ldr	r4, [pc, #48]	@ (800a884 <__libc_init_array+0x44>)
 800a854:	f000 fdc4 	bl	800b3e0 <_init>
 800a858:	1b64      	subs	r4, r4, r5
 800a85a:	10a4      	asrs	r4, r4, #2
 800a85c:	2600      	movs	r6, #0
 800a85e:	42a6      	cmp	r6, r4
 800a860:	d105      	bne.n	800a86e <__libc_init_array+0x2e>
 800a862:	bd70      	pop	{r4, r5, r6, pc}
 800a864:	f855 3b04 	ldr.w	r3, [r5], #4
 800a868:	4798      	blx	r3
 800a86a:	3601      	adds	r6, #1
 800a86c:	e7ee      	b.n	800a84c <__libc_init_array+0xc>
 800a86e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a872:	4798      	blx	r3
 800a874:	3601      	adds	r6, #1
 800a876:	e7f2      	b.n	800a85e <__libc_init_array+0x1e>
 800a878:	0800b528 	.word	0x0800b528
 800a87c:	0800b528 	.word	0x0800b528
 800a880:	0800b528 	.word	0x0800b528
 800a884:	0800b52c 	.word	0x0800b52c

0800a888 <__retarget_lock_init_recursive>:
 800a888:	4770      	bx	lr

0800a88a <__retarget_lock_acquire_recursive>:
 800a88a:	4770      	bx	lr

0800a88c <__retarget_lock_release_recursive>:
 800a88c:	4770      	bx	lr

0800a88e <memcpy>:
 800a88e:	440a      	add	r2, r1
 800a890:	4291      	cmp	r1, r2
 800a892:	f100 33ff 	add.w	r3, r0, #4294967295
 800a896:	d100      	bne.n	800a89a <memcpy+0xc>
 800a898:	4770      	bx	lr
 800a89a:	b510      	push	{r4, lr}
 800a89c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8a4:	4291      	cmp	r1, r2
 800a8a6:	d1f9      	bne.n	800a89c <memcpy+0xe>
 800a8a8:	bd10      	pop	{r4, pc}
	...

0800a8ac <_free_r>:
 800a8ac:	b538      	push	{r3, r4, r5, lr}
 800a8ae:	4605      	mov	r5, r0
 800a8b0:	2900      	cmp	r1, #0
 800a8b2:	d041      	beq.n	800a938 <_free_r+0x8c>
 800a8b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8b8:	1f0c      	subs	r4, r1, #4
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	bfb8      	it	lt
 800a8be:	18e4      	addlt	r4, r4, r3
 800a8c0:	f000 f8e0 	bl	800aa84 <__malloc_lock>
 800a8c4:	4a1d      	ldr	r2, [pc, #116]	@ (800a93c <_free_r+0x90>)
 800a8c6:	6813      	ldr	r3, [r2, #0]
 800a8c8:	b933      	cbnz	r3, 800a8d8 <_free_r+0x2c>
 800a8ca:	6063      	str	r3, [r4, #4]
 800a8cc:	6014      	str	r4, [r2, #0]
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8d4:	f000 b8dc 	b.w	800aa90 <__malloc_unlock>
 800a8d8:	42a3      	cmp	r3, r4
 800a8da:	d908      	bls.n	800a8ee <_free_r+0x42>
 800a8dc:	6820      	ldr	r0, [r4, #0]
 800a8de:	1821      	adds	r1, r4, r0
 800a8e0:	428b      	cmp	r3, r1
 800a8e2:	bf01      	itttt	eq
 800a8e4:	6819      	ldreq	r1, [r3, #0]
 800a8e6:	685b      	ldreq	r3, [r3, #4]
 800a8e8:	1809      	addeq	r1, r1, r0
 800a8ea:	6021      	streq	r1, [r4, #0]
 800a8ec:	e7ed      	b.n	800a8ca <_free_r+0x1e>
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	b10b      	cbz	r3, 800a8f8 <_free_r+0x4c>
 800a8f4:	42a3      	cmp	r3, r4
 800a8f6:	d9fa      	bls.n	800a8ee <_free_r+0x42>
 800a8f8:	6811      	ldr	r1, [r2, #0]
 800a8fa:	1850      	adds	r0, r2, r1
 800a8fc:	42a0      	cmp	r0, r4
 800a8fe:	d10b      	bne.n	800a918 <_free_r+0x6c>
 800a900:	6820      	ldr	r0, [r4, #0]
 800a902:	4401      	add	r1, r0
 800a904:	1850      	adds	r0, r2, r1
 800a906:	4283      	cmp	r3, r0
 800a908:	6011      	str	r1, [r2, #0]
 800a90a:	d1e0      	bne.n	800a8ce <_free_r+0x22>
 800a90c:	6818      	ldr	r0, [r3, #0]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	6053      	str	r3, [r2, #4]
 800a912:	4408      	add	r0, r1
 800a914:	6010      	str	r0, [r2, #0]
 800a916:	e7da      	b.n	800a8ce <_free_r+0x22>
 800a918:	d902      	bls.n	800a920 <_free_r+0x74>
 800a91a:	230c      	movs	r3, #12
 800a91c:	602b      	str	r3, [r5, #0]
 800a91e:	e7d6      	b.n	800a8ce <_free_r+0x22>
 800a920:	6820      	ldr	r0, [r4, #0]
 800a922:	1821      	adds	r1, r4, r0
 800a924:	428b      	cmp	r3, r1
 800a926:	bf04      	itt	eq
 800a928:	6819      	ldreq	r1, [r3, #0]
 800a92a:	685b      	ldreq	r3, [r3, #4]
 800a92c:	6063      	str	r3, [r4, #4]
 800a92e:	bf04      	itt	eq
 800a930:	1809      	addeq	r1, r1, r0
 800a932:	6021      	streq	r1, [r4, #0]
 800a934:	6054      	str	r4, [r2, #4]
 800a936:	e7ca      	b.n	800a8ce <_free_r+0x22>
 800a938:	bd38      	pop	{r3, r4, r5, pc}
 800a93a:	bf00      	nop
 800a93c:	200022f0 	.word	0x200022f0

0800a940 <sbrk_aligned>:
 800a940:	b570      	push	{r4, r5, r6, lr}
 800a942:	4e0f      	ldr	r6, [pc, #60]	@ (800a980 <sbrk_aligned+0x40>)
 800a944:	460c      	mov	r4, r1
 800a946:	6831      	ldr	r1, [r6, #0]
 800a948:	4605      	mov	r5, r0
 800a94a:	b911      	cbnz	r1, 800a952 <sbrk_aligned+0x12>
 800a94c:	f000 fcb4 	bl	800b2b8 <_sbrk_r>
 800a950:	6030      	str	r0, [r6, #0]
 800a952:	4621      	mov	r1, r4
 800a954:	4628      	mov	r0, r5
 800a956:	f000 fcaf 	bl	800b2b8 <_sbrk_r>
 800a95a:	1c43      	adds	r3, r0, #1
 800a95c:	d103      	bne.n	800a966 <sbrk_aligned+0x26>
 800a95e:	f04f 34ff 	mov.w	r4, #4294967295
 800a962:	4620      	mov	r0, r4
 800a964:	bd70      	pop	{r4, r5, r6, pc}
 800a966:	1cc4      	adds	r4, r0, #3
 800a968:	f024 0403 	bic.w	r4, r4, #3
 800a96c:	42a0      	cmp	r0, r4
 800a96e:	d0f8      	beq.n	800a962 <sbrk_aligned+0x22>
 800a970:	1a21      	subs	r1, r4, r0
 800a972:	4628      	mov	r0, r5
 800a974:	f000 fca0 	bl	800b2b8 <_sbrk_r>
 800a978:	3001      	adds	r0, #1
 800a97a:	d1f2      	bne.n	800a962 <sbrk_aligned+0x22>
 800a97c:	e7ef      	b.n	800a95e <sbrk_aligned+0x1e>
 800a97e:	bf00      	nop
 800a980:	200022ec 	.word	0x200022ec

0800a984 <_malloc_r>:
 800a984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a988:	1ccd      	adds	r5, r1, #3
 800a98a:	f025 0503 	bic.w	r5, r5, #3
 800a98e:	3508      	adds	r5, #8
 800a990:	2d0c      	cmp	r5, #12
 800a992:	bf38      	it	cc
 800a994:	250c      	movcc	r5, #12
 800a996:	2d00      	cmp	r5, #0
 800a998:	4606      	mov	r6, r0
 800a99a:	db01      	blt.n	800a9a0 <_malloc_r+0x1c>
 800a99c:	42a9      	cmp	r1, r5
 800a99e:	d904      	bls.n	800a9aa <_malloc_r+0x26>
 800a9a0:	230c      	movs	r3, #12
 800a9a2:	6033      	str	r3, [r6, #0]
 800a9a4:	2000      	movs	r0, #0
 800a9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa80 <_malloc_r+0xfc>
 800a9ae:	f000 f869 	bl	800aa84 <__malloc_lock>
 800a9b2:	f8d8 3000 	ldr.w	r3, [r8]
 800a9b6:	461c      	mov	r4, r3
 800a9b8:	bb44      	cbnz	r4, 800aa0c <_malloc_r+0x88>
 800a9ba:	4629      	mov	r1, r5
 800a9bc:	4630      	mov	r0, r6
 800a9be:	f7ff ffbf 	bl	800a940 <sbrk_aligned>
 800a9c2:	1c43      	adds	r3, r0, #1
 800a9c4:	4604      	mov	r4, r0
 800a9c6:	d158      	bne.n	800aa7a <_malloc_r+0xf6>
 800a9c8:	f8d8 4000 	ldr.w	r4, [r8]
 800a9cc:	4627      	mov	r7, r4
 800a9ce:	2f00      	cmp	r7, #0
 800a9d0:	d143      	bne.n	800aa5a <_malloc_r+0xd6>
 800a9d2:	2c00      	cmp	r4, #0
 800a9d4:	d04b      	beq.n	800aa6e <_malloc_r+0xea>
 800a9d6:	6823      	ldr	r3, [r4, #0]
 800a9d8:	4639      	mov	r1, r7
 800a9da:	4630      	mov	r0, r6
 800a9dc:	eb04 0903 	add.w	r9, r4, r3
 800a9e0:	f000 fc6a 	bl	800b2b8 <_sbrk_r>
 800a9e4:	4581      	cmp	r9, r0
 800a9e6:	d142      	bne.n	800aa6e <_malloc_r+0xea>
 800a9e8:	6821      	ldr	r1, [r4, #0]
 800a9ea:	1a6d      	subs	r5, r5, r1
 800a9ec:	4629      	mov	r1, r5
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	f7ff ffa6 	bl	800a940 <sbrk_aligned>
 800a9f4:	3001      	adds	r0, #1
 800a9f6:	d03a      	beq.n	800aa6e <_malloc_r+0xea>
 800a9f8:	6823      	ldr	r3, [r4, #0]
 800a9fa:	442b      	add	r3, r5
 800a9fc:	6023      	str	r3, [r4, #0]
 800a9fe:	f8d8 3000 	ldr.w	r3, [r8]
 800aa02:	685a      	ldr	r2, [r3, #4]
 800aa04:	bb62      	cbnz	r2, 800aa60 <_malloc_r+0xdc>
 800aa06:	f8c8 7000 	str.w	r7, [r8]
 800aa0a:	e00f      	b.n	800aa2c <_malloc_r+0xa8>
 800aa0c:	6822      	ldr	r2, [r4, #0]
 800aa0e:	1b52      	subs	r2, r2, r5
 800aa10:	d420      	bmi.n	800aa54 <_malloc_r+0xd0>
 800aa12:	2a0b      	cmp	r2, #11
 800aa14:	d917      	bls.n	800aa46 <_malloc_r+0xc2>
 800aa16:	1961      	adds	r1, r4, r5
 800aa18:	42a3      	cmp	r3, r4
 800aa1a:	6025      	str	r5, [r4, #0]
 800aa1c:	bf18      	it	ne
 800aa1e:	6059      	strne	r1, [r3, #4]
 800aa20:	6863      	ldr	r3, [r4, #4]
 800aa22:	bf08      	it	eq
 800aa24:	f8c8 1000 	streq.w	r1, [r8]
 800aa28:	5162      	str	r2, [r4, r5]
 800aa2a:	604b      	str	r3, [r1, #4]
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	f000 f82f 	bl	800aa90 <__malloc_unlock>
 800aa32:	f104 000b 	add.w	r0, r4, #11
 800aa36:	1d23      	adds	r3, r4, #4
 800aa38:	f020 0007 	bic.w	r0, r0, #7
 800aa3c:	1ac2      	subs	r2, r0, r3
 800aa3e:	bf1c      	itt	ne
 800aa40:	1a1b      	subne	r3, r3, r0
 800aa42:	50a3      	strne	r3, [r4, r2]
 800aa44:	e7af      	b.n	800a9a6 <_malloc_r+0x22>
 800aa46:	6862      	ldr	r2, [r4, #4]
 800aa48:	42a3      	cmp	r3, r4
 800aa4a:	bf0c      	ite	eq
 800aa4c:	f8c8 2000 	streq.w	r2, [r8]
 800aa50:	605a      	strne	r2, [r3, #4]
 800aa52:	e7eb      	b.n	800aa2c <_malloc_r+0xa8>
 800aa54:	4623      	mov	r3, r4
 800aa56:	6864      	ldr	r4, [r4, #4]
 800aa58:	e7ae      	b.n	800a9b8 <_malloc_r+0x34>
 800aa5a:	463c      	mov	r4, r7
 800aa5c:	687f      	ldr	r7, [r7, #4]
 800aa5e:	e7b6      	b.n	800a9ce <_malloc_r+0x4a>
 800aa60:	461a      	mov	r2, r3
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	42a3      	cmp	r3, r4
 800aa66:	d1fb      	bne.n	800aa60 <_malloc_r+0xdc>
 800aa68:	2300      	movs	r3, #0
 800aa6a:	6053      	str	r3, [r2, #4]
 800aa6c:	e7de      	b.n	800aa2c <_malloc_r+0xa8>
 800aa6e:	230c      	movs	r3, #12
 800aa70:	6033      	str	r3, [r6, #0]
 800aa72:	4630      	mov	r0, r6
 800aa74:	f000 f80c 	bl	800aa90 <__malloc_unlock>
 800aa78:	e794      	b.n	800a9a4 <_malloc_r+0x20>
 800aa7a:	6005      	str	r5, [r0, #0]
 800aa7c:	e7d6      	b.n	800aa2c <_malloc_r+0xa8>
 800aa7e:	bf00      	nop
 800aa80:	200022f0 	.word	0x200022f0

0800aa84 <__malloc_lock>:
 800aa84:	4801      	ldr	r0, [pc, #4]	@ (800aa8c <__malloc_lock+0x8>)
 800aa86:	f7ff bf00 	b.w	800a88a <__retarget_lock_acquire_recursive>
 800aa8a:	bf00      	nop
 800aa8c:	200022e8 	.word	0x200022e8

0800aa90 <__malloc_unlock>:
 800aa90:	4801      	ldr	r0, [pc, #4]	@ (800aa98 <__malloc_unlock+0x8>)
 800aa92:	f7ff befb 	b.w	800a88c <__retarget_lock_release_recursive>
 800aa96:	bf00      	nop
 800aa98:	200022e8 	.word	0x200022e8

0800aa9c <__sfputc_r>:
 800aa9c:	6893      	ldr	r3, [r2, #8]
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	b410      	push	{r4}
 800aaa4:	6093      	str	r3, [r2, #8]
 800aaa6:	da08      	bge.n	800aaba <__sfputc_r+0x1e>
 800aaa8:	6994      	ldr	r4, [r2, #24]
 800aaaa:	42a3      	cmp	r3, r4
 800aaac:	db01      	blt.n	800aab2 <__sfputc_r+0x16>
 800aaae:	290a      	cmp	r1, #10
 800aab0:	d103      	bne.n	800aaba <__sfputc_r+0x1e>
 800aab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aab6:	f000 bb6b 	b.w	800b190 <__swbuf_r>
 800aaba:	6813      	ldr	r3, [r2, #0]
 800aabc:	1c58      	adds	r0, r3, #1
 800aabe:	6010      	str	r0, [r2, #0]
 800aac0:	7019      	strb	r1, [r3, #0]
 800aac2:	4608      	mov	r0, r1
 800aac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aac8:	4770      	bx	lr

0800aaca <__sfputs_r>:
 800aaca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aacc:	4606      	mov	r6, r0
 800aace:	460f      	mov	r7, r1
 800aad0:	4614      	mov	r4, r2
 800aad2:	18d5      	adds	r5, r2, r3
 800aad4:	42ac      	cmp	r4, r5
 800aad6:	d101      	bne.n	800aadc <__sfputs_r+0x12>
 800aad8:	2000      	movs	r0, #0
 800aada:	e007      	b.n	800aaec <__sfputs_r+0x22>
 800aadc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aae0:	463a      	mov	r2, r7
 800aae2:	4630      	mov	r0, r6
 800aae4:	f7ff ffda 	bl	800aa9c <__sfputc_r>
 800aae8:	1c43      	adds	r3, r0, #1
 800aaea:	d1f3      	bne.n	800aad4 <__sfputs_r+0xa>
 800aaec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aaf0 <_vfiprintf_r>:
 800aaf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf4:	460d      	mov	r5, r1
 800aaf6:	b09d      	sub	sp, #116	@ 0x74
 800aaf8:	4614      	mov	r4, r2
 800aafa:	4698      	mov	r8, r3
 800aafc:	4606      	mov	r6, r0
 800aafe:	b118      	cbz	r0, 800ab08 <_vfiprintf_r+0x18>
 800ab00:	6a03      	ldr	r3, [r0, #32]
 800ab02:	b90b      	cbnz	r3, 800ab08 <_vfiprintf_r+0x18>
 800ab04:	f7ff fdbc 	bl	800a680 <__sinit>
 800ab08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab0a:	07d9      	lsls	r1, r3, #31
 800ab0c:	d405      	bmi.n	800ab1a <_vfiprintf_r+0x2a>
 800ab0e:	89ab      	ldrh	r3, [r5, #12]
 800ab10:	059a      	lsls	r2, r3, #22
 800ab12:	d402      	bmi.n	800ab1a <_vfiprintf_r+0x2a>
 800ab14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab16:	f7ff feb8 	bl	800a88a <__retarget_lock_acquire_recursive>
 800ab1a:	89ab      	ldrh	r3, [r5, #12]
 800ab1c:	071b      	lsls	r3, r3, #28
 800ab1e:	d501      	bpl.n	800ab24 <_vfiprintf_r+0x34>
 800ab20:	692b      	ldr	r3, [r5, #16]
 800ab22:	b99b      	cbnz	r3, 800ab4c <_vfiprintf_r+0x5c>
 800ab24:	4629      	mov	r1, r5
 800ab26:	4630      	mov	r0, r6
 800ab28:	f000 fb70 	bl	800b20c <__swsetup_r>
 800ab2c:	b170      	cbz	r0, 800ab4c <_vfiprintf_r+0x5c>
 800ab2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab30:	07dc      	lsls	r4, r3, #31
 800ab32:	d504      	bpl.n	800ab3e <_vfiprintf_r+0x4e>
 800ab34:	f04f 30ff 	mov.w	r0, #4294967295
 800ab38:	b01d      	add	sp, #116	@ 0x74
 800ab3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab3e:	89ab      	ldrh	r3, [r5, #12]
 800ab40:	0598      	lsls	r0, r3, #22
 800ab42:	d4f7      	bmi.n	800ab34 <_vfiprintf_r+0x44>
 800ab44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab46:	f7ff fea1 	bl	800a88c <__retarget_lock_release_recursive>
 800ab4a:	e7f3      	b.n	800ab34 <_vfiprintf_r+0x44>
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab50:	2320      	movs	r3, #32
 800ab52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab56:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab5a:	2330      	movs	r3, #48	@ 0x30
 800ab5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ad0c <_vfiprintf_r+0x21c>
 800ab60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab64:	f04f 0901 	mov.w	r9, #1
 800ab68:	4623      	mov	r3, r4
 800ab6a:	469a      	mov	sl, r3
 800ab6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab70:	b10a      	cbz	r2, 800ab76 <_vfiprintf_r+0x86>
 800ab72:	2a25      	cmp	r2, #37	@ 0x25
 800ab74:	d1f9      	bne.n	800ab6a <_vfiprintf_r+0x7a>
 800ab76:	ebba 0b04 	subs.w	fp, sl, r4
 800ab7a:	d00b      	beq.n	800ab94 <_vfiprintf_r+0xa4>
 800ab7c:	465b      	mov	r3, fp
 800ab7e:	4622      	mov	r2, r4
 800ab80:	4629      	mov	r1, r5
 800ab82:	4630      	mov	r0, r6
 800ab84:	f7ff ffa1 	bl	800aaca <__sfputs_r>
 800ab88:	3001      	adds	r0, #1
 800ab8a:	f000 80a7 	beq.w	800acdc <_vfiprintf_r+0x1ec>
 800ab8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab90:	445a      	add	r2, fp
 800ab92:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab94:	f89a 3000 	ldrb.w	r3, [sl]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f000 809f 	beq.w	800acdc <_vfiprintf_r+0x1ec>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	f04f 32ff 	mov.w	r2, #4294967295
 800aba4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aba8:	f10a 0a01 	add.w	sl, sl, #1
 800abac:	9304      	str	r3, [sp, #16]
 800abae:	9307      	str	r3, [sp, #28]
 800abb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abb4:	931a      	str	r3, [sp, #104]	@ 0x68
 800abb6:	4654      	mov	r4, sl
 800abb8:	2205      	movs	r2, #5
 800abba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abbe:	4853      	ldr	r0, [pc, #332]	@ (800ad0c <_vfiprintf_r+0x21c>)
 800abc0:	f7f5 fb06 	bl	80001d0 <memchr>
 800abc4:	9a04      	ldr	r2, [sp, #16]
 800abc6:	b9d8      	cbnz	r0, 800ac00 <_vfiprintf_r+0x110>
 800abc8:	06d1      	lsls	r1, r2, #27
 800abca:	bf44      	itt	mi
 800abcc:	2320      	movmi	r3, #32
 800abce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abd2:	0713      	lsls	r3, r2, #28
 800abd4:	bf44      	itt	mi
 800abd6:	232b      	movmi	r3, #43	@ 0x2b
 800abd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abdc:	f89a 3000 	ldrb.w	r3, [sl]
 800abe0:	2b2a      	cmp	r3, #42	@ 0x2a
 800abe2:	d015      	beq.n	800ac10 <_vfiprintf_r+0x120>
 800abe4:	9a07      	ldr	r2, [sp, #28]
 800abe6:	4654      	mov	r4, sl
 800abe8:	2000      	movs	r0, #0
 800abea:	f04f 0c0a 	mov.w	ip, #10
 800abee:	4621      	mov	r1, r4
 800abf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abf4:	3b30      	subs	r3, #48	@ 0x30
 800abf6:	2b09      	cmp	r3, #9
 800abf8:	d94b      	bls.n	800ac92 <_vfiprintf_r+0x1a2>
 800abfa:	b1b0      	cbz	r0, 800ac2a <_vfiprintf_r+0x13a>
 800abfc:	9207      	str	r2, [sp, #28]
 800abfe:	e014      	b.n	800ac2a <_vfiprintf_r+0x13a>
 800ac00:	eba0 0308 	sub.w	r3, r0, r8
 800ac04:	fa09 f303 	lsl.w	r3, r9, r3
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	9304      	str	r3, [sp, #16]
 800ac0c:	46a2      	mov	sl, r4
 800ac0e:	e7d2      	b.n	800abb6 <_vfiprintf_r+0xc6>
 800ac10:	9b03      	ldr	r3, [sp, #12]
 800ac12:	1d19      	adds	r1, r3, #4
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	9103      	str	r1, [sp, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	bfbb      	ittet	lt
 800ac1c:	425b      	neglt	r3, r3
 800ac1e:	f042 0202 	orrlt.w	r2, r2, #2
 800ac22:	9307      	strge	r3, [sp, #28]
 800ac24:	9307      	strlt	r3, [sp, #28]
 800ac26:	bfb8      	it	lt
 800ac28:	9204      	strlt	r2, [sp, #16]
 800ac2a:	7823      	ldrb	r3, [r4, #0]
 800ac2c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac2e:	d10a      	bne.n	800ac46 <_vfiprintf_r+0x156>
 800ac30:	7863      	ldrb	r3, [r4, #1]
 800ac32:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac34:	d132      	bne.n	800ac9c <_vfiprintf_r+0x1ac>
 800ac36:	9b03      	ldr	r3, [sp, #12]
 800ac38:	1d1a      	adds	r2, r3, #4
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	9203      	str	r2, [sp, #12]
 800ac3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac42:	3402      	adds	r4, #2
 800ac44:	9305      	str	r3, [sp, #20]
 800ac46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ad1c <_vfiprintf_r+0x22c>
 800ac4a:	7821      	ldrb	r1, [r4, #0]
 800ac4c:	2203      	movs	r2, #3
 800ac4e:	4650      	mov	r0, sl
 800ac50:	f7f5 fabe 	bl	80001d0 <memchr>
 800ac54:	b138      	cbz	r0, 800ac66 <_vfiprintf_r+0x176>
 800ac56:	9b04      	ldr	r3, [sp, #16]
 800ac58:	eba0 000a 	sub.w	r0, r0, sl
 800ac5c:	2240      	movs	r2, #64	@ 0x40
 800ac5e:	4082      	lsls	r2, r0
 800ac60:	4313      	orrs	r3, r2
 800ac62:	3401      	adds	r4, #1
 800ac64:	9304      	str	r3, [sp, #16]
 800ac66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac6a:	4829      	ldr	r0, [pc, #164]	@ (800ad10 <_vfiprintf_r+0x220>)
 800ac6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac70:	2206      	movs	r2, #6
 800ac72:	f7f5 faad 	bl	80001d0 <memchr>
 800ac76:	2800      	cmp	r0, #0
 800ac78:	d03f      	beq.n	800acfa <_vfiprintf_r+0x20a>
 800ac7a:	4b26      	ldr	r3, [pc, #152]	@ (800ad14 <_vfiprintf_r+0x224>)
 800ac7c:	bb1b      	cbnz	r3, 800acc6 <_vfiprintf_r+0x1d6>
 800ac7e:	9b03      	ldr	r3, [sp, #12]
 800ac80:	3307      	adds	r3, #7
 800ac82:	f023 0307 	bic.w	r3, r3, #7
 800ac86:	3308      	adds	r3, #8
 800ac88:	9303      	str	r3, [sp, #12]
 800ac8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac8c:	443b      	add	r3, r7
 800ac8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac90:	e76a      	b.n	800ab68 <_vfiprintf_r+0x78>
 800ac92:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac96:	460c      	mov	r4, r1
 800ac98:	2001      	movs	r0, #1
 800ac9a:	e7a8      	b.n	800abee <_vfiprintf_r+0xfe>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	3401      	adds	r4, #1
 800aca0:	9305      	str	r3, [sp, #20]
 800aca2:	4619      	mov	r1, r3
 800aca4:	f04f 0c0a 	mov.w	ip, #10
 800aca8:	4620      	mov	r0, r4
 800acaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acae:	3a30      	subs	r2, #48	@ 0x30
 800acb0:	2a09      	cmp	r2, #9
 800acb2:	d903      	bls.n	800acbc <_vfiprintf_r+0x1cc>
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d0c6      	beq.n	800ac46 <_vfiprintf_r+0x156>
 800acb8:	9105      	str	r1, [sp, #20]
 800acba:	e7c4      	b.n	800ac46 <_vfiprintf_r+0x156>
 800acbc:	fb0c 2101 	mla	r1, ip, r1, r2
 800acc0:	4604      	mov	r4, r0
 800acc2:	2301      	movs	r3, #1
 800acc4:	e7f0      	b.n	800aca8 <_vfiprintf_r+0x1b8>
 800acc6:	ab03      	add	r3, sp, #12
 800acc8:	9300      	str	r3, [sp, #0]
 800acca:	462a      	mov	r2, r5
 800accc:	4b12      	ldr	r3, [pc, #72]	@ (800ad18 <_vfiprintf_r+0x228>)
 800acce:	a904      	add	r1, sp, #16
 800acd0:	4630      	mov	r0, r6
 800acd2:	f3af 8000 	nop.w
 800acd6:	4607      	mov	r7, r0
 800acd8:	1c78      	adds	r0, r7, #1
 800acda:	d1d6      	bne.n	800ac8a <_vfiprintf_r+0x19a>
 800acdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800acde:	07d9      	lsls	r1, r3, #31
 800ace0:	d405      	bmi.n	800acee <_vfiprintf_r+0x1fe>
 800ace2:	89ab      	ldrh	r3, [r5, #12]
 800ace4:	059a      	lsls	r2, r3, #22
 800ace6:	d402      	bmi.n	800acee <_vfiprintf_r+0x1fe>
 800ace8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800acea:	f7ff fdcf 	bl	800a88c <__retarget_lock_release_recursive>
 800acee:	89ab      	ldrh	r3, [r5, #12]
 800acf0:	065b      	lsls	r3, r3, #25
 800acf2:	f53f af1f 	bmi.w	800ab34 <_vfiprintf_r+0x44>
 800acf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acf8:	e71e      	b.n	800ab38 <_vfiprintf_r+0x48>
 800acfa:	ab03      	add	r3, sp, #12
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	462a      	mov	r2, r5
 800ad00:	4b05      	ldr	r3, [pc, #20]	@ (800ad18 <_vfiprintf_r+0x228>)
 800ad02:	a904      	add	r1, sp, #16
 800ad04:	4630      	mov	r0, r6
 800ad06:	f000 f879 	bl	800adfc <_printf_i>
 800ad0a:	e7e4      	b.n	800acd6 <_vfiprintf_r+0x1e6>
 800ad0c:	0800b4ec 	.word	0x0800b4ec
 800ad10:	0800b4f6 	.word	0x0800b4f6
 800ad14:	00000000 	.word	0x00000000
 800ad18:	0800aacb 	.word	0x0800aacb
 800ad1c:	0800b4f2 	.word	0x0800b4f2

0800ad20 <_printf_common>:
 800ad20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad24:	4616      	mov	r6, r2
 800ad26:	4698      	mov	r8, r3
 800ad28:	688a      	ldr	r2, [r1, #8]
 800ad2a:	690b      	ldr	r3, [r1, #16]
 800ad2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad30:	4293      	cmp	r3, r2
 800ad32:	bfb8      	it	lt
 800ad34:	4613      	movlt	r3, r2
 800ad36:	6033      	str	r3, [r6, #0]
 800ad38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ad3c:	4607      	mov	r7, r0
 800ad3e:	460c      	mov	r4, r1
 800ad40:	b10a      	cbz	r2, 800ad46 <_printf_common+0x26>
 800ad42:	3301      	adds	r3, #1
 800ad44:	6033      	str	r3, [r6, #0]
 800ad46:	6823      	ldr	r3, [r4, #0]
 800ad48:	0699      	lsls	r1, r3, #26
 800ad4a:	bf42      	ittt	mi
 800ad4c:	6833      	ldrmi	r3, [r6, #0]
 800ad4e:	3302      	addmi	r3, #2
 800ad50:	6033      	strmi	r3, [r6, #0]
 800ad52:	6825      	ldr	r5, [r4, #0]
 800ad54:	f015 0506 	ands.w	r5, r5, #6
 800ad58:	d106      	bne.n	800ad68 <_printf_common+0x48>
 800ad5a:	f104 0a19 	add.w	sl, r4, #25
 800ad5e:	68e3      	ldr	r3, [r4, #12]
 800ad60:	6832      	ldr	r2, [r6, #0]
 800ad62:	1a9b      	subs	r3, r3, r2
 800ad64:	42ab      	cmp	r3, r5
 800ad66:	dc26      	bgt.n	800adb6 <_printf_common+0x96>
 800ad68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad6c:	6822      	ldr	r2, [r4, #0]
 800ad6e:	3b00      	subs	r3, #0
 800ad70:	bf18      	it	ne
 800ad72:	2301      	movne	r3, #1
 800ad74:	0692      	lsls	r2, r2, #26
 800ad76:	d42b      	bmi.n	800add0 <_printf_common+0xb0>
 800ad78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad7c:	4641      	mov	r1, r8
 800ad7e:	4638      	mov	r0, r7
 800ad80:	47c8      	blx	r9
 800ad82:	3001      	adds	r0, #1
 800ad84:	d01e      	beq.n	800adc4 <_printf_common+0xa4>
 800ad86:	6823      	ldr	r3, [r4, #0]
 800ad88:	6922      	ldr	r2, [r4, #16]
 800ad8a:	f003 0306 	and.w	r3, r3, #6
 800ad8e:	2b04      	cmp	r3, #4
 800ad90:	bf02      	ittt	eq
 800ad92:	68e5      	ldreq	r5, [r4, #12]
 800ad94:	6833      	ldreq	r3, [r6, #0]
 800ad96:	1aed      	subeq	r5, r5, r3
 800ad98:	68a3      	ldr	r3, [r4, #8]
 800ad9a:	bf0c      	ite	eq
 800ad9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ada0:	2500      	movne	r5, #0
 800ada2:	4293      	cmp	r3, r2
 800ada4:	bfc4      	itt	gt
 800ada6:	1a9b      	subgt	r3, r3, r2
 800ada8:	18ed      	addgt	r5, r5, r3
 800adaa:	2600      	movs	r6, #0
 800adac:	341a      	adds	r4, #26
 800adae:	42b5      	cmp	r5, r6
 800adb0:	d11a      	bne.n	800ade8 <_printf_common+0xc8>
 800adb2:	2000      	movs	r0, #0
 800adb4:	e008      	b.n	800adc8 <_printf_common+0xa8>
 800adb6:	2301      	movs	r3, #1
 800adb8:	4652      	mov	r2, sl
 800adba:	4641      	mov	r1, r8
 800adbc:	4638      	mov	r0, r7
 800adbe:	47c8      	blx	r9
 800adc0:	3001      	adds	r0, #1
 800adc2:	d103      	bne.n	800adcc <_printf_common+0xac>
 800adc4:	f04f 30ff 	mov.w	r0, #4294967295
 800adc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adcc:	3501      	adds	r5, #1
 800adce:	e7c6      	b.n	800ad5e <_printf_common+0x3e>
 800add0:	18e1      	adds	r1, r4, r3
 800add2:	1c5a      	adds	r2, r3, #1
 800add4:	2030      	movs	r0, #48	@ 0x30
 800add6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800adda:	4422      	add	r2, r4
 800addc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ade0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ade4:	3302      	adds	r3, #2
 800ade6:	e7c7      	b.n	800ad78 <_printf_common+0x58>
 800ade8:	2301      	movs	r3, #1
 800adea:	4622      	mov	r2, r4
 800adec:	4641      	mov	r1, r8
 800adee:	4638      	mov	r0, r7
 800adf0:	47c8      	blx	r9
 800adf2:	3001      	adds	r0, #1
 800adf4:	d0e6      	beq.n	800adc4 <_printf_common+0xa4>
 800adf6:	3601      	adds	r6, #1
 800adf8:	e7d9      	b.n	800adae <_printf_common+0x8e>
	...

0800adfc <_printf_i>:
 800adfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae00:	7e0f      	ldrb	r7, [r1, #24]
 800ae02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae04:	2f78      	cmp	r7, #120	@ 0x78
 800ae06:	4691      	mov	r9, r2
 800ae08:	4680      	mov	r8, r0
 800ae0a:	460c      	mov	r4, r1
 800ae0c:	469a      	mov	sl, r3
 800ae0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae12:	d807      	bhi.n	800ae24 <_printf_i+0x28>
 800ae14:	2f62      	cmp	r7, #98	@ 0x62
 800ae16:	d80a      	bhi.n	800ae2e <_printf_i+0x32>
 800ae18:	2f00      	cmp	r7, #0
 800ae1a:	f000 80d1 	beq.w	800afc0 <_printf_i+0x1c4>
 800ae1e:	2f58      	cmp	r7, #88	@ 0x58
 800ae20:	f000 80b8 	beq.w	800af94 <_printf_i+0x198>
 800ae24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ae2c:	e03a      	b.n	800aea4 <_printf_i+0xa8>
 800ae2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ae32:	2b15      	cmp	r3, #21
 800ae34:	d8f6      	bhi.n	800ae24 <_printf_i+0x28>
 800ae36:	a101      	add	r1, pc, #4	@ (adr r1, 800ae3c <_printf_i+0x40>)
 800ae38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae3c:	0800ae95 	.word	0x0800ae95
 800ae40:	0800aea9 	.word	0x0800aea9
 800ae44:	0800ae25 	.word	0x0800ae25
 800ae48:	0800ae25 	.word	0x0800ae25
 800ae4c:	0800ae25 	.word	0x0800ae25
 800ae50:	0800ae25 	.word	0x0800ae25
 800ae54:	0800aea9 	.word	0x0800aea9
 800ae58:	0800ae25 	.word	0x0800ae25
 800ae5c:	0800ae25 	.word	0x0800ae25
 800ae60:	0800ae25 	.word	0x0800ae25
 800ae64:	0800ae25 	.word	0x0800ae25
 800ae68:	0800afa7 	.word	0x0800afa7
 800ae6c:	0800aed3 	.word	0x0800aed3
 800ae70:	0800af61 	.word	0x0800af61
 800ae74:	0800ae25 	.word	0x0800ae25
 800ae78:	0800ae25 	.word	0x0800ae25
 800ae7c:	0800afc9 	.word	0x0800afc9
 800ae80:	0800ae25 	.word	0x0800ae25
 800ae84:	0800aed3 	.word	0x0800aed3
 800ae88:	0800ae25 	.word	0x0800ae25
 800ae8c:	0800ae25 	.word	0x0800ae25
 800ae90:	0800af69 	.word	0x0800af69
 800ae94:	6833      	ldr	r3, [r6, #0]
 800ae96:	1d1a      	adds	r2, r3, #4
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	6032      	str	r2, [r6, #0]
 800ae9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aea0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aea4:	2301      	movs	r3, #1
 800aea6:	e09c      	b.n	800afe2 <_printf_i+0x1e6>
 800aea8:	6833      	ldr	r3, [r6, #0]
 800aeaa:	6820      	ldr	r0, [r4, #0]
 800aeac:	1d19      	adds	r1, r3, #4
 800aeae:	6031      	str	r1, [r6, #0]
 800aeb0:	0606      	lsls	r6, r0, #24
 800aeb2:	d501      	bpl.n	800aeb8 <_printf_i+0xbc>
 800aeb4:	681d      	ldr	r5, [r3, #0]
 800aeb6:	e003      	b.n	800aec0 <_printf_i+0xc4>
 800aeb8:	0645      	lsls	r5, r0, #25
 800aeba:	d5fb      	bpl.n	800aeb4 <_printf_i+0xb8>
 800aebc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aec0:	2d00      	cmp	r5, #0
 800aec2:	da03      	bge.n	800aecc <_printf_i+0xd0>
 800aec4:	232d      	movs	r3, #45	@ 0x2d
 800aec6:	426d      	negs	r5, r5
 800aec8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aecc:	4858      	ldr	r0, [pc, #352]	@ (800b030 <_printf_i+0x234>)
 800aece:	230a      	movs	r3, #10
 800aed0:	e011      	b.n	800aef6 <_printf_i+0xfa>
 800aed2:	6821      	ldr	r1, [r4, #0]
 800aed4:	6833      	ldr	r3, [r6, #0]
 800aed6:	0608      	lsls	r0, r1, #24
 800aed8:	f853 5b04 	ldr.w	r5, [r3], #4
 800aedc:	d402      	bmi.n	800aee4 <_printf_i+0xe8>
 800aede:	0649      	lsls	r1, r1, #25
 800aee0:	bf48      	it	mi
 800aee2:	b2ad      	uxthmi	r5, r5
 800aee4:	2f6f      	cmp	r7, #111	@ 0x6f
 800aee6:	4852      	ldr	r0, [pc, #328]	@ (800b030 <_printf_i+0x234>)
 800aee8:	6033      	str	r3, [r6, #0]
 800aeea:	bf14      	ite	ne
 800aeec:	230a      	movne	r3, #10
 800aeee:	2308      	moveq	r3, #8
 800aef0:	2100      	movs	r1, #0
 800aef2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aef6:	6866      	ldr	r6, [r4, #4]
 800aef8:	60a6      	str	r6, [r4, #8]
 800aefa:	2e00      	cmp	r6, #0
 800aefc:	db05      	blt.n	800af0a <_printf_i+0x10e>
 800aefe:	6821      	ldr	r1, [r4, #0]
 800af00:	432e      	orrs	r6, r5
 800af02:	f021 0104 	bic.w	r1, r1, #4
 800af06:	6021      	str	r1, [r4, #0]
 800af08:	d04b      	beq.n	800afa2 <_printf_i+0x1a6>
 800af0a:	4616      	mov	r6, r2
 800af0c:	fbb5 f1f3 	udiv	r1, r5, r3
 800af10:	fb03 5711 	mls	r7, r3, r1, r5
 800af14:	5dc7      	ldrb	r7, [r0, r7]
 800af16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af1a:	462f      	mov	r7, r5
 800af1c:	42bb      	cmp	r3, r7
 800af1e:	460d      	mov	r5, r1
 800af20:	d9f4      	bls.n	800af0c <_printf_i+0x110>
 800af22:	2b08      	cmp	r3, #8
 800af24:	d10b      	bne.n	800af3e <_printf_i+0x142>
 800af26:	6823      	ldr	r3, [r4, #0]
 800af28:	07df      	lsls	r7, r3, #31
 800af2a:	d508      	bpl.n	800af3e <_printf_i+0x142>
 800af2c:	6923      	ldr	r3, [r4, #16]
 800af2e:	6861      	ldr	r1, [r4, #4]
 800af30:	4299      	cmp	r1, r3
 800af32:	bfde      	ittt	le
 800af34:	2330      	movle	r3, #48	@ 0x30
 800af36:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af3e:	1b92      	subs	r2, r2, r6
 800af40:	6122      	str	r2, [r4, #16]
 800af42:	f8cd a000 	str.w	sl, [sp]
 800af46:	464b      	mov	r3, r9
 800af48:	aa03      	add	r2, sp, #12
 800af4a:	4621      	mov	r1, r4
 800af4c:	4640      	mov	r0, r8
 800af4e:	f7ff fee7 	bl	800ad20 <_printf_common>
 800af52:	3001      	adds	r0, #1
 800af54:	d14a      	bne.n	800afec <_printf_i+0x1f0>
 800af56:	f04f 30ff 	mov.w	r0, #4294967295
 800af5a:	b004      	add	sp, #16
 800af5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af60:	6823      	ldr	r3, [r4, #0]
 800af62:	f043 0320 	orr.w	r3, r3, #32
 800af66:	6023      	str	r3, [r4, #0]
 800af68:	4832      	ldr	r0, [pc, #200]	@ (800b034 <_printf_i+0x238>)
 800af6a:	2778      	movs	r7, #120	@ 0x78
 800af6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af70:	6823      	ldr	r3, [r4, #0]
 800af72:	6831      	ldr	r1, [r6, #0]
 800af74:	061f      	lsls	r7, r3, #24
 800af76:	f851 5b04 	ldr.w	r5, [r1], #4
 800af7a:	d402      	bmi.n	800af82 <_printf_i+0x186>
 800af7c:	065f      	lsls	r7, r3, #25
 800af7e:	bf48      	it	mi
 800af80:	b2ad      	uxthmi	r5, r5
 800af82:	6031      	str	r1, [r6, #0]
 800af84:	07d9      	lsls	r1, r3, #31
 800af86:	bf44      	itt	mi
 800af88:	f043 0320 	orrmi.w	r3, r3, #32
 800af8c:	6023      	strmi	r3, [r4, #0]
 800af8e:	b11d      	cbz	r5, 800af98 <_printf_i+0x19c>
 800af90:	2310      	movs	r3, #16
 800af92:	e7ad      	b.n	800aef0 <_printf_i+0xf4>
 800af94:	4826      	ldr	r0, [pc, #152]	@ (800b030 <_printf_i+0x234>)
 800af96:	e7e9      	b.n	800af6c <_printf_i+0x170>
 800af98:	6823      	ldr	r3, [r4, #0]
 800af9a:	f023 0320 	bic.w	r3, r3, #32
 800af9e:	6023      	str	r3, [r4, #0]
 800afa0:	e7f6      	b.n	800af90 <_printf_i+0x194>
 800afa2:	4616      	mov	r6, r2
 800afa4:	e7bd      	b.n	800af22 <_printf_i+0x126>
 800afa6:	6833      	ldr	r3, [r6, #0]
 800afa8:	6825      	ldr	r5, [r4, #0]
 800afaa:	6961      	ldr	r1, [r4, #20]
 800afac:	1d18      	adds	r0, r3, #4
 800afae:	6030      	str	r0, [r6, #0]
 800afb0:	062e      	lsls	r6, r5, #24
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	d501      	bpl.n	800afba <_printf_i+0x1be>
 800afb6:	6019      	str	r1, [r3, #0]
 800afb8:	e002      	b.n	800afc0 <_printf_i+0x1c4>
 800afba:	0668      	lsls	r0, r5, #25
 800afbc:	d5fb      	bpl.n	800afb6 <_printf_i+0x1ba>
 800afbe:	8019      	strh	r1, [r3, #0]
 800afc0:	2300      	movs	r3, #0
 800afc2:	6123      	str	r3, [r4, #16]
 800afc4:	4616      	mov	r6, r2
 800afc6:	e7bc      	b.n	800af42 <_printf_i+0x146>
 800afc8:	6833      	ldr	r3, [r6, #0]
 800afca:	1d1a      	adds	r2, r3, #4
 800afcc:	6032      	str	r2, [r6, #0]
 800afce:	681e      	ldr	r6, [r3, #0]
 800afd0:	6862      	ldr	r2, [r4, #4]
 800afd2:	2100      	movs	r1, #0
 800afd4:	4630      	mov	r0, r6
 800afd6:	f7f5 f8fb 	bl	80001d0 <memchr>
 800afda:	b108      	cbz	r0, 800afe0 <_printf_i+0x1e4>
 800afdc:	1b80      	subs	r0, r0, r6
 800afde:	6060      	str	r0, [r4, #4]
 800afe0:	6863      	ldr	r3, [r4, #4]
 800afe2:	6123      	str	r3, [r4, #16]
 800afe4:	2300      	movs	r3, #0
 800afe6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afea:	e7aa      	b.n	800af42 <_printf_i+0x146>
 800afec:	6923      	ldr	r3, [r4, #16]
 800afee:	4632      	mov	r2, r6
 800aff0:	4649      	mov	r1, r9
 800aff2:	4640      	mov	r0, r8
 800aff4:	47d0      	blx	sl
 800aff6:	3001      	adds	r0, #1
 800aff8:	d0ad      	beq.n	800af56 <_printf_i+0x15a>
 800affa:	6823      	ldr	r3, [r4, #0]
 800affc:	079b      	lsls	r3, r3, #30
 800affe:	d413      	bmi.n	800b028 <_printf_i+0x22c>
 800b000:	68e0      	ldr	r0, [r4, #12]
 800b002:	9b03      	ldr	r3, [sp, #12]
 800b004:	4298      	cmp	r0, r3
 800b006:	bfb8      	it	lt
 800b008:	4618      	movlt	r0, r3
 800b00a:	e7a6      	b.n	800af5a <_printf_i+0x15e>
 800b00c:	2301      	movs	r3, #1
 800b00e:	4632      	mov	r2, r6
 800b010:	4649      	mov	r1, r9
 800b012:	4640      	mov	r0, r8
 800b014:	47d0      	blx	sl
 800b016:	3001      	adds	r0, #1
 800b018:	d09d      	beq.n	800af56 <_printf_i+0x15a>
 800b01a:	3501      	adds	r5, #1
 800b01c:	68e3      	ldr	r3, [r4, #12]
 800b01e:	9903      	ldr	r1, [sp, #12]
 800b020:	1a5b      	subs	r3, r3, r1
 800b022:	42ab      	cmp	r3, r5
 800b024:	dcf2      	bgt.n	800b00c <_printf_i+0x210>
 800b026:	e7eb      	b.n	800b000 <_printf_i+0x204>
 800b028:	2500      	movs	r5, #0
 800b02a:	f104 0619 	add.w	r6, r4, #25
 800b02e:	e7f5      	b.n	800b01c <_printf_i+0x220>
 800b030:	0800b4fd 	.word	0x0800b4fd
 800b034:	0800b50e 	.word	0x0800b50e

0800b038 <__sflush_r>:
 800b038:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b040:	0716      	lsls	r6, r2, #28
 800b042:	4605      	mov	r5, r0
 800b044:	460c      	mov	r4, r1
 800b046:	d454      	bmi.n	800b0f2 <__sflush_r+0xba>
 800b048:	684b      	ldr	r3, [r1, #4]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	dc02      	bgt.n	800b054 <__sflush_r+0x1c>
 800b04e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b050:	2b00      	cmp	r3, #0
 800b052:	dd48      	ble.n	800b0e6 <__sflush_r+0xae>
 800b054:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b056:	2e00      	cmp	r6, #0
 800b058:	d045      	beq.n	800b0e6 <__sflush_r+0xae>
 800b05a:	2300      	movs	r3, #0
 800b05c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b060:	682f      	ldr	r7, [r5, #0]
 800b062:	6a21      	ldr	r1, [r4, #32]
 800b064:	602b      	str	r3, [r5, #0]
 800b066:	d030      	beq.n	800b0ca <__sflush_r+0x92>
 800b068:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b06a:	89a3      	ldrh	r3, [r4, #12]
 800b06c:	0759      	lsls	r1, r3, #29
 800b06e:	d505      	bpl.n	800b07c <__sflush_r+0x44>
 800b070:	6863      	ldr	r3, [r4, #4]
 800b072:	1ad2      	subs	r2, r2, r3
 800b074:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b076:	b10b      	cbz	r3, 800b07c <__sflush_r+0x44>
 800b078:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b07a:	1ad2      	subs	r2, r2, r3
 800b07c:	2300      	movs	r3, #0
 800b07e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b080:	6a21      	ldr	r1, [r4, #32]
 800b082:	4628      	mov	r0, r5
 800b084:	47b0      	blx	r6
 800b086:	1c43      	adds	r3, r0, #1
 800b088:	89a3      	ldrh	r3, [r4, #12]
 800b08a:	d106      	bne.n	800b09a <__sflush_r+0x62>
 800b08c:	6829      	ldr	r1, [r5, #0]
 800b08e:	291d      	cmp	r1, #29
 800b090:	d82b      	bhi.n	800b0ea <__sflush_r+0xb2>
 800b092:	4a2a      	ldr	r2, [pc, #168]	@ (800b13c <__sflush_r+0x104>)
 800b094:	40ca      	lsrs	r2, r1
 800b096:	07d6      	lsls	r6, r2, #31
 800b098:	d527      	bpl.n	800b0ea <__sflush_r+0xb2>
 800b09a:	2200      	movs	r2, #0
 800b09c:	6062      	str	r2, [r4, #4]
 800b09e:	04d9      	lsls	r1, r3, #19
 800b0a0:	6922      	ldr	r2, [r4, #16]
 800b0a2:	6022      	str	r2, [r4, #0]
 800b0a4:	d504      	bpl.n	800b0b0 <__sflush_r+0x78>
 800b0a6:	1c42      	adds	r2, r0, #1
 800b0a8:	d101      	bne.n	800b0ae <__sflush_r+0x76>
 800b0aa:	682b      	ldr	r3, [r5, #0]
 800b0ac:	b903      	cbnz	r3, 800b0b0 <__sflush_r+0x78>
 800b0ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800b0b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0b2:	602f      	str	r7, [r5, #0]
 800b0b4:	b1b9      	cbz	r1, 800b0e6 <__sflush_r+0xae>
 800b0b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0ba:	4299      	cmp	r1, r3
 800b0bc:	d002      	beq.n	800b0c4 <__sflush_r+0x8c>
 800b0be:	4628      	mov	r0, r5
 800b0c0:	f7ff fbf4 	bl	800a8ac <_free_r>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0c8:	e00d      	b.n	800b0e6 <__sflush_r+0xae>
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	47b0      	blx	r6
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	1c50      	adds	r0, r2, #1
 800b0d4:	d1c9      	bne.n	800b06a <__sflush_r+0x32>
 800b0d6:	682b      	ldr	r3, [r5, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d0c6      	beq.n	800b06a <__sflush_r+0x32>
 800b0dc:	2b1d      	cmp	r3, #29
 800b0de:	d001      	beq.n	800b0e4 <__sflush_r+0xac>
 800b0e0:	2b16      	cmp	r3, #22
 800b0e2:	d11e      	bne.n	800b122 <__sflush_r+0xea>
 800b0e4:	602f      	str	r7, [r5, #0]
 800b0e6:	2000      	movs	r0, #0
 800b0e8:	e022      	b.n	800b130 <__sflush_r+0xf8>
 800b0ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0ee:	b21b      	sxth	r3, r3
 800b0f0:	e01b      	b.n	800b12a <__sflush_r+0xf2>
 800b0f2:	690f      	ldr	r7, [r1, #16]
 800b0f4:	2f00      	cmp	r7, #0
 800b0f6:	d0f6      	beq.n	800b0e6 <__sflush_r+0xae>
 800b0f8:	0793      	lsls	r3, r2, #30
 800b0fa:	680e      	ldr	r6, [r1, #0]
 800b0fc:	bf08      	it	eq
 800b0fe:	694b      	ldreq	r3, [r1, #20]
 800b100:	600f      	str	r7, [r1, #0]
 800b102:	bf18      	it	ne
 800b104:	2300      	movne	r3, #0
 800b106:	eba6 0807 	sub.w	r8, r6, r7
 800b10a:	608b      	str	r3, [r1, #8]
 800b10c:	f1b8 0f00 	cmp.w	r8, #0
 800b110:	dde9      	ble.n	800b0e6 <__sflush_r+0xae>
 800b112:	6a21      	ldr	r1, [r4, #32]
 800b114:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b116:	4643      	mov	r3, r8
 800b118:	463a      	mov	r2, r7
 800b11a:	4628      	mov	r0, r5
 800b11c:	47b0      	blx	r6
 800b11e:	2800      	cmp	r0, #0
 800b120:	dc08      	bgt.n	800b134 <__sflush_r+0xfc>
 800b122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b12a:	81a3      	strh	r3, [r4, #12]
 800b12c:	f04f 30ff 	mov.w	r0, #4294967295
 800b130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b134:	4407      	add	r7, r0
 800b136:	eba8 0800 	sub.w	r8, r8, r0
 800b13a:	e7e7      	b.n	800b10c <__sflush_r+0xd4>
 800b13c:	20400001 	.word	0x20400001

0800b140 <_fflush_r>:
 800b140:	b538      	push	{r3, r4, r5, lr}
 800b142:	690b      	ldr	r3, [r1, #16]
 800b144:	4605      	mov	r5, r0
 800b146:	460c      	mov	r4, r1
 800b148:	b913      	cbnz	r3, 800b150 <_fflush_r+0x10>
 800b14a:	2500      	movs	r5, #0
 800b14c:	4628      	mov	r0, r5
 800b14e:	bd38      	pop	{r3, r4, r5, pc}
 800b150:	b118      	cbz	r0, 800b15a <_fflush_r+0x1a>
 800b152:	6a03      	ldr	r3, [r0, #32]
 800b154:	b90b      	cbnz	r3, 800b15a <_fflush_r+0x1a>
 800b156:	f7ff fa93 	bl	800a680 <__sinit>
 800b15a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d0f3      	beq.n	800b14a <_fflush_r+0xa>
 800b162:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b164:	07d0      	lsls	r0, r2, #31
 800b166:	d404      	bmi.n	800b172 <_fflush_r+0x32>
 800b168:	0599      	lsls	r1, r3, #22
 800b16a:	d402      	bmi.n	800b172 <_fflush_r+0x32>
 800b16c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b16e:	f7ff fb8c 	bl	800a88a <__retarget_lock_acquire_recursive>
 800b172:	4628      	mov	r0, r5
 800b174:	4621      	mov	r1, r4
 800b176:	f7ff ff5f 	bl	800b038 <__sflush_r>
 800b17a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b17c:	07da      	lsls	r2, r3, #31
 800b17e:	4605      	mov	r5, r0
 800b180:	d4e4      	bmi.n	800b14c <_fflush_r+0xc>
 800b182:	89a3      	ldrh	r3, [r4, #12]
 800b184:	059b      	lsls	r3, r3, #22
 800b186:	d4e1      	bmi.n	800b14c <_fflush_r+0xc>
 800b188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b18a:	f7ff fb7f 	bl	800a88c <__retarget_lock_release_recursive>
 800b18e:	e7dd      	b.n	800b14c <_fflush_r+0xc>

0800b190 <__swbuf_r>:
 800b190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b192:	460e      	mov	r6, r1
 800b194:	4614      	mov	r4, r2
 800b196:	4605      	mov	r5, r0
 800b198:	b118      	cbz	r0, 800b1a2 <__swbuf_r+0x12>
 800b19a:	6a03      	ldr	r3, [r0, #32]
 800b19c:	b90b      	cbnz	r3, 800b1a2 <__swbuf_r+0x12>
 800b19e:	f7ff fa6f 	bl	800a680 <__sinit>
 800b1a2:	69a3      	ldr	r3, [r4, #24]
 800b1a4:	60a3      	str	r3, [r4, #8]
 800b1a6:	89a3      	ldrh	r3, [r4, #12]
 800b1a8:	071a      	lsls	r2, r3, #28
 800b1aa:	d501      	bpl.n	800b1b0 <__swbuf_r+0x20>
 800b1ac:	6923      	ldr	r3, [r4, #16]
 800b1ae:	b943      	cbnz	r3, 800b1c2 <__swbuf_r+0x32>
 800b1b0:	4621      	mov	r1, r4
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	f000 f82a 	bl	800b20c <__swsetup_r>
 800b1b8:	b118      	cbz	r0, 800b1c2 <__swbuf_r+0x32>
 800b1ba:	f04f 37ff 	mov.w	r7, #4294967295
 800b1be:	4638      	mov	r0, r7
 800b1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1c2:	6823      	ldr	r3, [r4, #0]
 800b1c4:	6922      	ldr	r2, [r4, #16]
 800b1c6:	1a98      	subs	r0, r3, r2
 800b1c8:	6963      	ldr	r3, [r4, #20]
 800b1ca:	b2f6      	uxtb	r6, r6
 800b1cc:	4283      	cmp	r3, r0
 800b1ce:	4637      	mov	r7, r6
 800b1d0:	dc05      	bgt.n	800b1de <__swbuf_r+0x4e>
 800b1d2:	4621      	mov	r1, r4
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	f7ff ffb3 	bl	800b140 <_fflush_r>
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	d1ed      	bne.n	800b1ba <__swbuf_r+0x2a>
 800b1de:	68a3      	ldr	r3, [r4, #8]
 800b1e0:	3b01      	subs	r3, #1
 800b1e2:	60a3      	str	r3, [r4, #8]
 800b1e4:	6823      	ldr	r3, [r4, #0]
 800b1e6:	1c5a      	adds	r2, r3, #1
 800b1e8:	6022      	str	r2, [r4, #0]
 800b1ea:	701e      	strb	r6, [r3, #0]
 800b1ec:	6962      	ldr	r2, [r4, #20]
 800b1ee:	1c43      	adds	r3, r0, #1
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d004      	beq.n	800b1fe <__swbuf_r+0x6e>
 800b1f4:	89a3      	ldrh	r3, [r4, #12]
 800b1f6:	07db      	lsls	r3, r3, #31
 800b1f8:	d5e1      	bpl.n	800b1be <__swbuf_r+0x2e>
 800b1fa:	2e0a      	cmp	r6, #10
 800b1fc:	d1df      	bne.n	800b1be <__swbuf_r+0x2e>
 800b1fe:	4621      	mov	r1, r4
 800b200:	4628      	mov	r0, r5
 800b202:	f7ff ff9d 	bl	800b140 <_fflush_r>
 800b206:	2800      	cmp	r0, #0
 800b208:	d0d9      	beq.n	800b1be <__swbuf_r+0x2e>
 800b20a:	e7d6      	b.n	800b1ba <__swbuf_r+0x2a>

0800b20c <__swsetup_r>:
 800b20c:	b538      	push	{r3, r4, r5, lr}
 800b20e:	4b29      	ldr	r3, [pc, #164]	@ (800b2b4 <__swsetup_r+0xa8>)
 800b210:	4605      	mov	r5, r0
 800b212:	6818      	ldr	r0, [r3, #0]
 800b214:	460c      	mov	r4, r1
 800b216:	b118      	cbz	r0, 800b220 <__swsetup_r+0x14>
 800b218:	6a03      	ldr	r3, [r0, #32]
 800b21a:	b90b      	cbnz	r3, 800b220 <__swsetup_r+0x14>
 800b21c:	f7ff fa30 	bl	800a680 <__sinit>
 800b220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b224:	0719      	lsls	r1, r3, #28
 800b226:	d422      	bmi.n	800b26e <__swsetup_r+0x62>
 800b228:	06da      	lsls	r2, r3, #27
 800b22a:	d407      	bmi.n	800b23c <__swsetup_r+0x30>
 800b22c:	2209      	movs	r2, #9
 800b22e:	602a      	str	r2, [r5, #0]
 800b230:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b234:	81a3      	strh	r3, [r4, #12]
 800b236:	f04f 30ff 	mov.w	r0, #4294967295
 800b23a:	e033      	b.n	800b2a4 <__swsetup_r+0x98>
 800b23c:	0758      	lsls	r0, r3, #29
 800b23e:	d512      	bpl.n	800b266 <__swsetup_r+0x5a>
 800b240:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b242:	b141      	cbz	r1, 800b256 <__swsetup_r+0x4a>
 800b244:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b248:	4299      	cmp	r1, r3
 800b24a:	d002      	beq.n	800b252 <__swsetup_r+0x46>
 800b24c:	4628      	mov	r0, r5
 800b24e:	f7ff fb2d 	bl	800a8ac <_free_r>
 800b252:	2300      	movs	r3, #0
 800b254:	6363      	str	r3, [r4, #52]	@ 0x34
 800b256:	89a3      	ldrh	r3, [r4, #12]
 800b258:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b25c:	81a3      	strh	r3, [r4, #12]
 800b25e:	2300      	movs	r3, #0
 800b260:	6063      	str	r3, [r4, #4]
 800b262:	6923      	ldr	r3, [r4, #16]
 800b264:	6023      	str	r3, [r4, #0]
 800b266:	89a3      	ldrh	r3, [r4, #12]
 800b268:	f043 0308 	orr.w	r3, r3, #8
 800b26c:	81a3      	strh	r3, [r4, #12]
 800b26e:	6923      	ldr	r3, [r4, #16]
 800b270:	b94b      	cbnz	r3, 800b286 <__swsetup_r+0x7a>
 800b272:	89a3      	ldrh	r3, [r4, #12]
 800b274:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b27c:	d003      	beq.n	800b286 <__swsetup_r+0x7a>
 800b27e:	4621      	mov	r1, r4
 800b280:	4628      	mov	r0, r5
 800b282:	f000 f84f 	bl	800b324 <__smakebuf_r>
 800b286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b28a:	f013 0201 	ands.w	r2, r3, #1
 800b28e:	d00a      	beq.n	800b2a6 <__swsetup_r+0x9a>
 800b290:	2200      	movs	r2, #0
 800b292:	60a2      	str	r2, [r4, #8]
 800b294:	6962      	ldr	r2, [r4, #20]
 800b296:	4252      	negs	r2, r2
 800b298:	61a2      	str	r2, [r4, #24]
 800b29a:	6922      	ldr	r2, [r4, #16]
 800b29c:	b942      	cbnz	r2, 800b2b0 <__swsetup_r+0xa4>
 800b29e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b2a2:	d1c5      	bne.n	800b230 <__swsetup_r+0x24>
 800b2a4:	bd38      	pop	{r3, r4, r5, pc}
 800b2a6:	0799      	lsls	r1, r3, #30
 800b2a8:	bf58      	it	pl
 800b2aa:	6962      	ldrpl	r2, [r4, #20]
 800b2ac:	60a2      	str	r2, [r4, #8]
 800b2ae:	e7f4      	b.n	800b29a <__swsetup_r+0x8e>
 800b2b0:	2000      	movs	r0, #0
 800b2b2:	e7f7      	b.n	800b2a4 <__swsetup_r+0x98>
 800b2b4:	2000001c 	.word	0x2000001c

0800b2b8 <_sbrk_r>:
 800b2b8:	b538      	push	{r3, r4, r5, lr}
 800b2ba:	4d06      	ldr	r5, [pc, #24]	@ (800b2d4 <_sbrk_r+0x1c>)
 800b2bc:	2300      	movs	r3, #0
 800b2be:	4604      	mov	r4, r0
 800b2c0:	4608      	mov	r0, r1
 800b2c2:	602b      	str	r3, [r5, #0]
 800b2c4:	f7f6 fa4c 	bl	8001760 <_sbrk>
 800b2c8:	1c43      	adds	r3, r0, #1
 800b2ca:	d102      	bne.n	800b2d2 <_sbrk_r+0x1a>
 800b2cc:	682b      	ldr	r3, [r5, #0]
 800b2ce:	b103      	cbz	r3, 800b2d2 <_sbrk_r+0x1a>
 800b2d0:	6023      	str	r3, [r4, #0]
 800b2d2:	bd38      	pop	{r3, r4, r5, pc}
 800b2d4:	200022e4 	.word	0x200022e4

0800b2d8 <__swhatbuf_r>:
 800b2d8:	b570      	push	{r4, r5, r6, lr}
 800b2da:	460c      	mov	r4, r1
 800b2dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2e0:	2900      	cmp	r1, #0
 800b2e2:	b096      	sub	sp, #88	@ 0x58
 800b2e4:	4615      	mov	r5, r2
 800b2e6:	461e      	mov	r6, r3
 800b2e8:	da0d      	bge.n	800b306 <__swhatbuf_r+0x2e>
 800b2ea:	89a3      	ldrh	r3, [r4, #12]
 800b2ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b2f0:	f04f 0100 	mov.w	r1, #0
 800b2f4:	bf14      	ite	ne
 800b2f6:	2340      	movne	r3, #64	@ 0x40
 800b2f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b2fc:	2000      	movs	r0, #0
 800b2fe:	6031      	str	r1, [r6, #0]
 800b300:	602b      	str	r3, [r5, #0]
 800b302:	b016      	add	sp, #88	@ 0x58
 800b304:	bd70      	pop	{r4, r5, r6, pc}
 800b306:	466a      	mov	r2, sp
 800b308:	f000 f848 	bl	800b39c <_fstat_r>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	dbec      	blt.n	800b2ea <__swhatbuf_r+0x12>
 800b310:	9901      	ldr	r1, [sp, #4]
 800b312:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b316:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b31a:	4259      	negs	r1, r3
 800b31c:	4159      	adcs	r1, r3
 800b31e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b322:	e7eb      	b.n	800b2fc <__swhatbuf_r+0x24>

0800b324 <__smakebuf_r>:
 800b324:	898b      	ldrh	r3, [r1, #12]
 800b326:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b328:	079d      	lsls	r5, r3, #30
 800b32a:	4606      	mov	r6, r0
 800b32c:	460c      	mov	r4, r1
 800b32e:	d507      	bpl.n	800b340 <__smakebuf_r+0x1c>
 800b330:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b334:	6023      	str	r3, [r4, #0]
 800b336:	6123      	str	r3, [r4, #16]
 800b338:	2301      	movs	r3, #1
 800b33a:	6163      	str	r3, [r4, #20]
 800b33c:	b003      	add	sp, #12
 800b33e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b340:	ab01      	add	r3, sp, #4
 800b342:	466a      	mov	r2, sp
 800b344:	f7ff ffc8 	bl	800b2d8 <__swhatbuf_r>
 800b348:	9f00      	ldr	r7, [sp, #0]
 800b34a:	4605      	mov	r5, r0
 800b34c:	4639      	mov	r1, r7
 800b34e:	4630      	mov	r0, r6
 800b350:	f7ff fb18 	bl	800a984 <_malloc_r>
 800b354:	b948      	cbnz	r0, 800b36a <__smakebuf_r+0x46>
 800b356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b35a:	059a      	lsls	r2, r3, #22
 800b35c:	d4ee      	bmi.n	800b33c <__smakebuf_r+0x18>
 800b35e:	f023 0303 	bic.w	r3, r3, #3
 800b362:	f043 0302 	orr.w	r3, r3, #2
 800b366:	81a3      	strh	r3, [r4, #12]
 800b368:	e7e2      	b.n	800b330 <__smakebuf_r+0xc>
 800b36a:	89a3      	ldrh	r3, [r4, #12]
 800b36c:	6020      	str	r0, [r4, #0]
 800b36e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b372:	81a3      	strh	r3, [r4, #12]
 800b374:	9b01      	ldr	r3, [sp, #4]
 800b376:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b37a:	b15b      	cbz	r3, 800b394 <__smakebuf_r+0x70>
 800b37c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b380:	4630      	mov	r0, r6
 800b382:	f000 f81d 	bl	800b3c0 <_isatty_r>
 800b386:	b128      	cbz	r0, 800b394 <__smakebuf_r+0x70>
 800b388:	89a3      	ldrh	r3, [r4, #12]
 800b38a:	f023 0303 	bic.w	r3, r3, #3
 800b38e:	f043 0301 	orr.w	r3, r3, #1
 800b392:	81a3      	strh	r3, [r4, #12]
 800b394:	89a3      	ldrh	r3, [r4, #12]
 800b396:	431d      	orrs	r5, r3
 800b398:	81a5      	strh	r5, [r4, #12]
 800b39a:	e7cf      	b.n	800b33c <__smakebuf_r+0x18>

0800b39c <_fstat_r>:
 800b39c:	b538      	push	{r3, r4, r5, lr}
 800b39e:	4d07      	ldr	r5, [pc, #28]	@ (800b3bc <_fstat_r+0x20>)
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	4604      	mov	r4, r0
 800b3a4:	4608      	mov	r0, r1
 800b3a6:	4611      	mov	r1, r2
 800b3a8:	602b      	str	r3, [r5, #0]
 800b3aa:	f7f6 f9b1 	bl	8001710 <_fstat>
 800b3ae:	1c43      	adds	r3, r0, #1
 800b3b0:	d102      	bne.n	800b3b8 <_fstat_r+0x1c>
 800b3b2:	682b      	ldr	r3, [r5, #0]
 800b3b4:	b103      	cbz	r3, 800b3b8 <_fstat_r+0x1c>
 800b3b6:	6023      	str	r3, [r4, #0]
 800b3b8:	bd38      	pop	{r3, r4, r5, pc}
 800b3ba:	bf00      	nop
 800b3bc:	200022e4 	.word	0x200022e4

0800b3c0 <_isatty_r>:
 800b3c0:	b538      	push	{r3, r4, r5, lr}
 800b3c2:	4d06      	ldr	r5, [pc, #24]	@ (800b3dc <_isatty_r+0x1c>)
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	4608      	mov	r0, r1
 800b3ca:	602b      	str	r3, [r5, #0]
 800b3cc:	f7f6 f9b0 	bl	8001730 <_isatty>
 800b3d0:	1c43      	adds	r3, r0, #1
 800b3d2:	d102      	bne.n	800b3da <_isatty_r+0x1a>
 800b3d4:	682b      	ldr	r3, [r5, #0]
 800b3d6:	b103      	cbz	r3, 800b3da <_isatty_r+0x1a>
 800b3d8:	6023      	str	r3, [r4, #0]
 800b3da:	bd38      	pop	{r3, r4, r5, pc}
 800b3dc:	200022e4 	.word	0x200022e4

0800b3e0 <_init>:
 800b3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e2:	bf00      	nop
 800b3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3e6:	bc08      	pop	{r3}
 800b3e8:	469e      	mov	lr, r3
 800b3ea:	4770      	bx	lr

0800b3ec <_fini>:
 800b3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ee:	bf00      	nop
 800b3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3f2:	bc08      	pop	{r3}
 800b3f4:	469e      	mov	lr, r3
 800b3f6:	4770      	bx	lr
